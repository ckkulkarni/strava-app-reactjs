{"version":3,"names":["xmlbuilder_1","__importDefault","require","_1","messages_1","value_checker_1","gherkin_document_parser_1","pickle_parser_1","JunitFormatter","default","constructor","options","names","eventBroadcaster","on","envelope","doesHaveValue","testRunFinished","onTestRunFinished","getTestCases","eventDataCollector","getTestCaseAttempts","filter","attempt","willBeRetried","getTestSteps","testCaseAttempt","gherkinStepMap","pickleStepMap","testCase","testSteps","map","testStep","isBeforeHook","pickleStepId","getTestStep","testStepAttachments","stepAttachments","id","testStepResult","stepResults","data","pickleStep","keyword","getStepKeyword","line","astNodeIds","location","name","text","hidden","result","time","duration","durationToSeconds","attachments","getTestCaseResult","steps","status","message","exception","getWorstTestStepResult","step","failure","type","detail","undefined","NANOS_IN_SECOND","seconds","nanos","nameOrDefault","fallbackSuffix","getTestCaseName","feature","rule","pickle","featureName","pickleName","testCaseName","index","includes","push","formatTestSteps","statusText","toLowerCase","maxLength","length","stepText","padEnd","substring","join","testCases","tests","gherkinDocument","gherkinExampleRuleMap","getGherkinExampleRuleMap","getGherkinStepMap","getPickleStepMap","stepDuration","reduce","total","classname","systemOutput","passed","item","TestStepResultStatus","PASSED","skipped","SKIPPED","failures","testSuite","test","log","buildXmlReport","xmlReport","create","invalidCharReplacement","att","forEach","xmlTestCase","ele","xmlFailure","_a","_b","_c","cdata","end","pretty","exports","documentation"],"sources":["../../src/formatter/junit_formatter.ts"],"sourcesContent":["import xmlbuilder from 'xmlbuilder'\nimport Formatter, { IFormatterOptions } from './'\nimport * as messages from '@cucumber/messages'\nimport {\n  Attachment,\n  Duration,\n  Feature,\n  getWorstTestStepResult,\n  Pickle,\n  Rule,\n  TestStepResult,\n  TestStepResultStatus,\n} from '@cucumber/messages'\nimport { ITestCaseAttempt } from './helpers/event_data_collector'\nimport { doesHaveValue } from '../value_checker'\nimport {\n  getGherkinExampleRuleMap,\n  getGherkinStepMap,\n} from './helpers/gherkin_document_parser'\nimport { getPickleStepMap, getStepKeyword } from './helpers/pickle_parser'\n\ninterface IJUnitTestSuite {\n  name: string\n  failures: number\n  skipped: number\n  time: number\n  tests: IJUnitTestCase[]\n}\n\ninterface IJUnitTestCase {\n  classname: string\n  name: string\n  time: number\n  result: IJUnitTestCaseResult\n  systemOutput: string\n  steps: IJUnitTestStep[]\n}\n\ninterface IJUnitTestCaseFailure {\n  type: string\n  message?: string\n  detail: string\n}\n\ninterface IJUnitTestCaseResult {\n  status: TestStepResultStatus\n  failure?: IJUnitTestCaseFailure\n}\n\ninterface IJUnitTestStep {\n  attachments: Attachment[]\n  hidden: boolean\n  keyword: string\n  line: number\n  name?: string\n  result: TestStepResult\n  time: number\n}\n\ninterface IBuildJUnitTestStepOptions {\n  isBeforeHook: boolean\n  gherkinStepMap: Record<string, messages.Step>\n  pickleStepMap: Record<string, messages.PickleStep>\n  testStep: messages.TestStep\n  testStepAttachments: messages.Attachment[]\n  testStepResult: messages.TestStepResult\n}\n\nexport default class JunitFormatter extends Formatter {\n  private readonly names: Record<string, string[]> = {}\n  public static readonly documentation: string = 'Outputs JUnit report'\n\n  constructor(options: IFormatterOptions) {\n    super(options)\n    options.eventBroadcaster.on('envelope', (envelope: messages.Envelope) => {\n      if (doesHaveValue(envelope.testRunFinished)) {\n        this.onTestRunFinished()\n      }\n    })\n  }\n\n  private getTestCases() {\n    return this.eventDataCollector\n      .getTestCaseAttempts()\n      .filter((attempt) => !attempt.willBeRetried)\n  }\n\n  private getTestSteps(\n    testCaseAttempt: ITestCaseAttempt,\n    gherkinStepMap: Record<string, messages.Step>,\n    pickleStepMap: Record<string, messages.PickleStep>\n  ) {\n    return testCaseAttempt.testCase.testSteps.map((testStep) => {\n      const isBeforeHook = !doesHaveValue(testStep.pickleStepId)\n      return this.getTestStep({\n        isBeforeHook,\n        gherkinStepMap,\n        pickleStepMap,\n        testStep,\n        testStepAttachments: testCaseAttempt.stepAttachments[testStep.id],\n        testStepResult: testCaseAttempt.stepResults[testStep.id],\n      })\n    })\n  }\n\n  private getTestStep({\n    isBeforeHook,\n    gherkinStepMap,\n    pickleStepMap,\n    testStep,\n    testStepAttachments,\n    testStepResult,\n  }: IBuildJUnitTestStepOptions): IJUnitTestStep {\n    const data: Partial<IJUnitTestStep> = {}\n    if (testStep.pickleStepId) {\n      const pickleStep = pickleStepMap[testStep.pickleStepId]\n      data.keyword = getStepKeyword({ pickleStep, gherkinStepMap })\n      data.line = gherkinStepMap[pickleStep.astNodeIds[0]].location.line\n      data.name = pickleStep.text\n    } else {\n      data.keyword = isBeforeHook ? 'Before' : 'After'\n      data.hidden = true\n    }\n    data.result = testStepResult\n    data.time = testStepResult.duration\n      ? this.durationToSeconds(testStepResult.duration)\n      : 0\n    data.attachments = testStepAttachments\n    return data as IJUnitTestStep\n  }\n\n  private getTestCaseResult(steps: IJUnitTestStep[]): IJUnitTestCaseResult {\n    const { status, message, exception } = getWorstTestStepResult(\n      steps.map((step) => step.result)\n    )\n    return {\n      status,\n      failure:\n        message || exception\n          ? {\n              type: exception?.type,\n              message: exception?.message,\n              detail: message,\n            }\n          : undefined,\n    }\n  }\n\n  private durationToSeconds(duration: Duration): number {\n    const NANOS_IN_SECOND = 1_000_000_000\n    return (\n      (duration.seconds * NANOS_IN_SECOND + duration.nanos) / NANOS_IN_SECOND\n    )\n  }\n\n  private nameOrDefault(name: string, fallbackSuffix: string): string {\n    if (!name) {\n      return `(unnamed ${fallbackSuffix})`\n    }\n    return name\n  }\n\n  private getTestCaseName(\n    feature: Feature,\n    rule: Rule | undefined,\n    pickle: Pickle\n  ) {\n    const featureName = this.nameOrDefault(feature.name, 'feature')\n    const pickleName = this.nameOrDefault(pickle.name, 'scenario')\n    const testCaseName = rule\n      ? this.nameOrDefault(rule.name, 'rule') + ': ' + pickleName\n      : pickleName\n    if (!this.names[featureName]) {\n      this.names[featureName] = []\n    }\n    let index = 0\n    while (\n      this.names[featureName].includes(\n        index > 0 ? `${testCaseName} [${index}]` : testCaseName\n      )\n    ) {\n      index++\n    }\n    const name = index > 0 ? `${testCaseName} [${index}]` : testCaseName\n    this.names[featureName].push(name)\n    return name\n  }\n\n  private formatTestSteps(steps: IJUnitTestStep[]): string {\n    return steps\n      .filter((step) => !step.hidden)\n      .map((step) => {\n        const statusText = step.result.status.toLowerCase()\n        const maxLength = 80 - statusText.length - 3\n        const stepText = `${step.keyword}${step.name}`\n          .padEnd(maxLength, '.')\n          .substring(0, maxLength)\n        return `${stepText}...${statusText}`\n      })\n      .join('\\n')\n  }\n\n  private onTestRunFinished(): void {\n    const testCases = this.getTestCases()\n\n    const tests = testCases.map<IJUnitTestCase>(\n      (testCaseAttempt: ITestCaseAttempt) => {\n        const { gherkinDocument, pickle } = testCaseAttempt\n        const { feature } = gherkinDocument\n        const gherkinExampleRuleMap = getGherkinExampleRuleMap(gherkinDocument)\n        const rule = gherkinExampleRuleMap[pickle.astNodeIds[0]]\n        const gherkinStepMap = getGherkinStepMap(gherkinDocument)\n        const pickleStepMap = getPickleStepMap(pickle)\n\n        const steps = this.getTestSteps(\n          testCaseAttempt,\n          gherkinStepMap,\n          pickleStepMap\n        )\n        const stepDuration = steps.reduce(\n          (total, step) => total + (step.time || 0),\n          0\n        )\n\n        return {\n          classname: this.nameOrDefault(feature.name, 'feature'),\n          name: this.getTestCaseName(feature, rule, pickle),\n          time: stepDuration,\n          result: this.getTestCaseResult(steps),\n          systemOutput: this.formatTestSteps(steps),\n          steps,\n        }\n      }\n    )\n\n    const passed = tests.filter(\n      (item) => item.result.status === TestStepResultStatus.PASSED\n    ).length\n    const skipped = tests.filter(\n      (item) => item.result.status === TestStepResultStatus.SKIPPED\n    ).length\n    const failures = tests.length - passed - skipped\n\n    const testSuite: IJUnitTestSuite = {\n      name: 'cucumber-js',\n      tests,\n      failures,\n      skipped,\n      time: tests.reduce((total, test) => total + test.time, 0),\n    }\n\n    this.log(this.buildXmlReport(testSuite))\n  }\n\n  private buildXmlReport(testSuite: IJUnitTestSuite): string {\n    const xmlReport = xmlbuilder\n      .create('testsuite', { invalidCharReplacement: '' })\n      .att('failures', testSuite.failures)\n      .att('skipped', testSuite.skipped)\n      .att('name', testSuite.name)\n      .att('time', testSuite.time)\n      .att('tests', testSuite.tests.length)\n    testSuite.tests.forEach((test) => {\n      const xmlTestCase = xmlReport.ele('testcase', {\n        classname: test.classname,\n        name: test.name,\n        time: test.time,\n      })\n      if (test.result.status === TestStepResultStatus.SKIPPED) {\n        xmlTestCase.ele('skipped')\n      } else if (test.result.status !== TestStepResultStatus.PASSED) {\n        const xmlFailure = xmlTestCase.ele('failure', {\n          type: test.result.failure?.type,\n          message: test.result.failure?.message,\n        })\n        if (test.result?.failure) {\n          xmlFailure.cdata(test.result.failure.detail)\n        }\n      }\n      xmlTestCase.ele('system-out', {}).cdata(test.systemOutput)\n    })\n\n    return xmlReport.end({ pretty: true })\n  }\n}\n"],"mappings":"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"}