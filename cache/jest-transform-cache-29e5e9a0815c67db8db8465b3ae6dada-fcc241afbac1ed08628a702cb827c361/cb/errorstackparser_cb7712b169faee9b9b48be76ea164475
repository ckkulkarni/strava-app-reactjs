d8f1e519e63af6d027576a8bcca5ab37
"use strict";

(function (root, factory) {
  'use strict';

  // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

  /* istanbul ignore next */
  if (typeof define === 'function' && define.amd) {
    define('error-stack-parser', ['stackframe'], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory(require('stackframe'));
  } else {
    root.ErrorStackParser = factory(root.StackFrame);
  }
})(void 0, function ErrorStackParser(StackFrame) {
  'use strict';

  var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+:\d+/;
  var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+:\d+|\(native\))/m;
  var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code])?$/;
  return {
    /**
     * Given an Error object, extract the most information from it.
     *
     * @param {Error} error object
     * @return {Array} of StackFrames
     */
    parse: function ErrorStackParser$$parse(error) {
      if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {
        return this.parseOpera(error);
      } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
        return this.parseV8OrIE(error);
      } else if (error.stack) {
        return this.parseFFOrSafari(error);
      } else {
        throw new Error('Cannot parse given Error object');
      }
    },
    // Separate line and column numbers from a string of the form: (URI:Line:Column)
    extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
      // Fail-fast but return locations like "(native)"
      if (urlLike.indexOf(':') === -1) {
        return [urlLike];
      }
      var regExp = /(.+?)(?::(\d+))?(?::(\d+))?$/;
      var parts = regExp.exec(urlLike.replace(/[()]/g, ''));
      return [parts[1], parts[2] || undefined, parts[3] || undefined];
    },
    parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
      var filtered = error.stack.split('\n').filter(function (line) {
        return !!line.match(CHROME_IE_STACK_REGEXP);
      }, this);
      return filtered.map(function (line) {
        if (line.indexOf('(eval ') > -1) {
          // Throw away eval information until we implement stacktrace.js/stackframe#8
          line = line.replace(/eval code/g, 'eval').replace(/(\(eval at [^()]*)|(,.*$)/g, '');
        }
        var sanitizedLine = line.replace(/^\s+/, '').replace(/\(eval code/g, '(').replace(/^.*?\s+/, '');

        // capture and preseve the parenthesized location "(/foo/my bar.js:12:87)" in
        // case it has spaces in it, as the string is split on \s+ later on
        var location = sanitizedLine.match(/ (\(.+\)$)/);

        // remove the parenthesized location from the line, if it was matched
        sanitizedLine = location ? sanitizedLine.replace(location[0], '') : sanitizedLine;

        // if a location was matched, pass it to extractLocation() otherwise pass all sanitizedLine
        // because this line doesn't have function name
        var locationParts = this.extractLocation(location ? location[1] : sanitizedLine);
        var functionName = location && sanitizedLine || undefined;
        var fileName = ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1 ? undefined : locationParts[0];
        return new StackFrame({
          functionName: functionName,
          fileName: fileName,
          lineNumber: locationParts[1],
          columnNumber: locationParts[2],
          source: line
        });
      }, this);
    },
    parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
      var filtered = error.stack.split('\n').filter(function (line) {
        return !line.match(SAFARI_NATIVE_CODE_REGEXP);
      }, this);
      return filtered.map(function (line) {
        // Throw away eval information until we implement stacktrace.js/stackframe#8
        if (line.indexOf(' > eval') > -1) {
          line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ':$1');
        }
        if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {
          // Safari eval frames only have function names and nothing else
          return new StackFrame({
            functionName: line
          });
        } else {
          var functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/;
          var matches = line.match(functionNameRegex);
          var functionName = matches && matches[1] ? matches[1] : undefined;
          var locationParts = this.extractLocation(line.replace(functionNameRegex, ''));
          return new StackFrame({
            functionName: functionName,
            fileName: locationParts[0],
            lineNumber: locationParts[1],
            columnNumber: locationParts[2],
            source: line
          });
        }
      }, this);
    },
    parseOpera: function ErrorStackParser$$parseOpera(e) {
      if (!e.stacktrace || e.message.indexOf('\n') > -1 && e.message.split('\n').length > e.stacktrace.split('\n').length) {
        return this.parseOpera9(e);
      } else if (!e.stack) {
        return this.parseOpera10(e);
      } else {
        return this.parseOpera11(e);
      }
    },
    parseOpera9: function ErrorStackParser$$parseOpera9(e) {
      var lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
      var lines = e.message.split('\n');
      var result = [];
      for (var i = 2, len = lines.length; i < len; i += 2) {
        var match = lineRE.exec(lines[i]);
        if (match) {
          result.push(new StackFrame({
            fileName: match[2],
            lineNumber: match[1],
            source: lines[i]
          }));
        }
      }
      return result;
    },
    parseOpera10: function ErrorStackParser$$parseOpera10(e) {
      var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
      var lines = e.stacktrace.split('\n');
      var result = [];
      for (var i = 0, len = lines.length; i < len; i += 2) {
        var match = lineRE.exec(lines[i]);
        if (match) {
          result.push(new StackFrame({
            functionName: match[3] || undefined,
            fileName: match[2],
            lineNumber: match[1],
            source: lines[i]
          }));
        }
      }
      return result;
    },
    // Opera 10.65+ Error.stack very similar to FF/Safari
    parseOpera11: function ErrorStackParser$$parseOpera11(error) {
      var filtered = error.stack.split('\n').filter(function (line) {
        return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
      }, this);
      return filtered.map(function (line) {
        var tokens = line.split('@');
        var locationParts = this.extractLocation(tokens.pop());
        var functionCall = tokens.shift() || '';
        var functionName = functionCall.replace(/<anonymous function(: (\w+))?>/, '$2').replace(/\([^)]*\)/g, '') || undefined;
        var argsRaw;
        if (functionCall.match(/\(([^)]*)\)/)) {
          argsRaw = functionCall.replace(/^[^(]+\(([^)]*)\)$/, '$1');
        }
        var args = argsRaw === undefined || argsRaw === '[arguments not available]' ? undefined : argsRaw.split(',');
        return new StackFrame({
          functionName: functionName,
          args: args,
          fileName: locationParts[0],
          lineNumber: locationParts[1],
          columnNumber: locationParts[2],
          source: line
        });
      }, this);
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiRXJyb3JTdGFja1BhcnNlciIsIlN0YWNrRnJhbWUiLCJGSVJFRk9YX1NBRkFSSV9TVEFDS19SRUdFWFAiLCJDSFJPTUVfSUVfU1RBQ0tfUkVHRVhQIiwiU0FGQVJJX05BVElWRV9DT0RFX1JFR0VYUCIsInBhcnNlIiwiRXJyb3JTdGFja1BhcnNlciQkcGFyc2UiLCJlcnJvciIsInN0YWNrdHJhY2UiLCJwYXJzZU9wZXJhIiwic3RhY2siLCJtYXRjaCIsInBhcnNlVjhPcklFIiwicGFyc2VGRk9yU2FmYXJpIiwiRXJyb3IiLCJleHRyYWN0TG9jYXRpb24iLCJFcnJvclN0YWNrUGFyc2VyJCRleHRyYWN0TG9jYXRpb24iLCJ1cmxMaWtlIiwiaW5kZXhPZiIsInJlZ0V4cCIsInBhcnRzIiwiZXhlYyIsInJlcGxhY2UiLCJ1bmRlZmluZWQiLCJFcnJvclN0YWNrUGFyc2VyJCRwYXJzZVY4T3JJRSIsImZpbHRlcmVkIiwic3BsaXQiLCJmaWx0ZXIiLCJsaW5lIiwibWFwIiwic2FuaXRpemVkTGluZSIsImxvY2F0aW9uIiwibG9jYXRpb25QYXJ0cyIsImZ1bmN0aW9uTmFtZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsInNvdXJjZSIsIkVycm9yU3RhY2tQYXJzZXIkJHBhcnNlRkZPclNhZmFyaSIsImZ1bmN0aW9uTmFtZVJlZ2V4IiwibWF0Y2hlcyIsIkVycm9yU3RhY2tQYXJzZXIkJHBhcnNlT3BlcmEiLCJlIiwibWVzc2FnZSIsImxlbmd0aCIsInBhcnNlT3BlcmE5IiwicGFyc2VPcGVyYTEwIiwicGFyc2VPcGVyYTExIiwiRXJyb3JTdGFja1BhcnNlciQkcGFyc2VPcGVyYTkiLCJsaW5lUkUiLCJsaW5lcyIsInJlc3VsdCIsImkiLCJsZW4iLCJwdXNoIiwiRXJyb3JTdGFja1BhcnNlciQkcGFyc2VPcGVyYTEwIiwiRXJyb3JTdGFja1BhcnNlciQkcGFyc2VPcGVyYTExIiwidG9rZW5zIiwicG9wIiwiZnVuY3Rpb25DYWxsIiwic2hpZnQiLCJhcmdzUmF3IiwiYXJncyJdLCJzb3VyY2VzIjpbImVycm9yLXN0YWNrLXBhcnNlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICAvLyBVbml2ZXJzYWwgTW9kdWxlIERlZmluaXRpb24gKFVNRCkgdG8gc3VwcG9ydCBBTUQsIENvbW1vbkpTL05vZGUuanMsIFJoaW5vLCBhbmQgYnJvd3NlcnMuXG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKCdlcnJvci1zdGFjay1wYXJzZXInLCBbJ3N0YWNrZnJhbWUnXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ3N0YWNrZnJhbWUnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5FcnJvclN0YWNrUGFyc2VyID0gZmFjdG9yeShyb290LlN0YWNrRnJhbWUpO1xuICAgIH1cbn0odGhpcywgZnVuY3Rpb24gRXJyb3JTdGFja1BhcnNlcihTdGFja0ZyYW1lKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIEZJUkVGT1hfU0FGQVJJX1NUQUNLX1JFR0VYUCA9IC8oXnxAKVxcUys6XFxkKy87XG4gICAgdmFyIENIUk9NRV9JRV9TVEFDS19SRUdFWFAgPSAvXlxccyphdCAuKihcXFMrOlxcZCt8XFwobmF0aXZlXFwpKS9tO1xuICAgIHZhciBTQUZBUklfTkFUSVZFX0NPREVfUkVHRVhQID0gL14oZXZhbEApPyhcXFtuYXRpdmUgY29kZV0pPyQvO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdpdmVuIGFuIEVycm9yIG9iamVjdCwgZXh0cmFjdCB0aGUgbW9zdCBpbmZvcm1hdGlvbiBmcm9tIGl0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBvYmplY3RcbiAgICAgICAgICogQHJldHVybiB7QXJyYXl9IG9mIFN0YWNrRnJhbWVzXG4gICAgICAgICAqL1xuICAgICAgICBwYXJzZTogZnVuY3Rpb24gRXJyb3JTdGFja1BhcnNlciQkcGFyc2UoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXJyb3Iuc3RhY2t0cmFjZSAhPT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGVycm9yWydvcGVyYSNzb3VyY2Vsb2MnXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9wZXJhKGVycm9yKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3Iuc3RhY2sgJiYgZXJyb3Iuc3RhY2subWF0Y2goQ0hST01FX0lFX1NUQUNLX1JFR0VYUCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVY4T3JJRShlcnJvcik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yLnN0YWNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VGRk9yU2FmYXJpKGVycm9yKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcGFyc2UgZ2l2ZW4gRXJyb3Igb2JqZWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gU2VwYXJhdGUgbGluZSBhbmQgY29sdW1uIG51bWJlcnMgZnJvbSBhIHN0cmluZyBvZiB0aGUgZm9ybTogKFVSSTpMaW5lOkNvbHVtbilcbiAgICAgICAgZXh0cmFjdExvY2F0aW9uOiBmdW5jdGlvbiBFcnJvclN0YWNrUGFyc2VyJCRleHRyYWN0TG9jYXRpb24odXJsTGlrZSkge1xuICAgICAgICAgICAgLy8gRmFpbC1mYXN0IGJ1dCByZXR1cm4gbG9jYXRpb25zIGxpa2UgXCIobmF0aXZlKVwiXG4gICAgICAgICAgICBpZiAodXJsTGlrZS5pbmRleE9mKCc6JykgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFt1cmxMaWtlXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHJlZ0V4cCA9IC8oLis/KSg/OjooXFxkKykpPyg/OjooXFxkKykpPyQvO1xuICAgICAgICAgICAgdmFyIHBhcnRzID0gcmVnRXhwLmV4ZWModXJsTGlrZS5yZXBsYWNlKC9bKCldL2csICcnKSk7XG4gICAgICAgICAgICByZXR1cm4gW3BhcnRzWzFdLCBwYXJ0c1syXSB8fCB1bmRlZmluZWQsIHBhcnRzWzNdIHx8IHVuZGVmaW5lZF07XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGFyc2VWOE9ySUU6IGZ1bmN0aW9uIEVycm9yU3RhY2tQYXJzZXIkJHBhcnNlVjhPcklFKGVycm9yKSB7XG4gICAgICAgICAgICB2YXIgZmlsdGVyZWQgPSBlcnJvci5zdGFjay5zcGxpdCgnXFxuJykuZmlsdGVyKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISFsaW5lLm1hdGNoKENIUk9NRV9JRV9TVEFDS19SRUdFWFApO1xuICAgICAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXJlZC5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgICAgIGlmIChsaW5lLmluZGV4T2YoJyhldmFsICcpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhyb3cgYXdheSBldmFsIGluZm9ybWF0aW9uIHVudGlsIHdlIGltcGxlbWVudCBzdGFja3RyYWNlLmpzL3N0YWNrZnJhbWUjOFxuICAgICAgICAgICAgICAgICAgICBsaW5lID0gbGluZS5yZXBsYWNlKC9ldmFsIGNvZGUvZywgJ2V2YWwnKS5yZXBsYWNlKC8oXFwoZXZhbCBhdCBbXigpXSopfCgsLiokKS9nLCAnJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBzYW5pdGl6ZWRMaW5lID0gbGluZS5yZXBsYWNlKC9eXFxzKy8sICcnKS5yZXBsYWNlKC9cXChldmFsIGNvZGUvZywgJygnKS5yZXBsYWNlKC9eLio/XFxzKy8sICcnKTtcblxuICAgICAgICAgICAgICAgIC8vIGNhcHR1cmUgYW5kIHByZXNldmUgdGhlIHBhcmVudGhlc2l6ZWQgbG9jYXRpb24gXCIoL2Zvby9teSBiYXIuanM6MTI6ODcpXCIgaW5cbiAgICAgICAgICAgICAgICAvLyBjYXNlIGl0IGhhcyBzcGFjZXMgaW4gaXQsIGFzIHRoZSBzdHJpbmcgaXMgc3BsaXQgb24gXFxzKyBsYXRlciBvblxuICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHNhbml0aXplZExpbmUubWF0Y2goLyAoXFwoLitcXCkkKS8pO1xuXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBwYXJlbnRoZXNpemVkIGxvY2F0aW9uIGZyb20gdGhlIGxpbmUsIGlmIGl0IHdhcyBtYXRjaGVkXG4gICAgICAgICAgICAgICAgc2FuaXRpemVkTGluZSA9IGxvY2F0aW9uID8gc2FuaXRpemVkTGluZS5yZXBsYWNlKGxvY2F0aW9uWzBdLCAnJykgOiBzYW5pdGl6ZWRMaW5lO1xuXG4gICAgICAgICAgICAgICAgLy8gaWYgYSBsb2NhdGlvbiB3YXMgbWF0Y2hlZCwgcGFzcyBpdCB0byBleHRyYWN0TG9jYXRpb24oKSBvdGhlcndpc2UgcGFzcyBhbGwgc2FuaXRpemVkTGluZVxuICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgdGhpcyBsaW5lIGRvZXNuJ3QgaGF2ZSBmdW5jdGlvbiBuYW1lXG4gICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uUGFydHMgPSB0aGlzLmV4dHJhY3RMb2NhdGlvbihsb2NhdGlvbiA/IGxvY2F0aW9uWzFdIDogc2FuaXRpemVkTGluZSk7XG4gICAgICAgICAgICAgICAgdmFyIGZ1bmN0aW9uTmFtZSA9IGxvY2F0aW9uICYmIHNhbml0aXplZExpbmUgfHwgdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHZhciBmaWxlTmFtZSA9IFsnZXZhbCcsICc8YW5vbnltb3VzPiddLmluZGV4T2YobG9jYXRpb25QYXJ0c1swXSkgPiAtMSA/IHVuZGVmaW5lZCA6IGxvY2F0aW9uUGFydHNbMF07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFN0YWNrRnJhbWUoe1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbk5hbWU6IGZ1bmN0aW9uTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IGZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiBsb2NhdGlvblBhcnRzWzFdLFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IGxvY2F0aW9uUGFydHNbMl0sXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbGluZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGFyc2VGRk9yU2FmYXJpOiBmdW5jdGlvbiBFcnJvclN0YWNrUGFyc2VyJCRwYXJzZUZGT3JTYWZhcmkoZXJyb3IpIHtcbiAgICAgICAgICAgIHZhciBmaWx0ZXJlZCA9IGVycm9yLnN0YWNrLnNwbGl0KCdcXG4nKS5maWx0ZXIoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhbGluZS5tYXRjaChTQUZBUklfTkFUSVZFX0NPREVfUkVHRVhQKTtcbiAgICAgICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgICAgICByZXR1cm4gZmlsdGVyZWQubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgICAgICAvLyBUaHJvdyBhd2F5IGV2YWwgaW5mb3JtYXRpb24gdW50aWwgd2UgaW1wbGVtZW50IHN0YWNrdHJhY2UuanMvc3RhY2tmcmFtZSM4XG4gICAgICAgICAgICAgICAgaWYgKGxpbmUuaW5kZXhPZignID4gZXZhbCcpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgbGluZSA9IGxpbmUucmVwbGFjZSgvIGxpbmUgKFxcZCspKD86ID4gZXZhbCBsaW5lIFxcZCspKiA+IGV2YWw6XFxkKzpcXGQrL2csICc6JDEnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobGluZS5pbmRleE9mKCdAJykgPT09IC0xICYmIGxpbmUuaW5kZXhPZignOicpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTYWZhcmkgZXZhbCBmcmFtZXMgb25seSBoYXZlIGZ1bmN0aW9uIG5hbWVzIGFuZCBub3RoaW5nIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdGFja0ZyYW1lKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uTmFtZTogbGluZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZnVuY3Rpb25OYW1lUmVnZXggPSAvKCguKlwiLitcIlteQF0qKT9bXkBdKikoPzpAKS87XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzID0gbGluZS5tYXRjaChmdW5jdGlvbk5hbWVSZWdleCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmdW5jdGlvbk5hbWUgPSBtYXRjaGVzICYmIG1hdGNoZXNbMV0gPyBtYXRjaGVzWzFdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb25QYXJ0cyA9IHRoaXMuZXh0cmFjdExvY2F0aW9uKGxpbmUucmVwbGFjZShmdW5jdGlvbk5hbWVSZWdleCwgJycpKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFN0YWNrRnJhbWUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25OYW1lOiBmdW5jdGlvbk5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogbG9jYXRpb25QYXJ0c1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IGxvY2F0aW9uUGFydHNbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IGxvY2F0aW9uUGFydHNbMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IGxpbmVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGFyc2VPcGVyYTogZnVuY3Rpb24gRXJyb3JTdGFja1BhcnNlciQkcGFyc2VPcGVyYShlKSB7XG4gICAgICAgICAgICBpZiAoIWUuc3RhY2t0cmFjZSB8fCAoZS5tZXNzYWdlLmluZGV4T2YoJ1xcbicpID4gLTEgJiZcbiAgICAgICAgICAgICAgICBlLm1lc3NhZ2Uuc3BsaXQoJ1xcbicpLmxlbmd0aCA+IGUuc3RhY2t0cmFjZS5zcGxpdCgnXFxuJykubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3BlcmE5KGUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghZS5zdGFjaykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3BlcmExMChlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcGVyYTExKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHBhcnNlT3BlcmE5OiBmdW5jdGlvbiBFcnJvclN0YWNrUGFyc2VyJCRwYXJzZU9wZXJhOShlKSB7XG4gICAgICAgICAgICB2YXIgbGluZVJFID0gL0xpbmUgKFxcZCspLipzY3JpcHQgKD86aW4gKT8oXFxTKykvaTtcbiAgICAgICAgICAgIHZhciBsaW5lcyA9IGUubWVzc2FnZS5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAyLCBsZW4gPSBsaW5lcy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMikge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IGxpbmVSRS5leGVjKGxpbmVzW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3IFN0YWNrRnJhbWUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IG1hdGNoWzJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogbWF0Y2hbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IGxpbmVzW2ldXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGFyc2VPcGVyYTEwOiBmdW5jdGlvbiBFcnJvclN0YWNrUGFyc2VyJCRwYXJzZU9wZXJhMTAoZSkge1xuICAgICAgICAgICAgdmFyIGxpbmVSRSA9IC9MaW5lIChcXGQrKS4qc2NyaXB0ICg/OmluICk/KFxcUyspKD86OiBJbiBmdW5jdGlvbiAoXFxTKykpPyQvaTtcbiAgICAgICAgICAgIHZhciBsaW5lcyA9IGUuc3RhY2t0cmFjZS5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsaW5lcy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMikge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IGxpbmVSRS5leGVjKGxpbmVzW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgU3RhY2tGcmFtZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25OYW1lOiBtYXRjaFszXSB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IG1hdGNoWzJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IG1hdGNoWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbGluZXNbaV1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIE9wZXJhIDEwLjY1KyBFcnJvci5zdGFjayB2ZXJ5IHNpbWlsYXIgdG8gRkYvU2FmYXJpXG4gICAgICAgIHBhcnNlT3BlcmExMTogZnVuY3Rpb24gRXJyb3JTdGFja1BhcnNlciQkcGFyc2VPcGVyYTExKGVycm9yKSB7XG4gICAgICAgICAgICB2YXIgZmlsdGVyZWQgPSBlcnJvci5zdGFjay5zcGxpdCgnXFxuJykuZmlsdGVyKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISFsaW5lLm1hdGNoKEZJUkVGT1hfU0FGQVJJX1NUQUNLX1JFR0VYUCkgJiYgIWxpbmUubWF0Y2goL15FcnJvciBjcmVhdGVkIGF0Lyk7XG4gICAgICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICAgICAgcmV0dXJuIGZpbHRlcmVkLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRva2VucyA9IGxpbmUuc3BsaXQoJ0AnKTtcbiAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb25QYXJ0cyA9IHRoaXMuZXh0cmFjdExvY2F0aW9uKHRva2Vucy5wb3AoKSk7XG4gICAgICAgICAgICAgICAgdmFyIGZ1bmN0aW9uQ2FsbCA9ICh0b2tlbnMuc2hpZnQoKSB8fCAnJyk7XG4gICAgICAgICAgICAgICAgdmFyIGZ1bmN0aW9uTmFtZSA9IGZ1bmN0aW9uQ2FsbFxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvPGFub255bW91cyBmdW5jdGlvbig6IChcXHcrKSk/Pi8sICckMicpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXChbXildKlxcKS9nLCAnJykgfHwgdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHZhciBhcmdzUmF3O1xuICAgICAgICAgICAgICAgIGlmIChmdW5jdGlvbkNhbGwubWF0Y2goL1xcKChbXildKilcXCkvKSkge1xuICAgICAgICAgICAgICAgICAgICBhcmdzUmF3ID0gZnVuY3Rpb25DYWxsLnJlcGxhY2UoL15bXihdK1xcKChbXildKilcXCkkLywgJyQxJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gKGFyZ3NSYXcgPT09IHVuZGVmaW5lZCB8fCBhcmdzUmF3ID09PSAnW2FyZ3VtZW50cyBub3QgYXZhaWxhYmxlXScpID9cbiAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkIDogYXJnc1Jhdy5zcGxpdCgnLCcpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdGFja0ZyYW1lKHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25OYW1lOiBmdW5jdGlvbk5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBsb2NhdGlvblBhcnRzWzBdLFxuICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiBsb2NhdGlvblBhcnRzWzFdLFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IGxvY2F0aW9uUGFydHNbMl0sXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbGluZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xufSkpO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFDLFdBQVNBLElBQUksRUFBRUMsT0FBTyxFQUFFO0VBQ3JCLFlBQVk7O0VBQ1o7O0VBRUE7RUFDQSxJQUFJLE9BQU9DLE1BQU0sS0FBSyxVQUFVLElBQUlBLE1BQU0sQ0FBQ0MsR0FBRyxFQUFFO0lBQzVDRCxNQUFNLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRUQsT0FBTyxDQUFDO0VBQ3pELENBQUMsTUFBTSxJQUFJLE9BQU9HLE9BQU8sS0FBSyxRQUFRLEVBQUU7SUFDcENDLE1BQU0sQ0FBQ0QsT0FBTyxHQUFHSCxPQUFPLENBQUNLLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztFQUNuRCxDQUFDLE1BQU07SUFDSE4sSUFBSSxDQUFDTyxnQkFBZ0IsR0FBR04sT0FBTyxDQUFDRCxJQUFJLENBQUNRLFVBQVUsQ0FBQztFQUNwRDtBQUNKLENBQUMsVUFBTyxTQUFTRCxnQkFBZ0JBLENBQUNDLFVBQVUsRUFBRTtFQUMxQyxZQUFZOztFQUVaLElBQUlDLDJCQUEyQixHQUFHLGNBQWM7RUFDaEQsSUFBSUMsc0JBQXNCLEdBQUcsZ0NBQWdDO0VBQzdELElBQUlDLHlCQUF5QixHQUFHLDZCQUE2QjtFQUU3RCxPQUFPO0lBQ0g7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0lBQ1FDLEtBQUssRUFBRSxTQUFTQyx1QkFBdUJBLENBQUNDLEtBQUssRUFBRTtNQUMzQyxJQUFJLE9BQU9BLEtBQUssQ0FBQ0MsVUFBVSxLQUFLLFdBQVcsSUFBSSxPQUFPRCxLQUFLLENBQUMsaUJBQWlCLENBQUMsS0FBSyxXQUFXLEVBQUU7UUFDNUYsT0FBTyxJQUFJLENBQUNFLFVBQVUsQ0FBQ0YsS0FBSyxDQUFDO01BQ2pDLENBQUMsTUFBTSxJQUFJQSxLQUFLLENBQUNHLEtBQUssSUFBSUgsS0FB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