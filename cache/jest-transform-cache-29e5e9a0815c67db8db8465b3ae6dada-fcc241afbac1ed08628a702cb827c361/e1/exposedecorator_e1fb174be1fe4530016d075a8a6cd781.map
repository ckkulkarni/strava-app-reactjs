{"version":3,"names":["storage_1","require","Expose","options","object","propertyName","defaultMetadataStorage","addExposeMetadata","target","Function","constructor","exports"],"sources":["../../../src/decorators/expose.decorator.ts"],"sourcesContent":["import { defaultMetadataStorage } from '../storage';\nimport { ExposeOptions } from '../interfaces';\n\n/**\n * Marks the given class or property as included. By default the property is included in both\n * constructorToPlain and plainToConstructor transformations. It can be limited to only one direction\n * via using the `toPlainOnly` or `toClassOnly` option.\n *\n * Can be applied to class definitions and properties.\n */\nexport function Expose(options: ExposeOptions = {}): PropertyDecorator & ClassDecorator {\n  /**\n   * NOTE: The `propertyName` property must be marked as optional because\n   * this decorator used both as a class and a property decorator and the\n   * Typescript compiler will freak out if we make it mandatory as a class\n   * decorator only receives one parameter.\n   */\n  return function (object: any, propertyName?: string | Symbol): void {\n    defaultMetadataStorage.addExposeMetadata({\n      target: object instanceof Function ? object : object.constructor,\n      propertyName: propertyName as string,\n      options,\n    });\n  };\n}\n"],"mappings":";;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AAGA;;;;;;;AAOA,SAAgBC,MAAMA,CAACC,OAAA,GAAyB,EAAE;EAChD;;;;;;EAMA,OAAO,UAAUC,MAAW,EAAEC,YAA8B;IAC1DL,SAAA,CAAAM,sBAAsB,CAACC,iBAAiB,CAAC;MACvCC,MAAM,EAAEJ,MAAM,YAAYK,QAAQ,GAAGL,MAAM,GAAGA,MAAM,CAACM,WAAW;MAChEL,YAAY,EAAEA,YAAsB;MACpCF;KACD,CAAC;EACJ,CAAC;AACH;AAdAQ,OAAA,CAAAT,MAAA,GAAAA,MAAA"}