b605e204f63b835affac20d0da69ba31
"use strict";

var thenify = require('thenify');
module.exports = thenifyAll;
thenifyAll.withCallback = withCallback;
thenifyAll.thenify = thenify;

/**
 * Promisifies all the selected functions in an object.
 *
 * @param {Object} source the source object for the async functions
 * @param {Object} [destination] the destination to set all the promisified methods
 * @param {Array} [methods] an array of method names of `source`
 * @return {Object}
 * @api public
 */

function thenifyAll(source, destination, methods) {
  return promisifyAll(source, destination, methods, thenify);
}

/**
 * Promisifies all the selected functions in an object and backward compatible with callback.
 *
 * @param {Object} source the source object for the async functions
 * @param {Object} [destination] the destination to set all the promisified methods
 * @param {Array} [methods] an array of method names of `source`
 * @return {Object}
 * @api public
 */

function withCallback(source, destination, methods) {
  return promisifyAll(source, destination, methods, thenify.withCallback);
}
function promisifyAll(source, destination, methods, promisify) {
  if (!destination) {
    destination = {};
    methods = Object.keys(source);
  }
  if (Array.isArray(destination)) {
    methods = destination;
    destination = {};
  }
  if (!methods) {
    methods = Object.keys(source);
  }
  if (typeof source === 'function') destination = promisify(source);
  methods.forEach(function (name) {
    // promisify only if it's a function
    if (typeof source[name] === 'function') destination[name] = promisify(source[name]);
  });

  // proxy the rest
  Object.keys(source).forEach(function (name) {
    if (deprecated(source, name)) return;
    if (destination[name]) return;
    destination[name] = source[name];
  });
  return destination;
}
function deprecated(source, name) {
  var desc = Object.getOwnPropertyDescriptor(source, name);
  if (!desc || !desc.get) return false;
  if (desc.get.name === 'deprecated') return true;
  return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0aGVuaWZ5IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0aGVuaWZ5QWxsIiwid2l0aENhbGxiYWNrIiwic291cmNlIiwiZGVzdGluYXRpb24iLCJtZXRob2RzIiwicHJvbWlzaWZ5QWxsIiwicHJvbWlzaWZ5IiwiT2JqZWN0Iiwia2V5cyIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJuYW1lIiwiZGVwcmVjYXRlZCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXQiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciB0aGVuaWZ5ID0gcmVxdWlyZSgndGhlbmlmeScpXG5cbm1vZHVsZS5leHBvcnRzID0gdGhlbmlmeUFsbFxudGhlbmlmeUFsbC53aXRoQ2FsbGJhY2sgPSB3aXRoQ2FsbGJhY2tcbnRoZW5pZnlBbGwudGhlbmlmeSA9IHRoZW5pZnlcblxuLyoqXG4gKiBQcm9taXNpZmllcyBhbGwgdGhlIHNlbGVjdGVkIGZ1bmN0aW9ucyBpbiBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSB0aGUgc291cmNlIG9iamVjdCBmb3IgdGhlIGFzeW5jIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IFtkZXN0aW5hdGlvbl0gdGhlIGRlc3RpbmF0aW9uIHRvIHNldCBhbGwgdGhlIHByb21pc2lmaWVkIG1ldGhvZHNcbiAqIEBwYXJhbSB7QXJyYXl9IFttZXRob2RzXSBhbiBhcnJheSBvZiBtZXRob2QgbmFtZXMgb2YgYHNvdXJjZWBcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gdGhlbmlmeUFsbChzb3VyY2UsIGRlc3RpbmF0aW9uLCBtZXRob2RzKSB7XG4gIHJldHVybiBwcm9taXNpZnlBbGwoc291cmNlLCBkZXN0aW5hdGlvbiwgbWV0aG9kcywgdGhlbmlmeSlcbn1cblxuLyoqXG4gKiBQcm9taXNpZmllcyBhbGwgdGhlIHNlbGVjdGVkIGZ1bmN0aW9ucyBpbiBhbiBvYmplY3QgYW5kIGJhY2t3YXJkIGNvbXBhdGlibGUgd2l0aCBjYWxsYmFjay5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIHRoZSBzb3VyY2Ugb2JqZWN0IGZvciB0aGUgYXN5bmMgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge09iamVjdH0gW2Rlc3RpbmF0aW9uXSB0aGUgZGVzdGluYXRpb24gdG8gc2V0IGFsbCB0aGUgcHJvbWlzaWZpZWQgbWV0aG9kc1xuICogQHBhcmFtIHtBcnJheX0gW21ldGhvZHNdIGFuIGFycmF5IG9mIG1ldGhvZCBuYW1lcyBvZiBgc291cmNlYFxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiB3aXRoQ2FsbGJhY2soc291cmNlLCBkZXN0aW5hdGlvbiwgbWV0aG9kcykge1xuICByZXR1cm4gcHJvbWlzaWZ5QWxsKHNvdXJjZSwgZGVzdGluYXRpb24sIG1ldGhvZHMsIHRoZW5pZnkud2l0aENhbGxiYWNrKVxufVxuXG5mdW5jdGlvbiBwcm9taXNpZnlBbGwoc291cmNlLCBkZXN0aW5hdGlvbiwgbWV0aG9kcywgcHJvbWlzaWZ5KSB7XG4gIGlmICghZGVzdGluYXRpb24pIHtcbiAgICBkZXN0aW5hdGlvbiA9IHt9O1xuICAgIG1ldGhvZHMgPSBPYmplY3Qua2V5cyhzb3VyY2UpXG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShkZXN0aW5hdGlvbikpIHtcbiAgICBtZXRob2RzID0gZGVzdGluYXRpb25cbiAgICBkZXN0aW5hdGlvbiA9IHt9XG4gIH1cblxuICBpZiAoIW1ldGhvZHMpIHtcbiAgICBtZXRob2RzID0gT2JqZWN0LmtleXMoc291cmNlKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdmdW5jdGlvbicpIGRlc3RpbmF0aW9uID0gcHJvbWlzaWZ5KHNvdXJjZSlcblxuICBtZXRob2RzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAvLyBwcm9taXNpZnkgb25seSBpZiBpdCdzIGEgZnVuY3Rpb25cbiAgICBpZiAodHlwZW9mIHNvdXJjZVtuYW1lXSA9PT0gJ2Z1bmN0aW9uJykgZGVzdGluYXRpb25bbmFtZV0gPSBwcm9taXNpZnkoc291cmNlW25hbWVdKVxuICB9KVxuXG4gIC8vIHByb3h5IHRoZSByZXN0XG4gIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmIChkZXByZWNhdGVkKHNvdXJjZSwgbmFtZSkpIHJldHVyblxuICAgIGlmIChkZXN0aW5hdGlvbltuYW1lXSkgcmV0dXJuXG4gICAgZGVzdGluYXRpb25bbmFtZV0gPSBzb3VyY2VbbmFtZV1cbiAgfSlcblxuICByZXR1cm4gZGVzdGluYXRpb25cbn1cblxuZnVuY3Rpb24gZGVwcmVjYXRlZChzb3VyY2UsIG5hbWUpIHtcbiAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgbmFtZSlcbiAgaWYgKCFkZXNjIHx8ICFkZXNjLmdldCkgcmV0dXJuIGZhbHNlXG4gIGlmIChkZXNjLmdldC5uYW1lID09PSAnZGVwcmVjYXRlZCcpIHJldHVybiB0cnVlXG4gIHJldHVybiBmYWxzZVxufVxuIl0sIm1hcHBpbmdzIjoiOztBQUNBLElBQUlBLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUVoQ0MsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFVBQVU7QUFDM0JBLFVBQVUsQ0FBQ0MsWUFBWSxHQUFHQSxZQUFZO0FBQ3RDRCxVQUFVLENBQUNKLE9BQU8sR0FBR0EsT0FBTzs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNJLFVBQVVBLENBQUNFLE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxPQUFPLEVBQUU7RUFDaEQsT0FBT0MsWUFBWSxDQUFDSCxNQUFNLEVBQUVDLFdBQVcsRUFBRUMsT0FBTyxFQUFFUixPQUFPLENBQUM7QUFDNUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNLLFlBQVlBLENBQUNDLE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxPQUFPLEVBQUU7RUFDbEQsT0FBT0MsWUFBWSxDQUFDSCxNQUFNLEVBQUVDLFdBQVcsRUFBRUMsT0FBTyxFQUFFUixPQUFPLENBQUNLLFlBQVksQ0FBQztBQUN6RTtBQUVBLFNBQVNJLFlBQVlBLENBQUNILE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxPQUFPLEVBQUVFLFNBQVMsRUFBRTtFQUM3RCxJQUFJLENBQUNILFdBQVcsRUFBRTtJQUNoQkEsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNoQkMsT0FBTyxHQUFHRyxNQUFNLENBQUNDLElBQUksQ0FBQ04sTUFBTSxDQUFDO0VBQy9CO0VBRUEsSUFBSU8sS0FBSyxDQUFDQyxPQUFPLENBQUNQLFdBQVcsQ0FBQyxFQUFFO0lBQzlCQyxPQUFPLEdBQUdELFdBQVc7SUFDckJBLFdBQVcsR0FBRyxDQUFDLENBQUM7RUFDbEI7RUFFQSxJQUFJLENBQUNDLE9BQU8sRUFBRTtJQUNaQSxPQUFPLEdBQUdHLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDTixNQUFNLENBQUM7RUFDL0I7RUFFQSxJQUFJLE9BQU9BLE1BQU0sS0FBSyxVQUFVLEVBQUVDLFdBQVcsR0FBR0csU0FBUyxDQUFDSixNQUFNLENBQUM7RUFFakVFLE9BQU8sQ0FBQ08sT0FBTyxDQUFDLFVBQVVDLElBQUksRUFBRTtJQUM5QjtJQUNBLElBQUksT0FBT1YsTUFBTSxDQUFDVSxJQUFJLENBQUMsS0FBSyxVQUFVLEVBQUVULFdBQVcsQ0FBQ1MsSUFBSSxDQUFDLEdBQUdOLFNBQVMsQ0FBQ0osTUFBTSxDQUFDVSxJQUFJLENBQUMsQ0FBQztFQUNyRixDQUFDLENBQUM7O0VBRUY7RUFDQUwsTUFBTSxDQUFDQyxJQUFJLENBQUNOLE1BQU0sQ0FBQyxDQUFDUyxPQUFPLENBQUMsVUFBVUMsSUFBSSxFQUFFO0lBQzFDLElBQUlDLFVBQVUsQ0FBQ1gsTUFBTSxFQUFFVSxJQUFJLENBQUMsRUFBRTtJQUM5QixJQUFJVCxXQUFXLENBQUNTLElBQUksQ0FBQyxFQUFFO0lBQ3ZCVCxXQUFXLENBQUNTLElBQUksQ0FBQyxHQUFHVixNQUFNLENBQUNVLElBQUksQ0FBQztFQUNsQyxDQUFDLENBQUM7RUFFRixPQUFPVCxXQUFXO0FBQ3BCO0FBRUEsU0FBU1UsVUFBVUEsQ0FBQ1gsTUFBTSxFQUFFVSxJQUFJLEVBQUU7RUFDaEMsSUFBSUUsSUFBSSxHQUFHUCxNQUFNLENBQUNRLHdCQUF3QixDQUFDYixNQUFNLEVBQUVVLElBQUksQ0FBQztFQUN4RCxJQUFJLENBQUNFLElBQUksSUFBSSxDQUFDQSxJQUFJLENBQUNFLEdBQUcsRUFBRSxPQUFPLEtBQUs7RUFDcEMsSUFBSUYsSUFBSSxDQUFDRSxHQUFHLENBQUNKLElBQUksS0FBSyxZQUFZLEVBQUUsT0FBTyxJQUFJO0VBQy9DLE9BQU8sS0FBSztBQUNkIn0=