{"version":3,"names":["messages","__importStar","require","value_checker_1","luxon_1","STATUS_REPORT_ORDER","TestStepResultStatus","FAILED","AMBIGUOUS","UNDEFINED","PENDING","SKIPPED","PASSED","formatSummary","colorFns","testCaseAttempts","testRunDuration","testCaseResults","testStepResults","totalStepDuration","TimeConversion","millisecondsToDuration","forEach","testCase","willBeRetried","worstTestStepResult","stepResults","Object","values","stepResult","addDurations","duration","push","testSteps","testStep","doesHaveValue","pickleStepId","id","scenarioSummary","getCountSummary","objects","type","stepSummary","durationSummary","getDurationSummary","join","exports","counts","x","status","total","reduce","acc","text","toString","details","forStatus","toLowerCase","durationMsg","start","Date","end","durationToMilliseconds","Interval","fromDateTimes","toDuration","toFormat"],"sources":["../../../src/formatter/helpers/summary_helpers.ts"],"sourcesContent":["import { IColorFns } from '../get_color_fns'\nimport { ITestCaseAttempt } from './event_data_collector'\nimport * as messages from '@cucumber/messages'\nimport { doesHaveValue } from '../../value_checker'\nimport { Interval } from 'luxon'\n\nconst STATUS_REPORT_ORDER = [\n  messages.TestStepResultStatus.FAILED,\n  messages.TestStepResultStatus.AMBIGUOUS,\n  messages.TestStepResultStatus.UNDEFINED,\n  messages.TestStepResultStatus.PENDING,\n  messages.TestStepResultStatus.SKIPPED,\n  messages.TestStepResultStatus.PASSED,\n]\n\nexport interface IFormatSummaryRequest {\n  colorFns: IColorFns\n  testCaseAttempts: ITestCaseAttempt[]\n  testRunDuration: messages.Duration\n}\n\nexport function formatSummary({\n  colorFns,\n  testCaseAttempts,\n  testRunDuration,\n}: IFormatSummaryRequest): string {\n  const testCaseResults: messages.TestStepResult[] = []\n  const testStepResults: messages.TestStepResult[] = []\n  let totalStepDuration = messages.TimeConversion.millisecondsToDuration(0)\n  testCaseAttempts.forEach(\n    ({ testCase, willBeRetried, worstTestStepResult, stepResults }) => {\n      Object.values(stepResults).forEach((stepResult) => {\n        totalStepDuration = messages.TimeConversion.addDurations(\n          totalStepDuration,\n          stepResult.duration\n        )\n      })\n      if (!willBeRetried) {\n        testCaseResults.push(worstTestStepResult)\n        testCase.testSteps.forEach((testStep) => {\n          if (doesHaveValue(testStep.pickleStepId)) {\n            testStepResults.push(stepResults[testStep.id])\n          }\n        })\n      }\n    }\n  )\n  const scenarioSummary = getCountSummary({\n    colorFns,\n    objects: testCaseResults,\n    type: 'scenario',\n  })\n  const stepSummary = getCountSummary({\n    colorFns,\n    objects: testStepResults,\n    type: 'step',\n  })\n  const durationSummary = `${getDurationSummary(\n    testRunDuration\n  )} (executing steps: ${getDurationSummary(totalStepDuration)})\\n`\n  return [scenarioSummary, stepSummary, durationSummary].join('\\n')\n}\n\ninterface IGetCountSummaryRequest {\n  colorFns: IColorFns\n  objects: messages.TestStepResult[]\n  type: string\n}\n\nfunction getCountSummary({\n  colorFns,\n  objects,\n  type,\n}: IGetCountSummaryRequest): string {\n  const counts: Record<string, number> = {}\n  STATUS_REPORT_ORDER.forEach((x) => (counts[x] = 0))\n  objects.forEach((x) => (counts[x.status] += 1))\n  const total = Object.values(counts).reduce((acc, x) => acc + x, 0)\n  let text = `${total.toString()} ${type}${total === 1 ? '' : 's'}`\n  if (total > 0) {\n    const details: string[] = []\n    STATUS_REPORT_ORDER.forEach((status) => {\n      if (counts[status] > 0) {\n        details.push(\n          colorFns.forStatus(status)(\n            `${counts[status].toString()} ${status.toLowerCase()}`\n          )\n        )\n      }\n    })\n    text += ` (${details.join(', ')})`\n  }\n  return text\n}\n\nfunction getDurationSummary(durationMsg: messages.Duration): string {\n  const start = new Date(0)\n  const end = new Date(\n    messages.TimeConversion.durationToMilliseconds(durationMsg)\n  )\n  const duration = Interval.fromDateTimes(start, end).toDuration([\n    'minutes',\n    'seconds',\n    'milliseconds',\n  ])\n  return duration.toFormat(\"m'm'ss.SSS's'\")\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAAA,QAAA,GAAAC,YAAA,CAAAC,OAAA;AACA,MAAAC,eAAA,GAAAD,OAAA;AACA,MAAAE,OAAA,GAAAF,OAAA;AAEA,MAAMG,mBAAmB,GAAG,CAC1BL,QAAQ,CAACM,oBAAoB,CAACC,MAAM,EACpCP,QAAQ,CAACM,oBAAoB,CAACE,SAAS,EACvCR,QAAQ,CAACM,oBAAoB,CAACG,SAAS,EACvCT,QAAQ,CAACM,oBAAoB,CAACI,OAAO,EACrCV,QAAQ,CAACM,oBAAoB,CAACK,OAAO,EACrCX,QAAQ,CAACM,oBAAoB,CAACM,MAAM,CACrC;AAQD,SAAgBC,aAAaA,CAAC;EAC5BC,QAAQ;EACRC,gBAAgB;EAChBC;AAAe,CACO;EACtB,MAAMC,eAAe,GAA8B,EAAE;EACrD,MAAMC,eAAe,GAA8B,EAAE;EACrD,IAAIC,iBAAiB,GAAGnB,QAAQ,CAACoB,cAAc,CAACC,sBAAsB,CAAC,CAAC,CAAC;EACzEN,gBAAgB,CAACO,OAAO,CACtB,CAAC;IAAEC,QAAQ;IAAEC,aAAa;IAAEC,mBAAmB;IAAEC;EAAW,CAAE,KAAI;IAChEC,MAAM,CAACC,MAAM,CAACF,WAAW,CAAC,CAACJ,OAAO,CAAEO,UAAU,IAAI;MAChDV,iBAAiB,GAAGnB,QAAQ,CAACoB,cAAc,CAACU,YAAY,CACtDX,iBAAiB,EACjBU,UAAU,CAACE,QAAQ,CACpB;IACH,CAAC,CAAC;IACF,IAAI,CAACP,aAAa,EAAE;MAClBP,eAAe,CAACe,IAAI,CAACP,mBAAmB,CAAC;MACzCF,QAAQ,CAACU,SAAS,CAACX,OAAO,CAAEY,QAAQ,IAAI;QACtC,IAAI,IAAA/B,eAAA,CAAAgC,aAAa,EAACD,QAAQ,CAACE,YAAY,CAAC,EAAE;UACxClB,eAAe,CAACc,IAAI,CAACN,WAAW,CAACQ,QAAQ,CAACG,EAAE,CAAC,CAAC;;MAElD,CAAC,CAAC;;EAEN,CAAC,CACF;EACD,MAAMC,eAAe,GAAGC,eAAe,CAAC;IACtCzB,QAAQ;IACR0B,OAAO,EAAEvB,eAAe;IACxBwB,IAAI,EAAE;GACP,CAAC;EACF,MAAMC,WAAW,GAAGH,eAAe,CAAC;IAClCzB,QAAQ;IACR0B,OAAO,EAAEtB,eAAe;IACxBuB,IAAI,EAAE;GACP,CAAC;EACF,MAAME,eAAe,GAAG,GAAGC,kBAAkB,CAC3C5B,eAAe,CAChB,sBAAsB4B,kBAAkB,CAACzB,iBAAiB,CAAC,KAAK;EACjE,OAAO,CAACmB,eAAe,EAAEI,WAAW,EAAEC,eAAe,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC;AACnE;AAxCAC,OAAA,CAAAjC,aAAA,GAAAA,aAAA;AAgDA,SAAS0B,eAAeA,CAAC;EACvBzB,QAAQ;EACR0B,OAAO;EACPC;AAAI,CACoB;EACxB,MAAMM,MAAM,GAA2B,EAAE;EACzC1C,mBAAmB,CAACiB,OAAO,CAAE0B,CAAC,IAAMD,MAAM,CAACC,CAAC,CAAC,GAAG,CAAE,CAAC;EACnDR,OAAO,CAAClB,OAAO,CAAE0B,CAAC,IAAMD,MAAM,CAACC,CAAC,CAACC,MAAM,CAAC,IAAI,CAAE,CAAC;EAC/C,MAAMC,KAAK,GAAGvB,MAAM,CAACC,MAAM,CAACmB,MAAM,CAAC,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEJ,CAAC,KAAKI,GAAG,GAAGJ,CAAC,EAAE,CAAC,CAAC;EAClE,IAAIK,IAAI,GAAG,GAAGH,KAAK,CAACI,QAAQ,EAAE,IAAIb,IAAI,GAAGS,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE;EACjE,IAAIA,KAAK,GAAG,CAAC,EAAE;IACb,MAAMK,OAAO,GAAa,EAAE;IAC5BlD,mBAAmB,CAACiB,OAAO,CAAE2B,MAAM,IAAI;MACrC,IAAIF,MAAM,CAACE,MAAM,CAAC,GAAG,CAAC,EAAE;QACtBM,OAAO,CAACvB,IAAI,CACVlB,QAAQ,CAAC0C,SAAS,CAACP,MAAM,CAAC,CACxB,GAAGF,MAAM,CAACE,MAAM,CAAC,CAACK,QAAQ,EAAE,IAAIL,MAAM,CAACQ,WAAW,EAAE,EAAE,CACvD,CACF;;IAEL,CAAC,CAAC;IACFJ,IAAI,IAAI,KAAKE,OAAO,CAACV,IAAI,CAAC,IAAI,CAAC,GAAG;;EAEpC,OAAOQ,IAAI;AACb;AAEA,SAAST,kBAAkBA,CAACc,WAA8B;EACxD,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC,CAAC;EACzB,MAAMC,GAAG,GAAG,IAAID,IAAI,CAClB5D,QAAQ,CAACoB,cAAc,CAAC0C,sBAAsB,CAACJ,WAAW,CAAC,CAC5D;EACD,MAAM3B,QAAQ,GAAG3B,OAAA,CAAA2D,QAAQ,CAACC,aAAa,CAACL,KAAK,EAAEE,GAAG,CAAC,CAACI,UAAU,CAAC,CAC7D,SAAS,EACT,SAAS,EACT,cAAc,CACf,CAAC;EACF,OAAOlC,QAAQ,CAACmC,QAAQ,CAAC,eAAe,CAAC;AAC3C"}