d07d6ee9c00fad4327b44f6aefb307d9
"use strict";

var _jestCucumber = require("jest-cucumber");
var _react = require("@testing-library/react");
var _Base = _interopRequireDefault(require("../../Base"));
var _react2 = _interopRequireDefault(require("react"));
require("text-encoding");
var _parkingSlice = _interopRequireWildcard(require("../../redux/reducer/parkingSlice"));
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _reactRouterDom = require("react-router-dom");
var _ParkingSpace = _interopRequireDefault(require("../../ParkingSpace"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/base.feature");
let store;
let rendered;
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User enters the number of spaces", ({
    given,
    when,
    then,
    and
  }) => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        parkingSpaces: _parkingSlice.default
      }
    });
    const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.Route, {
      path: "/",
      element: /*#__PURE__*/_react2.default.createElement(_Base.default, null)
    }), /*#__PURE__*/_react2.default.createElement(_reactRouterDom.Route, {
      path: "/spaces",
      element: /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null)
    })))));
    const alertMock = jest.spyOn(window, "alert").mockImplementation(() => {});
    given("the user is on the home page", () => {
      expect(screen).toBeTruthy();
    });
    when("the user enters some input in the input field and submits", () => {
      const input = screen.getAllByTestId("input");
      const button = screen.getAllByText("Submit");
      _react.fireEvent.change(input[0], {
        target: {
          value: 10
        }
      });
      _react.fireEvent.click(button[0]);
    });
    then('an alert is displayed with "10 Spaces selected"', async () => {
      const input = screen.getAllByTestId("input");
      const button = screen.getAllByText("Submit");
      _react.fireEvent.change(input[0], {
        target: {
          value: 10
        }
      });
      _react.fireEvent.click(button[0]);
      await (0, _react.waitFor)(() => {
        expect(alertMock).toHaveBeenCalledWith("10 Spaces selected");
      });
    });
    and("the parking lot should be initialized with 10 spaces", async () => {
      const input = screen.getAllByTestId("input");
      const button = screen.getAllByText("Submit");
      _react.fireEvent.change(input[0], {
        target: {
          value: 10
        }
      });
      _react.fireEvent.click(button[0]);
      await (0, _react.waitFor)(() => {
        expect(alertMock).toHaveBeenCalledWith("10 Spaces selected");
      });
      store.dispatch((0, _parkingSlice.initializeParkingLot)(10));
    });
    when('the user clicks the "Start App" button, the user should be taken to the spaces page', async () => {
      const input = screen.getAllByTestId("input");
      const button = screen.getAllByText("Submit");
      _react.fireEvent.change(input[0], {
        target: {
          value: 10
        }
      });
      _react.fireEvent.click(button[0]);
      const startAppButton = screen.getByText("Start App");
      _react.fireEvent.click(startAppButton);
      await (0, _react.waitFor)(() => {
        expect(window.location.pathname).toEqual("/spaces");
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,