58b6de3a4bedf4c876f05c6875712f48
/**
 * The MIT License (MIT)
 * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>
 */

'use strict';

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  } else {
    return Array.from(arr);
  }
}
var NodePath = require('../../traverse/node-path');
var _require = require('../../transform/utils'),
  increaseQuantifierByOne = _require.increaseQuantifierByOne;

/**
 * A regexp-tree plugin to combine repeating patterns.
 *
 * /^abcabcabc/ -> /^abc{3}/
 * /^(?:abc){2}abc/ -> /^(?:abc){3}/
 * /^abc(?:abc){2}/ -> /^(?:abc){3}/
 */

module.exports = {
  Alternative: function Alternative(path) {
    var node = path.node;

    // We can skip the first child

    var index = 1;
    while (index < node.expressions.length) {
      var child = path.getChild(index);
      index = Math.max(1, combineRepeatingPatternLeft(path, child, index));
      if (index >= node.expressions.length) {
        break;
      }
      child = path.getChild(index);
      index = Math.max(1, combineWithPreviousRepetition(path, child, index));
      if (index >= node.expressions.length) {
        break;
      }
      child = path.getChild(index);
      index = Math.max(1, combineRepetitionWithPrevious(path, child, index));
      index++;
    }
  }
};

// abcabc -> (?:abc){2}
function combineRepeatingPatternLeft(alternative, child, index) {
  var node = alternative.node;
  var nbPossibleLengths = Math.ceil(index / 2);
  var i = 0;
  while (i < nbPossibleLengths) {
    var startIndex = index - 2 * i - 1;
    var right = void 0,
      left = void 0;
    if (i === 0) {
      right = child;
      left = alternative.getChild(startIndex);
    } else {
      right = NodePath.getForNode({
        type: 'Alternative',
        expressions: [].concat(_toConsumableArray(node.expressions.slice(index - i, index)), [child.node])
      });
      left = NodePath.getForNode({
        type: 'Alternative',
        expressions: [].concat(_toConsumableArray(node.expressions.slice(startIndex, index - i)))
      });
    }
    if (right.hasEqualSource(left)) {
      for (var j = 0; j < 2 * i + 1; j++) {
        alternative.getChild(startIndex).remove();
      }
      child.replace({
        type: 'Repetition',
        expression: i === 0 && right.node.type !== 'Repetition' ? right.node : {
          type: 'Group',
          capturing: false,
          expression: right.node
        },
        quantifier: {
          type: 'Quantifier',
          kind: 'Range',
          from: 2,
          to: 2,
          greedy: true
        }
      });
      return startIndex;
    }
    i++;
  }
  return index;
}

// (?:abc){2}abc -> (?:abc){3}
function combineWithPreviousRepetition(alternative, child, index) {
  var node = alternative.node;
  var i = 0;
  while (i < index) {
    var previousChild = alternative.getChild(i);
    if (previousChild.node.type === 'Repetition' && previousChild.node.quantifier.greedy) {
      var left = previousChild.getChild();
      var right = void 0;
      if (left.node.type === 'Group' && !left.node.capturing) {
        left = left.getChild();
      }
      if (i + 1 === index) {
        right = child;
        if (right.node.type === 'Group' && !right.node.capturing) {
          right = right.getChild();
        }
      } else {
        right = NodePath.getForNode({
          type: 'Alternative',
          expressions: [].concat(_toConsumableArray(node.expressions.slice(i + 1, index + 1)))
        });
      }
      if (left.hasEqualSource(right)) {
        for (var j = i; j < index; j++) {
          alternative.getChild(i + 1).remove();
        }
        increaseQuantifierByOne(previousChild.node.quantifier);
        return i;
      }
    }
    i++;
  }
  return index;
}

// abc(?:abc){2} -> (?:abc){3}
function combineRepetitionWithPrevious(alternative, child, index) {
  var node = alternative.node;
  if (child.node.type === 'Repetition' && child.node.quantifier.greedy) {
    var right = child.getChild();
    var left = void 0;
    if (right.node.type === 'Group' && !right.node.capturing) {
      right = right.getChild();
    }
    var rightLength = void 0;
    if (right.node.type === 'Alternative') {
      rightLength = right.node.expressions.length;
      left = NodePath.getForNode({
        type: 'Alternative',
        expressions: [].concat(_toConsumableArray(node.expressions.slice(index - rightLength, index)))
      });
    } else {
      rightLength = 1;
      left = alternative.getChild(index - 1);
      if (left.node.type === 'Group' && !left.node.capturing) {
        left = left.getChild();
      }
    }
    if (left.hasEqualSource(right)) {
      for (var j = index - rightLength; j < index; j++) {
        alternative.getChild(index - rightLength).remove();
      }
      increaseQuantifierByOne(child.node.quantifier);
      return index - rightLength;
    }
  }
  return index;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJBcnJheSIsImlzQXJyYXkiLCJpIiwiYXJyMiIsImxlbmd0aCIsImZyb20iLCJOb2RlUGF0aCIsInJlcXVpcmUiLCJfcmVxdWlyZSIsImluY3JlYXNlUXVhbnRpZmllckJ5T25lIiwibW9kdWxlIiwiZXhwb3J0cyIsIkFsdGVybmF0aXZlIiwicGF0aCIsIm5vZGUiLCJpbmRleCIsImV4cHJlc3Npb25zIiwiY2hpbGQiLCJnZXRDaGlsZCIsIk1hdGgiLCJtYXgiLCJjb21iaW5lUmVwZWF0aW5nUGF0dGVybkxlZnQiLCJjb21iaW5lV2l0aFByZXZpb3VzUmVwZXRpdGlvbiIsImNvbWJpbmVSZXBldGl0aW9uV2l0aFByZXZpb3VzIiwiYWx0ZXJuYXRpdmUiLCJuYlBvc3NpYmxlTGVuZ3RocyIsImNlaWwiLCJzdGFydEluZGV4IiwicmlnaHQiLCJsZWZ0IiwiZ2V0Rm9yTm9kZSIsInR5cGUiLCJjb25jYXQiLCJzbGljZSIsImhhc0VxdWFsU291cmNlIiwiaiIsInJlbW92ZSIsInJlcGxhY2UiLCJleHByZXNzaW9uIiwiY2FwdHVyaW5nIiwicXVhbnRpZmllciIsImtpbmQiLCJ0byIsImdyZWVkeSIsInByZXZpb3VzQ2hpbGQiLCJyaWdodExlbmd0aCJdLCJzb3VyY2VzIjpbImNvbWJpbmUtcmVwZWF0aW5nLXBhdHRlcm5zLXRyYW5zZm9ybS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQgRG1pdHJ5IFNvc2huaWtvdiA8ZG1pdHJ5LnNvc2huaWtvdkBnbWFpbC5jb20+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxudmFyIE5vZGVQYXRoID0gcmVxdWlyZSgnLi4vLi4vdHJhdmVyc2Uvbm9kZS1wYXRoJyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uLy4uL3RyYW5zZm9ybS91dGlscycpLFxuICAgIGluY3JlYXNlUXVhbnRpZmllckJ5T25lID0gX3JlcXVpcmUuaW5jcmVhc2VRdWFudGlmaWVyQnlPbmU7XG5cbi8qKlxuICogQSByZWdleHAtdHJlZSBwbHVnaW4gdG8gY29tYmluZSByZXBlYXRpbmcgcGF0dGVybnMuXG4gKlxuICogL15hYmNhYmNhYmMvIC0+IC9eYWJjezN9L1xuICogL14oPzphYmMpezJ9YWJjLyAtPiAvXig/OmFiYyl7M30vXG4gKiAvXmFiYyg/OmFiYyl7Mn0vIC0+IC9eKD86YWJjKXszfS9cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQWx0ZXJuYXRpdmU6IGZ1bmN0aW9uIEFsdGVybmF0aXZlKHBhdGgpIHtcbiAgICB2YXIgbm9kZSA9IHBhdGgubm9kZTtcblxuICAgIC8vIFdlIGNhbiBza2lwIHRoZSBmaXJzdCBjaGlsZFxuXG4gICAgdmFyIGluZGV4ID0gMTtcbiAgICB3aGlsZSAoaW5kZXggPCBub2RlLmV4cHJlc3Npb25zLmxlbmd0aCkge1xuICAgICAgdmFyIGNoaWxkID0gcGF0aC5nZXRDaGlsZChpbmRleCk7XG4gICAgICBpbmRleCA9IE1hdGgubWF4KDEsIGNvbWJpbmVSZXBlYXRpbmdQYXR0ZXJuTGVmdChwYXRoLCBjaGlsZCwgaW5kZXgpKTtcblxuICAgICAgaWYgKGluZGV4ID49IG5vZGUuZXhwcmVzc2lvbnMubGVuZ3RoKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IHBhdGguZ2V0Q2hpbGQoaW5kZXgpO1xuICAgICAgaW5kZXggPSBNYXRoLm1heCgxLCBjb21iaW5lV2l0aFByZXZpb3VzUmVwZXRpdGlvbihwYXRoLCBjaGlsZCwgaW5kZXgpKTtcblxuICAgICAgaWYgKGluZGV4ID49IG5vZGUuZXhwcmVzc2lvbnMubGVuZ3RoKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IHBhdGguZ2V0Q2hpbGQoaW5kZXgpO1xuICAgICAgaW5kZXggPSBNYXRoLm1heCgxLCBjb21iaW5lUmVwZXRpdGlvbldpdGhQcmV2aW91cyhwYXRoLCBjaGlsZCwgaW5kZXgpKTtcblxuICAgICAgaW5kZXgrKztcbiAgICB9XG4gIH1cbn07XG5cbi8vIGFiY2FiYyAtPiAoPzphYmMpezJ9XG5mdW5jdGlvbiBjb21iaW5lUmVwZWF0aW5nUGF0dGVybkxlZnQoYWx0ZXJuYXRpdmUsIGNoaWxkLCBpbmRleCkge1xuICB2YXIgbm9kZSA9IGFsdGVybmF0aXZlLm5vZGU7XG5cblxuICB2YXIgbmJQb3NzaWJsZUxlbmd0aHMgPSBNYXRoLmNlaWwoaW5kZXggLyAyKTtcbiAgdmFyIGkgPSAwO1xuXG4gIHdoaWxlIChpIDwgbmJQb3NzaWJsZUxlbmd0aHMpIHtcbiAgICB2YXIgc3RhcnRJbmRleCA9IGluZGV4IC0gMiAqIGkgLSAxO1xuICAgIHZhciByaWdodCA9IHZvaWQgMCxcbiAgICAgICAgbGVmdCA9IHZvaWQgMDtcblxuICAgIGlmIChpID09PSAwKSB7XG4gICAgICByaWdodCA9IGNoaWxkO1xuICAgICAgbGVmdCA9IGFsdGVybmF0aXZlLmdldENoaWxkKHN0YXJ0SW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByaWdodCA9IE5vZGVQYXRoLmdldEZvck5vZGUoe1xuICAgICAgICB0eXBlOiAnQWx0ZXJuYXRpdmUnLFxuICAgICAgICBleHByZXNzaW9uczogW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShub2RlLmV4cHJlc3Npb25zLnNsaWNlKGluZGV4IC0gaSwgaW5kZXgpKSwgW2NoaWxkLm5vZGVdKVxuICAgICAgfSk7XG5cbiAgICAgIGxlZnQgPSBOb2RlUGF0aC5nZXRGb3JOb2RlKHtcbiAgICAgICAgdHlwZTogJ0FsdGVybmF0aXZlJyxcbiAgICAgICAgZXhwcmVzc2lvbnM6IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkobm9kZS5leHByZXNzaW9ucy5zbGljZShzdGFydEluZGV4LCBpbmRleCAtIGkpKSlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyaWdodC5oYXNFcXVhbFNvdXJjZShsZWZ0KSkge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAyICogaSArIDE7IGorKykge1xuICAgICAgICBhbHRlcm5hdGl2ZS5nZXRDaGlsZChzdGFydEluZGV4KS5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQucmVwbGFjZSh7XG4gICAgICAgIHR5cGU6ICdSZXBldGl0aW9uJyxcbiAgICAgICAgZXhwcmVzc2lvbjogaSA9PT0gMCAmJiByaWdodC5ub2RlLnR5cGUgIT09ICdSZXBldGl0aW9uJyA/IHJpZ2h0Lm5vZGUgOiB7XG4gICAgICAgICAgdHlwZTogJ0dyb3VwJyxcbiAgICAgICAgICBjYXB0dXJpbmc6IGZhbHNlLFxuICAgICAgICAgIGV4cHJlc3Npb246IHJpZ2h0Lm5vZGVcbiAgICAgICAgfSxcbiAgICAgICAgcXVhbnRpZmllcjoge1xuICAgICAgICAgIHR5cGU6ICdRdWFudGlmaWVyJyxcbiAgICAgICAgICBraW5kOiAnUmFuZ2UnLFxuICAgICAgICAgIGZyb206IDIsXG4gICAgICAgICAgdG86IDIsXG4gICAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHN0YXJ0SW5kZXg7XG4gICAgfVxuXG4gICAgaSsrO1xuICB9XG5cbiAgcmV0dXJuIGluZGV4O1xufVxuXG4vLyAoPzphYmMpezJ9YWJjIC0+ICg/OmFiYyl7M31cbmZ1bmN0aW9uIGNvbWJpbmVXaXRoUHJldmlvdXNSZXBldGl0aW9uKGFsdGVybmF0aXZlLCBjaGlsZCwgaW5kZXgpIHtcbiAgdmFyIG5vZGUgPSBhbHRlcm5hdGl2ZS5ub2RlO1xuXG5cbiAgdmFyIGkgPSAwO1xuICB3aGlsZSAoaSA8IGluZGV4KSB7XG4gICAgdmFyIHByZXZpb3VzQ2hpbGQgPSBhbHRlcm5hdGl2ZS5nZXRDaGlsZChpKTtcblxuICAgIGlmIChwcmV2aW91c0NoaWxkLm5vZGUudHlwZSA9PT0gJ1JlcGV0aXRpb24nICYmIHByZXZpb3VzQ2hpbGQubm9kZS5xdWFudGlmaWVyLmdyZWVkeSkge1xuICAgICAgdmFyIGxlZnQgPSBwcmV2aW91c0NoaWxkLmdldENoaWxkKCk7XG4gICAgICB2YXIgcmlnaHQgPSB2b2lkIDA7XG5cbiAgICAgIGlmIChsZWZ0Lm5vZGUudHlwZSA9PT0gJ0dyb3VwJyAmJiAhbGVmdC5ub2RlLmNhcHR1cmluZykge1xuICAgICAgICBsZWZ0ID0gbGVmdC5nZXRDaGlsZCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaSArIDEgPT09IGluZGV4KSB7XG4gICAgICAgIHJpZ2h0ID0gY2hpbGQ7XG4gICAgICAgIGlmIChyaWdodC5ub2RlLnR5cGUgPT09ICdHcm91cCcgJiYgIXJpZ2h0Lm5vZGUuY2FwdHVyaW5nKSB7XG4gICAgICAgICAgcmlnaHQgPSByaWdodC5nZXRDaGlsZCgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByaWdodCA9IE5vZGVQYXRoLmdldEZvck5vZGUoe1xuICAgICAgICAgIHR5cGU6ICdBbHRlcm5hdGl2ZScsXG4gICAgICAgICAgZXhwcmVzc2lvbnM6IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkobm9kZS5leHByZXNzaW9ucy5zbGljZShpICsgMSwgaW5kZXggKyAxKSkpXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAobGVmdC5oYXNFcXVhbFNvdXJjZShyaWdodCkpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IGk7IGogPCBpbmRleDsgaisrKSB7XG4gICAgICAgICAgYWx0ZXJuYXRpdmUuZ2V0Q2hpbGQoaSArIDEpLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5jcmVhc2VRdWFudGlmaWVyQnlPbmUocHJldmlvdXNDaGlsZC5ub2RlLnF1YW50aWZpZXIpO1xuXG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGkrKztcbiAgfVxuICByZXR1cm4gaW5kZXg7XG59XG5cbi8vIGFiYyg/OmFiYyl7Mn0gLT4gKD86YWJjKXszfVxuZnVuY3Rpb24gY29tYmluZVJlcGV0aXRpb25XaXRoUHJldmlvdXMoYWx0ZXJuYXRpdmUsIGNoaWxkLCBpbmRleCkge1xuICB2YXIgbm9kZSA9IGFsdGVybmF0aXZlLm5vZGU7XG5cblxuICBpZiAoY2hpbGQubm9kZS50eXBlID09PSAnUmVwZXRpdGlvbicgJiYgY2hpbGQubm9kZS5xdWFudGlmaWVyLmdyZWVkeSkge1xuICAgIHZhciByaWdodCA9IGNoaWxkLmdldENoaWxkKCk7XG4gICAgdmFyIGxlZnQgPSB2b2lkIDA7XG5cbiAgICBpZiAocmlnaHQubm9kZS50eXBlID09PSAnR3JvdXAnICYmICFyaWdodC5ub2RlLmNhcHR1cmluZykge1xuICAgICAgcmlnaHQgPSByaWdodC5nZXRDaGlsZCgpO1xuICAgIH1cblxuICAgIHZhciByaWdodExlbmd0aCA9IHZvaWQgMDtcbiAgICBpZiAocmlnaHQubm9kZS50eXBlID09PSAnQWx0ZXJuYXRpdmUnKSB7XG4gICAgICByaWdodExlbmd0aCA9IHJpZ2h0Lm5vZGUuZXhwcmVzc2lvbnMubGVuZ3RoO1xuICAgICAgbGVmdCA9IE5vZGVQYXRoLmdldEZvck5vZGUoe1xuICAgICAgICB0eXBlOiAnQWx0ZXJuYXRpdmUnLFxuICAgICAgICBleHByZXNzaW9uczogW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShub2RlLmV4cHJlc3Npb25zLnNsaWNlKGluZGV4IC0gcmlnaHRMZW5ndGgsIGluZGV4KSkpXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmlnaHRMZW5ndGggPSAxO1xuICAgICAgbGVmdCA9IGFsdGVybmF0aXZlLmdldENoaWxkKGluZGV4IC0gMSk7XG4gICAgICBpZiAobGVmdC5ub2RlLnR5cGUgPT09ICdHcm91cCcgJiYgIWxlZnQubm9kZS5jYXB0dXJpbmcpIHtcbiAgICAgICAgbGVmdCA9IGxlZnQuZ2V0Q2hpbGQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobGVmdC5oYXNFcXVhbFNvdXJjZShyaWdodCkpIHtcbiAgICAgIGZvciAodmFyIGogPSBpbmRleCAtIHJpZ2h0TGVuZ3RoOyBqIDwgaW5kZXg7IGorKykge1xuICAgICAgICBhbHRlcm5hdGl2ZS5nZXRDaGlsZChpbmRleCAtIHJpZ2h0TGVuZ3RoKS5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgaW5jcmVhc2VRdWFudGlmaWVyQnlPbmUoY2hpbGQubm9kZS5xdWFudGlmaWVyKTtcblxuICAgICAgcmV0dXJuIGluZGV4IC0gcmlnaHRMZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiBpbmRleDtcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFlBQVk7O0FBRVosU0FBU0Esa0JBQWtCQSxDQUFDQyxHQUFHLEVBQUU7RUFBRSxJQUFJQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0YsR0FBRyxDQUFDLEVBQUU7SUFBRSxLQUFLLElBQUlHLENBQUMsR0FBRyxDQUFDLEVBQUVDLElBQUksR0FBR0gsS0FBSyxDQUFDRCxHQUFHLENBQUNLLE1BQU0sQ0FBQyxFQUFFRixDQUFDLEdBQUdILEdBQUcsQ0FBQ0ssTUFBTSxFQUFFRixDQUFDLEVBQUUsRUFBRTtNQUFFQyxJQUFJLENBQUNELENBQUMsQ0FBQyxHQUFHSCxHQUFHLENBQUNHLENBQUMsQ0FBQztJQUFFO0lBQUUsT0FBT0MsSUFBSTtFQUFFLENBQUMsTUFBTTtJQUFFLE9BQU9ILEtBQUssQ0FBQ0ssSUFBSSxDQUFDTixHQUFHLENBQUM7RUFBRTtBQUFFO0FBRWxNLElBQUlPLFFBQVEsR0FBR0MsT0FBTyxDQUFDLDBCQUEwQixDQUFDO0FBRWxELElB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