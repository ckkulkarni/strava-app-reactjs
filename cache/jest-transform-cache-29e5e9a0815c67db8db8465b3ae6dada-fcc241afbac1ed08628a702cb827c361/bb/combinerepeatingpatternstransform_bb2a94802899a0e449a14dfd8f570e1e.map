{"version":3,"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","NodePath","require","_require","increaseQuantifierByOne","module","exports","Alternative","path","node","index","expressions","child","getChild","Math","max","combineRepeatingPatternLeft","combineWithPreviousRepetition","combineRepetitionWithPrevious","alternative","nbPossibleLengths","ceil","startIndex","right","left","getForNode","type","concat","slice","hasEqualSource","j","remove","replace","expression","capturing","quantifier","kind","to","greedy","previousChild","rightLength"],"sources":["combine-repeating-patterns-transform.js"],"sourcesContent":["/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n'use strict';\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar NodePath = require('../../traverse/node-path');\n\nvar _require = require('../../transform/utils'),\n    increaseQuantifierByOne = _require.increaseQuantifierByOne;\n\n/**\n * A regexp-tree plugin to combine repeating patterns.\n *\n * /^abcabcabc/ -> /^abc{3}/\n * /^(?:abc){2}abc/ -> /^(?:abc){3}/\n * /^abc(?:abc){2}/ -> /^(?:abc){3}/\n */\n\nmodule.exports = {\n  Alternative: function Alternative(path) {\n    var node = path.node;\n\n    // We can skip the first child\n\n    var index = 1;\n    while (index < node.expressions.length) {\n      var child = path.getChild(index);\n      index = Math.max(1, combineRepeatingPatternLeft(path, child, index));\n\n      if (index >= node.expressions.length) {\n        break;\n      }\n\n      child = path.getChild(index);\n      index = Math.max(1, combineWithPreviousRepetition(path, child, index));\n\n      if (index >= node.expressions.length) {\n        break;\n      }\n\n      child = path.getChild(index);\n      index = Math.max(1, combineRepetitionWithPrevious(path, child, index));\n\n      index++;\n    }\n  }\n};\n\n// abcabc -> (?:abc){2}\nfunction combineRepeatingPatternLeft(alternative, child, index) {\n  var node = alternative.node;\n\n\n  var nbPossibleLengths = Math.ceil(index / 2);\n  var i = 0;\n\n  while (i < nbPossibleLengths) {\n    var startIndex = index - 2 * i - 1;\n    var right = void 0,\n        left = void 0;\n\n    if (i === 0) {\n      right = child;\n      left = alternative.getChild(startIndex);\n    } else {\n      right = NodePath.getForNode({\n        type: 'Alternative',\n        expressions: [].concat(_toConsumableArray(node.expressions.slice(index - i, index)), [child.node])\n      });\n\n      left = NodePath.getForNode({\n        type: 'Alternative',\n        expressions: [].concat(_toConsumableArray(node.expressions.slice(startIndex, index - i)))\n      });\n    }\n\n    if (right.hasEqualSource(left)) {\n      for (var j = 0; j < 2 * i + 1; j++) {\n        alternative.getChild(startIndex).remove();\n      }\n\n      child.replace({\n        type: 'Repetition',\n        expression: i === 0 && right.node.type !== 'Repetition' ? right.node : {\n          type: 'Group',\n          capturing: false,\n          expression: right.node\n        },\n        quantifier: {\n          type: 'Quantifier',\n          kind: 'Range',\n          from: 2,\n          to: 2,\n          greedy: true\n        }\n      });\n      return startIndex;\n    }\n\n    i++;\n  }\n\n  return index;\n}\n\n// (?:abc){2}abc -> (?:abc){3}\nfunction combineWithPreviousRepetition(alternative, child, index) {\n  var node = alternative.node;\n\n\n  var i = 0;\n  while (i < index) {\n    var previousChild = alternative.getChild(i);\n\n    if (previousChild.node.type === 'Repetition' && previousChild.node.quantifier.greedy) {\n      var left = previousChild.getChild();\n      var right = void 0;\n\n      if (left.node.type === 'Group' && !left.node.capturing) {\n        left = left.getChild();\n      }\n\n      if (i + 1 === index) {\n        right = child;\n        if (right.node.type === 'Group' && !right.node.capturing) {\n          right = right.getChild();\n        }\n      } else {\n        right = NodePath.getForNode({\n          type: 'Alternative',\n          expressions: [].concat(_toConsumableArray(node.expressions.slice(i + 1, index + 1)))\n        });\n      }\n\n      if (left.hasEqualSource(right)) {\n        for (var j = i; j < index; j++) {\n          alternative.getChild(i + 1).remove();\n        }\n\n        increaseQuantifierByOne(previousChild.node.quantifier);\n\n        return i;\n      }\n    }\n\n    i++;\n  }\n  return index;\n}\n\n// abc(?:abc){2} -> (?:abc){3}\nfunction combineRepetitionWithPrevious(alternative, child, index) {\n  var node = alternative.node;\n\n\n  if (child.node.type === 'Repetition' && child.node.quantifier.greedy) {\n    var right = child.getChild();\n    var left = void 0;\n\n    if (right.node.type === 'Group' && !right.node.capturing) {\n      right = right.getChild();\n    }\n\n    var rightLength = void 0;\n    if (right.node.type === 'Alternative') {\n      rightLength = right.node.expressions.length;\n      left = NodePath.getForNode({\n        type: 'Alternative',\n        expressions: [].concat(_toConsumableArray(node.expressions.slice(index - rightLength, index)))\n      });\n    } else {\n      rightLength = 1;\n      left = alternative.getChild(index - 1);\n      if (left.node.type === 'Group' && !left.node.capturing) {\n        left = left.getChild();\n      }\n    }\n\n    if (left.hasEqualSource(right)) {\n      for (var j = index - rightLength; j < index; j++) {\n        alternative.getChild(index - rightLength).remove();\n      }\n\n      increaseQuantifierByOne(child.node.quantifier);\n\n      return index - rightLength;\n    }\n  }\n  return index;\n}"],"mappings":"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"}