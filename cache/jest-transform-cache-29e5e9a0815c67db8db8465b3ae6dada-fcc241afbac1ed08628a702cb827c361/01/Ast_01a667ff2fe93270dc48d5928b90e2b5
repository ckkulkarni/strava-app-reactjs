7e9173484e4fa04a490cae5bac4f5938
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TokenType = exports.Token = exports.NodeType = exports.Node = exports.purposeOf = exports.symbolOf = void 0;
var escapeCharacter = '\\';
var alternationCharacter = '/';
var beginParameterCharacter = '{';
var endParameterCharacter = '}';
var beginOptionalCharacter = '(';
var endOptionalCharacter = ')';
function symbolOf(token) {
  switch (token) {
    case TokenType.beginOptional:
      return beginOptionalCharacter;
    case TokenType.endOptional:
      return endOptionalCharacter;
    case TokenType.beginParameter:
      return beginParameterCharacter;
    case TokenType.endParameter:
      return endParameterCharacter;
    case TokenType.alternation:
      return alternationCharacter;
  }
  return '';
}
exports.symbolOf = symbolOf;
function purposeOf(token) {
  switch (token) {
    case TokenType.beginOptional:
    case TokenType.endOptional:
      return 'optional text';
    case TokenType.beginParameter:
    case TokenType.endParameter:
      return 'a parameter';
    case TokenType.alternation:
      return 'alternation';
  }
  return '';
}
exports.purposeOf = purposeOf;
var Node = /** @class */function () {
  function Node(type, nodes, token, start, end) {
    this.type = type;
    this.nodes = nodes;
    this.token = token;
    this.start = start;
    this.end = end;
    if (nodes === undefined && token === undefined) {
      throw new Error('Either nodes or token must be defined');
    }
  }
  Node.prototype.text = function () {
    if (this.nodes && this.nodes.length > 0) {
      return this.nodes.map(function (value) {
        return value.text();
      }).join('');
    }
    return this.token || '';
  };
  return Node;
}();
exports.Node = Node;
var NodeType;
(function (NodeType) {
  NodeType["text"] = "TEXT_NODE";
  NodeType["optional"] = "OPTIONAL_NODE";
  NodeType["alternation"] = "ALTERNATION_NODE";
  NodeType["alternative"] = "ALTERNATIVE_NODE";
  NodeType["parameter"] = "PARAMETER_NODE";
  NodeType["expression"] = "EXPRESSION_NODE";
})(NodeType = exports.NodeType || (exports.NodeType = {}));
var Token = /** @class */function () {
  function Token(type, text, start, end) {
    this.type = type;
    this.text = text;
    this.start = start;
    this.end = end;
  }
  Token.isEscapeCharacter = function (codePoint) {
    return codePoint == escapeCharacter;
  };
  Token.canEscape = function (codePoint) {
    if (codePoint == ' ') {
      // TODO: Unicode whitespace?
      return true;
    }
    switch (codePoint) {
      case escapeCharacter:
        return true;
      case alternationCharacter:
        return true;
      case beginParameterCharacter:
        return true;
      case endParameterCharacter:
        return true;
      case beginOptionalCharacter:
        return true;
      case endOptionalCharacter:
        return true;
    }
    return false;
  };
  Token.typeOf = function (codePoint) {
    if (codePoint == ' ') {
      // TODO: Unicode whitespace?
      return TokenType.whiteSpace;
    }
    switch (codePoint) {
      case alternationCharacter:
        return TokenType.alternation;
      case beginParameterCharacter:
        return TokenType.beginParameter;
      case endParameterCharacter:
        return TokenType.endParameter;
      case beginOptionalCharacter:
        return TokenType.beginOptional;
      case endOptionalCharacter:
        return TokenType.endOptional;
    }
    return TokenType.text;
  };
  return Token;
}();
exports.Token = Token;
var TokenType;
(function (TokenType) {
  TokenType["startOfLine"] = "START_OF_LINE";
  TokenType["endOfLine"] = "END_OF_LINE";
  TokenType["whiteSpace"] = "WHITE_SPACE";
  TokenType["beginOptional"] = "BEGIN_OPTIONAL";
  TokenType["endOptional"] = "END_OPTIONAL";
  TokenType["beginParameter"] = "BEGIN_PARAMETER";
  TokenType["endParameter"] = "END_PARAMETER";
  TokenType["alternation"] = "ALTERNATION";
  TokenType["text"] = "TEXT";
})(TokenType = exports.TokenType || (exports.TokenType = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJlc2NhcGVDaGFyYWN0ZXIiLCJhbHRlcm5hdGlvbkNoYXJhY3RlciIsImJlZ2luUGFyYW1ldGVyQ2hhcmFjdGVyIiwiZW5kUGFyYW1ldGVyQ2hhcmFjdGVyIiwiYmVnaW5PcHRpb25hbENoYXJhY3RlciIsImVuZE9wdGlvbmFsQ2hhcmFjdGVyIiwic3ltYm9sT2YiLCJ0b2tlbiIsIlRva2VuVHlwZSIsImJlZ2luT3B0aW9uYWwiLCJlbmRPcHRpb25hbCIsImJlZ2luUGFyYW1ldGVyIiwiZW5kUGFyYW1ldGVyIiwiYWx0ZXJuYXRpb24iLCJleHBvcnRzIiwicHVycG9zZU9mIiwiTm9kZSIsInR5cGUiLCJub2RlcyIsInN0YXJ0IiwiZW5kIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJwcm90b3R5cGUiLCJ0ZXh0IiwibGVuZ3RoIiwibWFwIiwidmFsdWUiLCJqb2luIiwiTm9kZVR5cGUiLCJUb2tlbiIsImlzRXNjYXBlQ2hhcmFjdGVyIiwiY29kZVBvaW50IiwiY2FuRXNjYXBlIiwidHlwZU9mIiwid2hpdGVTcGFjZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9Bc3QudHMiXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU1BLGVBQWUsR0FBRyxJQUFJO0FBQzVCLElBQU1DLG9CQUFvQixHQUFHLEdBQUc7QUFDaEMsSUFBTUMsdUJBQXVCLEdBQUcsR0FBRztBQUNuQyxJQUFNQyxxQkFBcUIsR0FBRyxHQUFHO0FBQ2pDLElBQU1DLHNCQUFzQixHQUFHLEdBQUc7QUFDbEMsSUFBTUMsb0JBQW9CLEdBQUcsR0FBRztBQUVoQyxTQUFnQkMsUUFBUUEsQ0FBQ0MsS0FBZ0I7RUFDdkMsUUFBUUEsS0FBSztJQUNYLEtBQUtDLFNBQVMsQ0FBQ0MsYUFBYTtNQUMxQixPQUFPTCxzQkFBc0I7SUFDL0IsS0FBS0ksU0FBUyxDQUFDRSxXQUFXO01BQ3hCLE9BQU9MLG9CQUFvQjtJQUM3QixLQUFLRyxTQUFTLENBQUNHLGNBQWM7TUFD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