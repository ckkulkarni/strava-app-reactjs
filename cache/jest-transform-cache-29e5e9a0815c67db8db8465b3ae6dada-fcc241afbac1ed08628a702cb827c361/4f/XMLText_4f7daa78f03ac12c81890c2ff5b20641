bbece9a853963caee12680df2eee32f0
"use strict";

// Generated by CoffeeScript 2.4.1
(function () {
  var NodeType, XMLCharacterData, XMLText;
  NodeType = require('./NodeType');
  XMLCharacterData = require('./XMLCharacterData');

  // Represents a text node
  module.exports = XMLText = function () {
    class XMLText extends XMLCharacterData {
      // Initializes a new instance of `XMLText`

      // `text` element text
      constructor(parent, text) {
        super(parent);
        if (text == null) {
          throw new Error("Missing element text. " + this.debugInfo());
        }
        this.name = "#text";
        this.type = NodeType.Text;
        this.value = this.stringify.text(text);
      }

      // Creates and returns a deep clone of `this`
      clone() {
        return Object.create(this);
      }

      // Converts the XML fragment to string

      // `options.pretty` pretty prints the result
      // `options.indent` indentation for pretty print
      // `options.offset` how many indentations to add to every line for pretty print
      // `options.newline` newline sequence for pretty print
      toString(options) {
        return this.options.writer.text(this, this.options.writer.filterOptions(options));
      }

      // DOM level 1 functions to be implemented later
      splitText(offset) {
        throw new Error("This DOM method is not implemented." + this.debugInfo());
      }

      // DOM level 3 functions to be implemented later
      replaceWholeText(content) {
        throw new Error("This DOM method is not implemented." + this.debugInfo());
      }
    }
    ;

    // DOM level 3
    Object.defineProperty(XMLText.prototype, 'isElementContentWhitespace', {
      get: function () {
        throw new Error("This DOM method is not implemented." + this.debugInfo());
      }
    });
    Object.defineProperty(XMLText.prototype, 'wholeText', {
      get: function () {
        var next, prev, str;
        str = '';
        prev = this.previousSibling;
        while (prev) {
          str = prev.data + str;
          prev = prev.previousSibling;
        }
        str += this.data;
        next = this.nextSibling;
        while (next) {
          str = str + next.data;
          next = next.nextSibling;
        }
        return str;
      }
    });
    return XMLText;
  }.call(this);
}).call(void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlVHlwZSIsIlhNTENoYXJhY3RlckRhdGEiLCJYTUxUZXh0IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb25zdHJ1Y3RvciIsInBhcmVudCIsInRleHQiLCJFcnJvciIsImRlYnVnSW5mbyIsIm5hbWUiLCJ0eXBlIiwiVGV4dCIsInZhbHVlIiwic3RyaW5naWZ5IiwiY2xvbmUiLCJPYmplY3QiLCJjcmVhdGUiLCJ0b1N0cmluZyIsIm9wdGlvbnMiLCJ3cml0ZXIiLCJmaWx0ZXJPcHRpb25zIiwic3BsaXRUZXh0Iiwib2Zmc2V0IiwicmVwbGFjZVdob2xlVGV4dCIsImNvbnRlbnQiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvdHlwZSIsImdldCIsIm5leHQiLCJwcmV2Iiwic3RyIiwicHJldmlvdXNTaWJsaW5nIiwiZGF0YSIsIm5leHRTaWJsaW5nIiwiY2FsbCJdLCJzb3VyY2VzIjpbIlhNTFRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAyLjQuMVxuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFhNTENoYXJhY3RlckRhdGEsIFhNTFRleHQ7XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MQ2hhcmFjdGVyRGF0YSA9IHJlcXVpcmUoJy4vWE1MQ2hhcmFjdGVyRGF0YScpO1xuXG4gIC8vIFJlcHJlc2VudHMgYSB0ZXh0IG5vZGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxUZXh0ID0gKGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzIFhNTFRleHQgZXh0ZW5kcyBYTUxDaGFyYWN0ZXJEYXRhIHtcbiAgICAgIC8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIGBYTUxUZXh0YFxuXG4gICAgICAvLyBgdGV4dGAgZWxlbWVudCB0ZXh0XG4gICAgICBjb25zdHJ1Y3RvcihwYXJlbnQsIHRleHQpIHtcbiAgICAgICAgc3VwZXIocGFyZW50KTtcbiAgICAgICAgaWYgKHRleHQgPT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgZWxlbWVudCB0ZXh0LiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmFtZSA9IFwiI3RleHRcIjtcbiAgICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuVGV4dDtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5LnRleHQodGV4dCk7XG4gICAgICB9XG5cbiAgICAgIC8vIENyZWF0ZXMgYW5kIHJldHVybnMgYSBkZWVwIGNsb25lIG9mIGB0aGlzYFxuICAgICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICAvLyBDb252ZXJ0cyB0aGUgWE1MIGZyYWdtZW50IHRvIHN0cmluZ1xuXG4gICAgICAvLyBgb3B0aW9ucy5wcmV0dHlgIHByZXR0eSBwcmludHMgdGhlIHJlc3VsdFxuICAgICAgLy8gYG9wdGlvbnMuaW5kZW50YCBpbmRlbnRhdGlvbiBmb3IgcHJldHR5IHByaW50XG4gICAgICAvLyBgb3B0aW9ucy5vZmZzZXRgIGhvdyBtYW55IGluZGVudGF0aW9ucyB0byBhZGQgdG8gZXZlcnkgbGluZSBmb3IgcHJldHR5IHByaW50XG4gICAgICAvLyBgb3B0aW9ucy5uZXdsaW5lYCBuZXdsaW5lIHNlcXVlbmNlIGZvciBwcmV0dHkgcHJpbnRcbiAgICAgIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIudGV4dCh0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgICAgfVxuXG4gICAgICAvLyBET00gbGV2ZWwgMSBmdW5jdGlvbnMgdG8gYmUgaW1wbGVtZW50ZWQgbGF0ZXJcbiAgICAgIHNwbGl0VGV4dChvZmZzZXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuXG4gICAgICAvLyBET00gbGV2ZWwgMyBmdW5jdGlvbnMgdG8gYmUgaW1wbGVtZW50ZWQgbGF0ZXJcbiAgICAgIHJlcGxhY2VXaG9sZVRleHQoY29udGVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG5cbiAgICB9O1xuXG4gICAgLy8gRE9NIGxldmVsIDNcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MVGV4dC5wcm90b3R5cGUsICdpc0VsZW1lbnRDb250ZW50V2hpdGVzcGFjZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgRE9NIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQuXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxUZXh0LnByb3RvdHlwZSwgJ3dob2xlVGV4dCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBuZXh0LCBwcmV2LCBzdHI7XG4gICAgICAgIHN0ciA9ICcnO1xuICAgICAgICBwcmV2ID0gdGhpcy5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgIHdoaWxlIChwcmV2KSB7XG4gICAgICAgICAgc3RyID0gcHJldi5kYXRhICsgc3RyO1xuICAgICAgICAgIHByZXYgPSBwcmV2LnByZXZpb3VzU2libGluZztcbiAgICAgICAgfVxuICAgICAgICBzdHIgKz0gdGhpcy5kYXRhO1xuICAgICAgICBuZXh0ID0gdGhpcy5uZXh0U2libGluZztcbiAgICAgICAgd2hpbGUgKG5leHQpIHtcbiAgICAgICAgICBzdHIgPSBzdHIgKyBuZXh0LmRhdGE7XG4gICAgICAgICAgbmV4dCA9IG5leHQubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBYTUxUZXh0O1xuXG4gIH0pLmNhbGwodGhpcyk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSxDQUFDLFlBQVc7RUFDVixJQUFJQSxRQUFRLEVBQUVDLGdCQUFnQixFQUFFQyxPQUFPO0VBRXZDRixRQUFRLEdBQUdHLE9BQU8sQ0FBQyxZQUFZLENBQUM7RUFFaENGLGdCQUFnQixHQUFHRSxPQUFPLENBQUMsb0JBQW9CLENBQUM7O0VBRWhEO0VBQ0FDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHSCxPQUFPLEdBQUksWUFBVztJQUNyQyxNQUFNQSxPQUFPLFNBQVNELGdCQUFnQixDQUFDO01BQ3JDOztNQUVBO01BQ0FLLFdBQVdBLENBQUNDLE1BQU0sRUFBRUMsSUFBSSxFQUFFO1FBQ3hCLEtBQUssQ0FBQ0QsTUFBTSxDQUFDO1FBQ2IsSUFBSUMsSUFBSSxJQUFJLElBQUksRUFBRTtVQUNoQixNQUFNLElBQUlDLEtBQUssQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLENBQUNDLFNBQVMsRUFBRSxDQUFDO1FBQzlEO1FBQ0EsSUFBSSxDQUFDQyxJQUFJLEdBQUcsT0FBTztRQUNuQixJQUFJLENBQUNDLElBQUksR0FBR1osUUFBUSxDQUFDYSxJQUFJO1FBQ3pCLElBQUksQ0FBQ0MsS0FBSyxHQUFHLElBQUksQ0FBQ0MsU0FBUyxDQUFDUCxJQUFJLENBQUNBLElBQUksQ0FBQztNQUN4Qzs7TUFFQTtNQUNBUSxLQUFLQSxDQUFBLEVBQUc7UUFDTixPQUFPQyxNQUFNLENBQUNDLE1BQU0sQ0FBQyxJQUFJLENBQUM7TUFDNUI7O01BRUE7O01BRUE7TUFDQTtNQUNBO01BQ0E7TUFDQUMsUUFBUUEsQ0FBQ0MsT0FBTyxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUNDLE1BQU0sQ0FBQ2IsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUNZLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxhQUFhLENBQUNGLE9BQU8sQ0FBQyxDQUFDO01BQ25GOztNQUVBO01BQ0FHLFNBQVNBLENBQUNDLE1BQU0sRUFBRTtRQUNoQixNQUFNLElBQUlmLEtBQUssQ0FBQyxxQ0FBcUMsR0FBRyxJQUFJLENBQUNDLFNBQVMsRUFBRSxDQUFDO01BQzNFOztNQUVBO01BQ0FlLGdCQUFnQkEsQ0FBQ0MsT0FBTyxFQUFFO1FBQ3hCLE1BQU0sSUFBSWpCLEtBQUssQ0FBQyxxQ0FBcUMsR0FBRyxJQUFJLENBQUNDLFNBQVMsRUFBRSxDQUFDO01BQzNFO0lBRUY7SUFBQzs7SUFFRDtJQUNBTyxNQUFNLENBQUNVLGNBQWMsQ0FBQ3pCLE9BQU8sQ0FBQzBCLFNBQVMsRUFBRSw0QkFBNEIsRUFBRTtNQUNyRUMsR0FBRyxFQUFFLFNBQUFBLENBQUEsRUFBVztRQUNkLE1BQU0sSUFBSXBCLEtBQUssQ0FBQyxxQ0FBcUMsR0FBRyxJQUFJLENBQUNDLFNBQVMsRUFBRSxDQUFDO01BQzNFO0lBQ0YsQ0FBQyxDQUFDO0lBRUZPLE1BQU0sQ0FBQ1UsY0FBYyxDQUFDekIsT0FBTyxDQUFDMEIsU0FBUyxFQUFFLFdBQVcsRUFBRTtNQUNwREMsR0FBRyxFQUFFLFNBQUFBLENBQUEsRUFBVztRQUNkLElBQUlDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxHQUFHO1FBQ25CQSxHQUFHLEdBQUcsRUFBRTtRQUNSRCxJQUFJLEdBQUcsSUFBSSxDQUFDRSxlQUFlO1FBQzNCLE9BQU9GLElBQUksRUFBRTtVQUNYQyxHQUFHLEdBQUdELElBQUksQ0FBQ0csSUFBSSxHQUFHRixHQUFHO1VBQ3JCRCxJQUFJLEdBQUdBLElBQUksQ0FBQ0UsZUFBZTtRQUM3QjtRQUNBRCxHQUFHLElBQUksSUFBSSxDQUFDRSxJQUFJO1FBQ2hCSixJQUFJLEdBQUcsSUFBSSxDQUFDSyxXQUFXO1FBQ3ZCLE9BQU9MLElBQUksRUFBRTtVQUNYRSxHQUFHLEdBQUdBLEdBQUcsR0FBR0YsSUFBSSxDQUFDSSxJQUFJO1VBQ3JCSixJQUFJLEdBQUdBLElBQUksQ0FBQ0ssV0FBVztRQUN6QjtRQUNBLE9BQU9ILEdBQUc7TUFDWjtJQUNGLENBQUMsQ0FBQztJQUVGLE9BQU85QixPQUFPO0VBRWhCLENBQUMsQ0FBRWtDLElBQUksQ0FBQyxJQUFJLENBQUM7QUFFZixDQUFDLEVBQUVBLElBQUksUUFBTSJ9