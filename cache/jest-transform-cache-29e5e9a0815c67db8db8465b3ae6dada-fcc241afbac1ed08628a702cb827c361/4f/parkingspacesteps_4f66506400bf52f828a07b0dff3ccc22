ccf085b9d636b77a7dd78d19ebd13954
"use strict";

var _ParkingSpace = _interopRequireDefault(require("../../ParkingSpace"));
var _jestCucumber = require("jest-cucumber");
var _react = require("@testing-library/react");
var _react2 = _interopRequireDefault(require("react"));
require("text-encoding");
var _parkingSlice = _interopRequireWildcard(require("../../redux/reducer/parkingSlice"));
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _reactRouterDom = require("react-router-dom");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/parkingspace.feature");
let store;
(0, _jestCucumber.defineFeature)(feature, test => {
  test("Add a new parking space", ({
    given,
    when,
    then
  }) => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        parkingSpaces: _parkingSlice.default
      }
    });
    const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
    given("that there is a Parking Space Component", () => {
      expect(screen).toBeTruthy();
    });
    when('I click on the "Add Space" button', () => {
      const addSpace = screen.getAllByTestId("addSpace");
      _react.fireEvent.click(addSpace[0]);
    });
    then("a new parking space should be added to the list of available spaces", () => {
      const addSpace = screen.getAllByTestId("addSpace");
      (0, _react.act)(() => {
        _react.fireEvent.click(addSpace[0]);
        store.dispatch((0, _parkingSlice.addToParkingSpace)());
      });
    });
  });
  test("Remove an existing parking space", ({
    given,
    when,
    then,
    and
  }) => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        parkingSpaces: _parkingSlice.default
      }
    });
    const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
    given("that there is a Parking Space Component", () => {
      expect(screen).toBeTruthy();
    });
    and("there is more than one parking space available", () => {
      const addSpace = screen.getAllByTestId("addSpace");
      (0, _react.act)(() => {
        _react.fireEvent.click(addSpace[0]);
        store.dispatch((0, _parkingSlice.addToParkingSpace)());
      });
      const numSpaces = store.getState().parkingSpaces.numSpaces;
      expect(numSpaces).toBeGreaterThan(1);
    });
    //     when('I click on the "Remove Space" button', () => {
    //       const removeSpace = screen.getAllByTestId("removeSpace");
    //       act(() => {
    //         fireEvent.click(removeSpace[0]);
    //       });
    //     });
    //     then(
    //       "a parking space should be removed from the list of available spaces",
    //       () => {
    //         const numSpaces = store.getState().parkingSpaces.numSpaces;
    //         expect(numSpaces).toBeGreaterThan(0);
    //         expect(numSpaces).toBeLessThanOrEqual(1);
    //       }
    //     );
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUGFya2luZ1NwYWNlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfamVzdEN1Y3VtYmVyIiwiX3JlYWN0IiwiX3JlYWN0MiIsIl9wYXJraW5nU2xpY2UiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9yZWFjdFJlZHV4IiwiX3Rvb2xraXQiLCJfcmVhY3RSb3V0ZXJEb20iLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwic3RvcmUiLCJkZWZpbmVGZWF0dXJlIiwidGVzdCIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJjb25maWd1cmVTdG9yZSIsInJlZHVjZXIiLCJwYXJraW5nU3BhY2VzIiwicGFya2luZ1NsaWNlIiwic2NyZWVuIiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIiwiTWVtb3J5Um91dGVyIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsImFkZFNwYWNlIiwiZ2V0QWxsQnlUZXN0SWQiLCJmaXJlRXZlbnQiLCJjbGljayIsImFjdCIsImRpc3BhdGNoIiwiYWRkVG9QYXJraW5nU3BhY2UiLCJhbmQiLCJCcm93c2VyUm91dGVyIiwibnVtU3BhY2VzIiwiZ2V0U3RhdGUiLCJ0b0JlR3JlYXRlclRoYW4iXSwic291cmNlcyI6WyJwYXJraW5nc3BhY2Uuc3RlcHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQYXJraW5nU3BhY2UgZnJvbSBcIi4uLy4uL1BhcmtpbmdTcGFjZVwiO1xyXG5pbXBvcnQgUGF5bWVudFNjcmVlbiBmcm9tIFwiLi4vLi4vUGF5bWVudFNjcmVlblwiO1xyXG5pbXBvcnQgeyBkZWZpbmVGZWF0dXJlLCBsb2FkRmVhdHVyZSB9IGZyb20gXCJqZXN0LWN1Y3VtYmVyXCI7XHJcbmltcG9ydCB7IGZpcmVFdmVudCwgcmVuZGVyLCB3YWl0Rm9yLCBhY3QgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBcInRleHQtZW5jb2RpbmdcIjtcclxuaW1wb3J0IHBhcmtpbmdTbGljZSwge1xyXG4gIGluaXRpYWxpemVQYXJraW5nTG90LFxyXG4gIGFkZFRvUGFya2luZ1NwYWNlLFxyXG59IGZyb20gXCIuLi8uLi9yZWR1eC9yZWR1Y2VyL3BhcmtpbmdTbGljZVwiO1xyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBjb25maWd1cmVTdG9yZSB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XHJcbmltcG9ydCB7XHJcbiAgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsXHJcbiAgUm91dGVzLFxyXG4gIFJvdXRlLFxyXG4gIE1lbW9yeVJvdXRlcixcclxufSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgQmFzZSBmcm9tIFwiLi8uLi8uLi9CYXNlXCI7XHJcblxyXG5jb25zdCBmZWF0dXJlID0gbG9hZEZlYXR1cmUoXCJzcmMvY29tcG9uZW50cy9mZWF0dXJlcy9wYXJraW5nc3BhY2UuZmVhdHVyZVwiKTtcclxubGV0IHN0b3JlOiBhbnk7XHJcbmRlZmluZUZlYXR1cmUoZmVhdHVyZSwgKHRlc3QpID0+IHtcclxuICB0ZXN0KFwiQWRkIGEgbmV3IHBhcmtpbmcgc3BhY2VcIiwgKHsgZ2l2ZW4sIHdoZW4sIHRoZW4gfSkgPT4ge1xyXG4gICAgc3RvcmUgPSBjb25maWd1cmVTdG9yZSh7XHJcbiAgICAgIHJlZHVjZXI6IHtcclxuICAgICAgICBwYXJraW5nU3BhY2VzOiBwYXJraW5nU2xpY2UsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlcihcclxuICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICAgICAgPE1lbW9yeVJvdXRlcj5cclxuICAgICAgICAgIDxQYXJraW5nU3BhY2UgLz5cclxuICAgICAgICA8L01lbW9yeVJvdXRlcj5cclxuICAgICAgPC9Qcm92aWRlcj5cclxuICAgICk7XHJcbiAgICBnaXZlbihcInRoYXQgdGhlcmUgaXMgYSBQYXJraW5nIFNwYWNlIENvbXBvbmVudFwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4pLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gICAgd2hlbignSSBjbGljayBvbiB0aGUgXCJBZGQgU3BhY2VcIiBidXR0b24nLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGFkZFNwYWNlID0gc2NyZWVuLmdldEFsbEJ5VGVzdElkKFwiYWRkU3BhY2VcIik7XHJcbiAgICAgIGZpcmVFdmVudC5jbGljayhhZGRTcGFjZVswXSk7XHJcbiAgICB9KTtcclxuICAgIHRoZW4oXHJcbiAgICAgIFwiYSBuZXcgcGFya2luZyBzcGFjZSBzaG91bGQgYmUgYWRkZWQgdG8gdGhlIGxpc3Qgb2YgYXZhaWxhYmxlIHNwYWNlc1wiLFxyXG4gICAgICAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYWRkU3BhY2UgPSBzY3JlZW4uZ2V0QWxsQnlUZXN0SWQoXCJhZGRTcGFjZVwiKTtcclxuICAgICAgICBhY3QoKCkgPT4ge1xyXG4gICAgICAgICAgZmlyZUV2ZW50LmNsaWNrKGFkZFNwYWNlWzBdKTtcclxuICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKGFkZFRvUGFya2luZ1NwYWNlKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH0pO1xyXG4gIHRlc3QoXCJSZW1vdmUgYW4gZXhpc3RpbmcgcGFya2luZyBzcGFjZVwiLCAoeyBnaXZlbiwgd2hlbiwgdGhlbiwgYW5kIH0pID0+IHtcclxuICAgIHN0b3JlID0gY29uZmlndXJlU3RvcmUoe1xyXG4gICAgICByZWR1Y2VyOiB7XHJcbiAgICAgICAgcGFya2luZ1NwYWNlczogcGFya2luZ1NsaWNlLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxyXG4gICAgICAgIDxSb3V0ZXI+XHJcbiAgICAgICAgICA8UGFya2luZ1NwYWNlIC8+XHJcbiAgICAgICAgPC9Sb3V0ZXI+XHJcbiAgICAgIDwvUHJvdmlkZXI+XHJcbiAgICApO1xyXG4gICAgZ2l2ZW4oXCJ0aGF0IHRoZXJlIGlzIGEgUGFya2luZyBTcGFjZSBDb21wb25lbnRcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc2NyZWVuKS50b0JlVHJ1dGh5KCk7XHJcbiAgICB9KTtcclxuICAgIGFuZChcInRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgcGFya2luZyBzcGFjZSBhdmFpbGFibGVcIiwgKCkgPT4ge1xyXG4gICAgICBjb25zdCBhZGRTcGFjZSA9IHNjcmVlbi5nZXRBbGxCeVRlc3RJZChcImFkZFNwYWNlXCIpO1xyXG4gICAgICBhY3QoKCkgPT4ge1xyXG4gICAgICAgIGZpcmVFdmVudC5jbGljayhhZGRTcGFjZVswXSk7XHJcbiAgICAgICAgc3RvcmUuZGlzcGF0Y2goYWRkVG9QYXJraW5nU3BhY2UoKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zdCBudW1TcGFjZXMgPSBzdG9yZS5nZXRTdGF0ZSgpLnBhcmtpbmdTcGFjZXMubnVtU3BhY2VzO1xyXG4gICAgICBleHBlY3QobnVtU3BhY2VzKS50b0JlR3JlYXRlclRoYW4oMSk7XHJcbiAgICB9KTtcclxuICAgIC8vICAgICB3aGVuKCdJIGNsaWNrIG9uIHRoZSBcIlJlbW92ZSBTcGFjZVwiIGJ1dHRvbicsICgpID0+IHtcclxuICAgIC8vICAgICAgIGNvbnN0IHJlbW92ZVNwYWNlID0gc2NyZWVuLmdldEFsbEJ5VGVzdElkKFwicmVtb3ZlU3BhY2VcIik7XHJcbiAgICAvLyAgICAgICBhY3QoKCkgPT4ge1xyXG4gICAgLy8gICAgICAgICBmaXJlRXZlbnQuY2xpY2socmVtb3ZlU3BhY2VbMF0pO1xyXG4gICAgLy8gICAgICAgfSk7XHJcbiAgICAvLyAgICAgfSk7XHJcbiAgICAvLyAgICAgdGhlbihcclxuICAgIC8vICAgICAgIFwiYSBwYXJraW5nIHNwYWNlIHNob3VsZCBiZSByZW1vdmVkIGZyb20gdGhlIGxpc3Qgb2YgYXZhaWxhYmxlIHNwYWNlc1wiLFxyXG4gICAgLy8gICAgICAgKCkgPT4ge1xyXG4gICAgLy8gICAgICAgICBjb25zdCBudW1TcGFjZXMgPSBzdG9yZS5nZXRTdGF0ZSgpLnBhcmtpbmdTcGFjZXMubnVtU3BhY2VzO1xyXG4gICAgLy8gICAgICAgICBleHBlY3QobnVtU3BhY2VzKS50b0JlR3JlYXRlclRoYW4oMCk7XHJcbiAgICAvLyAgICAgICAgIGV4cGVjdChudW1TcGFjZXMpLnRvQmVMZXNzVGhhbk9yRXF1YWwoMSk7XHJcbiAgICAvLyAgICAgICB9XHJcbiAgICAvLyAgICAgKTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxhQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxhQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxNQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxPQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQUEsT0FBQTtBQUNBLElBQUFJLGFBQUEsR0FBQUMsdUJBQUEsQ0FBQUwsT0FBQTtBQUlBLElBQUFNLFdBQUEsR0FBQU4sT0FBQTtBQUNBLElBQUFPLFFBQUEsR0FBQVAsT0FBQTtBQUNBLElBQUFRLGVBQUEsR0FBQVIsT0FBQTtB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