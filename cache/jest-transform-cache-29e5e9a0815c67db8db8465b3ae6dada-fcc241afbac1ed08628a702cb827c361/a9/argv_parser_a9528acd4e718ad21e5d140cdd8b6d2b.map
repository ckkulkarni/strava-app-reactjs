{"version":3,"names":["commander_1","require","lodash_merge_1","__importDefault","gherkin_1","formatters_1","version_1","ArgvParser","collect","val","memo","undefined","mergeJson","option","str","JSON","parse","error","e","Error","message","Array","isArray","default","mergeTags","value","validateCountOption","optionName","numericValue","parseInt","isNaN","validateLanguage","Object","keys","dialects","includes","argv","program","Command","storeOptionsAsProperties","usage","version","buildFormattersDocumentationString","addHelpText","config","i18nKeywords","i18nLanguages","profile","regularStuff","opts","configuration","args","length","paths","options","exports"],"sources":["../../src/configuration/argv_parser.ts"],"sourcesContent":["import { Command } from 'commander'\nimport merge from 'lodash.merge'\nimport { dialects } from '@cucumber/gherkin'\nimport Formatters from '../formatter/helpers/formatters'\nimport { version } from '../version'\nimport { IConfiguration } from './types'\n\nexport interface IParsedArgvOptions {\n  config?: string\n  i18nKeywords?: string\n  i18nLanguages?: boolean\n  profile: string[]\n}\n\nexport interface IParsedArgv {\n  options: IParsedArgvOptions\n  configuration: Partial<IConfiguration>\n}\n\ntype IRawArgvOptions = Partial<Omit<IConfiguration, 'paths'>> &\n  IParsedArgvOptions\n\nconst ArgvParser = {\n  collect<T>(val: T, memo: T[] = []): T[] {\n    if (val) {\n      return [...memo, val]\n    }\n    return undefined\n  },\n\n  mergeJson(option: string): (str: string, memo?: object) => object {\n    return function (str: string, memo: object = {}) {\n      let val: object\n      try {\n        val = JSON.parse(str)\n      } catch (error) {\n        const e: Error = error\n        throw new Error(`${option} passed invalid JSON: ${e.message}: ${str}`)\n      }\n      if (typeof val !== 'object' || Array.isArray(val)) {\n        throw new Error(`${option} must be passed JSON of an object: ${str}`)\n      }\n      return merge(memo, val)\n    }\n  },\n\n  mergeTags(value: string, memo?: string): string {\n    return memo ? `${memo} and (${value})` : `(${value})`\n  },\n\n  validateCountOption(value: string, optionName: string): number {\n    const numericValue = parseInt(value)\n    if (isNaN(numericValue) || numericValue < 0) {\n      throw new Error(`${optionName} must be a non negative integer`)\n    }\n    return numericValue\n  },\n\n  validateLanguage(value: string): string {\n    if (!Object.keys(dialects).includes(value)) {\n      throw new Error(`Unsupported ISO 639-1: ${value}`)\n    }\n    return value\n  },\n\n  parse(argv: string[]): IParsedArgv {\n    const program = new Command('cucumber-js')\n\n    program\n      .storeOptionsAsProperties(false)\n      .usage('[options] [<GLOB|DIR|FILE[:LINE]>...]')\n      .version(version, '-v, --version')\n      .option('-b, --backtrace', 'show full backtrace for errors')\n      .option('-c, --config <PATH>', 'specify configuration file')\n      .option('-d, --dry-run', 'invoke formatters without executing steps')\n      .option(\n        '--exit, --force-exit',\n        'force shutdown of the event loop when the test run has finished: cucumber will call process.exit'\n      )\n      .option('--fail-fast', 'abort the run on first failure')\n      .option(\n        '-f, --format <TYPE[:PATH]>',\n        'specify the output format, optionally supply PATH to redirect formatter output (repeatable).  Available formats:\\n' +\n          Formatters.buildFormattersDocumentationString(),\n        ArgvParser.collect\n      )\n      .option(\n        '--format-options <JSON>',\n        'provide options for formatters (repeatable)',\n        ArgvParser.mergeJson('--format-options')\n      )\n      .option(\n        '--i18n-keywords <ISO 639-1>',\n        'list language keywords',\n        ArgvParser.validateLanguage\n      )\n      .option('--i18n-languages', 'list languages')\n      .option(\n        '-i, --import <GLOB|DIR|FILE>',\n        'import files before executing features (repeatable)',\n        ArgvParser.collect\n      )\n      .option(\n        '--language <ISO 639-1>',\n        'provide the default language for feature files'\n      )\n      .option(\n        '--name <REGEXP>',\n        'only execute the scenarios with name matching the expression (repeatable)',\n        ArgvParser.collect\n      )\n\n      .option(\n        '--order <TYPE[:SEED]>',\n        'run scenarios in the specified order. Type should be `defined` or `random`'\n      )\n      .option(\n        '-p, --profile <NAME>',\n        'specify the profile to use (repeatable)',\n        ArgvParser.collect,\n        []\n      )\n      .option(\n        '--parallel <NUMBER_OF_WORKERS>',\n        'run in parallel with the given number of workers',\n        (val) => ArgvParser.validateCountOption(val, '--parallel')\n      )\n      .option('--publish', 'Publish a report to https://reports.cucumber.io')\n      .option(\n        '--publish-quiet',\n        \"Don't print information banner about publishing reports\"\n      )\n      .option(\n        '-r, --require <GLOB|DIR|FILE>',\n        'require files before executing features (repeatable)',\n        ArgvParser.collect\n      )\n      .option(\n        '--require-module <NODE_MODULE>',\n        'require node modules before requiring files (repeatable)',\n        ArgvParser.collect\n      )\n      .option(\n        '--retry <NUMBER_OF_RETRIES>',\n        'specify the number of times to retry failing test cases (default: 0)',\n        (val) => ArgvParser.validateCountOption(val, '--retry')\n      )\n      .option(\n        '--retry-tag-filter <EXPRESSION>',\n        `only retries the features or scenarios with tags matching the expression (repeatable).\n        This option requires '--retry' to be specified.`,\n        ArgvParser.mergeTags\n      )\n      .option('--strict', 'fail if there are pending steps')\n      .option('--no-strict', 'succeed even if there are pending steps')\n      .option(\n        '-t, --tags <EXPRESSION>',\n        'only execute the features or scenarios with tags matching the expression (repeatable)',\n        ArgvParser.mergeTags\n      )\n      .option(\n        '--world-parameters <JSON>',\n        'provide parameters that will be passed to the world constructor (repeatable)',\n        ArgvParser.mergeJson('--world-parameters')\n      )\n\n    program.addHelpText(\n      'afterAll',\n      'For more details please visit https://github.com/cucumber/cucumber-js/blob/main/docs/cli.md'\n    )\n\n    program.parse(argv)\n    const {\n      config,\n      i18nKeywords,\n      i18nLanguages,\n      profile,\n      ...regularStuff\n    }: IRawArgvOptions = program.opts()\n    const configuration: Partial<IConfiguration> = regularStuff\n    if (program.args.length > 0) {\n      configuration.paths = program.args\n    }\n\n    return {\n      options: {\n        config,\n        i18nKeywords,\n        i18nLanguages,\n        profile,\n      },\n      configuration,\n    }\n  },\n}\n\nexport default ArgvParser\n"],"mappings":"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"}