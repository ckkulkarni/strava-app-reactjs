450681618756f6d70ab31a5492bce4b9
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.test = exports.serialize = exports.default = void 0;
var _markup = require('./lib/markup');
var global = function () {
  if (typeof globalThis !== 'undefined') {
    return globalThis;
  } else if (typeof global !== 'undefined') {
    return global;
  } else if (typeof self !== 'undefined') {
    return self;
  } else if (typeof window !== 'undefined') {
    return window;
  } else {
    return Function('return this')();
  }
}();
var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
const testSymbol = typeof Symbol === 'function' && Symbol.for ? Symbol.for('react.test.json') : 0xea71357;
const getPropKeys = object => {
  const {
    props
  } = object;
  return props ? Object.keys(props).filter(key => props[key] !== undefined).sort() : [];
};
const serialize = (object, config, indentation, depth, refs, printer) => ++depth > config.maxDepth ? (0, _markup.printElementAsLeaf)(object.type, config) : (0, _markup.printElement)(object.type, object.props ? (0, _markup.printProps)(getPropKeys(object), object.props, config, indentation + config.indent, depth, refs, printer) : '', object.children ? (0, _markup.printChildren)(object.children, config, indentation + config.indent, depth, refs, printer) : '', config, indentation);
exports.serialize = serialize;
const test = val => val && val.$$typeof === testSymbol;
exports.test = test;
const plugin = {
  serialize,
  test
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRlc3QiLCJzZXJpYWxpemUiLCJkZWZhdWx0IiwiX21hcmt1cCIsInJlcXVpcmUiLCJnbG9iYWwiLCJnbG9iYWxUaGlzIiwic2VsZiIsIndpbmRvdyIsIkZ1bmN0aW9uIiwiU3ltYm9sIiwidGVzdFN5bWJvbCIsImZvciIsImdldFByb3BLZXlzIiwib2JqZWN0IiwicHJvcHMiLCJrZXlzIiwiZmlsdGVyIiwia2V5IiwidW5kZWZpbmVkIiwic29ydCIsImNvbmZpZyIsImluZGVudGF0aW9uIiwiZGVwdGgiLCJyZWZzIiwicHJpbnRlciIsIm1heERlcHRoIiwicHJpbnRFbGVtZW50QXNMZWFmIiwidHlwZSIsInByaW50RWxlbWVudCIsInByaW50UHJvcHMiLCJpbmRlbnQiLCJjaGlsZHJlbiIsInByaW50Q2hpbGRyZW4iLCJ2YWwiLCIkJHR5cGVvZiIsInBsdWdpbiIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiUmVhY3RUZXN0Q29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnRlc3QgPSBleHBvcnRzLnNlcmlhbGl6ZSA9IGV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9tYXJrdXAgPSByZXF1aXJlKCcuL2xpYi9tYXJrdXAnKTtcblxudmFyIGdsb2JhbCA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZ2xvYmFsVGhpcztcbiAgfSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBnbG9iYWw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuICB9XG59KSgpO1xuXG52YXIgU3ltYm9sID0gZ2xvYmFsWydqZXN0LXN5bWJvbC1kby1ub3QtdG91Y2gnXSB8fCBnbG9iYWwuU3ltYm9sO1xuY29uc3QgdGVzdFN5bWJvbCA9XG4gIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvclxuICAgID8gU3ltYm9sLmZvcigncmVhY3QudGVzdC5qc29uJylcbiAgICA6IDB4ZWE3MTM1NztcblxuY29uc3QgZ2V0UHJvcEtleXMgPSBvYmplY3QgPT4ge1xuICBjb25zdCB7cHJvcHN9ID0gb2JqZWN0O1xuICByZXR1cm4gcHJvcHNcbiAgICA/IE9iamVjdC5rZXlzKHByb3BzKVxuICAgICAgICAuZmlsdGVyKGtleSA9PiBwcm9wc1trZXldICE9PSB1bmRlZmluZWQpXG4gICAgICAgIC5zb3J0KClcbiAgICA6IFtdO1xufTtcblxuY29uc3Qgc2VyaWFsaXplID0gKG9iamVjdCwgY29uZmlnLCBpbmRlbnRhdGlvbiwgZGVwdGgsIHJlZnMsIHByaW50ZXIpID0+XG4gICsrZGVwdGggPiBjb25maWcubWF4RGVwdGhcbiAgICA/ICgwLCBfbWFya3VwLnByaW50RWxlbWVudEFzTGVhZikob2JqZWN0LnR5cGUsIGNvbmZpZylcbiAgICA6ICgwLCBfbWFya3VwLnByaW50RWxlbWVudCkoXG4gICAgICAgIG9iamVjdC50eXBlLFxuICAgICAgICBvYmplY3QucHJvcHNcbiAgICAgICAgICA/ICgwLCBfbWFya3VwLnByaW50UHJvcHMpKFxuICAgICAgICAgICAgICBnZXRQcm9wS2V5cyhvYmplY3QpLFxuICAgICAgICAgICAgICBvYmplY3QucHJvcHMsXG4gICAgICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICAgICAgaW5kZW50YXRpb24gKyBjb25maWcuaW5kZW50LFxuICAgICAgICAgICAgICBkZXB0aCxcbiAgICAgICAgICAgICAgcmVmcyxcbiAgICAgICAgICAgICAgcHJpbnRlclxuICAgICAgICAgICAgKVxuICAgICAgICAgIDogJycsXG4gICAgICAgIG9iamVjdC5jaGlsZHJlblxuICAgICAgICAgID8gKDAsIF9tYXJrdXAucHJpbnRDaGlsZHJlbikoXG4gICAgICAgICAgICAgIG9iamVjdC5jaGlsZHJlbixcbiAgICAgICAgICAgICAgY29uZmlnLFxuICAgICAgICAgICAgICBpbmRlbnRhdGlvbiArIGNvbmZpZy5pbmRlbnQsXG4gICAgICAgICAgICAgIGRlcHRoLFxuICAgICAgICAgICAgICByZWZzLFxuICAgICAgICAgICAgICBwcmludGVyXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiAnJyxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICBpbmRlbnRhdGlvblxuICAgICAgKTtcblxuZXhwb3J0cy5zZXJpYWxpemUgPSBzZXJpYWxpemU7XG5cbmNvbnN0IHRlc3QgPSB2YWwgPT4gdmFsICYmIHZhbC4kJHR5cGVvZiA9PT0gdGVzdFN5bWJvbDtcblxuZXhwb3J0cy50ZXN0ID0gdGVzdDtcbmNvbnN0IHBsdWdpbiA9IHtcbiAgc2VyaWFsaXplLFxuICB0ZXN0XG59O1xudmFyIF9kZWZhdWx0ID0gcGx1Z2luO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxJQUFJLEdBQUdGLE9BQU8sQ0FBQ0csU0FBUyxHQUFHSCxPQUFPLENBQUNJLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFFM0QsSUFBSUMsT0FBTyxHQUFHQyxPQUFPLENBQUMsY0FBYyxDQUFDO0FB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