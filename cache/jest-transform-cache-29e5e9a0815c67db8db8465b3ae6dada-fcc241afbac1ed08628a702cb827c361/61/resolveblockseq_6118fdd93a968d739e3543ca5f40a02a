874c2431acfba8624078454f00ecd611
'use strict';

var YAMLSeq = require('../nodes/YAMLSeq.js');
var resolveProps = require('./resolve-props.js');
var utilFlowIndentCheck = require('./util-flow-indent-check.js');
function resolveBlockSeq({
  composeNode,
  composeEmptyNode
}, ctx, bs, onError) {
  const seq = new YAMLSeq.YAMLSeq(ctx.schema);
  if (ctx.atRoot) ctx.atRoot = false;
  let offset = bs.offset;
  let commentEnd = null;
  for (const {
    start,
    value
  } of bs.items) {
    const props = resolveProps.resolveProps(start, {
      indicator: 'seq-item-ind',
      next: value,
      offset,
      onError,
      startOnNewline: true
    });
    if (!props.found) {
      if (props.anchor || props.tag || value) {
        if (value && value.type === 'block-seq') onError(props.end, 'BAD_INDENT', 'All sequence items must start at the same column');else onError(offset, 'MISSING_CHAR', 'Sequence item without - indicator');
      } else {
        commentEnd = props.end;
        if (props.comment) seq.comment = props.comment;
        continue;
      }
    }
    const node = value ? composeNode(ctx, value, props, onError) : composeEmptyNode(ctx, props.end, start, null, props, onError);
    if (ctx.schema.compat) utilFlowIndentCheck.flowIndentCheck(bs.indent, value, onError);
    offset = node.range[2];
    seq.items.push(node);
  }
  seq.range = [bs.offset, offset, commentEnd ?? offset];
  return seq;
}
exports.resolveBlockSeq = resolveBlockSeq;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJZQU1MU2VxIiwicmVxdWlyZSIsInJlc29sdmVQcm9wcyIsInV0aWxGbG93SW5kZW50Q2hlY2siLCJyZXNvbHZlQmxvY2tTZXEiLCJjb21wb3NlTm9kZSIsImNvbXBvc2VFbXB0eU5vZGUiLCJjdHgiLCJicyIsIm9uRXJyb3IiLCJzZXEiLCJzY2hlbWEiLCJhdFJvb3QiLCJvZmZzZXQiLCJjb21tZW50RW5kIiwic3RhcnQiLCJ2YWx1ZSIsIml0ZW1zIiwicHJvcHMiLCJpbmRpY2F0b3IiLCJuZXh0Iiwic3RhcnRPbk5ld2xpbmUiLCJmb3VuZCIsImFuY2hvciIsInRhZyIsInR5cGUiLCJlbmQiLCJjb21tZW50Iiwibm9kZSIsImNvbXBhdCIsImZsb3dJbmRlbnRDaGVjayIsImluZGVudCIsInJhbmdlIiwicHVzaCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJyZXNvbHZlLWJsb2NrLXNlcS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBZQU1MU2VxID0gcmVxdWlyZSgnLi4vbm9kZXMvWUFNTFNlcS5qcycpO1xudmFyIHJlc29sdmVQcm9wcyA9IHJlcXVpcmUoJy4vcmVzb2x2ZS1wcm9wcy5qcycpO1xudmFyIHV0aWxGbG93SW5kZW50Q2hlY2sgPSByZXF1aXJlKCcuL3V0aWwtZmxvdy1pbmRlbnQtY2hlY2suanMnKTtcblxuZnVuY3Rpb24gcmVzb2x2ZUJsb2NrU2VxKHsgY29tcG9zZU5vZGUsIGNvbXBvc2VFbXB0eU5vZGUgfSwgY3R4LCBicywgb25FcnJvcikge1xuICAgIGNvbnN0IHNlcSA9IG5ldyBZQU1MU2VxLllBTUxTZXEoY3R4LnNjaGVtYSk7XG4gICAgaWYgKGN0eC5hdFJvb3QpXG4gICAgICAgIGN0eC5hdFJvb3QgPSBmYWxzZTtcbiAgICBsZXQgb2Zmc2V0ID0gYnMub2Zmc2V0O1xuICAgIGxldCBjb21tZW50RW5kID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IHsgc3RhcnQsIHZhbHVlIH0gb2YgYnMuaXRlbXMpIHtcbiAgICAgICAgY29uc3QgcHJvcHMgPSByZXNvbHZlUHJvcHMucmVzb2x2ZVByb3BzKHN0YXJ0LCB7XG4gICAgICAgICAgICBpbmRpY2F0b3I6ICdzZXEtaXRlbS1pbmQnLFxuICAgICAgICAgICAgbmV4dDogdmFsdWUsXG4gICAgICAgICAgICBvZmZzZXQsXG4gICAgICAgICAgICBvbkVycm9yLFxuICAgICAgICAgICAgc3RhcnRPbk5ld2xpbmU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcHJvcHMuZm91bmQpIHtcbiAgICAgICAgICAgIGlmIChwcm9wcy5hbmNob3IgfHwgcHJvcHMudGFnIHx8IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlLnR5cGUgPT09ICdibG9jay1zZXEnKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHByb3BzLmVuZCwgJ0JBRF9JTkRFTlQnLCAnQWxsIHNlcXVlbmNlIGl0ZW1zIG11c3Qgc3RhcnQgYXQgdGhlIHNhbWUgY29sdW1uJyk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKG9mZnNldCwgJ01JU1NJTkdfQ0hBUicsICdTZXF1ZW5jZSBpdGVtIHdpdGhvdXQgLSBpbmRpY2F0b3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbW1lbnRFbmQgPSBwcm9wcy5lbmQ7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BzLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIHNlcS5jb21tZW50ID0gcHJvcHMuY29tbWVudDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBub2RlID0gdmFsdWVcbiAgICAgICAgICAgID8gY29tcG9zZU5vZGUoY3R4LCB2YWx1ZSwgcHJvcHMsIG9uRXJyb3IpXG4gICAgICAgICAgICA6IGNvbXBvc2VFbXB0eU5vZGUoY3R4LCBwcm9wcy5lbmQsIHN0YXJ0LCBudWxsLCBwcm9wcywgb25FcnJvcik7XG4gICAgICAgIGlmIChjdHguc2NoZW1hLmNvbXBhdClcbiAgICAgICAgICAgIHV0aWxGbG93SW5kZW50Q2hlY2suZmxvd0luZGVudENoZWNrKGJzLmluZGVudCwgdmFsdWUsIG9uRXJyb3IpO1xuICAgICAgICBvZmZzZXQgPSBub2RlLnJhbmdlWzJdO1xuICAgICAgICBzZXEuaXRlbXMucHVzaChub2RlKTtcbiAgICB9XG4gICAgc2VxLnJhbmdlID0gW2JzLm9mZnNldCwgb2Zmc2V0LCBjb21tZW50RW5kID8/IG9mZnNldF07XG4gICAgcmV0dXJuIHNlcTtcbn1cblxuZXhwb3J0cy5yZXNvbHZlQmxvY2tTZXEgPSByZXNvbHZlQmxvY2tTZXE7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsT0FBTyxHQUFHQyxPQUFPLENBQUMscUJBQXFCLENBQUM7QUFDNUMsSUFBSUMsWUFBWSxHQUFHRCxPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFDaEQsSUFBSUUsbUJBQW1CLEdBQUdGLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQztBQUVoRSxTQUFTRyxlQUFlQSxDQUFDO0VBQUVDLFdBQVc7RUFBRUM7QUFBaUIsQ0FBQyxFQUFFQyxHQUFHLEVBQUVDLEVBQUUsRUFBRUMsT0FBTyxFQUFFO0VBQzFFLE1BQU1DLEdBQUcsR0FBRyxJQUFJVixPQUFPLENBQUNBLE9BQU8sQ0FBQ08sR0FBRyxDQUFDSSxNQUFNLENBQUM7RUFDM0MsSUFBSUosR0FBRyxDQUFDSyxNQUFNLEVBQ1ZMLEdBQUcsQ0FBQ0ssTUFBTSxHQUFHLEtBQUs7RUFDdEIsSUFBSUMsTUFBTSxHQUFHTCxFQUFFLENBQUNLLE1BQU07RUFDdEIsSUFBSUMsVUFBVSxHQUFHLElBQUk7RUFDckIsS0FBSyxNQUFNO0lBQUVDLEtBQUs7SUFBRUM7RUFBTSxDQUFDLElBQUlSLEVBQUUsQ0FBQ1MsS0FBSyxFQUFFO0lBQ3JDLE1BQU1DLEtBQUssR0FBR2hCLFlBQVksQ0FBQ0EsWUFBWSxDQUFDYSxLQUFLLEVBQUU7TUFDM0NJLFNBQVMsRUFBRSxjQUFjO01BQ3pCQyxJQUFJLEVBQUVKLEtBQUs7TUFDWEgsTUFBTTtNQUNOSixPQUFPO01BQ1BZLGNBQWMsRUFBRTtJQUNwQixDQUFDLENBQUM7SUFDRixJQUFJLENBQUNILEtBQUssQ0FBQ0ksS0FBSyxFQUFFO01BQ2QsSUFBSUosS0FBSyxDQUFDSyxNQUFNLElBQUlMLEtBQUssQ0FBQ00sR0FBRyxJQUFJUixLQUFLLEVBQUU7UUFDcEMsSUFBSUEsS0FBSyxJQUFJQSxLQUFLLENBQUNTLElBQUksS0FBSyxXQUFXLEVBQ25DaEIsT0FBTyxDQUFDUyxLQUFLLENBQUNRLEdBQUcsRUFBRSxZQUFZLEVBQUUsa0RBQWtELENBQUMsQ0FBQyxLQUVyRmpCLE9BQU8sQ0FBQ0ksTUFBTSxFQUFFLGNBQWMsRUFBRSxtQ0FBbUMsQ0FBQztNQUM1RSxDQUFDLE1BQ0k7UUFDREMsVUFBVSxHQUFHSSxLQUFLLENBQUNRLEdBQUc7UUFDdEIsSUFBSVIsS0FBSyxDQUFDUyxPQUFPLEVBQ2JqQixHQUFHLENBQUNpQixPQUFPLEdBQUdULEtBQUssQ0FBQ1MsT0FBTztRQUMvQjtNQUNKO0lBQ0o7SUFDQSxNQUFNQyxJQUFJLEdBQUdaLEtBQUssR0FDWlgsV0FBVyxDQUFDRSxHQUFHLEVBQUVTLEtBQUssRUFBRUUsS0FBSyxFQUFFVCxPQUFPLENBQUMsR0FDdkNILGdCQUFnQixDQUFDQyxHQUFHLEVBQUVXLEtBQUssQ0FBQ1EsR0FBRyxFQUFFWCxLQUFLLEVBQUUsSUFBSSxFQUFFRyxLQUFLLEVBQUVULE9BQU8sQ0FBQztJQUNuRSxJQUFJRixHQUFHLENBQUNJLE1BQU0sQ0FBQ2tCLE1BQU0sRUFDakIxQixtQkFBbUIsQ0FBQzJCLGVBQWUsQ0FBQ3RCLEVBQUUsQ0FBQ3VCLE1BQU0sRUFBRWYsS0FBSyxFQUFFUCxPQUFPLENBQUM7SUFDbEVJLE1BQU0sR0FBR2UsSUFBSSxDQUFDSSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3RCdEIsR0FBRyxDQUFDTyxLQUFLLENBQUNnQixJQUFJLENBQUNMLElBQUksQ0FBQztFQUN4QjtFQUNBbEIsR0FBRyxDQUFDc0IsS0FBSyxHQUFHLENBQUN4QixFQUFFLENBQUNLLE1BQU0sRUFBRUEsTUFBTSxFQUFFQyxVQUFVLElBQUlELE1BQU0sQ0FBQztFQUNyRCxPQUFPSCxHQUFHO0FBQ2Q7QUFFQXdCLE9BQU8sQ0FBQzlCLGVBQWUsR0FBR0EsZUFBZSJ9