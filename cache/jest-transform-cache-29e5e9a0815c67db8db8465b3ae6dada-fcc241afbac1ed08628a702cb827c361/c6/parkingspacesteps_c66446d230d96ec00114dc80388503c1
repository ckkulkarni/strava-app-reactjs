bb4c0b85cfe1562b48c2b1ca9c1afe77
"use strict";

var _ParkingSpace = _interopRequireDefault(require("../../ParkingSpace"));
var _PaymentScreen = _interopRequireDefault(require("../../PaymentScreen"));
var _jestCucumber = require("jest-cucumber");
var _react = require("@testing-library/react");
var _react2 = _interopRequireDefault(require("react"));
require("text-encoding");
var _parkingSlice = _interopRequireWildcard(require("../../redux/reducer/parkingSlice"));
require("@testing-library/jest-dom/extend-expect");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _reactRouterDom = require("react-router-dom");
var _Base = _interopRequireDefault(require("./../../Base"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/parkingspace.feature");
let store;
(0, _jestCucumber.defineFeature)(feature, test => {
  test("Add a new parking space", ({
    given,
    when,
    then
  }) => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        parkingSpaces: _parkingSlice.default
      }
    });
    const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
    given("that there is a Parking Space Component", () => {
      expect(screen).toBeTruthy();
    });
    when('I click on the "Add Space" button', () => {
      const addSpace = screen.getAllByTestId("addSpace");
      _react.fireEvent.click(addSpace[0]);
    });
    then("a new parking space should be added to the list of available spaces", () => {
      const addSpace = screen.getAllByTestId("addSpace");
      (0, _react.act)(() => {
        _react.fireEvent.click(addSpace[0]);
        store.dispatch((0, _parkingSlice.addToParkingSpace)());
      });
    });
  });
  test("Remove an existing parking space", ({
    given,
    when,
    then,
    and
  }) => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        parkingSpaces: _parkingSlice.default
      }
    });
    const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
    given("that there is a Parking Space Component", () => {
      expect(screen).toBeTruthy();
    });
    and("there is more than one parking space available", () => {
      store = (0, _toolkit.configureStore)({
        reducer: {
          parkingSpaces: _parkingSlice.default
        }
      });
      const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
        store: store
      }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
      const addSpace = screen.getAllByTestId("addSpace");
      (0, _react.act)(() => {
        _react.fireEvent.click(addSpace[0]);
        store.dispatch((0, _parkingSlice.addToParkingSpace)());
      });
      const numSpaces = store.getState().parkingSpaces.numSpaces;
      expect(numSpaces).toBeGreaterThan(1);
    });
    when('I click on the "Remove Space" button', () => {
      const removeSpace = screen.getAllByTestId("decreaseSpace");
      (0, _react.act)(() => {
        _react.fireEvent.click(removeSpace[0]);
      });
    });
    then("a parking space should be removed from the list of available spaces", () => {
      const numSpaces = store.getState().parkingSpaces.numSpaces;
      expect(numSpaces).toBeGreaterThan(0);
      expect(numSpaces).toBeLessThanOrEqual(1);
    });
  });
  test("Register a parking lot", ({
    given,
    when,
    then,
    and
  }) => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        parkingSpaces: _parkingSlice.default
      }
    });
    const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
    given("that there is a Parking Space Component", () => {
      expect(screen).toBeTruthy();
    });
    and("I have selected a parking space", () => {
      store = (0, _toolkit.configureStore)({
        reducer: {
          parkingSpaces: _parkingSlice.default
        }
      });
      const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
        store: store
      }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
      const addSpace = screen.getAllByTestId("addSpace");
      (0, _react.act)(() => {
        _react.fireEvent.click(addSpace[0]);
        store.dispatch((0, _parkingSlice.addToParkingSpace)());
      });
      const selectedSpace = screen.getAllByTestId("space");
      _react.fireEvent.click(selectedSpace[0]);
    });
    when('I click on the "Register Lot" button', () => {
      const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
        store: store
      }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
      const registerButton = screen.getByText("Register Lot 1");
      _react.fireEvent.click(registerButton);
    });
    then("a form should appear to register the parking lot", () => {
      store = (0, _toolkit.configureStore)({
        reducer: {
          parkingSpaces: _parkingSlice.default
        }
      });
      const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
        store: store
      }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
      const registerButton = screen.getByText("Register Lot 1");
      _react.fireEvent.click(registerButton);
      const registerForm = screen.getByTestId("registerForm");
      expect(registerForm).toBeTruthy();
    });
    and("I should be able to enter the registration and parking time", () => {
      const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
        store: store
      }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
      const registerButton = screen.getByText("Register Lot 1");
      _react.fireEvent.click(registerButton);
      const registrationInput = screen.getByPlaceholderText("Enter Registration");
      const timeInput = screen.getByPlaceholderText("Enter Time");
      _react.fireEvent.change(registrationInput, {
        target: {
          value: "ABC-123"
        }
      });
      _react.fireEvent.change(timeInput, {
        target: {
          value: "2:00"
        }
      });
    });
    and("when I submit the form, the lot should be registered", () => {
      const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
        store: store
      }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
      const registerButton = screen.getByText("Register Lot 1");
      _react.fireEvent.click(registerButton);
      const registrationInput = screen.getByPlaceholderText("Enter Registration");
      const timeInput = screen.getByPlaceholderText("Enter Time");
      _react.fireEvent.change(registrationInput, {
        target: {
          value: "ABC-123"
        }
      });
      _react.fireEvent.change(timeInput, {
        target: {
          value: "14:00"
        }
      });
      const submitButton = screen.getByTestId("submitButton");
      (0, _react.act)(() => {
        _react.fireEvent.submit(submitButton);
      });
      const regID = screen.getAllByTestId("regID");
      const timeId = screen.getAllByTestId("timeID");
      expect(regID[0]).toHaveTextContent("Registration: ABC-123");
      expect(timeId[0]).toHaveTextContent("Parking Time: 14:00");
    });
  });
  test("Make payment for an occupied parking lot", ({
    given,
    and,
    then,
    when
  }) => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        parkingSpaces: _parkingSlice.default
      }
    });
    const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
    given("that there is a Parking Space Component", () => {
      expect(screen).toBeTruthy();
    });
    and("there is an occupied parking space", () => {
      store = (0, _toolkit.configureStore)({
        reducer: {
          parkingSpaces: _parkingSlice.default
        }
      });
      const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
        store: store
      }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
      const addSpace = screen.getAllByTestId("addSpace");
      (0, _react.act)(() => {
        _react.fireEvent.click(addSpace[0]);
        store.dispatch((0, _parkingSlice.addToParkingSpace)());
      });
      const selectedSpace = screen.getAllByTestId("space");
      _react.fireEvent.click(selectedSpace[0]);
      const registerButton = screen.getByText("Register Lot 1");
      _react.fireEvent.click(registerButton);
      const registrationInput = screen.getByPlaceholderText("Enter Registration");
      const timeInput = screen.getByPlaceholderText("Enter Time");
      _react.fireEvent.change(registrationInput, {
        target: {
          value: "ABC-123"
        }
      });
      _react.fireEvent.change(timeInput, {
        target: {
          value: "14:00"
        }
      });
      const submitButton = screen.getByTestId("submitButton");
      (0, _react.act)(() => {
        _react.fireEvent.submit(submitButton);
      });
      const regID = screen.getAllByTestId("regID");
      const timeId = screen.getAllByTestId("timeID");
      expect(regID[0]).toHaveTextContent("Registration: ABC-123");
      expect(timeId[0]).toHaveTextContent("Parking Time: 14:00");
    });
    when('I click on the "Make Payment" button', () => {
      const paymentButton = screen.getAllByTestId("paymentButton");
      _react.fireEvent.click(paymentButton[0]);
    });
    then("I should be redirected to the payment page", async () => {
      const navigation = jest.fn();
      store = (0, _toolkit.configureStore)({
        reducer: {
          parkingSpaces: _parkingSlice.default
        }
      });
      const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
        store: store
      }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.Route, {
        path: "/",
        element: /*#__PURE__*/_react2.default.createElement(_Base.default, null)
      }), /*#__PURE__*/_react2.default.createElement(_reactRouterDom.Route, {
        path: "/spaces",
        element: /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null)
      }), /*#__PURE__*/_react2.default.createElement(_reactRouterDom.Route, {
        path: "/payment",
        element: /*#__PURE__*/_react2.default.createElement(_PaymentScreen.default, null)
      })))));
      const paymentButton = screen.getAllByTestId("paymentButton");
      _react.fireEvent.click(paymentButton[0]);
      expect(window.location.pathname).toEqual("/payment");
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,