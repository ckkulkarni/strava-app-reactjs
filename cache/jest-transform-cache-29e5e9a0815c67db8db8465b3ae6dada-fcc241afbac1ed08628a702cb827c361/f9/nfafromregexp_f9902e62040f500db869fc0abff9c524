49353d833a41a94bda55259360a27e06
/**
 * The MIT License (MIT)
 * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>
 */

'use strict';

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  } else {
    return Array.from(arr);
  }
}
var parser = require('../../../parser');
var _require = require('./builders'),
  alt = _require.alt,
  char = _require.char,
  or = _require.or,
  rep = _require.rep,
  plusRep = _require.plusRep,
  questionRep = _require.questionRep;

/**
 * Helper `gen` function calls node type handler.
 */

function gen(node) {
  if (node && !generator[node.type]) {
    throw new Error(node.type + ' is not supported in NFA/DFA interpreter.');
  }
  return node ? generator[node.type](node) : '';
}

/**
 * AST handler.
 */
var generator = {
  RegExp: function RegExp(node) {
    if (node.flags !== '') {
      throw new Error('NFA/DFA: Flags are not supported yet.');
    }
    return gen(node.body);
  },
  Alternative: function Alternative(node) {
    var fragments = (node.expressions || []).map(gen);
    return alt.apply(undefined, _toConsumableArray(fragments));
  },
  Disjunction: function Disjunction(node) {
    return or(gen(node.left), gen(node.right));
  },
  Repetition: function Repetition(node) {
    switch (node.quantifier.kind) {
      case '*':
        return rep(gen(node.expression));
      case '+':
        return plusRep(gen(node.expression));
      case '?':
        return questionRep(gen(node.expression));
      default:
        throw new Error('Unknown repeatition: ' + node.quantifier.kind + '.');
    }
  },
  Char: function Char(node) {
    if (node.kind !== 'simple') {
      throw new Error('NFA/DFA: Only simple chars are supported yet.');
    }
    return char(node.value);
  },
  Group: function Group(node) {
    return gen(node.expression);
  }
};
module.exports = {
  /**
   * Builds an NFA from the passed regexp.
   */
  build: function build(regexp) {
    var ast = regexp;
    if (regexp instanceof RegExp) {
      regexp = '' + regexp;
    }
    if (typeof regexp === 'string') {
      ast = parser.parse(regexp, {
        captureLocations: true
      });
    }
    return gen(ast);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJBcnJheSIsImlzQXJyYXkiLCJpIiwiYXJyMiIsImxlbmd0aCIsImZyb20iLCJwYXJzZXIiLCJyZXF1aXJlIiwiX3JlcXVpcmUiLCJhbHQiLCJjaGFyIiwib3IiLCJyZXAiLCJwbHVzUmVwIiwicXVlc3Rpb25SZXAiLCJnZW4iLCJub2RlIiwiZ2VuZXJhdG9yIiwidHlwZSIsIkVycm9yIiwiUmVnRXhwIiwiZmxhZ3MiLCJib2R5IiwiQWx0ZXJuYXRpdmUiLCJmcmFnbWVudHMiLCJleHByZXNzaW9ucyIsIm1hcCIsImFwcGx5IiwidW5kZWZpbmVkIiwiRGlzanVuY3Rpb24iLCJsZWZ0IiwicmlnaHQiLCJSZXBldGl0aW9uIiwicXVhbnRpZmllciIsImtpbmQiLCJleHByZXNzaW9uIiwiQ2hhciIsInZhbHVlIiwiR3JvdXAiLCJtb2R1bGUiLCJleHBvcnRzIiwiYnVpbGQiLCJyZWdleHAiLCJhc3QiLCJwYXJzZSIsImNhcHR1cmVMb2NhdGlvbnMiXSwic291cmNlcyI6WyJuZmEtZnJvbS1yZWdleHAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50IERtaXRyeSBTb3Nobmlrb3YgPGRtaXRyeS5zb3Nobmlrb3ZAZ21haWwuY29tPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbnZhciBwYXJzZXIgPSByZXF1aXJlKCcuLi8uLi8uLi9wYXJzZXInKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9idWlsZGVycycpLFxuICAgIGFsdCA9IF9yZXF1aXJlLmFsdCxcbiAgICBjaGFyID0gX3JlcXVpcmUuY2hhcixcbiAgICBvciA9IF9yZXF1aXJlLm9yLFxuICAgIHJlcCA9IF9yZXF1aXJlLnJlcCxcbiAgICBwbHVzUmVwID0gX3JlcXVpcmUucGx1c1JlcCxcbiAgICBxdWVzdGlvblJlcCA9IF9yZXF1aXJlLnF1ZXN0aW9uUmVwO1xuXG4vKipcbiAqIEhlbHBlciBgZ2VuYCBmdW5jdGlvbiBjYWxscyBub2RlIHR5cGUgaGFuZGxlci5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbihub2RlKSB7XG4gIGlmIChub2RlICYmICFnZW5lcmF0b3Jbbm9kZS50eXBlXSkge1xuICAgIHRocm93IG5ldyBFcnJvcihub2RlLnR5cGUgKyAnIGlzIG5vdCBzdXBwb3J0ZWQgaW4gTkZBL0RGQSBpbnRlcnByZXRlci4nKTtcbiAgfVxuXG4gIHJldHVybiBub2RlID8gZ2VuZXJhdG9yW25vZGUudHlwZV0obm9kZSkgOiAnJztcbn1cblxuLyoqXG4gKiBBU1QgaGFuZGxlci5cbiAqL1xudmFyIGdlbmVyYXRvciA9IHtcbiAgUmVnRXhwOiBmdW5jdGlvbiBSZWdFeHAobm9kZSkge1xuICAgIGlmIChub2RlLmZsYWdzICE9PSAnJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdORkEvREZBOiBGbGFncyBhcmUgbm90IHN1cHBvcnRlZCB5ZXQuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdlbihub2RlLmJvZHkpO1xuICB9LFxuICBBbHRlcm5hdGl2ZTogZnVuY3Rpb24gQWx0ZXJuYXRpdmUobm9kZSkge1xuICAgIHZhciBmcmFnbWVudHMgPSAobm9kZS5leHByZXNzaW9ucyB8fCBbXSkubWFwKGdlbik7XG4gICAgcmV0dXJuIGFsdC5hcHBseSh1bmRlZmluZWQsIF90b0NvbnN1bWFibGVBcnJheShmcmFnbWVudHMpKTtcbiAgfSxcbiAgRGlzanVuY3Rpb246IGZ1bmN0aW9uIERpc2p1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gb3IoZ2VuKG5vZGUubGVmdCksIGdlbihub2RlLnJpZ2h0KSk7XG4gIH0sXG4gIFJlcGV0aXRpb246IGZ1bmN0aW9uIFJlcGV0aXRpb24obm9kZSkge1xuICAgIHN3aXRjaCAobm9kZS5xdWFudGlmaWVyLmtpbmQpIHtcbiAgICAgIGNhc2UgJyonOlxuICAgICAgICByZXR1cm4gcmVwKGdlbihub2RlLmV4cHJlc3Npb24pKTtcbiAgICAgIGNhc2UgJysnOlxuICAgICAgICByZXR1cm4gcGx1c1JlcChnZW4obm9kZS5leHByZXNzaW9uKSk7XG4gICAgICBjYXNlICc/JzpcbiAgICAgICAgcmV0dXJuIHF1ZXN0aW9uUmVwKGdlbihub2RlLmV4cHJlc3Npb24pKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biByZXBlYXRpdGlvbjogJyArIG5vZGUucXVhbnRpZmllci5raW5kICsgJy4nKTtcbiAgICB9XG4gIH0sXG4gIENoYXI6IGZ1bmN0aW9uIENoYXIobm9kZSkge1xuICAgIGlmIChub2RlLmtpbmQgIT09ICdzaW1wbGUnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05GQS9ERkE6IE9ubHkgc2ltcGxlIGNoYXJzIGFyZSBzdXBwb3J0ZWQgeWV0LicpO1xuICAgIH1cblxuICAgIHJldHVybiBjaGFyKG5vZGUudmFsdWUpO1xuICB9LFxuICBHcm91cDogZnVuY3Rpb24gR3JvdXAobm9kZSkge1xuICAgIHJldHVybiBnZW4obm9kZS5leHByZXNzaW9uKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8qKlxuICAgKiBCdWlsZHMgYW4gTkZBIGZyb20gdGhlIHBhc3NlZCByZWdleHAuXG4gICAqL1xuICBidWlsZDogZnVuY3Rpb24gYnVpbGQocmVnZXhwKSB7XG4gICAgdmFyIGFzdCA9IHJlZ2V4cDtcblxuICAgIGlmIChyZWdleHAgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJlZ2V4cCA9ICcnICsgcmVnZXhwO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVnZXhwID09PSAnc3RyaW5nJykge1xuICAgICAgYXN0ID0gcGFyc2VyLnBhcnNlKHJlZ2V4cCwge1xuICAgICAgICBjYXB0dXJlTG9jYXRpb25zOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2VuKGFzdCk7XG4gIH1cbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZOztBQUVaLFNBQVNBLGtCQUFrQkEsQ0FBQ0MsR0FBRyxFQUFFO0VBQUUsSUFBSUMsS0FBSyxDQUFDQyxPQUFPLENBQUNGLEdBQUcsQ0FBQyxFQUFFO0lBQUUsS0FBSyxJQUFJRyxDQUFDLEdBQUcsQ0FBQyxFQUFFQyxJQUFJLEdBQUdILEtBQUssQ0FBQ0QsR0FBRyxDQUFDSyxNQUFNLENBQUMsRUFBRUYsQ0FBQyxHQUFHSCxHQUFHLENBQUNLLE1BQU0sRUFBRUYsQ0FBQyxFQUFFLEVBQUU7TUFBRUMsSUFBSSxDQUFDRCxDQUFDLENBQUMsR0FBR0gsR0FBRyxDQUFDRyxDQUFDLENBQUM7SUFBRTtJQUFFLE9BQU9DLElBQUk7RUFBRSxDQUFDLE1BQU07SUFBRSxPQUFPSCxLQUFLLENBQUNLLElBQUksQ0FBQ04sR0FBRyxDQUFDO0VBQUU7QUFBRTtBQUVsTSxJQUFJTyxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztBQUV2QyxJQUFJQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyxZQUFZLENBQUM7RUFDaENFLEdBQUcsR0FBR0QsUUFBUSxDQUFDQyxHQUFHO0VBQ2xCQyxJQUFJLEdBQUdGLFFBQVEsQ0FBQ0UsSUFBSTtFQUNwQkMsRUFBRSxHQUFHSCxRQUFRLENBQUNHLEVBQUU7RUFDaEJDLEdBQUcsR0FBR0osUUFBUSxDQUFDSSxHQUFHO0VBQ2xCQyxPQUFPLEdBQUdMLFFBQVEsQ0FBQ0ssT0FBTztFQUMxQkMsV0FBVyxHQUFHTixRQUFRLENBQUNNLFdBQVc7O0FBRXRDO0FBQ0E7QUFDQTs7QUFHQSxTQUFTQyxHQUFHQSxDQUFDQyxJQUFJLEVBQUU7RUFDakIsSUFBSUEsSUFBSSxJQUFJLENBQUNDLFNBQVMsQ0FBQ0QsSUFBSSxDQUFDRSxJQUFJLENBQUMsRUFBRTtJQUNqQyxNQUFNLElBQUlDLEtBQUssQ0FBQ0gsSUFBSSxDQUFDRSxJQUFJLEdBQUcsMkNBQTJDLENBQUM7RUFDMUU7RUFFQSxPQUFPRixJQUFJLEdBQUdDLFNBQVMsQ0FBQ0QsSUFBSSxDQUFDRSxJQUFJLENBQUMsQ0FBQ0YsSUFBSSxDQUFDLEdBQUcsRUFBRTtBQUMvQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQyxTQUFTLEdBQUc7RUFDZEcsTUFBTSxFQUFFLFNBQVNBLE1BQU1BLENBQUNKLElBQUksRUFBRTtJQUM1QixJQUFJQSxJQUFJLENBQUNLLEtBQUssS0FBSyxFQUFFLEVBQUU7TUFDckIsTUFBTSxJQUFJRixLQUFLLENBQUMsdUNBQXVDLENBQUM7SUFDMUQ7SUFFQSxPQUFPSixHQUFHLENBQUNDLElBQUksQ0FBQ00sSUFBSSxDQUFDO0VBQ3ZCLENBQUM7RUFDREMsV0FBVyxFQUFFLFNBQVNBLFdBQVdBLENBQUNQLElBQUksRUFBRTtJQUN0QyxJQUFJUSxTQUFTLEdBQUcsQ0FBQ1IsSUFBSSxDQUFDUyxXQUFXLElBQUksRUFBRSxFQUFFQyxHQUFHLENBQUNYLEdBQUcsQ0FBQztJQUNqRCxPQUFPTixHQUFHLENBQUNrQixLQUFLLENBQUNDLFNBQVMsRUFBRTlCLGtCQUFrQixDQUFDMEIsU0FBUyxDQUFDLENBQUM7RUFDNUQsQ0FBQztFQUNESyxXQUFXLEVBQUUsU0FBU0EsV0FBV0EsQ0FBQ2IsSUFBSSxFQUFFO0lBQ3RDLE9BQU9MLEVBQUUsQ0FBQ0ksR0FBRyxDQUFDQyxJQUFJLENBQUNjLElBQUksQ0FBQyxFQUFFZixHQUFHLENBQUNDLElBQUksQ0FBQ2UsS0FBSyxDQUFDLENBQUM7RUFDNUMsQ0FBQztFQUNEQyxVQUFVLEVBQUUsU0FBU0EsVUFBVUEsQ0FBQ2hCLElBQUksRUFBRTtJQUNwQyxRQUFRQSxJQUFJLENBQUNpQixVQUFVLENBQUNDLElBQUk7TUFDMUIsS0FBSyxHQUFHO1FBQ04sT0FBT3RCLEdBQUcsQ0FBQ0csR0FBRyxDQUFDQyxJQUFJLENBQUNtQixVQUFVLENBQUMsQ0FBQztNQUNsQyxLQUFLLEdBQUc7UUFDTixPQUFPdEIsT0FBTyxDQUFDRSxHQUFHLENBQUNDLElBQUksQ0FBQ21CLFVBQVUsQ0FBQyxDQUFDO01BQ3RDLEtBQUssR0FBRztRQUNOLE9BQU9yQixXQUFXLENBQUNDLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDbUIsVUFBVSxDQUFDLENBQUM7TUFDMUM7UUFDRSxNQUFNLElBQUloQixLQUFLLENBQUMsdUJBQXVCLEdBQUdILElBQUksQ0FBQ2lCLFVBQVUsQ0FBQ0MsSUFBSSxHQUFHLEdBQUcsQ0FBQztJQUFDO0VBRTVFLENBQUM7RUFDREUsSUFBSSxFQUFFLFNBQVNBLElBQUlBLENBQUNwQixJQUFJLEVBQUU7SUFDeEIsSUFBSUEsSUFBSSxDQUFDa0IsSUFBSSxLQUFLLFFBQVEsRUFBRTtNQUMxQixNQUFNLElBQUlmLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQztJQUNsRTtJQUVBLE9BQU9ULElBQUksQ0FBQ00sSUFBSSxDQUFDcUIsS0FBSyxDQUFDO0VBQ3pCLENBQUM7RUFDREMsS0FBSyxFQUFFLFNBQVNBLEtBQUtBLENBQUN0QixJQUFJLEVBQUU7SUFDMUIsT0FBT0QsR0FBRyxDQUFDQyxJQUFJLENBQUNtQixVQUFVLENBQUM7RUFDN0I7QUFDRixDQUFDO0FBRURJLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2Y7QUFDRjtBQUNBO0VBQ0VDLEtBQUssRUFBRSxTQUFTQSxLQUFLQSxDQUFDQyxNQUFNLEVBQUU7SUFDNUIsSUFBSUMsR0FBRyxHQUFHRCxNQUFNO0lBRWhCLElBQUlBLE1BQU0sWUFBWXRCLE1BQU0sRUFBRTtNQUM1QnNCLE1BQU0sR0FBRyxFQUFFLEdBQUdBLE1BQU07SUFDdEI7SUFFQSxJQUFJLE9BQU9BLE1BQU0sS0FBSyxRQUFRLEVBQUU7TUFDOUJDLEdBQUcsR0FBR3JDLE1BQU0sQ0FBQ3NDLEtBQUssQ0FBQ0YsTUFBTSxFQUFFO1FBQ3pCRyxnQkFBZ0IsRUFBRTtNQUNwQixDQUFDLENBQUM7SUFDSjtJQUVBLE9BQU85QixHQUFHLENBQUM0QixHQUFHLENBQUM7RUFDakI7QUFDRixDQUFDIn0=