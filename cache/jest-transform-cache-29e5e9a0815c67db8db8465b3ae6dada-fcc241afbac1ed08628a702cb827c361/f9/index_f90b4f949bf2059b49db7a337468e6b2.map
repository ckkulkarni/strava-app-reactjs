{"version":3,"names":["regexpTreeParser","require","generatedParseFn","parse","bind","regexp","options","setOptions","captureLocations","module","exports"],"sources":["index.js"],"sourcesContent":["/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n'use strict';\n\nvar regexpTreeParser = require('./generated/regexp-tree');\n\n/**\n * Original parse function.\n */\nvar generatedParseFn = regexpTreeParser.parse.bind(regexpTreeParser);\n\n/**\n * Parses a regular expression.\n *\n * Override original `regexpTreeParser.parse` to convert a value to a string,\n * since in regexp-tree we may pass strings, and RegExp instance.\n */\nregexpTreeParser.parse = function (regexp, options) {\n  return generatedParseFn('' + regexp, options);\n};\n\n// By default do not capture locations; callers may override.\nregexpTreeParser.setOptions({ captureLocations: false });\n\nmodule.exports = regexpTreeParser;"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,yBAAyB,CAAC;;AAEzD;AACA;AACA;AACA,IAAIC,gBAAgB,GAAGF,gBAAgB,CAACG,KAAK,CAACC,IAAI,CAACJ,gBAAgB,CAAC;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACAA,gBAAgB,CAACG,KAAK,GAAG,UAAUE,MAAM,EAAEC,OAAO,EAAE;EAClD,OAAOJ,gBAAgB,CAAC,EAAE,GAAGG,MAAM,EAAEC,OAAO,CAAC;AAC/C,CAAC;;AAED;AACAN,gBAAgB,CAACO,UAAU,CAAC;EAAEC,gBAAgB,EAAE;AAAM,CAAC,CAAC;AAExDC,MAAM,CAACC,OAAO,GAAGV,gBAAgB"}