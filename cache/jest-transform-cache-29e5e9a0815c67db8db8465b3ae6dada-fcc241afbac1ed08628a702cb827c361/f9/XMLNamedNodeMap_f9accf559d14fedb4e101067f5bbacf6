38e7878fd22938686ed76d70aaf23b59
"use strict";

// Generated by CoffeeScript 2.4.1
(function () {
  // Represents a map of nodes accessed by a string key
  var XMLNamedNodeMap;
  module.exports = XMLNamedNodeMap = function () {
    class XMLNamedNodeMap {
      // Initializes a new instance of `XMLNamedNodeMap`
      // This is just a wrapper around an ordinary
      // JS object.

      // `nodes` the object containing nodes.
      constructor(nodes) {
        this.nodes = nodes;
      }

      // Creates and returns a deep clone of `this`

      clone() {
        // this class should not be cloned since it wraps
        // around a given object. The calling function should check
        // whether the wrapped object is null and supply a new object
        // (from the clone).
        return this.nodes = null;
      }

      // DOM Level 1
      getNamedItem(name) {
        return this.nodes[name];
      }
      setNamedItem(node) {
        var oldNode;
        oldNode = this.nodes[node.nodeName];
        this.nodes[node.nodeName] = node;
        return oldNode || null;
      }
      removeNamedItem(name) {
        var oldNode;
        oldNode = this.nodes[name];
        delete this.nodes[name];
        return oldNode || null;
      }
      item(index) {
        return this.nodes[Object.keys(this.nodes)[index]] || null;
      }

      // DOM level 2 functions to be implemented later
      getNamedItemNS(namespaceURI, localName) {
        throw new Error("This DOM method is not implemented.");
      }
      setNamedItemNS(node) {
        throw new Error("This DOM method is not implemented.");
      }
      removeNamedItemNS(namespaceURI, localName) {
        throw new Error("This DOM method is not implemented.");
      }
    }
    ;

    // DOM level 1
    Object.defineProperty(XMLNamedNodeMap.prototype, 'length', {
      get: function () {
        return Object.keys(this.nodes).length || 0;
      }
    });
    return XMLNamedNodeMap;
  }.call(this);
}).call(void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJYTUxOYW1lZE5vZGVNYXAiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29uc3RydWN0b3IiLCJub2RlcyIsImNsb25lIiwiZ2V0TmFtZWRJdGVtIiwibmFtZSIsInNldE5hbWVkSXRlbSIsIm5vZGUiLCJvbGROb2RlIiwibm9kZU5hbWUiLCJyZW1vdmVOYW1lZEl0ZW0iLCJpdGVtIiwiaW5kZXgiLCJPYmplY3QiLCJrZXlzIiwiZ2V0TmFtZWRJdGVtTlMiLCJuYW1lc3BhY2VVUkkiLCJsb2NhbE5hbWUiLCJFcnJvciIsInNldE5hbWVkSXRlbU5TIiwicmVtb3ZlTmFtZWRJdGVtTlMiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvdHlwZSIsImdldCIsImxlbmd0aCIsImNhbGwiXSwic291cmNlcyI6WyJYTUxOYW1lZE5vZGVNYXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAyLjQuMVxuKGZ1bmN0aW9uKCkge1xuICAvLyBSZXByZXNlbnRzIGEgbWFwIG9mIG5vZGVzIGFjY2Vzc2VkIGJ5IGEgc3RyaW5nIGtleVxuICB2YXIgWE1MTmFtZWROb2RlTWFwO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MTmFtZWROb2RlTWFwID0gKGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzIFhNTE5hbWVkTm9kZU1hcCB7XG4gICAgICAvLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiBgWE1MTmFtZWROb2RlTWFwYFxuICAgICAgLy8gVGhpcyBpcyBqdXN0IGEgd3JhcHBlciBhcm91bmQgYW4gb3JkaW5hcnlcbiAgICAgIC8vIEpTIG9iamVjdC5cblxuICAgICAgLy8gYG5vZGVzYCB0aGUgb2JqZWN0IGNvbnRhaW5pbmcgbm9kZXMuXG4gICAgICBjb25zdHJ1Y3Rvcihub2Rlcykge1xuICAgICAgICB0aGlzLm5vZGVzID0gbm9kZXM7XG4gICAgICB9XG5cbiAgICAgIC8vIENyZWF0ZXMgYW5kIHJldHVybnMgYSBkZWVwIGNsb25lIG9mIGB0aGlzYFxuXG4gICAgICBjbG9uZSgpIHtcbiAgICAgICAgLy8gdGhpcyBjbGFzcyBzaG91bGQgbm90IGJlIGNsb25lZCBzaW5jZSBpdCB3cmFwc1xuICAgICAgICAvLyBhcm91bmQgYSBnaXZlbiBvYmplY3QuIFRoZSBjYWxsaW5nIGZ1bmN0aW9uIHNob3VsZCBjaGVja1xuICAgICAgICAvLyB3aGV0aGVyIHRoZSB3cmFwcGVkIG9iamVjdCBpcyBudWxsIGFuZCBzdXBwbHkgYSBuZXcgb2JqZWN0XG4gICAgICAgIC8vIChmcm9tIHRoZSBjbG9uZSkuXG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gRE9NIExldmVsIDFcbiAgICAgIGdldE5hbWVkSXRlbShuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVzW25hbWVdO1xuICAgICAgfVxuXG4gICAgICBzZXROYW1lZEl0ZW0obm9kZSkge1xuICAgICAgICB2YXIgb2xkTm9kZTtcbiAgICAgICAgb2xkTm9kZSA9IHRoaXMubm9kZXNbbm9kZS5ub2RlTmFtZV07XG4gICAgICAgIHRoaXMubm9kZXNbbm9kZS5ub2RlTmFtZV0gPSBub2RlO1xuICAgICAgICByZXR1cm4gb2xkTm9kZSB8fCBudWxsO1xuICAgICAgfVxuXG4gICAgICByZW1vdmVOYW1lZEl0ZW0obmFtZSkge1xuICAgICAgICB2YXIgb2xkTm9kZTtcbiAgICAgICAgb2xkTm9kZSA9IHRoaXMubm9kZXNbbmFtZV07XG4gICAgICAgIGRlbGV0ZSB0aGlzLm5vZGVzW25hbWVdO1xuICAgICAgICByZXR1cm4gb2xkTm9kZSB8fCBudWxsO1xuICAgICAgfVxuXG4gICAgICBpdGVtKGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVzW09iamVjdC5rZXlzKHRoaXMubm9kZXMpW2luZGV4XV0gfHwgbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gRE9NIGxldmVsIDIgZnVuY3Rpb25zIHRvIGJlIGltcGxlbWVudGVkIGxhdGVyXG4gICAgICBnZXROYW1lZEl0ZW1OUyhuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICAgIH1cblxuICAgICAgc2V0TmFtZWRJdGVtTlMobm9kZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICAgIH1cblxuICAgICAgcmVtb3ZlTmFtZWRJdGVtTlMobmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgICB9XG5cbiAgICB9O1xuXG4gICAgXG4gICAgLy8gRE9NIGxldmVsIDFcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MTmFtZWROb2RlTWFwLnByb3RvdHlwZSwgJ2xlbmd0aCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLm5vZGVzKS5sZW5ndGggfHwgMDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBYTUxOYW1lZE5vZGVNYXA7XG5cbiAgfSkuY2FsbCh0aGlzKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBLENBQUMsWUFBVztFQUNWO0VBQ0EsSUFBSUEsZUFBZTtFQUVuQkMsTUFBTSxDQUFDQyxPQUFPLEdBQUdGLGVBQWUsR0FBSSxZQUFXO0lBQzdDLE1BQU1BLGVBQWUsQ0FBQztNQUNwQjtNQUNBO01BQ0E7O01BRUE7TUFDQUcsV0FBV0EsQ0FBQ0MsS0FBSyxFQUFFO1FBQ2pCLElBQUksQ0FBQ0EsS0FBSyxHQUFHQSxLQUFLO01BQ3BCOztNQUVBOztNQUVBQyxLQUFLQSxDQUFBLEVBQUc7UUFDTjtRQUNBO1FBQ0E7UUFDQTtRQUNBLE9BQU8sSUFBSSxDQUFDRCxLQUFLLEdBQUcsSUFBSTtNQUMxQjs7TUFFQTtNQUNBRSxZQUFZQSxDQUFDQyxJQUFJLEVBQUU7UUFDakIsT0FBTyxJQUFJLENBQUNILEtBQUssQ0FBQ0csSUFBSSxDQUFDO01BQ3pCO01BRUFDLFlBQVlBLENBQUNDLElBQUksRUFBRTtRQUNqQixJQUFJQyxPQUFPO1FBQ1hBLE9BQU8sR0FBRyxJQUFJLENBQUNOLEtBQUssQ0FBQ0ssSUFBSSxDQUFDRSxRQUFRLENBQUM7UUFDbkMsSUFBSSxDQUFDUCxLQUFLLENBQUNLLElBQUksQ0FBQ0UsUUFBUSxDQUFDLEdBQUdGLElBQUk7UUFDaEMsT0FBT0MsT0FBTyxJQUFJLElBQUk7TUFDeEI7TUFFQUUsZUFBZUEsQ0FBQ0wsSUFBSSxFQUFFO1FBQ3BCLElBQUlHLE9BQU87UUFDWEEsT0FBTyxHQUFHLElBQUksQ0FBQ04sS0FBSyxDQUFDRyxJQUFJLENBQUM7UUFDMUIsT0FBTyxJQUFJLENBQUNILEtBQUssQ0FBQ0csSUFBSSxDQUFDO1FBQ3ZCLE9BQU9HLE9BQU8sSUFBSSxJQUFJO01BQ3hCO01BRUFHLElBQUlBLENBQUNDLEtBQUssRUFBRTtRQUNWLE9BQU8sSUFBSSxDQUFDVixLQUFLLENBQUNXLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQ1osS0FBSyxDQUFDLENBQUNVLEtBQUssQ0FBQyxDQUFDLElBQUksSUFBSTtNQUMzRDs7TUFFQTtNQUNBRyxjQUFjQSxDQUFDQyxZQUFZLEVBQUVDLFNBQVMsRUFBRTtRQUN0QyxNQUFNLElBQUlDLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQztNQUN4RDtNQUVBQyxjQUFjQSxDQUFDWixJQUFJLEVBQUU7UUFDbkIsTUFBTSxJQUFJVyxLQUFLLENBQUMscUNBQXFDLENBQUM7TUFDeEQ7TUFFQUUsaUJBQWlCQSxDQUFDSixZQUFZLEVBQUVDLFNBQVMsRUFBRTtRQUN6QyxNQUFNLElBQUlDLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQztNQUN4RDtJQUVGO0lBQUM7O0lBR0Q7SUFDQUwsTUFBTSxDQUFDUSxjQUFjLENBQUN2QixlQUFlLENBQUN3QixTQUFTLEVBQUUsUUFBUSxFQUFFO01BQ3pEQyxHQUFHLEVBQUUsU0FBQUEsQ0FBQSxFQUFXO1FBQ2QsT0FBT1YsTUFBTSxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDWixLQUFLLENBQUMsQ0FBQ3NCLE1BQU0sSUFBSSxDQUFDO01BQzVDO0lBQ0YsQ0FBQyxDQUFDO0lBRUYsT0FBTzFCLGVBQWU7RUFFeEIsQ0FBQyxDQUFFMkIsSUFBSSxDQUFDLElBQUksQ0FBQztBQUVmLENBQUMsRUFBRUEsSUFBSSxRQUFNIn0=