033ba498f4e0130d1d39980b889a1acd
'use strict';

var composer = require('./compose/composer.js');
var Document = require('./doc/Document.js');
var errors = require('./errors.js');
var log = require('./log.js');
var lineCounter = require('./parse/line-counter.js');
var parser = require('./parse/parser.js');
function parseOptions(options) {
  const prettyErrors = options.prettyErrors !== false;
  const lineCounter$1 = options.lineCounter || prettyErrors && new lineCounter.LineCounter() || null;
  return {
    lineCounter: lineCounter$1,
    prettyErrors
  };
}
/**
 * Parse the input as a stream of YAML documents.
 *
 * Documents should be separated from each other by `...` or `---` marker lines.
 *
 * @returns If an empty `docs` array is returned, it will be of type
 *   EmptyStream and contain additional stream information. In
 *   TypeScript, you should use `'empty' in docs` as a type guard for it.
 */
function parseAllDocuments(source, options = {}) {
  const {
    lineCounter,
    prettyErrors
  } = parseOptions(options);
  const parser$1 = new parser.Parser(lineCounter?.addNewLine);
  const composer$1 = new composer.Composer(options);
  const docs = Array.from(composer$1.compose(parser$1.parse(source)));
  if (prettyErrors && lineCounter) for (const doc of docs) {
    doc.errors.forEach(errors.prettifyError(source, lineCounter));
    doc.warnings.forEach(errors.prettifyError(source, lineCounter));
  }
  if (docs.length > 0) return docs;
  return Object.assign([], {
    empty: true
  }, composer$1.streamInfo());
}
/** Parse an input string into a single YAML.Document */
function parseDocument(source, options = {}) {
  const {
    lineCounter,
    prettyErrors
  } = parseOptions(options);
  const parser$1 = new parser.Parser(lineCounter?.addNewLine);
  const composer$1 = new composer.Composer(options);
  // `doc` is always set by compose.end(true) at the very latest
  let doc = null;
  for (const _doc of composer$1.compose(parser$1.parse(source), true, source.length)) {
    if (!doc) doc = _doc;else if (doc.options.logLevel !== 'silent') {
      doc.errors.push(new errors.YAMLParseError(_doc.range.slice(0, 2), 'MULTIPLE_DOCS', 'Source contains multiple documents; please use YAML.parseAllDocuments()'));
      break;
    }
  }
  if (prettyErrors && lineCounter) {
    doc.errors.forEach(errors.prettifyError(source, lineCounter));
    doc.warnings.forEach(errors.prettifyError(source, lineCounter));
  }
  return doc;
}
function parse(src, reviver, options) {
  let _reviver = undefined;
  if (typeof reviver === 'function') {
    _reviver = reviver;
  } else if (options === undefined && reviver && typeof reviver === 'object') {
    options = reviver;
  }
  const doc = parseDocument(src, options);
  if (!doc) return null;
  doc.warnings.forEach(warning => log.warn(doc.options.logLevel, warning));
  if (doc.errors.length > 0) {
    if (doc.options.logLevel !== 'silent') throw doc.errors[0];else doc.errors = [];
  }
  return doc.toJS(Object.assign({
    reviver: _reviver
  }, options));
}
function stringify(value, replacer, options) {
  let _replacer = null;
  if (typeof replacer === 'function' || Array.isArray(replacer)) {
    _replacer = replacer;
  } else if (options === undefined && replacer) {
    options = replacer;
  }
  if (typeof options === 'string') options = options.length;
  if (typeof options === 'number') {
    const indent = Math.round(options);
    options = indent < 1 ? undefined : indent > 8 ? {
      indent: 8
    } : {
      indent
    };
  }
  if (value === undefined) {
    const {
      keepUndefined
    } = options ?? replacer ?? {};
    if (!keepUndefined) return undefined;
  }
  return new Document.Document(value, _replacer, options).toString(options);
}
exports.parse = parse;
exports.parseAllDocuments = parseAllDocuments;
exports.parseDocument = parseDocument;
exports.stringify = stringify;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21wb3NlciIsInJlcXVpcmUiLCJEb2N1bWVudCIsImVycm9ycyIsImxvZyIsImxpbmVDb3VudGVyIiwicGFyc2VyIiwicGFyc2VPcHRpb25zIiwib3B0aW9ucyIsInByZXR0eUVycm9ycyIsImxpbmVDb3VudGVyJDEiLCJMaW5lQ291bnRlciIsInBhcnNlQWxsRG9jdW1lbnRzIiwic291cmNlIiwicGFyc2VyJDEiLCJQYXJzZXIiLCJhZGROZXdMaW5lIiwiY29tcG9zZXIkMSIsIkNvbXBvc2VyIiwiZG9jcyIsIkFycmF5IiwiZnJvbSIsImNvbXBvc2UiLCJwYXJzZSIsImRvYyIsImZvckVhY2giLCJwcmV0dGlmeUVycm9yIiwid2FybmluZ3MiLCJsZW5ndGgiLCJPYmplY3QiLCJhc3NpZ24iLCJlbXB0eSIsInN0cmVhbUluZm8iLCJwYXJzZURvY3VtZW50IiwiX2RvYyIsImxvZ0xldmVsIiwicHVzaCIsIllBTUxQYXJzZUVycm9yIiwicmFuZ2UiLCJzbGljZSIsInNyYyIsInJldml2ZXIiLCJfcmV2aXZlciIsInVuZGVmaW5lZCIsIndhcm5pbmciLCJ3YXJuIiwidG9KUyIsInN0cmluZ2lmeSIsInZhbHVlIiwicmVwbGFjZXIiLCJfcmVwbGFjZXIiLCJpc0FycmF5IiwiaW5kZW50IiwiTWF0aCIsInJvdW5kIiwia2VlcFVuZGVmaW5lZCIsInRvU3RyaW5nIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInB1YmxpYy1hcGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY29tcG9zZXIgPSByZXF1aXJlKCcuL2NvbXBvc2UvY29tcG9zZXIuanMnKTtcbnZhciBEb2N1bWVudCA9IHJlcXVpcmUoJy4vZG9jL0RvY3VtZW50LmpzJyk7XG52YXIgZXJyb3JzID0gcmVxdWlyZSgnLi9lcnJvcnMuanMnKTtcbnZhciBsb2cgPSByZXF1aXJlKCcuL2xvZy5qcycpO1xudmFyIGxpbmVDb3VudGVyID0gcmVxdWlyZSgnLi9wYXJzZS9saW5lLWNvdW50ZXIuanMnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCcuL3BhcnNlL3BhcnNlci5qcycpO1xuXG5mdW5jdGlvbiBwYXJzZU9wdGlvbnMob3B0aW9ucykge1xuICAgIGNvbnN0IHByZXR0eUVycm9ycyA9IG9wdGlvbnMucHJldHR5RXJyb3JzICE9PSBmYWxzZTtcbiAgICBjb25zdCBsaW5lQ291bnRlciQxID0gb3B0aW9ucy5saW5lQ291bnRlciB8fCAocHJldHR5RXJyb3JzICYmIG5ldyBsaW5lQ291bnRlci5MaW5lQ291bnRlcigpKSB8fCBudWxsO1xuICAgIHJldHVybiB7IGxpbmVDb3VudGVyOiBsaW5lQ291bnRlciQxLCBwcmV0dHlFcnJvcnMgfTtcbn1cbi8qKlxuICogUGFyc2UgdGhlIGlucHV0IGFzIGEgc3RyZWFtIG9mIFlBTUwgZG9jdW1lbnRzLlxuICpcbiAqIERvY3VtZW50cyBzaG91bGQgYmUgc2VwYXJhdGVkIGZyb20gZWFjaCBvdGhlciBieSBgLi4uYCBvciBgLS0tYCBtYXJrZXIgbGluZXMuXG4gKlxuICogQHJldHVybnMgSWYgYW4gZW1wdHkgYGRvY3NgIGFycmF5IGlzIHJldHVybmVkLCBpdCB3aWxsIGJlIG9mIHR5cGVcbiAqICAgRW1wdHlTdHJlYW0gYW5kIGNvbnRhaW4gYWRkaXRpb25hbCBzdHJlYW0gaW5mb3JtYXRpb24uIEluXG4gKiAgIFR5cGVTY3JpcHQsIHlvdSBzaG91bGQgdXNlIGAnZW1wdHknIGluIGRvY3NgIGFzIGEgdHlwZSBndWFyZCBmb3IgaXQuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlQWxsRG9jdW1lbnRzKHNvdXJjZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyBsaW5lQ291bnRlciwgcHJldHR5RXJyb3JzIH0gPSBwYXJzZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgY29uc3QgcGFyc2VyJDEgPSBuZXcgcGFyc2VyLlBhcnNlcihsaW5lQ291bnRlcj8uYWRkTmV3TGluZSk7XG4gICAgY29uc3QgY29tcG9zZXIkMSA9IG5ldyBjb21wb3Nlci5Db21wb3NlcihvcHRpb25zKTtcbiAgICBjb25zdCBkb2NzID0gQXJyYXkuZnJvbShjb21wb3NlciQxLmNvbXBvc2UocGFyc2VyJDEucGFyc2Uoc291cmNlKSkpO1xuICAgIGlmIChwcmV0dHlFcnJvcnMgJiYgbGluZUNvdW50ZXIpXG4gICAgICAgIGZvciAoY29uc3QgZG9jIG9mIGRvY3MpIHtcbiAgICAgICAgICAgIGRvYy5lcnJvcnMuZm9yRWFjaChlcnJvcnMucHJldHRpZnlFcnJvcihzb3VyY2UsIGxpbmVDb3VudGVyKSk7XG4gICAgICAgICAgICBkb2Mud2FybmluZ3MuZm9yRWFjaChlcnJvcnMucHJldHRpZnlFcnJvcihzb3VyY2UsIGxpbmVDb3VudGVyKSk7XG4gICAgICAgIH1cbiAgICBpZiAoZG9jcy5sZW5ndGggPiAwKVxuICAgICAgICByZXR1cm4gZG9jcztcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihbXSwgeyBlbXB0eTogdHJ1ZSB9LCBjb21wb3NlciQxLnN0cmVhbUluZm8oKSk7XG59XG4vKiogUGFyc2UgYW4gaW5wdXQgc3RyaW5nIGludG8gYSBzaW5nbGUgWUFNTC5Eb2N1bWVudCAqL1xuZnVuY3Rpb24gcGFyc2VEb2N1bWVudChzb3VyY2UsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgbGluZUNvdW50ZXIsIHByZXR0eUVycm9ycyB9ID0gcGFyc2VPcHRpb25zKG9wdGlvbnMpO1xuICAgIGNvbnN0IHBhcnNlciQxID0gbmV3IHBhcnNlci5QYXJzZXIobGluZUNvdW50ZXI/LmFkZE5ld0xpbmUpO1xuICAgIGNvbnN0IGNvbXBvc2VyJDEgPSBuZXcgY29tcG9zZXIuQ29tcG9zZXIob3B0aW9ucyk7XG4gICAgLy8gYGRvY2AgaXMgYWx3YXlzIHNldCBieSBjb21wb3NlLmVuZCh0cnVlKSBhdCB0aGUgdmVyeSBsYXRlc3RcbiAgICBsZXQgZG9jID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IF9kb2Mgb2YgY29tcG9zZXIkMS5jb21wb3NlKHBhcnNlciQxLnBhcnNlKHNvdXJjZSksIHRydWUsIHNvdXJjZS5sZW5ndGgpKSB7XG4gICAgICAgIGlmICghZG9jKVxuICAgICAgICAgICAgZG9jID0gX2RvYztcbiAgICAgICAgZWxzZSBpZiAoZG9jLm9wdGlvbnMubG9nTGV2ZWwgIT09ICdzaWxlbnQnKSB7XG4gICAgICAgICAgICBkb2MuZXJyb3JzLnB1c2gobmV3IGVycm9ycy5ZQU1MUGFyc2VFcnJvcihfZG9jLnJhbmdlLnNsaWNlKDAsIDIpLCAnTVVMVElQTEVfRE9DUycsICdTb3VyY2UgY29udGFpbnMgbXVsdGlwbGUgZG9jdW1lbnRzOyBwbGVhc2UgdXNlIFlBTUwucGFyc2VBbGxEb2N1bWVudHMoKScpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChwcmV0dHlFcnJvcnMgJiYgbGluZUNvdW50ZXIpIHtcbiAgICAgICAgZG9jLmVycm9ycy5mb3JFYWNoKGVycm9ycy5wcmV0dGlmeUVycm9yKHNvdXJjZSwgbGluZUNvdW50ZXIpKTtcbiAgICAgICAgZG9jLndhcm5pbmdzLmZvckVhY2goZXJyb3JzLnByZXR0aWZ5RXJyb3Ioc291cmNlLCBsaW5lQ291bnRlcikpO1xuICAgIH1cbiAgICByZXR1cm4gZG9jO1xufVxuZnVuY3Rpb24gcGFyc2Uoc3JjLCByZXZpdmVyLCBvcHRpb25zKSB7XG4gICAgbGV0IF9yZXZpdmVyID0gdW5kZWZpbmVkO1xuICAgIGlmICh0eXBlb2YgcmV2aXZlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBfcmV2aXZlciA9IHJldml2ZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCAmJiByZXZpdmVyICYmIHR5cGVvZiByZXZpdmVyID09PSAnb2JqZWN0Jykge1xuICAgICAgICBvcHRpb25zID0gcmV2aXZlcjtcbiAgICB9XG4gICAgY29uc3QgZG9jID0gcGFyc2VEb2N1bWVudChzcmMsIG9wdGlvbnMpO1xuICAgIGlmICghZG9jKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBkb2Mud2FybmluZ3MuZm9yRWFjaCh3YXJuaW5nID0+IGxvZy53YXJuKGRvYy5vcHRpb25zLmxvZ0xldmVsLCB3YXJuaW5nKSk7XG4gICAgaWYgKGRvYy5lcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoZG9jLm9wdGlvbnMubG9nTGV2ZWwgIT09ICdzaWxlbnQnKVxuICAgICAgICAgICAgdGhyb3cgZG9jLmVycm9yc1swXTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZG9jLmVycm9ycyA9IFtdO1xuICAgIH1cbiAgICByZXR1cm4gZG9jLnRvSlMoT2JqZWN0LmFzc2lnbih7IHJldml2ZXI6IF9yZXZpdmVyIH0sIG9wdGlvbnMpKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeSh2YWx1ZSwgcmVwbGFjZXIsIG9wdGlvbnMpIHtcbiAgICBsZXQgX3JlcGxhY2VyID0gbnVsbDtcbiAgICBpZiAodHlwZW9mIHJlcGxhY2VyID09PSAnZnVuY3Rpb24nIHx8IEFycmF5LmlzQXJyYXkocmVwbGFjZXIpKSB7XG4gICAgICAgIF9yZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgIH1cbiAgICBlbHNlIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQgJiYgcmVwbGFjZXIpIHtcbiAgICAgICAgb3B0aW9ucyA9IHJlcGxhY2VyO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKVxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucy5sZW5ndGg7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25zdCBpbmRlbnQgPSBNYXRoLnJvdW5kKG9wdGlvbnMpO1xuICAgICAgICBvcHRpb25zID0gaW5kZW50IDwgMSA/IHVuZGVmaW5lZCA6IGluZGVudCA+IDggPyB7IGluZGVudDogOCB9IDogeyBpbmRlbnQgfTtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgeyBrZWVwVW5kZWZpbmVkIH0gPSBvcHRpb25zID8/IHJlcGxhY2VyID8/IHt9O1xuICAgICAgICBpZiAoIWtlZXBVbmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERvY3VtZW50LkRvY3VtZW50KHZhbHVlLCBfcmVwbGFjZXIsIG9wdGlvbnMpLnRvU3RyaW5nKG9wdGlvbnMpO1xufVxuXG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5leHBvcnRzLnBhcnNlQWxsRG9jdW1lbnRzID0gcGFyc2VBbGxEb2N1bWVudHM7XG5leHBvcnRzLnBhcnNlRG9jdW1lbnQgPSBwYXJzZURvY3VtZW50O1xuZXhwb3J0cy5zdHJpbmdpZnkgPSBzdHJpbmdpZnk7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsdUJBQXVCLENBQUM7QUFDL0MsSUFBSUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsbUJBQW1CLENBQUM7QUFDM0MsSUFBSUUsTUFBTSxHQUFHRixPQUFPLENBQUMsYUFBYSxDQUFDO0FBQ25DLElBQUlHLEdBQUcsR0FBR0gsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUM3QixJQUFJSSxXQUFXLEdBQUdKLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztBQUNwRCxJQUFJSyxNQUFNLEdBQUdMLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztBQUV6QyxTQUFTTSxZQUFZQSxDQUFDQyxPQUFPLEVBQUU7RUFDM0IsTUFBTUMsWUFBWSxHQUFHRCxPQUFPLENBQUNDLFlBQVksS0FBSyxLQUFLO0VBQ25ELE1BQU1DLGFBQWEsR0FBR0YsT0FBTyxDQUFDSCxXQUFXLElBQUtJLFlBQVksSUFBSSxJQUFJSixXQUFXLENBQUNNLFdBQVcsRUFBRyxJQUFJLElBQUk7RUFDcEcsT0FBTztJQUFFTixXQUFXLEVBQUVLLGFBQWE7SUFBRUQ7RUFBYSxDQUFDO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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