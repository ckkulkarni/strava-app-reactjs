{"version":3,"names":["Node","require","Scalar","stringify","stringifyComment","stringifyPair","key","value","ctx","onComment","onChompKeep","allNullValues","doc","indent","indentStep","options","commentString","indentSeq","simpleKeys","keyComment","isNode","comment","Error","isCollection","msg","explicitKey","inFlow","isScalar","type","BLOCK_FOLDED","BLOCK_LITERAL","Object","assign","implicitKey","keyCommentDone","chompKeep","str","length","lineComment","vsb","vcb","valueComment","spaceBefore","commentBefore","createNode","indentAtStart","isSeq","flow","tag","anchor","substring","valueCommentDone","valueStr","ws","cs","indentComment","vs0","nl0","indexOf","hasNewline","items","hasPropsLine","sp0","exports"],"sources":["stringifyPair.js"],"sourcesContent":["'use strict';\n\nvar Node = require('../nodes/Node.js');\nvar Scalar = require('../nodes/Scalar.js');\nvar stringify = require('./stringify.js');\nvar stringifyComment = require('./stringifyComment.js');\n\nfunction stringifyPair({ key, value }, ctx, onComment, onChompKeep) {\n    const { allNullValues, doc, indent, indentStep, options: { commentString, indentSeq, simpleKeys } } = ctx;\n    let keyComment = (Node.isNode(key) && key.comment) || null;\n    if (simpleKeys) {\n        if (keyComment) {\n            throw new Error('With simple keys, key nodes cannot have comments');\n        }\n        if (Node.isCollection(key)) {\n            const msg = 'With simple keys, collection cannot be used as a key value';\n            throw new Error(msg);\n        }\n    }\n    let explicitKey = !simpleKeys &&\n        (!key ||\n            (keyComment && value == null && !ctx.inFlow) ||\n            Node.isCollection(key) ||\n            (Node.isScalar(key)\n                ? key.type === Scalar.Scalar.BLOCK_FOLDED || key.type === Scalar.Scalar.BLOCK_LITERAL\n                : typeof key === 'object'));\n    ctx = Object.assign({}, ctx, {\n        allNullValues: false,\n        implicitKey: !explicitKey && (simpleKeys || !allNullValues),\n        indent: indent + indentStep\n    });\n    let keyCommentDone = false;\n    let chompKeep = false;\n    let str = stringify.stringify(key, ctx, () => (keyCommentDone = true), () => (chompKeep = true));\n    if (!explicitKey && !ctx.inFlow && str.length > 1024) {\n        if (simpleKeys)\n            throw new Error('With simple keys, single line scalar must not span more than 1024 characters');\n        explicitKey = true;\n    }\n    if (ctx.inFlow) {\n        if (allNullValues || value == null) {\n            if (keyCommentDone && onComment)\n                onComment();\n            return str === '' ? '?' : explicitKey ? `? ${str}` : str;\n        }\n    }\n    else if ((allNullValues && !simpleKeys) || (value == null && explicitKey)) {\n        str = `? ${str}`;\n        if (keyComment && !keyCommentDone) {\n            str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));\n        }\n        else if (chompKeep && onChompKeep)\n            onChompKeep();\n        return str;\n    }\n    if (keyCommentDone)\n        keyComment = null;\n    if (explicitKey) {\n        if (keyComment)\n            str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));\n        str = `? ${str}\\n${indent}:`;\n    }\n    else {\n        str = `${str}:`;\n        if (keyComment)\n            str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));\n    }\n    let vsb, vcb, valueComment;\n    if (Node.isNode(value)) {\n        vsb = !!value.spaceBefore;\n        vcb = value.commentBefore;\n        valueComment = value.comment;\n    }\n    else {\n        vsb = false;\n        vcb = null;\n        valueComment = null;\n        if (value && typeof value === 'object')\n            value = doc.createNode(value);\n    }\n    ctx.implicitKey = false;\n    if (!explicitKey && !keyComment && Node.isScalar(value))\n        ctx.indentAtStart = str.length + 1;\n    chompKeep = false;\n    if (!indentSeq &&\n        indentStep.length >= 2 &&\n        !ctx.inFlow &&\n        !explicitKey &&\n        Node.isSeq(value) &&\n        !value.flow &&\n        !value.tag &&\n        !value.anchor) {\n        // If indentSeq === false, consider '- ' as part of indentation where possible\n        ctx.indent = ctx.indent.substring(2);\n    }\n    let valueCommentDone = false;\n    const valueStr = stringify.stringify(value, ctx, () => (valueCommentDone = true), () => (chompKeep = true));\n    let ws = ' ';\n    if (keyComment || vsb || vcb) {\n        ws = vsb ? '\\n' : '';\n        if (vcb) {\n            const cs = commentString(vcb);\n            ws += `\\n${stringifyComment.indentComment(cs, ctx.indent)}`;\n        }\n        if (valueStr === '' && !ctx.inFlow) {\n            if (ws === '\\n')\n                ws = '\\n\\n';\n        }\n        else {\n            ws += `\\n${ctx.indent}`;\n        }\n    }\n    else if (!explicitKey && Node.isCollection(value)) {\n        const vs0 = valueStr[0];\n        const nl0 = valueStr.indexOf('\\n');\n        const hasNewline = nl0 !== -1;\n        const flow = ctx.inFlow ?? value.flow ?? value.items.length === 0;\n        if (hasNewline || !flow) {\n            let hasPropsLine = false;\n            if (hasNewline && (vs0 === '&' || vs0 === '!')) {\n                let sp0 = valueStr.indexOf(' ');\n                if (vs0 === '&' &&\n                    sp0 !== -1 &&\n                    sp0 < nl0 &&\n                    valueStr[sp0 + 1] === '!') {\n                    sp0 = valueStr.indexOf(' ', sp0 + 1);\n                }\n                if (sp0 === -1 || nl0 < sp0)\n                    hasPropsLine = true;\n            }\n            if (!hasPropsLine)\n                ws = `\\n${ctx.indent}`;\n        }\n    }\n    else if (valueStr === '' || valueStr[0] === '\\n') {\n        ws = '';\n    }\n    str += ws + valueStr;\n    if (ctx.inFlow) {\n        if (valueCommentDone && onComment)\n            onComment();\n    }\n    else if (valueComment && !valueCommentDone) {\n        str += stringifyComment.lineComment(str, ctx.indent, commentString(valueComment));\n    }\n    else if (chompKeep && onChompKeep) {\n        onChompKeep();\n    }\n    return str;\n}\n\nexports.stringifyPair = stringifyPair;\n"],"mappings":"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"}