bca624969dde47baa5e1b47131ecc34e
/**
 * The MIT License (MIT)
 * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>
 */

'use strict';

/**
 * A regexp-tree plugin to replace single char character classes with
 * just that character.
 *
 * [\d] -> \d, [^\w] -> \W
 */
module.exports = {
  CharacterClass: function CharacterClass(path) {
    var node = path.node;
    if (node.expressions.length !== 1 || !hasAppropriateSiblings(path) || !isAppropriateChar(node.expressions[0])) {
      return;
    }
    var _node$expressions$ = node.expressions[0],
      value = _node$expressions$.value,
      kind = _node$expressions$.kind,
      escaped = _node$expressions$.escaped;
    if (node.negative) {
      // For negative can extract only meta chars like [^\w] -> \W
      // cannot do for [^a] -> a (wrong).
      if (!isMeta(value)) {
        return;
      }
      value = getInverseMeta(value);
    }
    path.replace({
      type: 'Char',
      value: value,
      kind: kind,
      escaped: escaped || shouldEscape(value)
    });
  }
};
function isAppropriateChar(node) {
  return node.type === 'Char' &&
  // We don't extract [\b] (backspace) since \b has different
  // semantics (word boundary).
  node.value !== '\\b';
}
function isMeta(value) {
  return /^\\[dwsDWS]$/.test(value);
}
function getInverseMeta(value) {
  return /[dws]/.test(value) ? value.toUpperCase() : value.toLowerCase();
}
function hasAppropriateSiblings(path) {
  var parent = path.parent,
    index = path.index;
  if (parent.type !== 'Alternative') {
    return true;
  }
  var previousNode = parent.expressions[index - 1];
  if (previousNode == null) {
    return true;
  }

  // Don't optimized \1[0] to \10
  if (previousNode.type === 'Backreference' && previousNode.kind === 'number') {
    return false;
  }

  // Don't optimized \2[0] to \20
  if (previousNode.type === 'Char' && previousNode.kind === 'decimal') {
    return false;
  }
  return true;
}

// Note: \{ and \} are always preserved to avoid `a[{]2[}]` turning
// into `a{2}`.
function shouldEscape(value) {
  return /[*[()+?$./{}|]/.test(value);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQ2hhcmFjdGVyQ2xhc3MiLCJwYXRoIiwibm9kZSIsImV4cHJlc3Npb25zIiwibGVuZ3RoIiwiaGFzQXBwcm9wcmlhdGVTaWJsaW5ncyIsImlzQXBwcm9wcmlhdGVDaGFyIiwiX25vZGUkZXhwcmVzc2lvbnMkIiwidmFsdWUiLCJraW5kIiwiZXNjYXBlZCIsIm5lZ2F0aXZlIiwiaXNNZXRhIiwiZ2V0SW52ZXJzZU1ldGEiLCJyZXBsYWNlIiwidHlwZSIsInNob3VsZEVzY2FwZSIsInRlc3QiLCJ0b1VwcGVyQ2FzZSIsInRvTG93ZXJDYXNlIiwicGFyZW50IiwiaW5kZXgiLCJwcmV2aW91c05vZGUiXSwic291cmNlcyI6WyJjaGFyLWNsYXNzLXRvLXNpbmdsZS1jaGFyLXRyYW5zZm9ybS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQgRG1pdHJ5IFNvc2huaWtvdiA8ZG1pdHJ5LnNvc2huaWtvdkBnbWFpbC5jb20+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgcmVnZXhwLXRyZWUgcGx1Z2luIHRvIHJlcGxhY2Ugc2luZ2xlIGNoYXIgY2hhcmFjdGVyIGNsYXNzZXMgd2l0aFxuICoganVzdCB0aGF0IGNoYXJhY3Rlci5cbiAqXG4gKiBbXFxkXSAtPiBcXGQsIFteXFx3XSAtPiBcXFdcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ2hhcmFjdGVyQ2xhc3M6IGZ1bmN0aW9uIENoYXJhY3RlckNsYXNzKHBhdGgpIHtcbiAgICB2YXIgbm9kZSA9IHBhdGgubm9kZTtcblxuXG4gICAgaWYgKG5vZGUuZXhwcmVzc2lvbnMubGVuZ3RoICE9PSAxIHx8ICFoYXNBcHByb3ByaWF0ZVNpYmxpbmdzKHBhdGgpIHx8ICFpc0FwcHJvcHJpYXRlQ2hhcihub2RlLmV4cHJlc3Npb25zWzBdKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBfbm9kZSRleHByZXNzaW9ucyQgPSBub2RlLmV4cHJlc3Npb25zWzBdLFxuICAgICAgICB2YWx1ZSA9IF9ub2RlJGV4cHJlc3Npb25zJC52YWx1ZSxcbiAgICAgICAga2luZCA9IF9ub2RlJGV4cHJlc3Npb25zJC5raW5kLFxuICAgICAgICBlc2NhcGVkID0gX25vZGUkZXhwcmVzc2lvbnMkLmVzY2FwZWQ7XG5cblxuICAgIGlmIChub2RlLm5lZ2F0aXZlKSB7XG4gICAgICAvLyBGb3IgbmVnYXRpdmUgY2FuIGV4dHJhY3Qgb25seSBtZXRhIGNoYXJzIGxpa2UgW15cXHddIC0+IFxcV1xuICAgICAgLy8gY2Fubm90IGRvIGZvciBbXmFdIC0+IGEgKHdyb25nKS5cbiAgICAgIGlmICghaXNNZXRhKHZhbHVlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhbHVlID0gZ2V0SW52ZXJzZU1ldGEodmFsdWUpO1xuICAgIH1cblxuICAgIHBhdGgucmVwbGFjZSh7XG4gICAgICB0eXBlOiAnQ2hhcicsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBraW5kOiBraW5kLFxuICAgICAgZXNjYXBlZDogZXNjYXBlZCB8fCBzaG91bGRFc2NhcGUodmFsdWUpXG4gICAgfSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGlzQXBwcm9wcmlhdGVDaGFyKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudHlwZSA9PT0gJ0NoYXInICYmXG4gIC8vIFdlIGRvbid0IGV4dHJhY3QgW1xcYl0gKGJhY2tzcGFjZSkgc2luY2UgXFxiIGhhcyBkaWZmZXJlbnRcbiAgLy8gc2VtYW50aWNzICh3b3JkIGJvdW5kYXJ5KS5cbiAgbm9kZS52YWx1ZSAhPT0gJ1xcXFxiJztcbn1cblxuZnVuY3Rpb24gaXNNZXRhKHZhbHVlKSB7XG4gIHJldHVybiAoL15cXFxcW2R3c0RXU10kLy50ZXN0KHZhbHVlKVxuICApO1xufVxuXG5mdW5jdGlvbiBnZXRJbnZlcnNlTWV0YSh2YWx1ZSkge1xuICByZXR1cm4gKC9bZHdzXS8udGVzdCh2YWx1ZSkgPyB2YWx1ZS50b1VwcGVyQ2FzZSgpIDogdmFsdWUudG9Mb3dlckNhc2UoKVxuICApO1xufVxuXG5mdW5jdGlvbiBoYXNBcHByb3ByaWF0ZVNpYmxpbmdzKHBhdGgpIHtcbiAgdmFyIHBhcmVudCA9IHBhdGgucGFyZW50LFxuICAgICAgaW5kZXggPSBwYXRoLmluZGV4O1xuXG5cbiAgaWYgKHBhcmVudC50eXBlICE9PSAnQWx0ZXJuYXRpdmUnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgcHJldmlvdXNOb2RlID0gcGFyZW50LmV4cHJlc3Npb25zW2luZGV4IC0gMV07XG4gIGlmIChwcmV2aW91c05vZGUgPT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gRG9uJ3Qgb3B0aW1pemVkIFxcMVswXSB0byBcXDEwXG4gIGlmIChwcmV2aW91c05vZGUudHlwZSA9PT0gJ0JhY2tyZWZlcmVuY2UnICYmIHByZXZpb3VzTm9kZS5raW5kID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIERvbid0IG9wdGltaXplZCBcXDJbMF0gdG8gXFwyMFxuICBpZiAocHJldmlvdXNOb2RlLnR5cGUgPT09ICdDaGFyJyAmJiBwcmV2aW91c05vZGUua2luZCA9PT0gJ2RlY2ltYWwnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIE5vdGU6IFxceyBhbmQgXFx9IGFyZSBhbHdheXMgcHJlc2VydmVkIHRvIGF2b2lkIGBhW3tdMlt9XWAgdHVybmluZ1xuLy8gaW50byBgYXsyfWAuXG5mdW5jdGlvbiBzaG91bGRFc2NhcGUodmFsdWUpIHtcbiAgcmV0dXJuICgvWypbKCkrPyQuL3t9fF0vLnRlc3QodmFsdWUpXG4gICk7XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNB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