{"version":3,"names":["module","exports","CharacterClass","path","node","expressions","length","hasAppropriateSiblings","isAppropriateChar","_node$expressions$","value","kind","escaped","negative","isMeta","getInverseMeta","replace","type","shouldEscape","test","toUpperCase","toLowerCase","parent","index","previousNode"],"sources":["char-class-to-single-char-transform.js"],"sourcesContent":["/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n'use strict';\n\n/**\n * A regexp-tree plugin to replace single char character classes with\n * just that character.\n *\n * [\\d] -> \\d, [^\\w] -> \\W\n */\n\nmodule.exports = {\n  CharacterClass: function CharacterClass(path) {\n    var node = path.node;\n\n\n    if (node.expressions.length !== 1 || !hasAppropriateSiblings(path) || !isAppropriateChar(node.expressions[0])) {\n      return;\n    }\n\n    var _node$expressions$ = node.expressions[0],\n        value = _node$expressions$.value,\n        kind = _node$expressions$.kind,\n        escaped = _node$expressions$.escaped;\n\n\n    if (node.negative) {\n      // For negative can extract only meta chars like [^\\w] -> \\W\n      // cannot do for [^a] -> a (wrong).\n      if (!isMeta(value)) {\n        return;\n      }\n\n      value = getInverseMeta(value);\n    }\n\n    path.replace({\n      type: 'Char',\n      value: value,\n      kind: kind,\n      escaped: escaped || shouldEscape(value)\n    });\n  }\n};\n\nfunction isAppropriateChar(node) {\n  return node.type === 'Char' &&\n  // We don't extract [\\b] (backspace) since \\b has different\n  // semantics (word boundary).\n  node.value !== '\\\\b';\n}\n\nfunction isMeta(value) {\n  return (/^\\\\[dwsDWS]$/.test(value)\n  );\n}\n\nfunction getInverseMeta(value) {\n  return (/[dws]/.test(value) ? value.toUpperCase() : value.toLowerCase()\n  );\n}\n\nfunction hasAppropriateSiblings(path) {\n  var parent = path.parent,\n      index = path.index;\n\n\n  if (parent.type !== 'Alternative') {\n    return true;\n  }\n\n  var previousNode = parent.expressions[index - 1];\n  if (previousNode == null) {\n    return true;\n  }\n\n  // Don't optimized \\1[0] to \\10\n  if (previousNode.type === 'Backreference' && previousNode.kind === 'number') {\n    return false;\n  }\n\n  // Don't optimized \\2[0] to \\20\n  if (previousNode.type === 'Char' && previousNode.kind === 'decimal') {\n    return false;\n  }\n\n  return true;\n}\n\n// Note: \\{ and \\} are always preserved to avoid `a[{]2[}]` turning\n// into `a{2}`.\nfunction shouldEscape(value) {\n  return (/[*[()+?$./{}|]/.test(value)\n  );\n}"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACfC,cAAc,EAAE,SAASA,cAAcA,CAACC,IAAI,EAAE;IAC5C,IAAIC,IAAI,GAAGD,IAAI,CAACC,IAAI;IAGpB,IAAIA,IAAI,CAACC,WAAW,CAACC,MAAM,KAAK,CAAC,IAAI,CAACC,sBAAsB,CAACJ,IAAI,CAAC,IAAI,CAACK,iBAAiB,CAACJ,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;MAC7G;IACF;IAEA,IAAII,kBAAkB,GAAGL,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC;MACxCK,KAAK,GAAGD,kBAAkB,CAACC,KAAK;MAChCC,IAAI,GAAGF,kBAAkB,CAACE,IAAI;MAC9BC,OAAO,GAAGH,kBAAkB,CAACG,OAAO;IAGxC,IAAIR,IAAI,CAACS,QAAQ,EAAE;MACjB;MACA;MACA,IAAI,CAACC,MAAM,CAACJ,KAAK,CAAC,EAAE;QAClB;MACF;MAEAA,KAAK,GAAGK,cAAc,CAACL,KAAK,CAAC;IAC/B;IAEAP,IAAI,CAACa,OAAO,CAAC;MACXC,IAAI,EAAE,MAAM;MACZP,KAAK,EAAEA,KAAK;MACZC,IAAI,EAAEA,IAAI;MACVC,OAAO,EAAEA,OAAO,IAAIM,YAAY,CAACR,KAAK;IACxC,CAAC,CAAC;EACJ;AACF,CAAC;AAED,SAASF,iBAAiBA,CAACJ,IAAI,EAAE;EAC/B,OAAOA,IAAI,CAACa,IAAI,KAAK,MAAM;EAC3B;EACA;EACAb,IAAI,CAACM,KAAK,KAAK,KAAK;AACtB;AAEA,SAASI,MAAMA,CAACJ,KAAK,EAAE;EACrB,OAAQ,cAAc,CAACS,IAAI,CAACT,KAAK,CAAC;AAEpC;AAEA,SAASK,cAAcA,CAACL,KAAK,EAAE;EAC7B,OAAQ,OAAO,CAACS,IAAI,CAACT,KAAK,CAAC,GAAGA,KAAK,CAACU,WAAW,EAAE,GAAGV,KAAK,CAACW,WAAW,EAAE;AAEzE;AAEA,SAASd,sBAAsBA,CAACJ,IAAI,EAAE;EACpC,IAAImB,MAAM,GAAGnB,IAAI,CAACmB,MAAM;IACpBC,KAAK,GAAGpB,IAAI,CAACoB,KAAK;EAGtB,IAAID,MAAM,CAACL,IAAI,KAAK,aAAa,EAAE;IACjC,OAAO,IAAI;EACb;EAEA,IAAIO,YAAY,GAAGF,MAAM,CAACjB,WAAW,CAACkB,KAAK,GAAG,CAAC,CAAC;EAChD,IAAIC,YAAY,IAAI,IAAI,EAAE;IACxB,OAAO,IAAI;EACb;;EAEA;EACA,IAAIA,YAAY,CAACP,IAAI,KAAK,eAAe,IAAIO,YAAY,CAACb,IAAI,KAAK,QAAQ,EAAE;IAC3E,OAAO,KAAK;EACd;;EAEA;EACA,IAAIa,YAAY,CAACP,IAAI,KAAK,MAAM,IAAIO,YAAY,CAACb,IAAI,KAAK,SAAS,EAAE;IACnE,OAAO,KAAK;EACd;EAEA,OAAO,IAAI;AACb;;AAEA;AACA;AACA,SAASO,YAAYA,CAACR,KAAK,EAAE;EAC3B,OAAQ,gBAAgB,CAACS,IAAI,CAACT,KAAK,CAAC;AAEtC"}