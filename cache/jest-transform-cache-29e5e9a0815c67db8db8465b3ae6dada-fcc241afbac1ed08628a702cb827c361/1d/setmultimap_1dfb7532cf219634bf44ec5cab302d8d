4aaeaa9cb49eb9d31a000849584edc69
"use strict";

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SetMultimap = void 0;
var multimap_1 = require("./multimap");
var SetMultimap = /** @class */function (_super) {
  __extends(SetMultimap, _super);
  function SetMultimap(iterable) {
    return _super.call(this, new SetOperator(), iterable) || this;
  }
  Object.defineProperty(SetMultimap.prototype, Symbol.toStringTag, {
    get: function () {
      return "SetMultimap";
    },
    enumerable: false,
    configurable: true
  });
  return SetMultimap;
}(multimap_1.Multimap);
exports.SetMultimap = SetMultimap;
var SetOperator = /** @class */function () {
  function SetOperator() {}
  SetOperator.prototype.create = function () {
    return new Set();
  };
  SetOperator.prototype.clone = function (collection) {
    return new Set(collection);
  };
  SetOperator.prototype.add = function (value, collection) {
    var prev = collection.size;
    collection.add(value);
    return prev !== collection.size;
  };
  SetOperator.prototype.size = function (collection) {
    return collection.size;
  };
  SetOperator.prototype.delete = function (value, collection) {
    return collection.delete(value);
  };
  SetOperator.prototype.has = function (value, collection) {
    return collection.has(value);
  };
  return SetOperator;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9fIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlNldE11bHRpbWFwIiwibXVsdGltYXBfMSIsInJlcXVpcmUiLCJfc3VwZXIiLCJpdGVyYWJsZSIsIlNldE9wZXJhdG9yIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJnZXQiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiTXVsdGltYXAiLCJTZXQiLCJjbG9uZSIsImNvbGxlY3Rpb24iLCJhZGQiLCJwcmV2Iiwic2l6ZSIsImRlbGV0ZSIsImhhcyJdLCJzb3VyY2VzIjpbInNldG11bHRpbWFwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2V0TXVsdGltYXAgPSB2b2lkIDA7XG52YXIgbXVsdGltYXBfMSA9IHJlcXVpcmUoXCIuL211bHRpbWFwXCIpO1xudmFyIFNldE11bHRpbWFwID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTZXRNdWx0aW1hcCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTZXRNdWx0aW1hcChpdGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgbmV3IFNldE9wZXJhdG9yKCksIGl0ZXJhYmxlKSB8fCB0aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2V0TXVsdGltYXAucHJvdG90eXBlLCBTeW1ib2wudG9TdHJpbmdUYWcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJTZXRNdWx0aW1hcFwiO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFNldE11bHRpbWFwO1xufShtdWx0aW1hcF8xLk11bHRpbWFwKSk7XG5leHBvcnRzLlNldE11bHRpbWFwID0gU2V0TXVsdGltYXA7XG52YXIgU2V0T3BlcmF0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0T3BlcmF0b3IoKSB7XG4gICAgfVxuICAgIFNldE9wZXJhdG9yLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2V0KCk7XG4gICAgfTtcbiAgICBTZXRPcGVyYXRvci5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoY29sbGVjdGlvbikge1xuICAgICAgICByZXR1cm4gbmV3IFNldChjb2xsZWN0aW9uKTtcbiAgICB9O1xuICAgIFNldE9wZXJhdG9yLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodmFsdWUsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgdmFyIHByZXYgPSBjb2xsZWN0aW9uLnNpemU7XG4gICAgICAgIGNvbGxlY3Rpb24uYWRkKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHByZXYgIT09IGNvbGxlY3Rpb24uc2l6ZTtcbiAgICB9O1xuICAgIFNldE9wZXJhdG9yLnByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24gKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uc2l6ZTtcbiAgICB9O1xuICAgIFNldE9wZXJhdG9yLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodmFsdWUsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uZGVsZXRlKHZhbHVlKTtcbiAgICB9O1xuICAgIFNldE9wZXJhdG9yLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAodmFsdWUsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uaGFzKHZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiBTZXRPcGVyYXRvcjtcbn0oKSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1osSUFBSUEsU0FBUyxHQUFJLFVBQVEsU0FBS0EsU0FBUyxJQUFNLFlBQVk7RUFDckQsSUFBSUMsYUFBYSxHQUFHLFNBQUFBLENBQVVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0lBQ2hDRixhQUFh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