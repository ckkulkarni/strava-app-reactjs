84e09064062ea072807b883ec721caeb
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sortFields;
var _has = _interopRequireDefault(require("lodash/has"));
var _toposort = _interopRequireDefault(require("toposort"));
var _propertyExpr = require("property-expr");
var _Reference = _interopRequireDefault(require("../Reference"));
var _isSchema = _interopRequireDefault(require("./isSchema"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

// @ts-expect-error
function sortFields(fields, excludedEdges = []) {
  let edges = [];
  let nodes = new Set();
  let excludes = new Set(excludedEdges.map(([a, b]) => `${a}-${b}`));
  function addNode(depPath, key) {
    let node = (0, _propertyExpr.split)(depPath)[0];
    nodes.add(node);
    if (!excludes.has(`${key}-${node}`)) edges.push([key, node]);
  }
  for (const key in fields) if ((0, _has.default)(fields, key)) {
    let value = fields[key];
    nodes.add(key);
    if (_Reference.default.isRef(value) && value.isSibling) addNode(value.path, key);else if ((0, _isSchema.default)(value) && 'deps' in value) value.deps.forEach(path => addNode(path, key));
  }
  return _toposort.default.array(Array.from(nodes), edges).reverse();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJzb3J0RmllbGRzIiwiX2hhcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3RvcG9zb3J0IiwiX3Byb3BlcnR5RXhwciIsIl9SZWZlcmVuY2UiLCJfaXNTY2hlbWEiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZmllbGRzIiwiZXhjbHVkZWRFZGdlcyIsImVkZ2VzIiwibm9kZXMiLCJTZXQiLCJleGNsdWRlcyIsIm1hcCIsImEiLCJiIiwiYWRkTm9kZSIsImRlcFBhdGgiLCJrZXkiLCJub2RlIiwic3BsaXQiLCJhZGQiLCJoYXMiLCJwdXNoIiwiaXNSZWYiLCJpc1NpYmxpbmciLCJwYXRoIiwiZGVwcyIsImZvckVhY2giLCJhcnJheSIsIkFycmF5IiwiZnJvbSIsInJldmVyc2UiXSwic291cmNlcyI6WyJzb3J0RmllbGRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc29ydEZpZWxkcztcblxudmFyIF9oYXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJsb2Rhc2gvaGFzXCIpKTtcblxudmFyIF90b3Bvc29ydCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInRvcG9zb3J0XCIpKTtcblxudmFyIF9wcm9wZXJ0eUV4cHIgPSByZXF1aXJlKFwicHJvcGVydHktZXhwclwiKTtcblxudmFyIF9SZWZlcmVuY2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9SZWZlcmVuY2VcIikpO1xuXG52YXIgX2lzU2NoZW1hID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc1NjaGVtYVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIEB0cy1leHBlY3QtZXJyb3JcbmZ1bmN0aW9uIHNvcnRGaWVsZHMoZmllbGRzLCBleGNsdWRlZEVkZ2VzID0gW10pIHtcbiAgbGV0IGVkZ2VzID0gW107XG4gIGxldCBub2RlcyA9IG5ldyBTZXQoKTtcbiAgbGV0IGV4Y2x1ZGVzID0gbmV3IFNldChleGNsdWRlZEVkZ2VzLm1hcCgoW2EsIGJdKSA9PiBgJHthfS0ke2J9YCkpO1xuXG4gIGZ1bmN0aW9uIGFkZE5vZGUoZGVwUGF0aCwga2V5KSB7XG4gICAgbGV0IG5vZGUgPSAoMCwgX3Byb3BlcnR5RXhwci5zcGxpdCkoZGVwUGF0aClbMF07XG4gICAgbm9kZXMuYWRkKG5vZGUpO1xuICAgIGlmICghZXhjbHVkZXMuaGFzKGAke2tleX0tJHtub2RlfWApKSBlZGdlcy5wdXNoKFtrZXksIG5vZGVdKTtcbiAgfVxuXG4gIGZvciAoY29uc3Qga2V5IGluIGZpZWxkcykgaWYgKCgwLCBfaGFzLmRlZmF1bHQpKGZpZWxkcywga2V5KSkge1xuICAgIGxldCB2YWx1ZSA9IGZpZWxkc1trZXldO1xuICAgIG5vZGVzLmFkZChrZXkpO1xuICAgIGlmIChfUmVmZXJlbmNlLmRlZmF1bHQuaXNSZWYodmFsdWUpICYmIHZhbHVlLmlzU2libGluZykgYWRkTm9kZSh2YWx1ZS5wYXRoLCBrZXkpO2Vsc2UgaWYgKCgwLCBfaXNTY2hlbWEuZGVmYXVsdCkodmFsdWUpICYmICdkZXBzJyBpbiB2YWx1ZSkgdmFsdWUuZGVwcy5mb3JFYWNoKHBhdGggPT4gYWRkTm9kZShwYXRoLCBrZXkpKTtcbiAgfVxuXG4gIHJldHVybiBfdG9wb3NvcnQuZGVmYXVsdC5hcnJheShBcnJheS5mcm9tKG5vZGVzKSwgZWRnZXMpLnJldmVyc2UoKTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1B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