aada47afd3a2f18dc3f85cf67e2f381f
'use strict';

var Scalar = require('../../nodes/Scalar.js');
var map = require('../common/map.js');
var seq = require('../common/seq.js');
function intIdentify(value) {
  return typeof value === 'bigint' || Number.isInteger(value);
}
const stringifyJSON = ({
  value
}) => JSON.stringify(value);
const jsonScalars = [{
  identify: value => typeof value === 'string',
  default: true,
  tag: 'tag:yaml.org,2002:str',
  resolve: str => str,
  stringify: stringifyJSON
}, {
  identify: value => value == null,
  createNode: () => new Scalar.Scalar(null),
  default: true,
  tag: 'tag:yaml.org,2002:null',
  test: /^null$/,
  resolve: () => null,
  stringify: stringifyJSON
}, {
  identify: value => typeof value === 'boolean',
  default: true,
  tag: 'tag:yaml.org,2002:bool',
  test: /^true|false$/,
  resolve: str => str === 'true',
  stringify: stringifyJSON
}, {
  identify: intIdentify,
  default: true,
  tag: 'tag:yaml.org,2002:int',
  test: /^-?(?:0|[1-9][0-9]*)$/,
  resolve: (str, _onError, {
    intAsBigInt
  }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),
  stringify: ({
    value
  }) => intIdentify(value) ? value.toString() : JSON.stringify(value)
}, {
  identify: value => typeof value === 'number',
  default: true,
  tag: 'tag:yaml.org,2002:float',
  test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
  resolve: str => parseFloat(str),
  stringify: stringifyJSON
}];
const jsonError = {
  default: true,
  tag: '',
  test: /^/,
  resolve(str, onError) {
    onError(`Unresolved plain scalar ${JSON.stringify(str)}`);
    return str;
  }
};
const schema = [map.map, seq.seq].concat(jsonScalars, jsonError);
exports.schema = schema;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY2FsYXIiLCJyZXF1aXJlIiwibWFwIiwic2VxIiwiaW50SWRlbnRpZnkiLCJ2YWx1ZSIsIk51bWJlciIsImlzSW50ZWdlciIsInN0cmluZ2lmeUpTT04iLCJKU09OIiwic3RyaW5naWZ5IiwianNvblNjYWxhcnMiLCJpZGVudGlmeSIsImRlZmF1bHQiLCJ0YWciLCJyZXNvbHZlIiwic3RyIiwiY3JlYXRlTm9kZSIsInRlc3QiLCJfb25FcnJvciIsImludEFzQmlnSW50IiwiQmlnSW50IiwicGFyc2VJbnQiLCJ0b1N0cmluZyIsInBhcnNlRmxvYXQiLCJqc29uRXJyb3IiLCJvbkVycm9yIiwic2NoZW1hIiwiY29uY2F0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInNjaGVtYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBTY2FsYXIgPSByZXF1aXJlKCcuLi8uLi9ub2Rlcy9TY2FsYXIuanMnKTtcbnZhciBtYXAgPSByZXF1aXJlKCcuLi9jb21tb24vbWFwLmpzJyk7XG52YXIgc2VxID0gcmVxdWlyZSgnLi4vY29tbW9uL3NlcS5qcycpO1xuXG5mdW5jdGlvbiBpbnRJZGVudGlmeSh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnIHx8IE51bWJlci5pc0ludGVnZXIodmFsdWUpO1xufVxuY29uc3Qgc3RyaW5naWZ5SlNPTiA9ICh7IHZhbHVlIH0pID0+IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbmNvbnN0IGpzb25TY2FsYXJzID0gW1xuICAgIHtcbiAgICAgICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycsXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOnN0cicsXG4gICAgICAgIHJlc29sdmU6IHN0ciA9PiBzdHIsXG4gICAgICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5SlNPTlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZGVudGlmeTogdmFsdWUgPT4gdmFsdWUgPT0gbnVsbCxcbiAgICAgICAgY3JlYXRlTm9kZTogKCkgPT4gbmV3IFNjYWxhci5TY2FsYXIobnVsbCksXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOm51bGwnLFxuICAgICAgICB0ZXN0OiAvXm51bGwkLyxcbiAgICAgICAgcmVzb2x2ZTogKCkgPT4gbnVsbCxcbiAgICAgICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlKU09OXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6Ym9vbCcsXG4gICAgICAgIHRlc3Q6IC9edHJ1ZXxmYWxzZSQvLFxuICAgICAgICByZXNvbHZlOiBzdHIgPT4gc3RyID09PSAndHJ1ZScsXG4gICAgICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5SlNPTlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZGVudGlmeTogaW50SWRlbnRpZnksXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgICAgIHRlc3Q6IC9eLT8oPzowfFsxLTldWzAtOV0qKSQvLFxuICAgICAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgeyBpbnRBc0JpZ0ludCB9KSA9PiBpbnRBc0JpZ0ludCA/IEJpZ0ludChzdHIpIDogcGFyc2VJbnQoc3RyLCAxMCksXG4gICAgICAgIHN0cmluZ2lmeTogKHsgdmFsdWUgfSkgPT4gaW50SWRlbnRpZnkodmFsdWUpID8gdmFsdWUudG9TdHJpbmcoKSA6IEpTT04uc3RyaW5naWZ5KHZhbHVlKVxuICAgIH0sXG4gICAge1xuICAgICAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnLFxuICAgICAgICB0ZXN0OiAvXi0/KD86MHxbMS05XVswLTldKikoPzpcXC5bMC05XSopPyg/OltlRV1bLStdP1swLTldKyk/JC8sXG4gICAgICAgIHJlc29sdmU6IHN0ciA9PiBwYXJzZUZsb2F0KHN0ciksXG4gICAgICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5SlNPTlxuICAgIH1cbl07XG5jb25zdCBqc29uRXJyb3IgPSB7XG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICcnLFxuICAgIHRlc3Q6IC9eLyxcbiAgICByZXNvbHZlKHN0ciwgb25FcnJvcikge1xuICAgICAgICBvbkVycm9yKGBVbnJlc29sdmVkIHBsYWluIHNjYWxhciAke0pTT04uc3RyaW5naWZ5KHN0cil9YCk7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxufTtcbmNvbnN0IHNjaGVtYSA9IFttYXAubWFwLCBzZXEuc2VxXS5jb25jYXQoanNvblNjYWxhcnMsIGpzb25FcnJvcik7XG5cbmV4cG9ydHMuc2NoZW1hID0gc2NoZW1hO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLE1BQU0sR0FBR0MsT0FBTyxDQUFDLHVCQUF1QixDQUFDO0FBQzdDLElBQUlDLEdBQUcsR0FBR0QsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQ3JDLElBQUlFLEdBQUcsR0FBR0YsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBRXJDLFNBQVNHLFdBQVdBLENBQUNDLEtBQUssRUFBRTtFQUN4QixPQUFPLE9BQU9BLEtBQUssS0FBSyxRQUFRLElBQUlDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDRixLQUFLLENBQUM7QUFDL0Q7QUFDQSxNQUFNRyxhQUFhLEdBQUdBLENBQUM7RUFBRUg7QUFBTSxDQUFDLEtBQUtJLElBQUksQ0FBQ0MsU0FBUyxDQUFDTCxLQUFLLENBQUM7QUFDMUQsTUFBTU0sV0FBVyxHQUFHLENBQ2hCO0VBQ0lDLFFBQVEsRUFBRVAsS0FBSyxJQUFJLE9BQU9BLEtBQUssS0FBSyxRQUFRO0VBQzVDUSxPQUFPLEVBQUUsSUFBSTtFQUNiQyxHQUFHLEVBQUUsdUJBQXVCO0VBQzVCQyxPQUFPLEVBQUVDLEdBQUcsSUFBSUEsR0FBRztFQUNuQk4sU0FBUyxFQUFFRjtBQUNmLENBQUMsRUFDRDtFQUNJSSxRQUFRLEVBQUVQLEtBQUssSUFBSUEsS0FBSyxJQUFJLElBQUk7RUFDaENZLFVBQVUsRUFBRUEsQ0FBQSxLQUFNLElBQUlqQixNQUFNLENBQUNBLE1BQU0sQ0FBQyxJQUFJLENBQUM7RUFDekNhLE9BQU8sRUFBRSxJQUFJO0VBQ2JDLEdBQUcsRUFBRSx3QkFBd0I7RUFDN0JJLElBQUksRUFBRSxRQUFRO0VBQ2RILE9BQU8sRUFBRUEsQ0FBQSxLQUFNLElBQUk7RUFDbkJMLFNBQVMsRUFBRUY7QUFDZixDQUFDLEVBQ0Q7RUFDSUksUUFBUSxFQUFFUCxLQUFLLElBQUksT0FBT0EsS0FBSyxLQUFLLFNBQVM7RUFDN0NRLE9BQU8sRUFBRSxJQUFJO0VBQ2JDLEdBQUcsRUFBRSx3QkFBd0I7RUFDN0JJLElBQUksRUFBRSxjQUFjO0VBQ3BCSCxPQUFPLEVBQUVDLEdBQUcsSUFBSUEsR0FBRyxLQUFLLE1BQU07RUFDOUJOLFNBQVMsRUFBRUY7QUFDZixDQUFDLEVBQ0Q7RUFDSUksUUFBUSxFQUFFUixXQUFXO0VBQ3JCUyxPQUFPLEVBQUUsSUFBSTtFQUNiQyxHQUFHLEVBQUUsdUJBQXVCO0VBQzVCSSxJQUFJLEVBQUUsdUJBQXVCO0VBQzdCSCxPQUFPLEVBQUVBLENBQUNDLEdBQUcsRUFBRUcsUUFBUSxFQUFFO0lBQUVDO0VBQVksQ0FBQyxLQUFLQSxXQUFXLEdBQUdDLE1BQU0sQ0FBQ0wsR0FBRyxDQUFDLEdBQUdNLFFBQVEsQ0FBQ04sR0FBRyxFQUFFLEVBQUUsQ0FBQztFQUMxRk4sU0FBUyxFQUFFQSxDQUFDO0lBQUVMO0VBQU0sQ0FBQyxLQUFLRCxXQUFXLENBQUNDLEtBQUssQ0FBQyxHQUFHQSxLQUFLLENBQUNrQixRQUFRLEVBQUUsR0FBR2QsSUFBSSxDQUFDQyxTQUFTLENBQUNMLEtBQUs7QUFDMUYsQ0FBQyxFQUNEO0VBQ0lPLFFBQVEsRUFBRVAsS0FBSyxJQUFJLE9BQU9BLEtBQUssS0FBSyxRQUFRO0VBQzVDUSxPQUFPLEVBQUUsSUFBSTtFQUNiQyxHQUFHLEVBQUUseUJBQXlCO0VBQzlCSSxJQUFJLEVBQUUsd0RBQXdEO0VBQzlESCxPQUFPLEVBQUVDLEdBQUcsSUFBSVEsVUFBVSxDQUFDUixHQUFHLENBQUM7RUFDL0JOLFNBQVMsRUFBRUY7QUFDZixDQUFDLENBQ0o7QUFDRCxNQUFNaUIsU0FBUyxHQUFHO0VBQ2RaLE9BQU8sRUFBRSxJQUFJO0VBQ2JDLEdBQUcsRUFBRSxFQUFFO0VBQ1BJLElBQUksRUFBRSxHQUFHO0VBQ1RILE9BQU9BLENBQUNDLEdBQUcsRUFBRVUsT0FBTyxFQUFFO0lBQ2xCQSxPQUFPLENBQUUsMkJBQTBCakIsSUFBSSxDQUFDQyxTQUFTLENBQUNNLEdBQUcsQ0FBRSxFQUFDLENBQUM7SUFDekQsT0FBT0EsR0FBRztFQUNkO0FBQ0osQ0FBQztBQUNELE1BQU1XLE1BQU0sR0FBRyxDQUFDekIsR0FBRyxDQUFDQSxHQUFHLEVBQUVDLEdBQUcsQ0FBQ0EsR0FBRyxDQUFDLENBQUN5QixNQUFNLENBQUNqQixXQUFXLEVBQUVjLFNBQVMsQ0FBQztBQUVoRUksT0FBTyxDQUFDRixNQUFNLEdBQUdBLE1BQU0ifQ==