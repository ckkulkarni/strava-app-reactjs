01529a519735d6906b6767ef5a364228
'use strict';

/**
 * Applies the JSON.parse reviver algorithm as defined in the ECMA-262 spec,
 * in section 24.5.1.1 "Runtime Semantics: InternalizeJSONProperty" of the
 * 2021 edition: https://tc39.es/ecma262/#sec-json.parse
 *
 * Includes extensions for handling Map and Set objects.
 */
function applyReviver(reviver, obj, key, val) {
  if (val && typeof val === 'object') {
    if (Array.isArray(val)) {
      for (let i = 0, len = val.length; i < len; ++i) {
        const v0 = val[i];
        const v1 = applyReviver(reviver, val, String(i), v0);
        if (v1 === undefined) delete val[i];else if (v1 !== v0) val[i] = v1;
      }
    } else if (val instanceof Map) {
      for (const k of Array.from(val.keys())) {
        const v0 = val.get(k);
        const v1 = applyReviver(reviver, val, k, v0);
        if (v1 === undefined) val.delete(k);else if (v1 !== v0) val.set(k, v1);
      }
    } else if (val instanceof Set) {
      for (const v0 of Array.from(val)) {
        const v1 = applyReviver(reviver, val, v0, v0);
        if (v1 === undefined) val.delete(v0);else if (v1 !== v0) {
          val.delete(v0);
          val.add(v1);
        }
      }
    } else {
      for (const [k, v0] of Object.entries(val)) {
        const v1 = applyReviver(reviver, val, k, v0);
        if (v1 === undefined) delete val[k];else if (v1 !== v0) val[k] = v1;
      }
    }
  }
  return reviver.call(obj, key, val);
}
exports.applyReviver = applyReviver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhcHBseVJldml2ZXIiLCJyZXZpdmVyIiwib2JqIiwia2V5IiwidmFsIiwiQXJyYXkiLCJpc0FycmF5IiwiaSIsImxlbiIsImxlbmd0aCIsInYwIiwidjEiLCJTdHJpbmciLCJ1bmRlZmluZWQiLCJNYXAiLCJrIiwiZnJvbSIsImtleXMiLCJnZXQiLCJkZWxldGUiLCJzZXQiLCJTZXQiLCJhZGQiLCJPYmplY3QiLCJlbnRyaWVzIiwiY2FsbCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJhcHBseVJldml2ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEFwcGxpZXMgdGhlIEpTT04ucGFyc2UgcmV2aXZlciBhbGdvcml0aG0gYXMgZGVmaW5lZCBpbiB0aGUgRUNNQS0yNjIgc3BlYyxcbiAqIGluIHNlY3Rpb24gMjQuNS4xLjEgXCJSdW50aW1lIFNlbWFudGljczogSW50ZXJuYWxpemVKU09OUHJvcGVydHlcIiBvZiB0aGVcbiAqIDIwMjEgZWRpdGlvbjogaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLnBhcnNlXG4gKlxuICogSW5jbHVkZXMgZXh0ZW5zaW9ucyBmb3IgaGFuZGxpbmcgTWFwIGFuZCBTZXQgb2JqZWN0cy5cbiAqL1xuZnVuY3Rpb24gYXBwbHlSZXZpdmVyKHJldml2ZXIsIG9iaiwga2V5LCB2YWwpIHtcbiAgICBpZiAodmFsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2MCA9IHZhbFtpXTtcbiAgICAgICAgICAgICAgICBjb25zdCB2MSA9IGFwcGx5UmV2aXZlcihyZXZpdmVyLCB2YWwsIFN0cmluZyhpKSwgdjApO1xuICAgICAgICAgICAgICAgIGlmICh2MSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdmFsW2ldO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHYxICE9PSB2MClcbiAgICAgICAgICAgICAgICAgICAgdmFsW2ldID0gdjE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGsgb2YgQXJyYXkuZnJvbSh2YWwua2V5cygpKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHYwID0gdmFsLmdldChrKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2MSA9IGFwcGx5UmV2aXZlcihyZXZpdmVyLCB2YWwsIGssIHYwKTtcbiAgICAgICAgICAgICAgICBpZiAodjEgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgdmFsLmRlbGV0ZShrKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2MSAhPT0gdjApXG4gICAgICAgICAgICAgICAgICAgIHZhbC5zZXQoaywgdjEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbCBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCB2MCBvZiBBcnJheS5mcm9tKHZhbCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2MSA9IGFwcGx5UmV2aXZlcihyZXZpdmVyLCB2YWwsIHYwLCB2MCk7XG4gICAgICAgICAgICAgICAgaWYgKHYxID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHZhbC5kZWxldGUodjApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHYxICE9PSB2MCkge1xuICAgICAgICAgICAgICAgICAgICB2YWwuZGVsZXRlKHYwKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsLmFkZCh2MSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbaywgdjBdIG9mIE9iamVjdC5lbnRyaWVzKHZhbCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2MSA9IGFwcGx5UmV2aXZlcihyZXZpdmVyLCB2YWwsIGssIHYwKTtcbiAgICAgICAgICAgICAgICBpZiAodjEgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHZhbFtrXTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2MSAhPT0gdjApXG4gICAgICAgICAgICAgICAgICAgIHZhbFtrXSA9IHYxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXZpdmVyLmNhbGwob2JqLCBrZXksIHZhbCk7XG59XG5cbmV4cG9ydHMuYXBwbHlSZXZpdmVyID0gYXBwbHlSZXZpdmVyO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0EsWUFBWUEsQ0FBQ0MsT0FBTyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFO0VBQzFDLElBQUlBLEdBQUcsSUFBSSxPQUFPQSxHQUFHLEtBQUssUUFBUSxFQUFFO0lBQ2hDLElBQUlDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDRixHQUFHLENBQUMsRUFBRTtNQUNwQixLQUFLLElBQUlHLENBQUMsR0FBRyxDQUFDLEVBQUVDLEdBQUcsR0FBR0osR0FBRyxDQUFDSyxNQUFNLEVBQUVGLENBQUMsR0FBR0MsR0FBRyxFQUFFLEVBQUVELENBQUMsRUFBRTtRQUM1QyxNQUFNRyxFQUFFLEdBQUdOLEdBQUcsQ0FBQ0csQ0FBQyxDQUFDO1FBQ2pCLE1BQU1JLEVBQUUsR0FBR1gsWUFBWSxDQUFDQyxPQUFPLEVBQUVHLEdBQUcsRUFBRVEsTUFBTSxDQUFDTCxDQUFDLENBQUMsRUFBRUcsRUFBRSxDQUFDO1FBQ3BELElBQUlDLEVBQUUsS0FBS0UsU0FBUyxFQUNoQixPQUFPVCxHQUFHLENBQUNHLENBQUMsQ0FBQyxDQUFDLEtBQ2IsSUFBSUksRUFBRSxLQUFLRCxFQUFFLEVBQ2ROLEdBQUcsQ0FBQ0csQ0FBQyxDQUFDLEdBQUdJLEVBQUU7TUFDbkI7SUFDSixDQUFDLE1BQ0ksSUFBSVAsR0FBRyxZQUFZVSxHQUFHLEVBQUU7TUFDekIsS0FBSyxNQUFNQyxDQUFDLElBQUlWLEtBQUssQ0FBQ1csSUFBSSxDQUFDWixHQUFHLENBQUNhLElBQUksRUFBRSxDQUFDLEVBQUU7UUFDcEMsTUFBTVAsRUFBRSxHQUFHTixHQUFHLENBQUNjLEdBQUcsQ0FBQ0gsQ0FBQyxDQUFDO1FBQ3JCLE1BQU1KLEVBQUUsR0FBR1gsWUFBWSxDQUFDQyxPQUFPLEVBQUVHLEdBQUcsRUFBRVcsQ0FBQyxFQUFFTCxFQUFFLENBQUM7UUFDNUMsSUFBSUMsRUFBRSxLQUFLRSxTQUFTLEVBQ2hCVCxHQUFHLENBQUNlLE1BQU0sQ0FBQ0osQ0FBQyxDQUFDLENBQUMsS0FDYixJQUFJSixFQUFFLEtBQUtELEVBQUUsRUFDZE4sR0FBRyxDQUFDZ0IsR0FBRyxDQUFDTCxDQUFDLEVBQUVKLEVBQUUsQ0FBQztNQUN0QjtJQUNKLENBQUMsTUFDSSxJQUFJUCxHQUFHLFlBQVlpQixHQUFHLEVBQUU7TUFDekIsS0FBSyxNQUFNWCxFQUFFLElBQUlMLEtBQUssQ0FBQ1csSUFBSSxDQUFDWixHQUFHLENBQUMsRUFBRTtRQUM5QixNQUFNTyxFQUFFLEdBQUdYLFlBQVksQ0FBQ0MsT0FBTyxFQUFFRyxHQUFHLEVBQUVNLEVBQUUsRUFBRUEsRUFBRSxDQUFDO1FBQzdDLElBQUlDLEVBQUUsS0FBS0UsU0FBUyxFQUNoQlQsR0FBRyxDQUFDZSxNQUFNLENBQUNULEVBQUUsQ0FBQyxDQUFDLEtBQ2QsSUFBSUMsRUFBRSxLQUFLRCxFQUFFLEVBQUU7VUFDaEJOLEdBQUcsQ0FBQ2UsTUFBTSxDQUFDVCxFQUFFLENBQUM7VUFDZE4sR0FBRyxDQUFDa0IsR0FBRyxDQUFDWCxFQUFFLENBQUM7UUFDZjtNQUNKO0lBQ0osQ0FBQyxNQUNJO01BQ0QsS0FBSyxNQUFNLENBQUNJLENBQUMsRUFBRUwsRUFBRSxDQUFDLElBQUlhLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDcEIsR0FBRyxDQUFDLEVBQUU7UUFDdkMsTUFBTU8sRUFBRSxHQUFHWCxZQUFZLENBQUNDLE9BQU8sRUFBRUcsR0FBRyxFQUFFVyxDQUFDLEVBQUVMLEVBQUUsQ0FBQztRQUM1QyxJQUFJQyxFQUFFLEtBQUtFLFNBQVMsRUFDaEIsT0FBT1QsR0FBRyxDQUFDVyxDQUFDLENBQUMsQ0FBQyxLQUNiLElBQUlKLEVBQUUsS0FBS0QsRUFBRSxFQUNkTixHQUFHLENBQUNXLENBQUMsQ0FBQyxHQUFHSixFQUFFO01BQ25CO0lBQ0o7RUFDSjtFQUNBLE9BQU9WLE9BQU8sQ0FBQ3dCLElBQUksQ0FBQ3ZCLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLENBQUM7QUFDdEM7QUFFQXNCLE9BQU8sQ0FBQzFCLFlBQVksR0FBR0EsWUFBWSJ9