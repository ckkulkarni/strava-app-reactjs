7ccb2e79d28ef020259fec01f955d728
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRouterDom = require("react-router-dom");
var _reactRedux = require("react-redux");
var _parkingSlice = require("./redux/reducer/parkingSlice");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
class Base extends _react.Component {
  constructor(props) {
    super(props);
    this.state = {
      spaces: "",
      numberChosen: false
    };
    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }
  handleChange(event) {
    this.setState({
      spaces: event.target.value
    });
  }
  handleSubmit(event) {
    event.preventDefault();
    alert(this.state.spaces + " Spaces selected");
    this.props.initializeParkingLot(Number(this.state.spaces));
    this.setState({
      numberChosen: true
    });
  }
  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "inputContainer"
    }, /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: this.handleSubmit,
      className: "baseForm"
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "number",
      name: "spaces",
      placeholder: "Enter the Spaces",
      onChange: this.handleChange,
      className: "form-control form-control-lg"
    }), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement("button", {
      type: "submit",
      id: "baseButton",
      disabled: this.state.spaces <= 0
    }, "Submit"), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Link, {
      to: "/spaces"
    }, /*#__PURE__*/_react.default.createElement("button", {
      id: "baseButton",
      disabled: !this.state.numberChosen
    }, "Start App")))));
  }
}
const mapStateToProps = state => ({
  numSpaces: state?.parking?.numSpaces || 0
});
const mapDispatchToProps = {
  initializeParkingLot: _parkingSlice.initializeParkingLot
};
var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Base);
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3RSb3V0ZXJEb20iLCJfcmVhY3RSZWR1eCIsIl9wYXJraW5nU2xpY2UiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiQmFzZSIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsInNwYWNlcyIsIm51bWJlckNob3NlbiIsImhhbmRsZUNoYW5nZSIsImJpbmQiLCJoYW5kbGVTdWJtaXQiLCJldmVudCIsInNldFN0YXRlIiwidGFyZ2V0IiwidmFsdWUiLCJwcmV2ZW50RGVmYXVsdCIsImFsZXJ0IiwiaW5pdGlhbGl6ZVBhcmtpbmdMb3QiLCJOdW1iZXIiLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwib25TdWJtaXQiLCJ0eXBlIiwibmFtZSIsInBsYWNlaG9sZGVyIiwib25DaGFuZ2UiLCJpZCIsImRpc2FibGVkIiwiTGluayIsInRvIiwibWFwU3RhdGVUb1Byb3BzIiwibnVtU3BhY2VzIiwicGFya2luZyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsIl9kZWZhdWx0IiwiY29ubmVjdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJCYXNlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IGluaXRpYWxpemVQYXJraW5nTG90IH0gZnJvbSBcIi4vcmVkdXgvcmVkdWNlci9wYXJraW5nU2xpY2VcIjtcclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBzcGFjZXM6IG51bWJlciB8IFwiXCI7XHJcbiAgbnVtYmVyQ2hvc2VuOiBib29sZWFuO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIG51bVNwYWNlczogbnVtYmVyO1xyXG4gIGluaXRpYWxpemVQYXJraW5nTG90OiAobnVtU3BhY2VzOiBudW1iZXIpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmNsYXNzIEJhc2UgZXh0ZW5kcyBDb21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBzcGFjZXM6IFwiXCIsXHJcbiAgICAgIG51bWJlckNob3NlbjogZmFsc2UsXHJcbiAgICB9O1xyXG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UgPSB0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5oYW5kbGVTdWJtaXQgPSB0aGlzLmhhbmRsZVN1Ym1pdC5iaW5kKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlQ2hhbmdlKGV2ZW50OiBhbnkpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoeyBzcGFjZXM6IGV2ZW50LnRhcmdldC52YWx1ZSB9KTtcclxuICB9XHJcblxyXG4gIGhhbmRsZVN1Ym1pdChldmVudDogYW55KSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgYWxlcnQodGhpcy5zdGF0ZS5zcGFjZXMgKyBcIiBTcGFjZXMgc2VsZWN0ZWRcIik7XHJcbiAgICB0aGlzLnByb3BzLmluaXRpYWxpemVQYXJraW5nTG90KE51bWJlcih0aGlzLnN0YXRlLnNwYWNlcykpO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IG51bWJlckNob3NlbjogdHJ1ZSB9KTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXRDb250YWluZXJcIj5cclxuICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVTdWJtaXR9IGNsYXNzTmFtZT1cImJhc2VGb3JtXCI+XHJcbiAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgIG5hbWU9XCJzcGFjZXNcIlxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHRoZSBTcGFjZXNcIlxyXG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtbGdcIlxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcclxuICAgICAgICAgICAgaWQ9XCJiYXNlQnV0dG9uXCJcclxuICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMuc3RhdGUuc3BhY2VzIDw9IDB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIFN1Ym1pdFxyXG4gICAgICAgICAgPC9idXR0b24+XHJcblxyXG4gICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPExpbmsgdG89XCIvc3BhY2VzXCI+XHJcbiAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cImJhc2VCdXR0b25cIiBkaXNhYmxlZD17IXRoaXMuc3RhdGUubnVtYmVyQ2hvc2VufT5cclxuICAgICAgICAgICAgICAgIFN0YXJ0IEFwcFxyXG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Zvcm0+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogYW55KSA9PiAoe1xyXG4gIG51bVNwYWNlczogc3RhdGU/LnBhcmtpbmc/Lm51bVNwYWNlcyB8fCAwLFxyXG59KTtcclxuXHJcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IHtcclxuICBpbml0aWFsaXplUGFya2luZ0xvdCxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKEJhc2UpO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGVBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFdBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLGFBQUEsR0FBQUgsT0FBQTtBQUFvRSxTQUFBSSx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEsQ0FBQUMsV0FBQSxXQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFBLEtBQUFGLFdBQUE7QUFBQSxTQUFBTix3QkFBQVUsR0FBQSxFQUFBSixXQUFBLFNBQUFBLFdBQUEsSUFBQUksR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsV0FBQUQsR0FBQSxRQUFBQSxHQUFBLG9CQUFBQSxHQUFBLHdCQUFBQSxHQUFBLDRCQUFBRSxPQUFBLEVBQUFGLEdBQUEsVUFBQUcsS0FBQSxHQUFBUix3QkFBQSxDQUFBQyxXQUFBLE9BQUFPLEtBQUEsSUFBQUEsS0FBQSxDQUFBQyxHQUFBLENBQUFKLEdBQUEsWUFBQUcsS0FBQSxDQUFBRSxH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