e4f84291c72fb503a83dc3a26f5c16cb
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addDurations = exports.durationToMilliseconds = exports.timestampToMillisecondsSinceEpoch = exports.millisecondsToDuration = exports.millisecondsSinceEpochToTimestamp = void 0;
var MILLISECONDS_PER_SECOND = 1e3;
var NANOSECONDS_PER_MILLISECOND = 1e6;
var NANOSECONDS_PER_SECOND = 1e9;
function millisecondsSinceEpochToTimestamp(millisecondsSinceEpoch) {
  return toSecondsAndNanos(millisecondsSinceEpoch);
}
exports.millisecondsSinceEpochToTimestamp = millisecondsSinceEpochToTimestamp;
function millisecondsToDuration(durationInMilliseconds) {
  return toSecondsAndNanos(durationInMilliseconds);
}
exports.millisecondsToDuration = millisecondsToDuration;
function timestampToMillisecondsSinceEpoch(timestamp) {
  var seconds = timestamp.seconds,
    nanos = timestamp.nanos;
  return toMillis(seconds, nanos);
}
exports.timestampToMillisecondsSinceEpoch = timestampToMillisecondsSinceEpoch;
function durationToMilliseconds(duration) {
  var seconds = duration.seconds,
    nanos = duration.nanos;
  return toMillis(seconds, nanos);
}
exports.durationToMilliseconds = durationToMilliseconds;
function addDurations(durationA, durationB) {
  var seconds = +durationA.seconds + +durationB.seconds;
  var nanos = durationA.nanos + durationB.nanos;
  if (nanos >= NANOSECONDS_PER_SECOND) {
    seconds += 1;
    nanos -= NANOSECONDS_PER_SECOND;
  }
  return {
    seconds: seconds,
    nanos: nanos
  };
}
exports.addDurations = addDurations;
function toSecondsAndNanos(milliseconds) {
  var seconds = Math.floor(milliseconds / MILLISECONDS_PER_SECOND);
  var nanos = Math.floor(milliseconds % MILLISECONDS_PER_SECOND * NANOSECONDS_PER_MILLISECOND);
  return {
    seconds: seconds,
    nanos: nanos
  };
}
function toMillis(seconds, nanos) {
  var secondMillis = +seconds * MILLISECONDS_PER_SECOND;
  var nanoMillis = nanos / NANOSECONDS_PER_MILLISECOND;
  return secondMillis + nanoMillis;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNSUxMSVNFQ09ORFNfUEVSX1NFQ09ORCIsIk5BTk9TRUNPTkRTX1BFUl9NSUxMSVNFQ09ORCIsIk5BTk9TRUNPTkRTX1BFUl9TRUNPTkQiLCJtaWxsaXNlY29uZHNTaW5jZUVwb2NoVG9UaW1lc3RhbXAiLCJtaWxsaXNlY29uZHNTaW5jZUVwb2NoIiwidG9TZWNvbmRzQW5kTmFub3MiLCJleHBvcnRzIiwibWlsbGlzZWNvbmRzVG9EdXJhdGlvbiIsImR1cmF0aW9uSW5NaWxsaXNlY29uZHMiLCJ0aW1lc3RhbXBUb01pbGxpc2Vjb25kc1NpbmNlRXBvY2giLCJ0aW1lc3RhbXAiLCJzZWNvbmRzIiwibmFub3MiLCJ0b01pbGxpcyIsImR1cmF0aW9uVG9NaWxsaXNlY29uZHMiLCJkdXJhdGlvbiIsImFkZER1cmF0aW9ucyIsImR1cmF0aW9uQSIsImR1cmF0aW9uQiIsIm1pbGxpc2Vjb25kcyIsIk1hdGgiLCJmbG9vciIsInNlY29uZE1pbGxpcyIsIm5hbm9NaWxsaXMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvVGltZUNvbnZlcnNpb24udHMiXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLElBQU1BLHVCQUF1QixHQUFHLEdBQUc7QUFDbkMsSUFBTUMsMkJBQTJCLEdBQUcsR0FBRztBQUN2QyxJQUFNQyxzQkFBc0IsR0FBRyxHQUFHO0FBRWxDLFNBQWdCQyxpQ0FBaUNBLENBQy9DQyxzQkFBOEI7RUFFOUIsT0FBT0MsaUJBQWlCLENBQUNELHNCQUFzQixDQUFDO0FBQ2xEO0FBSkFFLE9BQUEsQ0FBQUgsaUNBQUEsR0FBQUEsaUNBQUE7QUFNQSxTQUFnQkksc0JBQXNCQSxDQUFDQyxzQkFBOEI7RUFDbkUsT0FBT0gsaUJBQWlCLENBQUNHLHNCQUFzQixDQUFDO0FBQ2xEO0FBRkFGLE9BQUEsQ0FBQUMsc0JBQUEsR0FBQUEsc0JBQUE7QUFJQSxTQUFnQkUsaUNBQWlDQSxDQUFDQyxTQUE2QjtFQUNyRSxJQUFBQyxPQUFPLEdBQVlELFNBQVMsQ0FBQUMsT0FBckI7SUFBRUMsS0FBSyxHQUFLRixTQUFTLENBQUFFLEtBQWQ7RUFDdEIsT0FBT0MsUUFBUSxDQUFDRixPQUFPLEVBQUVDLEtBQUssQ0FBQztBQUNqQztBQUhBTixPQUFBLENBQUFHLGlDQUFBLEdBQUFBLGlDQUFBO0FBS0EsU0FBZ0JLLHNCQUFzQkEsQ0FBQ0MsUUFBMkI7RUFDeEQsSUFBQUosT0FBTyxHQUFZSSxRQUFRLENBQUFKLE9BQXBCO0lBQUVDLEtBQUssR0FBS0csUUFBUSxDQUFBSCxLQUFiO0VBQ3RCLE9BQU9DLFFBQVEsQ0FBQ0YsT0FBTyxFQUFFQyxLQUFLLENBQUM7QUFDakM7QUFIQU4sT0FBQSxDQUFBUSxzQkFBQSxHQUFBQSxzQkFBQTtBQUtBLFNBQWdCRSxZQUFZQSxDQUMxQkMsU0FBNEIsRUFDNUJDLFNBQTRCO0VBRTVCLElBQUlQLE9BQU8sR0FBRyxDQUFDTSxTQUFTLENBQUNOLE9BQU8sR0FBRyxDQUFDTyxTQUFTLENBQUNQLE9BQU87RUFDckQsSUFBSUMsS0FBSyxHQUFHSyxTQUFTLENBQUNMLEtBQUssR0FBR00sU0FBUyxDQUFDTixLQUFLO0VBQzdDLElBQUlBLEtBQUssSUFBSVYsc0JBQXNCLEVBQUU7SUFDbkNTLE9BQU8sSUFBSSxDQUFDO0lBQ1pDLEtBQUssSUFBSVYsc0JBQXNCOztFQUVqQyxPQUFPO0lBQUVTLE9BQU8sRUFBQUEsT0FBQTtJQUFFQyxLQUFLLEVBQUFBO0VBQUEsQ0FBRTtBQUMzQjtBQVhBTixPQUFBLENBQUFVLFlBQUEsR0FBQUEsWUFBQTtBQWFBLFNBQVNYLGlCQUFpQkEsQ0FBQ2MsWUFBb0I7RUFDN0MsSUFBTVIsT0FBTyxHQUFHUyxJQUFJLENBQUNDLEtBQUssQ0FBQ0YsWUFBWSxHQUFHbkIsdUJBQXVCLENBQUM7RUFDbEUsSUFBTVksS0FBSyxHQUFHUSxJQUFJLENBQUNDLEtBQUssQ0FBRUYsWUFBWSxHQUFHbkIsdUJBQXVCLEdBQUlDLDJCQUEyQixDQUFDO0VBQ2hHLE9BQU87SUFBRVUsT0FBTyxFQUFBQSxPQUFBO0lBQUVDLEtBQUssRUFBQUE7RUFBQSxDQUFFO0FBQzNCO0FBRUEsU0FBU0MsUUFBUUEsQ0FBQ0YsT0FBZSxFQUFFQyxLQUFhO0VBQzlDLElBQU1VLFlBQVksR0FBRyxDQUFDWCxPQUFPLEdBQUdYLHVCQUF1QjtFQUN2RCxJQUFNdUIsVUFBVSxHQUFHWCxLQUFLLEdBQUdYLDJCQUEyQjtFQUN0RCxPQUFPcUIsWUFBWSxHQUFHQyxVQUFVO0FBQ2xDIn0=