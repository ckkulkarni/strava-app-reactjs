0aca81b43504dd796580e0b60fbacc61
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rejectAllFilters = void 0;
const defaultFilters = {
  acceptScenario: () => true,
  acceptStep: () => true,
  acceptBackground: () => true,
  acceptRule: () => true,
  acceptFeature: () => true
};
exports.rejectAllFilters = {
  acceptScenario: () => false,
  acceptStep: () => false,
  acceptBackground: () => false,
  acceptRule: () => false,
  acceptFeature: () => false
};
const defaultHandlers = {
  handleStep: () => null,
  handleScenario: () => null,
  handleBackground: () => null,
  handleRule: () => null,
  handleFeature: () => null
};
class GherkinDocumentWalker {
  constructor(filters, handlers) {
    this.filters = Object.assign(Object.assign({}, defaultFilters), filters);
    this.handlers = Object.assign(Object.assign({}, defaultHandlers), handlers);
  }
  walkGherkinDocument(gherkinDocument) {
    if (!gherkinDocument.feature) {
      return null;
    }
    const feature = this.walkFeature(gherkinDocument.feature);
    if (!feature) {
      return null;
    }
    return {
      feature,
      comments: gherkinDocument.comments,
      uri: gherkinDocument.uri
    };
  }
  walkFeature(feature) {
    const keptChildren = this.walkFeatureChildren(feature.children);
    this.handlers.handleFeature(feature);
    const backgroundKept = keptChildren.find(child => child.background);
    if (this.filters.acceptFeature(feature) || backgroundKept) {
      return this.copyFeature(feature, feature.children.map(child => {
        if (child.background) {
          return {
            background: this.copyBackground(child.background)
          };
        }
        if (child.scenario) {
          return {
            scenario: this.copyScenario(child.scenario)
          };
        }
        if (child.rule) {
          return {
            rule: this.copyRule(child.rule, child.rule.children)
          };
        }
      }));
    }
    if (keptChildren.find(child => child !== null)) {
      return this.copyFeature(feature, keptChildren);
    }
  }
  copyFeature(feature, children) {
    return {
      children: this.filterFeatureChildren(feature, children),
      location: feature.location,
      language: feature.language,
      keyword: feature.keyword,
      name: feature.name,
      description: feature.description,
      tags: this.copyTags(feature.tags)
    };
  }
  copyTags(tags) {
    return tags.map(tag => ({
      name: tag.name,
      id: tag.id,
      location: tag.location
    }));
  }
  filterFeatureChildren(feature, children) {
    const copyChildren = [];
    const scenariosKeptById = new Map(children.filter(child => child.scenario).map(child => [child.scenario.id, child]));
    const ruleKeptById = new Map(children.filter(child => child.rule).map(child => [child.rule.id, child]));
    for (const child of feature.children) {
      if (child.background) {
        copyChildren.push({
          background: this.copyBackground(child.background)
        });
      }
      if (child.scenario) {
        const scenarioCopy = scenariosKeptById.get(child.scenario.id);
        if (scenarioCopy) {
          copyChildren.push(scenarioCopy);
        }
      }
      if (child.rule) {
        const ruleCopy = ruleKeptById.get(child.rule.id);
        if (ruleCopy) {
          copyChildren.push(ruleCopy);
        }
      }
    }
    return copyChildren;
  }
  walkFeatureChildren(children) {
    const childrenCopy = [];
    for (const child of children) {
      let backgroundCopy = null;
      let scenarioCopy = null;
      let ruleCopy = null;
      if (child.background) {
        backgroundCopy = this.walkBackground(child.background);
      }
      if (child.scenario) {
        scenarioCopy = this.walkScenario(child.scenario);
      }
      if (child.rule) {
        ruleCopy = this.walkRule(child.rule);
      }
      if (backgroundCopy || scenarioCopy || ruleCopy) {
        childrenCopy.push({
          background: backgroundCopy,
          scenario: scenarioCopy,
          rule: ruleCopy
        });
      }
    }
    return childrenCopy;
  }
  walkRule(rule) {
    const children = this.walkRuleChildren(rule.children);
    this.handlers.handleRule(rule);
    const backgroundKept = children.find(child => child !== null && child.background !== null);
    const scenariosKept = children.filter(child => child !== null && child.scenario !== null);
    if (this.filters.acceptRule(rule) || backgroundKept) {
      return this.copyRule(rule, rule.children);
    }
    if (scenariosKept.length > 0) {
      return this.copyRule(rule, scenariosKept);
    }
  }
  copyRule(rule, children) {
    return {
      id: rule.id,
      name: rule.name,
      description: rule.description,
      location: rule.location,
      keyword: rule.keyword,
      children: this.filterRuleChildren(rule.children, children),
      tags: this.copyTags(rule.tags)
    };
  }
  filterRuleChildren(children, childrenKept) {
    const childrenCopy = [];
    const scenariosKeptIds = childrenKept.filter(child => child.scenario).map(child => child.scenario.id);
    for (const child of children) {
      if (child.background) {
        childrenCopy.push({
          background: this.copyBackground(child.background)
        });
      }
      if (child.scenario && scenariosKeptIds.includes(child.scenario.id)) {
        childrenCopy.push({
          scenario: this.copyScenario(child.scenario)
        });
      }
    }
    return childrenCopy;
  }
  walkRuleChildren(children) {
    const childrenCopy = [];
    for (const child of children) {
      if (child.background) {
        childrenCopy.push({
          background: this.walkBackground(child.background)
        });
      }
      if (child.scenario) {
        childrenCopy.push({
          scenario: this.walkScenario(child.scenario)
        });
      }
    }
    return childrenCopy;
  }
  walkBackground(background) {
    const steps = this.walkAllSteps(background.steps);
    this.handlers.handleBackground(background);
    if (this.filters.acceptBackground(background) || steps.find(step => step !== null)) {
      return this.copyBackground(background);
    }
  }
  copyBackground(background) {
    return {
      id: background.id,
      name: background.name,
      location: background.location,
      keyword: background.keyword,
      steps: background.steps.map(step => this.copyStep(step)),
      description: background.description
    };
  }
  walkScenario(scenario) {
    const steps = this.walkAllSteps(scenario.steps);
    this.handlers.handleScenario(scenario);
    if (this.filters.acceptScenario(scenario) || steps.find(step => step !== null)) {
      return this.copyScenario(scenario);
    }
  }
  copyScenario(scenario) {
    return {
      id: scenario.id,
      name: scenario.name,
      description: scenario.description,
      location: scenario.location,
      keyword: scenario.keyword,
      examples: scenario.examples,
      steps: scenario.steps.map(step => this.copyStep(step)),
      tags: this.copyTags(scenario.tags)
    };
  }
  walkAllSteps(steps) {
    return steps.map(step => this.walkStep(step));
  }
  walkStep(step) {
    this.handlers.handleStep(step);
    if (!this.filters.acceptStep(step)) {
      return null;
    }
    return this.copyStep(step);
  }
  copyStep(step) {
    return {
      id: step.id,
      keyword: step.keyword,
      keywordType: step.keywordType,
      location: step.location,
      text: step.text,
      dataTable: step.dataTable,
      docString: step.docString
    };
  }
}
exports.default = GherkinDocumentWalker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWZhdWx0RmlsdGVycyIsImFjY2VwdFNjZW5hcmlvIiwiYWNjZXB0U3RlcCIsImFjY2VwdEJhY2tncm91bmQiLCJhY2NlcHRSdWxlIiwiYWNjZXB0RmVhdHVyZSIsImV4cG9ydHMiLCJyZWplY3RBbGxGaWx0ZXJzIiwiZGVmYXVsdEhhbmRsZXJzIiwiaGFuZGxlU3RlcCIsImhhbmRsZVNjZW5hcmlvIiwiaGFuZGxlQmFja2dyb3VuZCIsImhhbmRsZVJ1bGUiLCJoYW5kbGVGZWF0dXJlIiwiR2hlcmtpbkRvY3VtZW50V2Fsa2VyIiwiY29uc3RydWN0b3IiLCJmaWx0ZXJzIiwiaGFuZGxlcnMiLCJPYmplY3QiLCJhc3NpZ24iLCJ3YWxrR2hlcmtpbkRvY3VtZW50IiwiZ2hlcmtpbkRvY3VtZW50IiwiZmVhdHVyZSIsIndhbGtGZWF0dXJlIiwiY29tbWVudHMiLCJ1cmkiLCJrZXB0Q2hpbGRyZW4iLCJ3YWxrRmVhdHVyZUNoaWxkcmVuIiwiY2hpbGRyZW4iLCJiYWNrZ3JvdW5kS2VwdCIsImZpbmQiLCJjaGlsZCIsImJhY2tncm91bmQiLCJjb3B5RmVhdHVyZSIsIm1hcCIsImNvcHlCYWNrZ3JvdW5kIiwic2NlbmFyaW8iLCJjb3B5U2NlbmFyaW8iLCJydWxlIiwiY29weVJ1bGUiLCJmaWx0ZXJGZWF0dXJlQ2hpbGRyZW4iLCJsb2NhdGlvbiIsImxhbmd1YWdlIiwia2V5d29yZCIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInRhZ3MiLCJjb3B5VGFncyIsInRhZyIsImlkIiwiY29weUNoaWxkcmVuIiwic2NlbmFyaW9zS2VwdEJ5SWQiLCJNYXAiLCJmaWx0ZXIiLCJydWxlS2VwdEJ5SWQiLCJwdXNoIiwic2NlbmFyaW9Db3B5IiwiZ2V0IiwicnVsZUNvcHkiLCJjaGlsZHJlbkNvcHkiLCJiYWNrZ3JvdW5kQ29weSIsIndhbGtCYWNrZ3JvdW5kIiwid2Fsa1NjZW5hcmlvIiwid2Fsa1J1bGUiLCJ3YWxrUnVsZUNoaWxkcmVuIiwic2NlbmFyaW9zS2VwdCIsImxlbmd0aCIsImZpbHRlclJ1bGVDaGlsZHJlbiIsImNoaWxkcmVuS2VwdCIsInNjZW5hcmlvc0tlcHRJZHMiLCJpbmNsdWRlcyIsInN0ZXBzIiwid2Fsa0FsbFN0ZXBzIiwic3RlcCIsImNvcHlTdGVwIiwiZXhhbXBsZXMiLCJ3YWxrU3RlcCIsImtleXdvcmRUeXBlIiwidGV4dCIsImRhdGFUYWJsZSIsImRvY1N0cmluZyIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvR2hlcmtpbkRvY3VtZW50V2Fsa2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgZmlsZSBpcyBERVBSRUNBVEVEIC0gdXNlIC4vd2Fsa0doZXJraW5Eb2N1bWVudCBpbnN0ZWFkXG5pbXBvcnQgKiBhcyBtZXNzYWdlcyBmcm9tICdAY3VjdW1iZXIvbWVzc2FnZXMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZpbHRlcnMge1xuICBhY2NlcHRTY2VuYXJpbz86IChzY2VuYXJpbzogbWVzc2FnZXMuU2NlbmFyaW8pID0+IGJvb2xlYW5cbiAgYWNjZXB0U3RlcD86IChzdGVwOiBtZXNzYWdlcy5TdGVwKSA9PiBib29sZWFuXG4gIGFjY2VwdEJhY2tncm91bmQ/OiAoYmFja2dyb3VuZDogbWVzc2FnZXMuQmFja2dyb3VuZCkgPT4gYm9vbGVhblxuICBhY2NlcHRSdWxlPzogKHJ1bGU6IG1lc3NhZ2VzLlJ1bGUpID0+IGJvb2xlYW5cbiAgYWNjZXB0RmVhdHVyZT86IChmZWF0dXJlOiBtZXNzYWdlcy5GZWF0dXJlKSA9PiBib29sZWFuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUhhbmRsZXJzIHtcbiAgaGFuZGxlU3RlcD86IChzdGVwOiBtZXNzYWdlcy5TdGVwKSA9PiB2b2lkXG4gIGhhbmRsZVNjZW5hcmlvPzogKHNjZW5hcmlvOiBtZXNzYWdlcy5TY2VuYXJpbykgPT4gdm9pZFxuICBoYW5kbGVCYWNrZ3JvdW5kPzogKGJhY2tncm91bmQ6IG1lc3NhZ2VzLkJhY2tncm91bmQpID0+IHZvaWRcbiAgaGFuZGxlUnVsZT86IChydWxlOiBtZXNzYWdlcy5SdWxlKSA9PiB2b2lkXG4gIGhhbmRsZUZlYXR1cmU/OiAoZmVhdHVyZTogbWVzc2FnZXMuRmVhdHVyZSkgPT4gdm9pZFxufVxuXG5jb25zdCBkZWZhdWx0RmlsdGVyczogSUZpbHRlcnMgPSB7XG4gIGFjY2VwdFNjZW5hcmlvOiAoKSA9PiB0cnVlLFxuICBhY2NlcHRTdGVwOiAoKSA9PiB0cnVlLFxuICBhY2NlcHRCYWNrZ3JvdW5kOiAoKSA9PiB0cnVlLFxuICBhY2NlcHRSdWxlOiAoKSA9PiB0cnVlLFxuICBhY2NlcHRGZWF0dXJlOiAoKSA9PiB0cnVlLFxufVxuXG5leHBvcnQgY29uc3QgcmVqZWN0QWxsRmlsdGVyczogSUZpbHRlcnMgPSB7XG4gIGFjY2VwdFNjZW5hcmlvOiAoKSA9PiBmYWxzZSxcbiAgYWNjZXB0U3RlcDogKCkgPT4gZmFsc2UsXG4gIGFjY2VwdEJhY2tncm91bmQ6ICgpID0+IGZhbHNlLFxuICBhY2NlcHRSdWxlOiAoKSA9PiBmYWxzZSxcbiAgYWNjZXB0RmVhdHVyZTogKCkgPT4gZmFsc2UsXG59XG5cbmNvbnN0IGRlZmF1bHRIYW5kbGVyczogSUhhbmRsZXJzID0ge1xuICBoYW5kbGVTdGVwOiAoKSA9PiBudWxsLFxuICBoYW5kbGVTY2VuYXJpbzogKCkgPT4gbnVsbCxcbiAgaGFuZGxlQmFja2dyb3VuZDogKCkgPT4gbnVsbCxcbiAgaGFuZGxlUnVsZTogKCkgPT4gbnVsbCxcbiAgaGFuZGxlRmVhdHVyZTogKCkgPT4gbnVsbCxcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2hlcmtpbkRvY3VtZW50V2Fsa2VyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBmaWx0ZXJzOiBJRmlsdGVyc1xuICBwcml2YXRlIHJlYWRvbmx5IGhhbmRsZXJzOiBJSGFuZGxlcnNcblxuICBjb25zdHJ1Y3RvcihmaWx0ZXJzPzogSUZpbHRlcnMsIGhhbmRsZXJzPzogSUhhbmRsZXJzKSB7XG4gICAgdGhpcy5maWx0ZXJzID0geyAuLi5kZWZhdWx0RmlsdGVycywgLi4uZmlsdGVycyB9XG4gICAgdGhpcy5oYW5kbGVycyA9IHsgLi4uZGVmYXVsdEhhbmRsZXJzLCAuLi5oYW5kbGVycyB9XG4gIH1cblxuICBwdWJsaWMgd2Fsa0doZXJraW5Eb2N1bWVudChcbiAgICBnaGVya2luRG9jdW1lbnQ6IG1lc3NhZ2VzLkdoZXJraW5Eb2N1bWVudFxuICApOiBtZXNzYWdlcy5HaGVya2luRG9jdW1lbnQgfCBudWxsIHtcbiAgICBpZiAoIWdoZXJraW5Eb2N1bWVudC5mZWF0dXJlKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IGZlYXR1cmUgPSB0aGlzLndhbGtGZWF0dXJlKGdoZXJraW5Eb2N1bWVudC5mZWF0dXJlKVxuXG4gICAgaWYgKCFmZWF0dXJlKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBmZWF0dXJlLFxuICAgICAgY29tbWVudHM6IGdoZXJraW5Eb2N1bWVudC5jb21tZW50cyxcbiAgICAgIHVyaTogZ2hlcmtpbkRvY3VtZW50LnVyaSxcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgd2Fsa0ZlYXR1cmUoZmVhdHVyZTogbWVzc2FnZXMuRmVhdHVyZSk6IG1lc3NhZ2VzLkZlYXR1cmUge1xuICAgIGNvbnN0IGtlcHRDaGlsZHJlbiA9IHRoaXMud2Fsa0ZlYXR1cmVDaGlsZHJlbihmZWF0dXJlLmNoaWxkcmVuKVxuXG4gICAgdGhpcy5oYW5kbGVycy5oYW5kbGVGZWF0dXJlKGZlYXR1cmUpXG5cbiAgICBjb25zdCBiYWNrZ3JvdW5kS2VwdCA9IGtlcHRDaGlsZHJlbi5maW5kKChjaGlsZCkgPT4gY2hpbGQuYmFja2dyb3VuZClcblxuICAgIGlmICh0aGlzLmZpbHRlcnMuYWNjZXB0RmVhdHVyZShmZWF0dXJlKSB8fCBiYWNrZ3JvdW5kS2VwdCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29weUZlYXR1cmUoXG4gICAgICAgIGZlYXR1cmUsXG4gICAgICAgIGZlYXR1cmUuY2hpbGRyZW4ubWFwKChjaGlsZCkgPT4ge1xuICAgICAgICAgIGlmIChjaGlsZC5iYWNrZ3JvdW5kKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB0aGlzLmNvcHlCYWNrZ3JvdW5kKGNoaWxkLmJhY2tncm91bmQpLFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hpbGQuc2NlbmFyaW8pIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHNjZW5hcmlvOiB0aGlzLmNvcHlTY2VuYXJpbyhjaGlsZC5zY2VuYXJpbyksXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjaGlsZC5ydWxlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBydWxlOiB0aGlzLmNvcHlSdWxlKGNoaWxkLnJ1bGUsIGNoaWxkLnJ1bGUuY2hpbGRyZW4pLFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIClcbiAgICB9XG5cbiAgICBpZiAoa2VwdENoaWxkcmVuLmZpbmQoKGNoaWxkKSA9PiBjaGlsZCAhPT0gbnVsbCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvcHlGZWF0dXJlKGZlYXR1cmUsIGtlcHRDaGlsZHJlbilcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNvcHlGZWF0dXJlKFxuICAgIGZlYXR1cmU6IG1lc3NhZ2VzLkZlYXR1cmUsXG4gICAgY2hpbGRyZW46IG1lc3NhZ2VzLkZlYXR1cmVDaGlsZFtdXG4gICk6IG1lc3NhZ2VzLkZlYXR1cmUge1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogdGhpcy5maWx0ZXJGZWF0dXJlQ2hpbGRyZW4oZmVhdHVyZSwgY2hpbGRyZW4pLFxuICAgICAgbG9jYXRpb246IGZlYXR1cmUubG9jYXRpb24sXG4gICAgICBsYW5ndWFnZTogZmVhdHVyZS5sYW5ndWFnZSxcbiAgICAgIGtleXdvcmQ6IGZlYXR1cmUua2V5d29yZCxcbiAgICAgIG5hbWU6IGZlYXR1cmUubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBmZWF0dXJlLmRlc2NyaXB0aW9uLFxuICAgICAgdGFnczogdGhpcy5jb3B5VGFncyhmZWF0dXJlLnRhZ3MpLFxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29weVRhZ3ModGFnczogcmVhZG9ubHkgbWVzc2FnZXMuVGFnW10pOiBtZXNzYWdlcy5UYWdbXSB7XG4gICAgcmV0dXJuIHRhZ3MubWFwKCh0YWcpID0+ICh7XG4gICAgICBuYW1lOiB0YWcubmFtZSxcbiAgICAgIGlkOiB0YWcuaWQsXG4gICAgICBsb2NhdGlvbjogdGFnLmxvY2F0aW9uLFxuICAgIH0pKVxuICB9XG5cbiAgcHJpdmF0ZSBmaWx0ZXJGZWF0dXJlQ2hpbGRyZW4oXG4gICAgZmVhdHVyZTogbWVzc2FnZXMuRmVhdHVyZSxcbiAgICBjaGlsZHJlbjogbWVzc2FnZXMuRmVhdHVyZUNoaWxkW11cbiAgKTogbWVzc2FnZXMuRmVhdHVyZUNoaWxkW10ge1xuICAgIGNvbnN0IGNvcHlDaGlsZHJlbjogbWVzc2FnZXMuRmVhdHVyZUNoaWxkW10gPSBbXVxuXG4gICAgY29uc3Qgc2NlbmFyaW9zS2VwdEJ5SWQgPSBuZXcgTWFwKFxuICAgICAgY2hpbGRyZW4uZmlsdGVyKChjaGlsZCkgPT4gY2hpbGQuc2NlbmFyaW8pLm1hcCgoY2hpbGQpID0+IFtjaGlsZC5zY2VuYXJpby5pZCwgY2hpbGRdKVxuICAgIClcblxuICAgIGNvbnN0IHJ1bGVLZXB0QnlJZCA9IG5ldyBNYXAoXG4gICAgICBjaGlsZHJlbi5maWx0ZXIoKGNoaWxkKSA9PiBjaGlsZC5ydWxlKS5tYXAoKGNoaWxkKSA9PiBbY2hpbGQucnVsZS5pZCwgY2hpbGRdKVxuICAgIClcblxuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgZmVhdHVyZS5jaGlsZHJlbikge1xuICAgICAgaWYgKGNoaWxkLmJhY2tncm91bmQpIHtcbiAgICAgICAgY29weUNoaWxkcmVuLnB1c2goe1xuICAgICAgICAgIGJhY2tncm91bmQ6IHRoaXMuY29weUJhY2tncm91bmQoY2hpbGQuYmFja2dyb3VuZCksXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZC5zY2VuYXJpbykge1xuICAgICAgICBjb25zdCBzY2VuYXJpb0NvcHkgPSBzY2VuYXJpb3NLZXB0QnlJZC5nZXQoY2hpbGQuc2NlbmFyaW8uaWQpXG4gICAgICAgIGlmIChzY2VuYXJpb0NvcHkpIHtcbiAgICAgICAgICBjb3B5Q2hpbGRyZW4ucHVzaChzY2VuYXJpb0NvcHkpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNoaWxkLnJ1bGUpIHtcbiAgICAgICAgY29uc3QgcnVsZUNvcHkgPSBydWxlS2VwdEJ5SWQuZ2V0KGNoaWxkLnJ1bGUuaWQpXG4gICAgICAgIGlmIChydWxlQ29weSkge1xuICAgICAgICAgIGNvcHlDaGlsZHJlbi5wdXNoKHJ1bGVDb3B5KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb3B5Q2hpbGRyZW5cbiAgfVxuXG4gIHByaXZhdGUgd2Fsa0ZlYXR1cmVDaGlsZHJlbihjaGlsZHJlbjogcmVhZG9ubHkgbWVzc2FnZXMuRmVhdHVyZUNoaWxkW10pOiBtZXNzYWdlcy5GZWF0dXJlQ2hpbGRbXSB7XG4gICAgY29uc3QgY2hpbGRyZW5Db3B5OiBtZXNzYWdlcy5GZWF0dXJlQ2hpbGRbXSA9IFtdXG5cbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICBsZXQgYmFja2dyb3VuZENvcHk6IG1lc3NhZ2VzLkJhY2tncm91bmQgPSBudWxsXG4gICAgICBsZXQgc2NlbmFyaW9Db3B5OiBtZXNzYWdlcy5TY2VuYXJpbyA9IG51bGxcbiAgICAgIGxldCBydWxlQ29weTogbWVzc2FnZXMuUnVsZSA9IG51bGxcblxuICAgICAgaWYgKGNoaWxkLmJhY2tncm91bmQpIHtcbiAgICAgICAgYmFja2dyb3VuZENvcHkgPSB0aGlzLndhbGtCYWNrZ3JvdW5kKGNoaWxkLmJhY2tncm91bmQpXG4gICAgICB9XG4gICAgICBpZiAoY2hpbGQuc2NlbmFyaW8pIHtcbiAgICAgICAgc2NlbmFyaW9Db3B5ID0gdGhpcy53YWxrU2NlbmFyaW8oY2hpbGQuc2NlbmFyaW8pXG4gICAgICB9XG4gICAgICBpZiAoY2hpbGQucnVsZSkge1xuICAgICAgICBydWxlQ29weSA9IHRoaXMud2Fsa1J1bGUoY2hpbGQucnVsZSlcbiAgICAgIH1cblxuICAgICAgaWYgKGJhY2tncm91bmRDb3B5IHx8IHNjZW5hcmlvQ29weSB8fCBydWxlQ29weSkge1xuICAgICAgICBjaGlsZHJlbkNvcHkucHVzaCh7XG4gICAgICAgICAgYmFja2dyb3VuZDogYmFja2dyb3VuZENvcHksXG4gICAgICAgICAgc2NlbmFyaW86IHNjZW5hcmlvQ29weSxcbiAgICAgICAgICBydWxlOiBydWxlQ29weSxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGRyZW5Db3B5XG4gIH1cblxuICBwcm90ZWN0ZWQgd2Fsa1J1bGUocnVsZTogbWVzc2FnZXMuUnVsZSk6IG1lc3NhZ2VzLlJ1bGUge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy53YWxrUnVsZUNoaWxkcmVuKHJ1bGUuY2hpbGRyZW4pXG5cbiAgICB0aGlzLmhhbmRsZXJzLmhhbmRsZVJ1bGUocnVsZSlcblxuICAgIGNvbnN0IGJhY2tncm91bmRLZXB0ID0gY2hpbGRyZW4uZmluZCgoY2hpbGQpID0+IGNoaWxkICE9PSBudWxsICYmIGNoaWxkLmJhY2tncm91bmQgIT09IG51bGwpXG4gICAgY29uc3Qgc2NlbmFyaW9zS2VwdCA9IGNoaWxkcmVuLmZpbHRlcigoY2hpbGQpID0+IGNoaWxkICE9PSBudWxsICYmIGNoaWxkLnNjZW5hcmlvICE9PSBudWxsKVxuXG4gICAgaWYgKHRoaXMuZmlsdGVycy5hY2NlcHRSdWxlKHJ1bGUpIHx8IGJhY2tncm91bmRLZXB0KSB7XG4gICAgICByZXR1cm4gdGhpcy5jb3B5UnVsZShydWxlLCBydWxlLmNoaWxkcmVuKVxuICAgIH1cbiAgICBpZiAoc2NlbmFyaW9zS2VwdC5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb3B5UnVsZShydWxlLCBzY2VuYXJpb3NLZXB0KVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29weVJ1bGUocnVsZTogbWVzc2FnZXMuUnVsZSwgY2hpbGRyZW46IHJlYWRvbmx5IG1lc3NhZ2VzLlJ1bGVDaGlsZFtdKTogbWVzc2FnZXMuUnVsZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBydWxlLmlkLFxuICAgICAgbmFtZTogcnVsZS5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHJ1bGUuZGVzY3JpcHRpb24sXG4gICAgICBsb2NhdGlvbjogcnVsZS5sb2NhdGlvbixcbiAgICAgIGtleXdvcmQ6IHJ1bGUua2V5d29yZCxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLmZpbHRlclJ1bGVDaGlsZHJlbihydWxlLmNoaWxkcmVuLCBjaGlsZHJlbiksXG4gICAgICB0YWdzOiB0aGlzLmNvcHlUYWdzKHJ1bGUudGFncyksXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBmaWx0ZXJSdWxlQ2hpbGRyZW4oXG4gICAgY2hpbGRyZW46IHJlYWRvbmx5IG1lc3NhZ2VzLlJ1bGVDaGlsZFtdLFxuICAgIGNoaWxkcmVuS2VwdDogcmVhZG9ubHkgbWVzc2FnZXMuUnVsZUNoaWxkW11cbiAgKTogbWVzc2FnZXMuUnVsZUNoaWxkW10ge1xuICAgIGNvbnN0IGNoaWxkcmVuQ29weTogbWVzc2FnZXMuUnVsZUNoaWxkW10gPSBbXVxuICAgIGNvbnN0IHNjZW5hcmlvc0tlcHRJZHMgPSBjaGlsZHJlbktlcHRcbiAgICAgIC5maWx0ZXIoKGNoaWxkKSA9PiBjaGlsZC5zY2VuYXJpbylcbiAgICAgIC5tYXAoKGNoaWxkKSA9PiBjaGlsZC5zY2VuYXJpby5pZClcblxuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgIGlmIChjaGlsZC5iYWNrZ3JvdW5kKSB7XG4gICAgICAgIGNoaWxkcmVuQ29weS5wdXNoKHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB0aGlzLmNvcHlCYWNrZ3JvdW5kKGNoaWxkLmJhY2tncm91bmQpLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgaWYgKGNoaWxkLnNjZW5hcmlvICYmIHNjZW5hcmlvc0tlcHRJZHMuaW5jbHVkZXMoY2hpbGQuc2NlbmFyaW8uaWQpKSB7XG4gICAgICAgIGNoaWxkcmVuQ29weS5wdXNoKHtcbiAgICAgICAgICBzY2VuYXJpbzogdGhpcy5jb3B5U2NlbmFyaW8oY2hpbGQuc2NlbmFyaW8pLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjaGlsZHJlbkNvcHlcbiAgfVxuXG4gIHByaXZhdGUgd2Fsa1J1bGVDaGlsZHJlbihjaGlsZHJlbjogcmVhZG9ubHkgbWVzc2FnZXMuUnVsZUNoaWxkW10pOiBtZXNzYWdlcy5SdWxlQ2hpbGRbXSB7XG4gICAgY29uc3QgY2hpbGRyZW5Db3B5OiBtZXNzYWdlcy5SdWxlQ2hpbGRbXSA9IFtdXG5cbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICBpZiAoY2hpbGQuYmFja2dyb3VuZCkge1xuICAgICAgICBjaGlsZHJlbkNvcHkucHVzaCh7XG4gICAgICAgICAgYmFja2dyb3VuZDogdGhpcy53YWxrQmFja2dyb3VuZChjaGlsZC5iYWNrZ3JvdW5kKSxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZC5zY2VuYXJpbykge1xuICAgICAgICBjaGlsZHJlbkNvcHkucHVzaCh7XG4gICAgICAgICAgc2NlbmFyaW86IHRoaXMud2Fsa1NjZW5hcmlvKGNoaWxkLnNjZW5hcmlvKSxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkcmVuQ29weVxuICB9XG5cbiAgcHJvdGVjdGVkIHdhbGtCYWNrZ3JvdW5kKGJhY2tncm91bmQ6IG1lc3NhZ2VzLkJhY2tncm91bmQpOiBtZXNzYWdlcy5CYWNrZ3JvdW5kIHtcbiAgICBjb25zdCBzdGVwcyA9IHRoaXMud2Fsa0FsbFN0ZXBzKGJhY2tncm91bmQuc3RlcHMpXG4gICAgdGhpcy5oYW5kbGVycy5oYW5kbGVCYWNrZ3JvdW5kKGJhY2tncm91bmQpXG5cbiAgICBpZiAodGhpcy5maWx0ZXJzLmFjY2VwdEJhY2tncm91bmQoYmFja2dyb3VuZCkgfHwgc3RlcHMuZmluZCgoc3RlcCkgPT4gc3RlcCAhPT0gbnVsbCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvcHlCYWNrZ3JvdW5kKGJhY2tncm91bmQpXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjb3B5QmFja2dyb3VuZChiYWNrZ3JvdW5kOiBtZXNzYWdlcy5CYWNrZ3JvdW5kKTogbWVzc2FnZXMuQmFja2dyb3VuZCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBiYWNrZ3JvdW5kLmlkLFxuICAgICAgbmFtZTogYmFja2dyb3VuZC5uYW1lLFxuICAgICAgbG9jYXRpb246IGJhY2tncm91bmQubG9jYXRpb24sXG4gICAgICBrZXl3b3JkOiBiYWNrZ3JvdW5kLmtleXdvcmQsXG4gICAgICBzdGVwczogYmFja2dyb3VuZC5zdGVwcy5tYXAoKHN0ZXApID0+IHRoaXMuY29weVN0ZXAoc3RlcCkpLFxuICAgICAgZGVzY3JpcHRpb246IGJhY2tncm91bmQuZGVzY3JpcHRpb24sXG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHdhbGtTY2VuYXJpbyhzY2VuYXJpbzogbWVzc2FnZXMuU2NlbmFyaW8pOiBtZXNzYWdlcy5TY2VuYXJpbyB7XG4gICAgY29uc3Qgc3RlcHMgPSB0aGlzLndhbGtBbGxTdGVwcyhzY2VuYXJpby5zdGVwcylcbiAgICB0aGlzLmhhbmRsZXJzLmhhbmRsZVNjZW5hcmlvKHNjZW5hcmlvKVxuXG4gICAgaWYgKHRoaXMuZmlsdGVycy5hY2NlcHRTY2VuYXJpbyhzY2VuYXJpbykgfHwgc3RlcHMuZmluZCgoc3RlcCkgPT4gc3RlcCAhPT0gbnVsbCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvcHlTY2VuYXJpbyhzY2VuYXJpbylcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNvcHlTY2VuYXJpbyhzY2VuYXJpbzogbWVzc2FnZXMuU2NlbmFyaW8pOiBtZXNzYWdlcy5TY2VuYXJpbyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBzY2VuYXJpby5pZCxcbiAgICAgIG5hbWU6IHNjZW5hcmlvLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogc2NlbmFyaW8uZGVzY3JpcHRpb24sXG4gICAgICBsb2NhdGlvbjogc2NlbmFyaW8ubG9jYXRpb24sXG4gICAgICBrZXl3b3JkOiBzY2VuYXJpby5rZXl3b3JkLFxuICAgICAgZXhhbXBsZXM6IHNjZW5hcmlvLmV4YW1wbGVzLFxuICAgICAgc3RlcHM6IHNjZW5hcmlvLnN0ZXBzLm1hcCgoc3RlcCkgPT4gdGhpcy5jb3B5U3RlcChzdGVwKSksXG4gICAgICB0YWdzOiB0aGlzLmNvcHlUYWdzKHNjZW5hcmlvLnRhZ3MpLFxuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCB3YWxrQWxsU3RlcHMoc3RlcHM6IHJlYWRvbmx5IG1lc3NhZ2VzLlN0ZXBbXSk6IG1lc3NhZ2VzLlN0ZXBbXSB7XG4gICAgcmV0dXJuIHN0ZXBzLm1hcCgoc3RlcCkgPT4gdGhpcy53YWxrU3RlcChzdGVwKSlcbiAgfVxuXG4gIHByb3RlY3RlZCB3YWxrU3RlcChzdGVwOiBtZXNzYWdlcy5TdGVwKTogbWVzc2FnZXMuU3RlcCB7XG4gICAgdGhpcy5oYW5kbGVycy5oYW5kbGVTdGVwKHN0ZXApXG4gICAgaWYgKCF0aGlzLmZpbHRlcnMuYWNjZXB0U3RlcChzdGVwKSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29weVN0ZXAoc3RlcClcbiAgfVxuXG4gIHByaXZhdGUgY29weVN0ZXAoc3RlcDogbWVzc2FnZXMuU3RlcCk6IG1lc3NhZ2VzLlN0ZXAge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogc3RlcC5pZCxcbiAgICAgIGtleXdvcmQ6IHN0ZXAua2V5d29yZCxcbiAgICAgIGtleXdvcmRUeXBlOiBzdGVwLmtleXdvcmRUeXBlLFxuICAgICAgbG9jYXRpb246IHN0ZXAubG9jYXRpb24sXG4gICAgICB0ZXh0OiBzdGVwLnRleHQsXG4gICAgICBkYXRhVGFibGU6IHN0ZXAuZGF0YVRhYmxlLFxuICAgICAgZG9jU3RyaW5nOiBzdGVwLmRvY1N0cmluZyxcbiAgICB9XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBbUJBLE1BQU1BLGNBQWMsR0FBYTtFQUMvQkMsY0FBYyxFQUFFQSxDQUFBLEtBQU0sSUFBSTtFQUMxQkMsVUFBVSxFQUFFQSxDQUFBLEtBQU0sSUFBSTtFQUN0QkMsZ0JBQWdCLEVBQUVBLENBQUEsS0FBTSxJQUFJO0VBQzVCQyxVQUFVLEVBQUVBLENBQUEsS0FBTSxJQUFJO0VBQ3RCQyxhQUFhLEVBQUVBLENBQUEsS0FBTTtDQUN0QjtBQUVZQyxPQUFBLENBQUFDLGdCQUFnQixHQUFhO0VBQ3hDTixjQUFjLEVBQUVBLENBQUEsS0FBTSxLQUFLO0VBQzNCQyxVQUFVLEVBQUVBLENBQUEsS0FBTSxLQUFLO0VBQ3ZCQyxnQkFBZ0IsRUFBRUEsQ0FBQSxLQUFNLEtBQUs7RUFDN0JDLFVBQVUsRUFBRUEsQ0FBQSxLQUFNLEtBQUs7RUFDdkJDLGFBQWEsRUFBRUEsQ0FBQSxLQUFNO0NBQ3RCO0FBRUQsTUFBTUcsZUFBZSxHQUFjO0VBQ2pDQyxVQUFVLEVBQUVBLENBQUEsS0FBTSxJQUFJO0VBQ3RCQyxjQUFjLEVBQUVBLENBQUEsS0FBTSxJQUFJO0VBQzFCQyxnQkFBZ0IsRUFBRUEsQ0FBQSxLQUFNLElBQUk7RUFDNUJDLFVBQVUsRUFBRUEsQ0FBQSxLQUFNLElBQUk7RUFDdEJDLGFBQWEsRUFBRUEsQ0FBQSxLQUFNO0NBQ3RCO0FBRUQsTUFBcUJDLHFCQUFxQjtFQUl4Q0MsWUFBWUMsT0FBa0IsRUFBRUMsUUFBb0I7SUFDbEQsSUFBSSxDQUFDRCxPQUFPLEdBQUFFLE1BQUEsQ0FBQUMsTUFB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