e15b2d5769c71edfe2a9d2c955aca461
'use strict';

var Scalar = require('../../nodes/Scalar.js');
var stringifyNumber = require('../../stringify/stringifyNumber.js');
const floatNaN = {
  identify: value => typeof value === 'number',
  default: true,
  tag: 'tag:yaml.org,2002:float',
  test: /^(?:[-+]?\.(?:inf|Inf|INF|nan|NaN|NAN))$/,
  resolve: str => str.slice(-3).toLowerCase() === 'nan' ? NaN : str[0] === '-' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
  stringify: stringifyNumber.stringifyNumber
};
const floatExp = {
  identify: value => typeof value === 'number',
  default: true,
  tag: 'tag:yaml.org,2002:float',
  format: 'EXP',
  test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
  resolve: str => parseFloat(str),
  stringify(node) {
    const num = Number(node.value);
    return isFinite(num) ? num.toExponential() : stringifyNumber.stringifyNumber(node);
  }
};
const float = {
  identify: value => typeof value === 'number',
  default: true,
  tag: 'tag:yaml.org,2002:float',
  test: /^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,
  resolve(str) {
    const node = new Scalar.Scalar(parseFloat(str));
    const dot = str.indexOf('.');
    if (dot !== -1 && str[str.length - 1] === '0') node.minFractionDigits = str.length - dot - 1;
    return node;
  },
  stringify: stringifyNumber.stringifyNumber
};
exports.float = float;
exports.floatExp = floatExp;
exports.floatNaN = floatNaN;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY2FsYXIiLCJyZXF1aXJlIiwic3RyaW5naWZ5TnVtYmVyIiwiZmxvYXROYU4iLCJpZGVudGlmeSIsInZhbHVlIiwiZGVmYXVsdCIsInRhZyIsInRlc3QiLCJyZXNvbHZlIiwic3RyIiwic2xpY2UiLCJ0b0xvd2VyQ2FzZSIsIk5hTiIsIk51bWJlciIsIk5FR0FUSVZFX0lORklOSVRZIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJzdHJpbmdpZnkiLCJmbG9hdEV4cCIsImZvcm1hdCIsInBhcnNlRmxvYXQiLCJub2RlIiwibnVtIiwiaXNGaW5pdGUiLCJ0b0V4cG9uZW50aWFsIiwiZmxvYXQiLCJkb3QiLCJpbmRleE9mIiwibGVuZ3RoIiwibWluRnJhY3Rpb25EaWdpdHMiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiZmxvYXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgU2NhbGFyID0gcmVxdWlyZSgnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJyk7XG52YXIgc3RyaW5naWZ5TnVtYmVyID0gcmVxdWlyZSgnLi4vLi4vc3RyaW5naWZ5L3N0cmluZ2lmeU51bWJlci5qcycpO1xuXG5jb25zdCBmbG9hdE5hTiA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JyxcbiAgICB0ZXN0OiAvXig/OlstK10/XFwuKD86aW5mfEluZnxJTkZ8bmFufE5hTnxOQU4pKSQvLFxuICAgIHJlc29sdmU6IHN0ciA9PiBzdHIuc2xpY2UoLTMpLnRvTG93ZXJDYXNlKCkgPT09ICduYW4nXG4gICAgICAgID8gTmFOXG4gICAgICAgIDogc3RyWzBdID09PSAnLSdcbiAgICAgICAgICAgID8gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZXG4gICAgICAgICAgICA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeU51bWJlci5zdHJpbmdpZnlOdW1iZXJcbn07XG5jb25zdCBmbG9hdEV4cCA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JyxcbiAgICBmb3JtYXQ6ICdFWFAnLFxuICAgIHRlc3Q6IC9eWy0rXT8oPzpcXC5bMC05XSt8WzAtOV0rKD86XFwuWzAtOV0qKT8pW2VFXVstK10/WzAtOV0rJC8sXG4gICAgcmVzb2x2ZTogc3RyID0+IHBhcnNlRmxvYXQoc3RyKSxcbiAgICBzdHJpbmdpZnkobm9kZSkge1xuICAgICAgICBjb25zdCBudW0gPSBOdW1iZXIobm9kZS52YWx1ZSk7XG4gICAgICAgIHJldHVybiBpc0Zpbml0ZShudW0pID8gbnVtLnRvRXhwb25lbnRpYWwoKSA6IHN0cmluZ2lmeU51bWJlci5zdHJpbmdpZnlOdW1iZXIobm9kZSk7XG4gICAgfVxufTtcbmNvbnN0IGZsb2F0ID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnLFxuICAgIHRlc3Q6IC9eWy0rXT8oPzpcXC5bMC05XSt8WzAtOV0rXFwuWzAtOV0qKSQvLFxuICAgIHJlc29sdmUoc3RyKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgU2NhbGFyLlNjYWxhcihwYXJzZUZsb2F0KHN0cikpO1xuICAgICAgICBjb25zdCBkb3QgPSBzdHIuaW5kZXhPZignLicpO1xuICAgICAgICBpZiAoZG90ICE9PSAtMSAmJiBzdHJbc3RyLmxlbmd0aCAtIDFdID09PSAnMCcpXG4gICAgICAgICAgICBub2RlLm1pbkZyYWN0aW9uRGlnaXRzID0gc3RyLmxlbmd0aCAtIGRvdCAtIDE7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH0sXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlOdW1iZXIuc3RyaW5naWZ5TnVtYmVyXG59O1xuXG5leHBvcnRzLmZsb2F0ID0gZmxvYXQ7XG5leHBvcnRzLmZsb2F0RXhwID0gZmxvYXRFeHA7XG5leHBvcnRzLmZsb2F0TmFOID0gZmxvYXROYU47XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsdUJBQXVCLENBQUM7QUFDN0MsSUFBSUMsZUFBZSxHQUFHRCxPQUFPLENBQUMsb0NBQW9DLENBQUM7QUFFbkUsTUFBTUUsUUFBUSxHQUFHO0VBQ2JDLFFBQVEsRUFBRUMsS0FBSyxJQUFJLE9BQU9BLEtBQUssS0FBSyxRQUFRO0VBQzVDQyxPQUFPLEVBQUUsSUFBSTtFQUNiQyxHQUFHLEVBQUUseUJBQXlCO0VBQzlCQyxJQUFJLEVBQUUsMENBQTBDO0VBQ2hEQyxPQUFPLEVBQUVDLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxFQUFFLEtBQUssS0FBSyxHQUMvQ0MsR0FBRyxHQUNISCxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUNWSSxNQUFNLENBQUNDLGlCQUFpQixHQUN4QkQsTUFBTSxDQUFDRSxpQkFBaUI7RUFDbENDLFNBQVMsRUFBRWYsZUFBZSxDQUFDQTtBQUMvQixDQUFDO0FBQ0QsTUFBTWdCLFFBQVEsR0FBRztFQUNiZCxRQUFRLEVBQUVDLEtBQUssSUFBSSxPQUFPQSxLQUFLLEtBQUssUUFBUTtFQUM1Q0MsT0FBTyxFQUFFLElBQUk7RUFDYkMsR0FBRyxFQUFFLHlCQUF5QjtFQUM5QlksTUFBTSxFQUFFLEtBQUs7RUFDYlgsSUFBSSxFQUFFLHdEQUF3RDtFQUM5REMsT0FBTyxFQUFFQyxHQUFHLElBQUlVLFVBQVUsQ0FBQ1YsR0FBRyxDQUFDO0VBQy9CTyxTQUFTQSxDQUFDSSxJQUFJLEVBQUU7SUFDWixNQUFNQyxHQUFHLEdBQUdSLE1BQU0sQ0FBQ08sSUFBSSxDQUFDaEIsS0FBSyxDQUFDO0lBQzlCLE9BQU9rQixRQUFRLENBQUNELEdBQUcsQ0FBQyxHQUFHQSxHQUFHLENBQUNFLGFBQWEsRUFBRSxHQUFHdEIsZUFBZSxDQUFDQSxlQUFlLENBQUNtQixJQUFJLENBQUM7RUFDdEY7QUFDSixDQUFDO0FBQ0QsTUFBTUksS0FBSyxHQUFHO0VBQ1ZyQixRQUFRLEVBQUVDLEtBQUssSUFBSSxPQUFPQSxLQUFLLEtBQUssUUFBUTtFQUM1Q0MsT0FBTyxFQUFFLElBQUk7RUFDYkMsR0FBRyxFQUFFLHlCQUF5QjtFQUM5QkMsSUFBSSxFQUFFLG9DQUFvQztFQUMxQ0MsT0FBT0EsQ0FBQ0MsR0FBRyxFQUFFO0lBQ1QsTUFBTVcsSUFBSSxHQUFHLElBQUlyQixNQUFNLENBQUNBLE1BQU0sQ0FBQ29CLFVBQVUsQ0FBQ1YsR0FBRyxDQUFDLENBQUM7SUFDL0MsTUFBTWdCLEdBQUcsR0FBR2hCLEdBQUcsQ0FBQ2lCLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFDNUIsSUFBSUQsR0FBRyxLQUFLLENBQUMsQ0FBQyxJQUFJaEIsR0FBRyxDQUFDQSxHQUFHLENBQUNrQixNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUN6Q1AsSUFBSSxDQUFDUSxpQkFBaUIsR0FBR25CLEdBQUcsQ0FBQ2tCLE1BQU0sR0FBR0YsR0FBRyxHQUFHLENBQUM7SUFDakQsT0FBT0wsSUFBSTtFQUNmLENBQUM7RUFDREosU0FBUyxFQUFFZixlQUFlLENBQUNBO0FBQy9CLENBQUM7QUFFRDRCLE9BQU8sQ0FBQ0wsS0FBSyxHQUFHQSxLQUFLO0FBQ3JCSyxPQUFPLENBQUNaLFFBQVEsR0FBR0EsUUFBUTtBQUMzQlksT0FBTyxDQUFDM0IsUUFBUSxHQUFHQSxRQUFRIn0=