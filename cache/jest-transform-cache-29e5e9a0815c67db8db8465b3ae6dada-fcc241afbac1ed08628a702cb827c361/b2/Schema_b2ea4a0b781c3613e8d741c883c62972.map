{"version":3,"names":["Node","require","map","seq","string","tags","sortMapEntriesByKey","a","b","key","Schema","constructor","compat","customTags","merge","resolveKnownTags","schema","sortMapEntries","toStringDefaults","Array","isArray","getTags","name","knownTags","coreKnownTags","toStringOptions","Object","defineProperty","MAP","value","SCALAR","SEQ","clone","copy","create","prototype","getOwnPropertyDescriptors","slice","exports"],"sources":["Schema.js"],"sourcesContent":["'use strict';\n\nvar Node = require('../nodes/Node.js');\nvar map = require('./common/map.js');\nvar seq = require('./common/seq.js');\nvar string = require('./common/string.js');\nvar tags = require('./tags.js');\n\nconst sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;\nclass Schema {\n    constructor({ compat, customTags, merge, resolveKnownTags, schema, sortMapEntries, toStringDefaults }) {\n        this.compat = Array.isArray(compat)\n            ? tags.getTags(compat, 'compat')\n            : compat\n                ? tags.getTags(null, compat)\n                : null;\n        this.merge = !!merge;\n        this.name = (typeof schema === 'string' && schema) || 'core';\n        this.knownTags = resolveKnownTags ? tags.coreKnownTags : {};\n        this.tags = tags.getTags(customTags, this.name);\n        this.toStringOptions = toStringDefaults ?? null;\n        Object.defineProperty(this, Node.MAP, { value: map.map });\n        Object.defineProperty(this, Node.SCALAR, { value: string.string });\n        Object.defineProperty(this, Node.SEQ, { value: seq.seq });\n        // Used by createMap()\n        this.sortMapEntries =\n            typeof sortMapEntries === 'function'\n                ? sortMapEntries\n                : sortMapEntries === true\n                    ? sortMapEntriesByKey\n                    : null;\n    }\n    clone() {\n        const copy = Object.create(Schema.prototype, Object.getOwnPropertyDescriptors(this));\n        copy.tags = this.tags.slice();\n        return copy;\n    }\n}\n\nexports.Schema = Schema;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACtC,IAAIC,GAAG,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AACpC,IAAIE,GAAG,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AACpC,IAAIG,MAAM,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AAC1C,IAAII,IAAI,GAAGJ,OAAO,CAAC,WAAW,CAAC;AAE/B,MAAMK,mBAAmB,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,GAAG,GAAGD,CAAC,CAACC,GAAG,GAAG,CAAC,CAAC,GAAGF,CAAC,CAACE,GAAG,GAAGD,CAAC,CAACC,GAAG,GAAG,CAAC,GAAG,CAAC;AAChF,MAAMC,MAAM,CAAC;EACTC,WAAWA,CAAC;IAAEC,MAAM;IAAEC,UAAU;IAAEC,KAAK;IAAEC,gBAAgB;IAAEC,MAAM;IAAEC,cAAc;IAAEC;EAAiB,CAAC,EAAE;IACnG,IAAI,CAACN,MAAM,GAAGO,KAAK,CAACC,OAAO,CAACR,MAAM,CAAC,GAC7BP,IAAI,CAACgB,OAAO,CAACT,MAAM,EAAE,QAAQ,CAAC,GAC9BA,MAAM,GACFP,IAAI,CAACgB,OAAO,CAAC,IAAI,EAAET,MAAM,CAAC,GAC1B,IAAI;IACd,IAAI,CAACE,KAAK,GAAG,CAAC,CAACA,KAAK;IACpB,IAAI,CAACQ,IAAI,GAAI,OAAON,MAAM,KAAK,QAAQ,IAAIA,MAAM,IAAK,MAAM;IAC5D,IAAI,CAACO,SAAS,GAAGR,gBAAgB,GAAGV,IAAI,CAACmB,aAAa,GAAG,CAAC,CAAC;IAC3D,IAAI,CAACnB,IAAI,GAAGA,IAAI,CAACgB,OAAO,CAACR,UAAU,EAAE,IAAI,CAACS,IAAI,CAAC;IAC/C,IAAI,CAACG,eAAe,GAAGP,gBAAgB,IAAI,IAAI;IAC/CQ,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE3B,IAAI,CAAC4B,GAAG,EAAE;MAAEC,KAAK,EAAE3B,GAAG,CAACA;IAAI,CAAC,CAAC;IACzDwB,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE3B,IAAI,CAAC8B,MAAM,EAAE;MAAED,KAAK,EAAEzB,MAAM,CAACA;IAAO,CAAC,CAAC;IAClEsB,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE3B,IAAI,CAAC+B,GAAG,EAAE;MAAEF,KAAK,EAAE1B,GAAG,CAACA;IAAI,CAAC,CAAC;IACzD;IACA,IAAI,CAACc,cAAc,GACf,OAAOA,cAAc,KAAK,UAAU,GAC9BA,cAAc,GACdA,cAAc,KAAK,IAAI,GACnBX,mBAAmB,GACnB,IAAI;EACtB;EACA0B,KAAKA,CAAA,EAAG;IACJ,MAAMC,IAAI,GAAGP,MAAM,CAACQ,MAAM,CAACxB,MAAM,CAACyB,SAAS,EAAET,MAAM,CAACU,yBAAyB,CAAC,IAAI,CAAC,CAAC;IACpFH,IAAI,CAAC5B,IAAI,GAAG,IAAI,CAACA,IAAI,CAACgC,KAAK,EAAE;IAC7B,OAAOJ,IAAI;EACf;AACJ;AAEAK,OAAO,CAAC5B,MAAM,GAAGA,MAAM"}