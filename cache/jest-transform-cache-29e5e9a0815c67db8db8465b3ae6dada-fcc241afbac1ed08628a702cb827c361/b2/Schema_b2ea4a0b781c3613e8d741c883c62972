c7992cab6f38ed744e5cd8d21bb3790e
'use strict';

var Node = require('../nodes/Node.js');
var map = require('./common/map.js');
var seq = require('./common/seq.js');
var string = require('./common/string.js');
var tags = require('./tags.js');
const sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;
class Schema {
  constructor({
    compat,
    customTags,
    merge,
    resolveKnownTags,
    schema,
    sortMapEntries,
    toStringDefaults
  }) {
    this.compat = Array.isArray(compat) ? tags.getTags(compat, 'compat') : compat ? tags.getTags(null, compat) : null;
    this.merge = !!merge;
    this.name = typeof schema === 'string' && schema || 'core';
    this.knownTags = resolveKnownTags ? tags.coreKnownTags : {};
    this.tags = tags.getTags(customTags, this.name);
    this.toStringOptions = toStringDefaults ?? null;
    Object.defineProperty(this, Node.MAP, {
      value: map.map
    });
    Object.defineProperty(this, Node.SCALAR, {
      value: string.string
    });
    Object.defineProperty(this, Node.SEQ, {
      value: seq.seq
    });
    // Used by createMap()
    this.sortMapEntries = typeof sortMapEntries === 'function' ? sortMapEntries : sortMapEntries === true ? sortMapEntriesByKey : null;
  }
  clone() {
    const copy = Object.create(Schema.prototype, Object.getOwnPropertyDescriptors(this));
    copy.tags = this.tags.slice();
    return copy;
  }
}
exports.Schema = Schema;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwicmVxdWlyZSIsIm1hcCIsInNlcSIsInN0cmluZyIsInRhZ3MiLCJzb3J0TWFwRW50cmllc0J5S2V5IiwiYSIsImIiLCJrZXkiLCJTY2hlbWEiLCJjb25zdHJ1Y3RvciIsImNvbXBhdCIsImN1c3RvbVRhZ3MiLCJtZXJnZSIsInJlc29sdmVLbm93blRhZ3MiLCJzY2hlbWEiLCJzb3J0TWFwRW50cmllcyIsInRvU3RyaW5nRGVmYXVsdHMiLCJBcnJheSIsImlzQXJyYXkiLCJnZXRUYWdzIiwibmFtZSIsImtub3duVGFncyIsImNvcmVLbm93blRhZ3MiLCJ0b1N0cmluZ09wdGlvbnMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIk1BUCIsInZhbHVlIiwiU0NBTEFSIiwiU0VRIiwiY2xvbmUiLCJjb3B5IiwiY3JlYXRlIiwicHJvdG90eXBlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsInNsaWNlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlNjaGVtYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBOb2RlID0gcmVxdWlyZSgnLi4vbm9kZXMvTm9kZS5qcycpO1xudmFyIG1hcCA9IHJlcXVpcmUoJy4vY29tbW9uL21hcC5qcycpO1xudmFyIHNlcSA9IHJlcXVpcmUoJy4vY29tbW9uL3NlcS5qcycpO1xudmFyIHN0cmluZyA9IHJlcXVpcmUoJy4vY29tbW9uL3N0cmluZy5qcycpO1xudmFyIHRhZ3MgPSByZXF1aXJlKCcuL3RhZ3MuanMnKTtcblxuY29uc3Qgc29ydE1hcEVudHJpZXNCeUtleSA9IChhLCBiKSA9PiBhLmtleSA8IGIua2V5ID8gLTEgOiBhLmtleSA+IGIua2V5ID8gMSA6IDA7XG5jbGFzcyBTY2hlbWEge1xuICAgIGNvbnN0cnVjdG9yKHsgY29tcGF0LCBjdXN0b21UYWdzLCBtZXJnZSwgcmVzb2x2ZUtub3duVGFncywgc2NoZW1hLCBzb3J0TWFwRW50cmllcywgdG9TdHJpbmdEZWZhdWx0cyB9KSB7XG4gICAgICAgIHRoaXMuY29tcGF0ID0gQXJyYXkuaXNBcnJheShjb21wYXQpXG4gICAgICAgICAgICA/IHRhZ3MuZ2V0VGFncyhjb21wYXQsICdjb21wYXQnKVxuICAgICAgICAgICAgOiBjb21wYXRcbiAgICAgICAgICAgICAgICA/IHRhZ3MuZ2V0VGFncyhudWxsLCBjb21wYXQpXG4gICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICB0aGlzLm1lcmdlID0gISFtZXJnZTtcbiAgICAgICAgdGhpcy5uYW1lID0gKHR5cGVvZiBzY2hlbWEgPT09ICdzdHJpbmcnICYmIHNjaGVtYSkgfHwgJ2NvcmUnO1xuICAgICAgICB0aGlzLmtub3duVGFncyA9IHJlc29sdmVLbm93blRhZ3MgPyB0YWdzLmNvcmVLbm93blRhZ3MgOiB7fTtcbiAgICAgICAgdGhpcy50YWdzID0gdGFncy5nZXRUYWdzKGN1c3RvbVRhZ3MsIHRoaXMubmFtZSk7XG4gICAgICAgIHRoaXMudG9TdHJpbmdPcHRpb25zID0gdG9TdHJpbmdEZWZhdWx0cyA/PyBudWxsO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgTm9kZS5NQVAsIHsgdmFsdWU6IG1hcC5tYXAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBOb2RlLlNDQUxBUiwgeyB2YWx1ZTogc3RyaW5nLnN0cmluZyB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIE5vZGUuU0VRLCB7IHZhbHVlOiBzZXEuc2VxIH0pO1xuICAgICAgICAvLyBVc2VkIGJ5IGNyZWF0ZU1hcCgpXG4gICAgICAgIHRoaXMuc29ydE1hcEVudHJpZXMgPVxuICAgICAgICAgICAgdHlwZW9mIHNvcnRNYXBFbnRyaWVzID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgPyBzb3J0TWFwRW50cmllc1xuICAgICAgICAgICAgICAgIDogc29ydE1hcEVudHJpZXMgPT09IHRydWVcbiAgICAgICAgICAgICAgICAgICAgPyBzb3J0TWFwRW50cmllc0J5S2V5XG4gICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IGNvcHkgPSBPYmplY3QuY3JlYXRlKFNjaGVtYS5wcm90b3R5cGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHRoaXMpKTtcbiAgICAgICAgY29weS50YWdzID0gdGhpcy50YWdzLnNsaWNlKCk7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbn1cblxuZXhwb3J0cy5TY2hlbWEgPSBTY2hlbWE7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsa0JBQWtCLENBQUM7QUFDdEMsSUFBSUMsR0FBRyxHQUFHRCxPQUFPLENBQUMsaUJBQWlCLENBQUM7QUFDcEMsSUFBSUUsR0FBRyxHQUFHRixPQUFPLENBQUMsaUJBQWlCLENBQUM7QUFDcEMsSUFBSUcsTUFBTSxHQUFHSCxPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFDMUMsSUFBSUksSUFBSSxHQUFHSixPQUFPLENBQUMsV0FBVyxDQUFDO0FBRS9CLE1BQU1LLG1CQUFtQixHQUFHQSxDQUFDQyxDQUFDLEVBQUVDLENBQUMsS0FBS0QsQ0FBQyxDQUFDRSxHQUFHLEdBQUdELENBQUMsQ0FBQ0MsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHRixDQUFDLENBQUNFLEdBQUcsR0FBR0QsQ0FBQyxDQUFDQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUM7QUFDaEYsTUFBTUMsTUFBTSxDQUFDO0VBQ1RDLFdBQVdBLENBQUM7SUFBRUMsTUFBTTtJQUFFQyxVQUFVO0lBQUVDLEtBQUs7SUFBRUMsZ0JBQWdCO0lBQUVDLE1BQU07SUFBRUMsY0FBYztJQUFFQztFQUFpQixDQUFDLEVBQUU7SUFDbkcsSUFBSSxDQUFDTixNQUFNLEdBQUdPLEtBQUssQ0FBQ0MsT0FBTyxDQUFDUixNQUFNLENBQUMsR0FDN0JQLElBQUksQ0FBQ2dCLE9BQU8sQ0FBQ1QsTUFBTSxFQUFFLFFBQVEsQ0FBQyxHQUM5QkEsTUFBTSxHQUNGUCxJQUFJLENBQUNnQixPQUFPLENBQUMsSUFBSSxFQUFFVCxNQUFNLENBQUMsR0FDMUIsSUFBSTtJQUNkLElBQUksQ0FBQ0UsS0FBSyxHQUFHLENBQUMsQ0FBQ0EsS0FBSztJQUNwQixJQUFJLENBQUNRLElBQUksR0FBSSxPQUFPTixNQUFNLEtBQUssUUFBUSxJQUFJQSxNQUFNLElBQUssTUFBTTtJQUM1RCxJQUFJLENBQUNPLFNBQVMsR0FBR1IsZ0JBQWdCLEdBQUdWLElBQUksQ0FBQ21CLGFBQWEsR0FBRyxDQUFDLENBQUM7SUFDM0QsSUFBSSxDQUFDbkIsSUFBSSxHQUFHQSxJQUFJLENBQUNnQixPQUFPLENBQUNSLFVBQVUsRUFBRSxJQUFJLENBQUNTLElBQUksQ0FBQztJQUMvQyxJQUFJLENBQUNHLGVBQWUsR0FBR1AsZ0JBQWdCLElBQUksSUFBSTtJQUMvQ1EsTUFBTSxDQUFDQyxjQUFjLENBQUMsSUFBSSxFQUFFM0IsSUFBSSxDQUFDNEIsR0FBRyxFQUFFO01BQUVDLEtBQUssRUFBRTNCLEdBQUcsQ0FBQ0E7SUFBSSxDQUFDLENBQUM7SUFDekR3QixNQUFNLENBQUNDLGNBQWMsQ0FBQyxJQUFJLEVBQUUzQixJQUFJLENBQUM4QixNQUFNLEVBQUU7TUFBRUQsS0FBSyxFQUFFekIsTUFBTSxDQUFDQTtJQUFPLENBQUMsQ0FBQztJQUNsRXNCLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDLElBQUksRUFBRTNCLElBQUksQ0FBQytCLEdBQUcsRUFBRTtNQUFFRixLQUFLLEVBQUUxQixHQUFHLENBQUNBO0lBQUksQ0FBQyxDQUFDO0lBQ3pEO0lBQ0EsSUFBSSxDQUFDYyxjQUFjLEdBQ2YsT0FBT0EsY0FBYyxLQUFLLFVBQVUsR0FDOUJBLGNBQWMsR0FDZEEsY0FBYyxLQUFLLElBQUksR0FDbkJYLG1CQUFtQixHQUNuQixJQUFJO0VBQ3RCO0VBQ0EwQixLQUFLQSxDQUFBLEVBQUc7SUFDSixNQUFNQyxJQUFJLEdBQUdQLE1BQU0sQ0FBQ1EsTUFBTSxDQUFDeEIsTUFBTSxDQUFDeUIsU0FBUyxFQUFFVCxNQUFNLENBQUNVLHlCQUF5QixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BGSCxJQUFJLENBQUM1QixJQUFJLEdBQUcsSUFBSSxDQUFDQSxJQUFJLENBQUNnQyxLQUFLLEVBQUU7SUFDN0IsT0FBT0osSUFBSTtFQUNmO0FBQ0o7QUFFQUssT0FBTyxDQUFDNUIsTUFBTSxHQUFHQSxNQUFNIn0=