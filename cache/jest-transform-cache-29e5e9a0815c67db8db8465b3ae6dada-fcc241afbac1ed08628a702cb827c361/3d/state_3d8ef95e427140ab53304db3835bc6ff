aacc22c68d736b621ac9861c927e5fd7
/**
 * The MIT License (MIT)
 * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>
 */

'use strict';

/**
 * A generic FA State class (base for NFA and DFA).
 *
 * Maintains the transition map, and the flag whether
 * the state is accepting.
 */
var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var State = function () {
  function State() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$accepting = _ref.accepting,
      accepting = _ref$accepting === undefined ? false : _ref$accepting;
    _classCallCheck(this, State);

    /**
     * Outgoing transitions to other states.
     */
    this._transitions = new Map();

    /**
     * Whether the state is accepting.
     */
    this.accepting = accepting;
  }

  /**
   * Returns transitions for this state.
   */

  _createClass(State, [{
    key: 'getTransitions',
    value: function getTransitions() {
      return this._transitions;
    }

    /**
     * Creates a transition on symbol.
     */
  }, {
    key: 'addTransition',
    value: function addTransition(symbol, toState) {
      this.getTransitionsOnSymbol(symbol).add(toState);
      return this;
    }

    /**
     * Returns transitions set on symbol.
     */
  }, {
    key: 'getTransitionsOnSymbol',
    value: function getTransitionsOnSymbol(symbol) {
      var transitions = this._transitions.get(symbol);
      if (!transitions) {
        transitions = new Set();
        this._transitions.set(symbol, transitions);
      }
      return transitions;
    }
  }]);
  return State;
}();
module.exports = State;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIlR5cGVFcnJvciIsIlN0YXRlIiwiX3JlZiIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsIl9yZWYkYWNjZXB0aW5nIiwiYWNjZXB0aW5nIiwiX3RyYW5zaXRpb25zIiwiTWFwIiwidmFsdWUiLCJnZXRUcmFuc2l0aW9ucyIsImFkZFRyYW5zaXRpb24iLCJzeW1ib2wiLCJ0b1N0YXRlIiwiZ2V0VHJhbnNpdGlvbnNPblN5bWJvbCIsImFkZCIsInRyYW5zaXRpb25zIiwiZ2V0IiwiU2V0Iiwic2V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInN0YXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCBEbWl0cnkgU29zaG5pa292IDxkbWl0cnkuc29zaG5pa292QGdtYWlsLmNvbT5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBnZW5lcmljIEZBIFN0YXRlIGNsYXNzIChiYXNlIGZvciBORkEgYW5kIERGQSkuXG4gKlxuICogTWFpbnRhaW5zIHRoZSB0cmFuc2l0aW9uIG1hcCwgYW5kIHRoZSBmbGFnIHdoZXRoZXJcbiAqIHRoZSBzdGF0ZSBpcyBhY2NlcHRpbmcuXG4gKi9cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFN0YXRlID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdGF0ZSgpIHtcbiAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICAgIF9yZWYkYWNjZXB0aW5nID0gX3JlZi5hY2NlcHRpbmcsXG4gICAgICAgIGFjY2VwdGluZyA9IF9yZWYkYWNjZXB0aW5nID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9yZWYkYWNjZXB0aW5nO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0YXRlKTtcblxuICAgIC8qKlxuICAgICAqIE91dGdvaW5nIHRyYW5zaXRpb25zIHRvIG90aGVyIHN0YXRlcy5cbiAgICAgKi9cbiAgICB0aGlzLl90cmFuc2l0aW9ucyA9IG5ldyBNYXAoKTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIHN0YXRlIGlzIGFjY2VwdGluZy5cbiAgICAgKi9cbiAgICB0aGlzLmFjY2VwdGluZyA9IGFjY2VwdGluZztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRyYW5zaXRpb25zIGZvciB0aGlzIHN0YXRlLlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhTdGF0ZSwgW3tcbiAgICBrZXk6ICdnZXRUcmFuc2l0aW9ucycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25zKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zaXRpb25zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0cmFuc2l0aW9uIG9uIHN5bWJvbC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYWRkVHJhbnNpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFRyYW5zaXRpb24oc3ltYm9sLCB0b1N0YXRlKSB7XG4gICAgICB0aGlzLmdldFRyYW5zaXRpb25zT25TeW1ib2woc3ltYm9sKS5hZGQodG9TdGF0ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRyYW5zaXRpb25zIHNldCBvbiBzeW1ib2wuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldFRyYW5zaXRpb25zT25TeW1ib2wnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uc09uU3ltYm9sKHN5bWJvbCkge1xuICAgICAgdmFyIHRyYW5zaXRpb25zID0gdGhpcy5fdHJhbnNpdGlvbnMuZ2V0KHN5bWJvbCk7XG5cbiAgICAgIGlmICghdHJhbnNpdGlvbnMpIHtcbiAgICAgICAgdHJhbnNpdGlvbnMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMuX3RyYW5zaXRpb25zLnNldChzeW1ib2wsIHRyYW5zaXRpb25zKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRyYW5zaXRpb25zO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTdGF0ZTtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdGF0ZTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFlBQVk7O0FBRVo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBSUEsWUFBWSxHQUFHLFlBQVk7RUFBRSxTQUFTQyxnQkFBZ0JBLENBQUNDLE1BQU0sRUFBRUMsS0FBSyxFQUFFO0lBQUUsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdELEtBQUssQ0FBQ0UsTUFBTSxFQUFFRCxDQUFDLEVBQUUsRUFBRTtNQUFFLElBQUlFLFVBQVUsR0FBR0gsS0FBSyxDQUFDQyxDQUFDLENBQUM7TUFBRUUsVUFBVSxDQUFDQyxVQUFVLEdBQUdELFVBQVUsQ0FBQ0MsVUFBVSxJQUFJLEtBQUs7TUFBRUQsVUFBVSxDQUFDRSxZQUFZLEdBQUcsSUFBSTtNQUFFLElBQUksT0FBTyxJQUFJRixVQUFVLEVBQUVBLFVBQVUsQ0FBQ0csUUFBUSxHQUFHLElBQUk7TUFBRUMsTUFBTSxDQUFDQyxjQUFjLENBQUNULE1BQU0sRUFBRUksVUFBVSxDQUFDTSxHQUFHLEVBQUVOLFVBQVUsQ0FBQztJQUFFO0VBQUU7RUFBRSxPQUFPLFVBQVVPLFdBQVcsRUFBRUMsVUFBVSxFQUFFQyxXQUFXLEVBQUU7SUFBRSxJQUFJRCxVQUFVLEVBQUViLGdCQUFnQixDQUFDWSxXQUFXLENBQUNHLFNBQVMsRUFBRUYsVUFBVSxDQUFDO0lBQUUsSUFBSUMsV0FBVyxFQUFFZCxnQkFBZ0IsQ0FBQ1ksV0FBVyxFQUFFRSxXQUFXLENBQUM7SUFBRSxPQUFPRixXQUFXO0VBQUUsQ0FBQztBQUFFLENBQUMsRUFBRTtBQUVuakIsU0FBU0ksZUFBZUEsQ0FBQ0MsUUFBUSxFQUFFTCxXQUFXLEVBQUU7RUFBRSxJQUFJLEVBQUVLLFFBQVEsWUFBWUwsV0FBVyxDQUFDLEVBQUU7SUFBRSxNQUFNLElBQUlNLFNBQVMsQ0FBQyxtQ0FBbUMsQ0FBQztFQUFFO0FBQUU7QUFFeEosSUFBSUMsS0FBSyxHQUFHLFlBQVk7RUFDdEIsU0FBU0EsS0FBS0EsQ0FBQSxFQUFHO0lBQ2YsSUFBSUMsSUFBSSxHQUFHQyxTQUFTLENBQUNqQixNQUFNLEdBQUcsQ0FBQyxJQUFJaUIsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLQyxTQUFTLEdBQUdELFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7TUFDN0VFLGNBQWMsR0FBR0gsSUFBSSxDQUFDSSxTQUFTO01BQy9CQSxTQUFTLEdBQUdELGNBQWMsS0FBS0QsU0FBUyxHQUFHLEtBQUssR0FBR0MsY0FBYztJQUVyRVAsZUFBZSxDQUFDLElBQUksRUFBRUcsS0FBSyxDQUFDOztJQUU1QjtBQUNKO0FBQ0E7SUFDSSxJQUFJLENBQUNNLFlBQVksR0FBRyxJQUFJQyxHQUFHLEVBQUU7O0lBRTdCO0FBQ0o7QUFDQTtJQUNJLElBQUksQ0FBQ0YsU0FBUyxHQUFHQSxTQUFTO0VBQzVCOztFQUVBO0FBQ0Y7QUFDQTs7RUFHRXpCLFlBQVksQ0FBQ29CLEtBQUssRUFBRSxDQUFDO0lBQ25CUixHQUFHLEVBQUUsZ0JBQWdCO0lBQ3JCZ0IsS0FBSyxFQUFFLFNBQVNDLGNBQWNBLENBQUEsRUFBRztNQUMvQixPQUFPLElBQUksQ0FBQ0gsWUFBWTtJQUMxQjs7SUFFQTtBQUNKO0FBQ0E7RUFFRSxDQUFDLEVBQUU7SUFDRGQsR0FBRyxFQUFFLGVBQWU7SUFDcEJnQixLQUFLLEVBQUUsU0FBU0UsYUFBYUEsQ0FBQ0MsTUFBTSxFQUFFQyxPQUFPLEVBQUU7TUFDN0MsSUFBSSxDQUFDQyxzQkFBc0IsQ0FBQ0YsTUFBTSxDQUFDLENBQUNHLEdBQUcsQ0FBQ0YsT0FBTyxDQUFDO01BQ2hELE9BQU8sSUFBSTtJQUNiOztJQUVBO0FBQ0o7QUFDQTtFQUVFLENBQUMsRUFBRTtJQUNEcEIsR0FBRyxFQUFFLHdCQUF3QjtJQUM3QmdCLEtBQUssRUFBRSxTQUFTSyxzQkFBc0JBLENBQUNGLE1BQU0sRUFBRTtNQUM3QyxJQUFJSSxXQUFXLEdBQUcsSUFBSSxDQUFDVCxZQUFZLENBQUNVLEdBQUcsQ0FBQ0wsTUFBTSxDQUFDO01BRS9DLElBQUksQ0FBQ0ksV0FBVyxFQUFFO1FBQ2hCQSxXQUFXLEdBQUcsSUFBSUUsR0FBRyxFQUFFO1FBQ3ZCLElBQUksQ0FBQ1gsWUFBWSxDQUFDWSxHQUFHLENBQUNQLE1BQU0sRUFBRUksV0FBVyxDQUFDO01BQzVDO01BRUEsT0FBT0EsV0FBVztJQUNwQjtFQUNGLENBQUMsQ0FBQyxDQUFDO0VBRUgsT0FBT2YsS0FBSztBQUNkLENBQUMsRUFBRTtBQUVIbUIsTUFBTSxDQUFDQyxPQUFPLEdBQUdwQixLQUFLIn0=