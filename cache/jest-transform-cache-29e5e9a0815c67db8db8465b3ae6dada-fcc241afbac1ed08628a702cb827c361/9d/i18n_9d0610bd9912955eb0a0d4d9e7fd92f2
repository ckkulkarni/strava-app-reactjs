8a57609c95c1f4bbcee9ebc6f5d3ec9c
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getKeywords = exports.getLanguages = void 0;
const gherkin_1 = require("@cucumber/gherkin");
const cli_table3_1 = __importDefault(require("cli-table3"));
const capital_case_1 = require("capital-case");
const keywords = ['feature', 'rule', 'background', 'scenario', 'scenarioOutline', 'examples', 'given', 'when', 'then', 'and', 'but'];
function getAsTable(header, rows) {
  const table = new cli_table3_1.default({
    chars: {
      bottom: '',
      'bottom-left': '',
      'bottom-mid': '',
      'bottom-right': '',
      left: '',
      'left-mid': '',
      mid: '',
      'mid-mid': '',
      middle: ' | ',
      right: '',
      'right-mid': '',
      top: '',
      'top-left': '',
      'top-mid': '',
      'top-right': ''
    },
    style: {
      border: [],
      'padding-left': 0,
      'padding-right': 0
    }
  });
  table.push(header);
  table.push(...rows);
  return table.toString();
}
function getLanguages() {
  const rows = Object.keys(gherkin_1.dialects).map(isoCode => [isoCode, gherkin_1.dialects[isoCode].name, gherkin_1.dialects[isoCode].native]);
  return getAsTable(['ISO 639-1', 'ENGLISH NAME', 'NATIVE NAME'], rows);
}
exports.getLanguages = getLanguages;
function getKeywords(isoCode) {
  const language = gherkin_1.dialects[isoCode];
  const rows = keywords.map(keyword => {
    const words = language[keyword].map(s => `"${s}"`).join(', ');
    return [(0, capital_case_1.capitalCase)(keyword), words];
  });
  return getAsTable(['ENGLISH KEYWORD', 'NATIVE KEYWORDS'], rows);
}
exports.getKeywords = getKeywords;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnaGVya2luXzEiLCJyZXF1aXJlIiwiY2xpX3RhYmxlM18xIiwiX19pbXBvcnREZWZhdWx0IiwiY2FwaXRhbF9jYXNlXzEiLCJrZXl3b3JkcyIsImdldEFzVGFibGUiLCJoZWFkZXIiLCJyb3dzIiwidGFibGUiLCJkZWZhdWx0IiwiY2hhcnMiLCJib3R0b20iLCJsZWZ0IiwibWlkIiwibWlkZGxlIiwicmlnaHQiLCJ0b3AiLCJzdHlsZSIsImJvcmRlciIsInB1c2giLCJ0b1N0cmluZyIsImdldExhbmd1YWdlcyIsIk9iamVjdCIsImtleXMiLCJkaWFsZWN0cyIsIm1hcCIsImlzb0NvZGUiLCJuYW1lIiwibmF0aXZlIiwiZXhwb3J0cyIsImdldEtleXdvcmRzIiwibGFuZ3VhZ2UiLCJrZXl3b3JkIiwid29yZHMiLCJzIiwiam9pbiIsImNhcGl0YWxDYXNlIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsaS9pMThuLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRpYWxlY3RzIH0gZnJvbSAnQGN1Y3VtYmVyL2doZXJraW4nXG5pbXBvcnQgVGFibGUgZnJvbSAnY2xpLXRhYmxlMydcbmltcG9ydCB7IGNhcGl0YWxDYXNlIH0gZnJvbSAnY2FwaXRhbC1jYXNlJ1xuXG5jb25zdCBrZXl3b3JkcyA9IFtcbiAgJ2ZlYXR1cmUnLFxuICAncnVsZScsXG4gICdiYWNrZ3JvdW5kJyxcbiAgJ3NjZW5hcmlvJyxcbiAgJ3NjZW5hcmlvT3V0bGluZScsXG4gICdleGFtcGxlcycsXG4gICdnaXZlbicsXG4gICd3aGVuJyxcbiAgJ3RoZW4nLFxuICAnYW5kJyxcbiAgJ2J1dCcsXG5dIGFzIGNvbnN0XG5cbmZ1bmN0aW9uIGdldEFzVGFibGUoaGVhZGVyOiBzdHJpbmdbXSwgcm93czogc3RyaW5nW11bXSk6IHN0cmluZyB7XG4gIGNvbnN0IHRhYmxlID0gbmV3IFRhYmxlKHtcbiAgICBjaGFyczoge1xuICAgICAgYm90dG9tOiAnJyxcbiAgICAgICdib3R0b20tbGVmdCc6ICcnLFxuICAgICAgJ2JvdHRvbS1taWQnOiAnJyxcbiAgICAgICdib3R0b20tcmlnaHQnOiAnJyxcbiAgICAgIGxlZnQ6ICcnLFxuICAgICAgJ2xlZnQtbWlkJzogJycsXG4gICAgICBtaWQ6ICcnLFxuICAgICAgJ21pZC1taWQnOiAnJyxcbiAgICAgIG1pZGRsZTogJyB8ICcsXG4gICAgICByaWdodDogJycsXG4gICAgICAncmlnaHQtbWlkJzogJycsXG4gICAgICB0b3A6ICcnLFxuICAgICAgJ3RvcC1sZWZ0JzogJycsXG4gICAgICAndG9wLW1pZCc6ICcnLFxuICAgICAgJ3RvcC1yaWdodCc6ICcnLFxuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGJvcmRlcjogW10sXG4gICAgICAncGFkZGluZy1sZWZ0JzogMCxcbiAgICAgICdwYWRkaW5nLXJpZ2h0JzogMCxcbiAgICB9LFxuICB9KVxuICB0YWJsZS5wdXNoKGhlYWRlcilcbiAgdGFibGUucHVzaCguLi5yb3dzKVxuICByZXR1cm4gdGFibGUudG9TdHJpbmcoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGFuZ3VhZ2VzKCk6IHN0cmluZyB7XG4gIGNvbnN0IHJvd3MgPSBPYmplY3Qua2V5cyhkaWFsZWN0cykubWFwKChpc29Db2RlKSA9PiBbXG4gICAgaXNvQ29kZSxcbiAgICBkaWFsZWN0c1tpc29Db2RlXS5uYW1lLFxuICAgIGRpYWxlY3RzW2lzb0NvZGVdLm5hdGl2ZSxcbiAgXSlcbiAgcmV0dXJuIGdldEFzVGFibGUoWydJU08gNjM5LTEnLCAnRU5HTElTSCBOQU1FJywgJ05BVElWRSBOQU1FJ10sIHJvd3MpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRLZXl3b3Jkcyhpc29Db2RlOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBsYW5ndWFnZSA9IGRpYWxlY3RzW2lzb0NvZGVdXG4gIGNvbnN0IHJvd3MgPSBrZXl3b3Jkcy5tYXAoKGtleXdvcmQpID0+IHtcbiAgICBjb25zdCB3b3JkcyA9IGxhbmd1YWdlW2tleXdvcmRdLm1hcCgocykgPT4gYFwiJHtzfVwiYCkuam9pbignLCAnKVxuICAgIHJldHVybiBbY2FwaXRhbENhc2Uoa2V5d29yZCksIHdvcmRzXVxuICB9KVxuICByZXR1cm4gZ2V0QXNUYWJsZShbJ0VOR0xJU0ggS0VZV09SRCcsICdOQVRJVkUgS0VZV09SRFMnXSwgcm93cylcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFBQSxTQUFBLEdBQUFDLE9BQUE7QUFDQSxNQUFBQyxZQUFBLEdBQUFDLGVBQUEsQ0FBQUYsT0FBQTtBQUNBLE1BQUFHLGNBQUEsR0FBQUgsT0FBQTtBQUVBLE1BQU1JLFFBQVEsR0FBRyxDQUNmLFNBQVMsRUFDVCxNQUFNLEVBQ04sWUFBWSxFQUNaLFVBQVUsRUFDVixpQkFBaUIsRUFDakIsVUFBVSxFQUNWLE9BQU8sRUFDUCxNQUFNLEVBQ04sTUFBTSxFQUNOLEtBQUssRUFDTCxLQUFLLENBQ0c7QUFFVixTQUFTQyxVQUFVQSxDQUFDQyxNQUFnQixFQUFFQyxJQUFnQjtFQUNwRCxNQUFNQyxLQUFLLEdBQUcsSUFBSVAsWUFBQSxDQUFBUSxPQUFLLENBQUM7SUFDdEJDLEtBQUssRUFBRTtNQUNMQyxNQUFNLEVBQUUsRUFBRTtNQUNWLGFBQWEsRUFBRSxFQUFFO01BQ2pCLFlBQVksRUFBRSxFQUFFO01BQ2hCLGNBQWMsRUFBRSxFQUFFO01BQ2xCQyxJQUFJLEVBQUUsRUFBRTtNQUNSLFVBQVUsRUFBRSxFQUFFO01BQ2RDLEdBQUcsRUFBRSxFQUFFO01BQ1AsU0FBUyxFQUFFLEVBQUU7TUFDYkMsTUFBTSxFQUFFLEtBQUs7TUFDYkMsS0FBSyxFQUFFLEVBQUU7TUFDVCxXQUFXLEVBQUUsRUFBRTtNQUNmQyxHQUFHLEVBQUUsRUFBRTtNQUNQLFVBQVUsRUFBRSxFQUFFO01BQ2QsU0FBUyxFQUFFLEVBQUU7TUFDYixXQUFXLEVBQUU7S0FDZDtJQUNEQyxLQUFLLEVBQUU7TUFDTEMsTUFBTSxFQUFFLEVBQUU7TUFDVixjQUFjLEVBQUUsQ0FBQztNQUNqQixlQUFlLEVBQUU7O0dBRXBCLENBQUM7RUFDRlYsS0FBSyxDQUFDVyxJQUFJLENBQUNiLE1BQU0sQ0FBQztFQUNsQkUsS0FBSyxDQUFDVyxJQUFJLENBQUMsR0FBR1osSUFBSSxDQUFDO0VBQ25CLE9BQU9DLEtBQUssQ0FBQ1ksUUFBUSxFQUFFO0FBQ3pCO0FBRUEsU0FBZ0JDLFlBQVlBLENBQUE7RUFDMUIsTUFBTWQsSUFBSSxHQUFHZSxNQUFNLENBQUNDLElBQUksQ0FBQ3hCLFNBQUEsQ0FBQXlCLFFBQVEsQ0FBQyxDQUFDQyxHQUFHLENBQUVDLE9BQU8sSUFBSyxDQUNsREEsT0FBTyxFQUNQM0IsU0FBQSxDQUFBeUIsUUFBUSxDQUFDRSxPQUFPLENBQUMsQ0FBQ0MsSUFBSSxFQUN0QjVCLFNBQUEsQ0FBQXlCLFFBQVEsQ0FBQ0UsT0FBTyxDQUFDLENBQUNFLE1BQU0sQ0FDekIsQ0FBQztFQUNGLE9BQU92QixVQUFVLENBQUMsQ0FBQyxXQUFXLEVBQUUsY0FBYyxFQUFFLGFBQWEsQ0FBQyxFQUFFRSxJQUFJLENBQUM7QUFDdkU7QUFQQXNCLE9BQUEsQ0FBQVIsWUFBQSxHQUFBQSxZQUFBO0FBU0EsU0FBZ0JTLFdBQVdBLENBQUNKLE9BQWU7RUFDekMsTUFBTUssUUFBUSxHQUFHaEMsU0FBQSxDQUFBeUIsUUFBUSxDQUFDRSxPQUFPLENBQUM7RUFDbEMsTUFBTW5CLElBQUksR0FBR0gsUUFBUSxDQUFDcUIsR0FBRyxDQUFFTyxPQUFPLElBQUk7SUFDcEMsTUFBTUMsS0FBSyxHQUFHRixRQUFRLENBQUNDLE9BQU8sQ0FBQyxDQUFDUCxHQUFHLENBQUVTLENBQUMsSUFBSyxJQUFJQSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQy9ELE9BQU8sQ0FBQyxJQUFBaEMsY0FBQSxDQUFBaUMsV0FBVyxFQUFDSixPQUFPLENBQUMsRUFBRUMsS0FBSyxDQUFDO0VBQ3RDLENBQUMsQ0FBQztFQUNGLE9BQU81QixVQUFVLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxpQkFBaUIsQ0FBQyxFQUFFRSxJQUFJLENBQUM7QUFDakU7QUFQQXNCLE9BQUEsQ0FBQUMsV0FBQSxHQUFBQSxXQUFBIn0=