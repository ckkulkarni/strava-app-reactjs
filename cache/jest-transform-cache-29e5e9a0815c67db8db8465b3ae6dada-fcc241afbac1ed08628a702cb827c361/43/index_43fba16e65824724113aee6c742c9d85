027df369a572c62f134c33a0a6fdbd84
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
const configuration_1 = require("../configuration");
const api_1 = require("../api");
const i18n_1 = require("./i18n");
const install_validator_1 = require("./install_validator");
const debug_1 = __importDefault(require("debug"));
class Cli {
  constructor({
    argv,
    cwd,
    stdout,
    stderr = process.stderr,
    env
  }) {
    this.argv = argv;
    this.cwd = cwd;
    this.stdout = stdout;
    this.stderr = stderr;
    this.env = env;
  }
  async run() {
    await (0, install_validator_1.validateInstall)();
    const {
      options,
      configuration: argvConfiguration
    } = configuration_1.ArgvParser.parse(this.argv);
    if (options.i18nLanguages) {
      this.stdout.write((0, i18n_1.getLanguages)());
      return {
        shouldAdvertisePublish: false,
        shouldExitImmediately: true,
        success: true
      };
    }
    if (options.i18nKeywords) {
      this.stdout.write((0, i18n_1.getKeywords)(options.i18nKeywords));
      return {
        shouldAdvertisePublish: false,
        shouldExitImmediately: true,
        success: true
      };
    }
    const environment = {
      cwd: this.cwd,
      stdout: this.stdout,
      stderr: this.stderr,
      env: this.env,
      debug: debug_1.default.enabled('cucumber')
    };
    const {
      useConfiguration: configuration,
      runConfiguration
    } = await (0, api_1.loadConfiguration)({
      file: options.config,
      profiles: options.profile,
      provided: argvConfiguration
    }, environment);
    const {
      success
    } = await (0, api_1.runCucumber)(runConfiguration, environment);
    return {
      shouldAdvertisePublish: !runConfiguration.formats.publish && !configuration.publishQuiet && !(0, configuration_1.isTruthyString)(this.env.CUCUMBER_PUBLISH_QUIET),
      shouldExitImmediately: configuration.forceExit,
      success
    };
  }
}
exports.default = Cli;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25maWd1cmF0aW9uXzEiLCJyZXF1aXJlIiwiYXBpXzEiLCJpMThuXzEiLCJpbnN0YWxsX3ZhbGlkYXRvcl8xIiwiZGVidWdfMSIsIl9faW1wb3J0RGVmYXVsdCIsIkNsaSIsImNvbnN0cnVjdG9yIiwiYXJndiIsImN3ZCIsInN0ZG91dCIsInN0ZGVyciIsInByb2Nlc3MiLCJlbnYiLCJydW4iLCJ2YWxpZGF0ZUluc3RhbGwiLCJvcHRpb25zIiwiY29uZmlndXJhdGlvbiIsImFyZ3ZDb25maWd1cmF0aW9uIiwiQXJndlBhcnNlciIsInBhcnNlIiwiaTE4bkxhbmd1YWdlcyIsIndyaXRlIiwiZ2V0TGFuZ3VhZ2VzIiwic2hvdWxkQWR2ZXJ0aXNlUHVibGlzaCIsInNob3VsZEV4aXRJbW1lZGlhdGVseSIsInN1Y2Nlc3MiLCJpMThuS2V5d29yZHMiLCJnZXRLZXl3b3JkcyIsImVudmlyb25tZW50IiwiZGVidWciLCJkZWZhdWx0IiwiZW5hYmxlZCIsInVzZUNvbmZpZ3VyYXRpb24iLCJydW5Db25maWd1cmF0aW9uIiwibG9hZENvbmZpZ3VyYXRpb24iLCJmaWxlIiwiY29uZmlnIiwicHJvZmlsZXMiLCJwcm9maWxlIiwicHJvdmlkZWQiLCJydW5DdWN1bWJlciIsImZvcm1hdHMiLCJwdWJsaXNoIiwicHVibGlzaFF1aWV0IiwiaXNUcnV0aHlTdHJpbmciLCJDVUNVTUJFUl9QVUJMSVNIX1FVSUVUIiwiZm9yY2VFeGl0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJndlBhcnNlciwgaXNUcnV0aHlTdHJpbmcgfSBmcm9tICcuLi9jb25maWd1cmF0aW9uJ1xuaW1wb3J0IHsgSUZvcm1hdHRlclN0cmVhbSB9IGZyb20gJy4uL2Zvcm1hdHRlcidcbmltcG9ydCB7IGxvYWRDb25maWd1cmF0aW9uLCBydW5DdWN1bWJlciB9IGZyb20gJy4uL2FwaSdcbmltcG9ydCB7IGdldEtleXdvcmRzLCBnZXRMYW5ndWFnZXMgfSBmcm9tICcuL2kxOG4nXG5pbXBvcnQgeyB2YWxpZGF0ZUluc3RhbGwgfSBmcm9tICcuL2luc3RhbGxfdmFsaWRhdG9yJ1xuaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJ1xuXG5leHBvcnQgaW50ZXJmYWNlIElDbGlSdW5SZXN1bHQge1xuICBzaG91bGRBZHZlcnRpc2VQdWJsaXNoOiBib29sZWFuXG4gIHNob3VsZEV4aXRJbW1lZGlhdGVseTogYm9vbGVhblxuICBzdWNjZXNzOiBib29sZWFuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENsaSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgYXJndjogc3RyaW5nW11cbiAgcHJpdmF0ZSByZWFkb25seSBjd2Q6IHN0cmluZ1xuICBwcml2YXRlIHJlYWRvbmx5IHN0ZG91dDogSUZvcm1hdHRlclN0cmVhbVxuICBwcml2YXRlIHJlYWRvbmx5IHN0ZGVycjogSUZvcm1hdHRlclN0cmVhbVxuICBwcml2YXRlIHJlYWRvbmx5IGVudjogTm9kZUpTLlByb2Nlc3NFbnZcblxuICBjb25zdHJ1Y3Rvcih7XG4gICAgYXJndixcbiAgICBjd2QsXG4gICAgc3Rkb3V0LFxuICAgIHN0ZGVyciA9IHByb2Nlc3Muc3RkZXJyLFxuICAgIGVudixcbiAgfToge1xuICAgIGFyZ3Y6IHN0cmluZ1tdXG4gICAgY3dkOiBzdHJpbmdcbiAgICBzdGRvdXQ6IElGb3JtYXR0ZXJTdHJlYW1cbiAgICBzdGRlcnI/OiBJRm9ybWF0dGVyU3RyZWFtXG4gICAgZW52OiBOb2RlSlMuUHJvY2Vzc0VudlxuICB9KSB7XG4gICAgdGhpcy5hcmd2ID0gYXJndlxuICAgIHRoaXMuY3dkID0gY3dkXG4gICAgdGhpcy5zdGRvdXQgPSBzdGRvdXRcbiAgICB0aGlzLnN0ZGVyciA9IHN0ZGVyclxuICAgIHRoaXMuZW52ID0gZW52XG4gIH1cblxuICBhc3luYyBydW4oKTogUHJvbWlzZTxJQ2xpUnVuUmVzdWx0PiB7XG4gICAgYXdhaXQgdmFsaWRhdGVJbnN0YWxsKClcbiAgICBjb25zdCB7IG9wdGlvbnMsIGNvbmZpZ3VyYXRpb246IGFyZ3ZDb25maWd1cmF0aW9uIH0gPSBBcmd2UGFyc2VyLnBhcnNlKFxuICAgICAgdGhpcy5hcmd2XG4gICAgKVxuICAgIGlmIChvcHRpb25zLmkxOG5MYW5ndWFnZXMpIHtcbiAgICAgIHRoaXMuc3Rkb3V0LndyaXRlKGdldExhbmd1YWdlcygpKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvdWxkQWR2ZXJ0aXNlUHVibGlzaDogZmFsc2UsXG4gICAgICAgIHNob3VsZEV4aXRJbW1lZGlhdGVseTogdHJ1ZSxcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuaTE4bktleXdvcmRzKSB7XG4gICAgICB0aGlzLnN0ZG91dC53cml0ZShnZXRLZXl3b3JkcyhvcHRpb25zLmkxOG5LZXl3b3JkcykpXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG91bGRBZHZlcnRpc2VQdWJsaXNoOiBmYWxzZSxcbiAgICAgICAgc2hvdWxkRXhpdEltbWVkaWF0ZWx5OiB0cnVlLFxuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBlbnZpcm9ubWVudCA9IHtcbiAgICAgIGN3ZDogdGhpcy5jd2QsXG4gICAgICBzdGRvdXQ6IHRoaXMuc3Rkb3V0LFxuICAgICAgc3RkZXJyOiB0aGlzLnN0ZGVycixcbiAgICAgIGVudjogdGhpcy5lbnYsXG4gICAgICBkZWJ1ZzogZGVidWcuZW5hYmxlZCgnY3VjdW1iZXInKSxcbiAgICB9XG4gICAgY29uc3QgeyB1c2VDb25maWd1cmF0aW9uOiBjb25maWd1cmF0aW9uLCBydW5Db25maWd1cmF0aW9uIH0gPVxuICAgICAgYXdhaXQgbG9hZENvbmZpZ3VyYXRpb24oXG4gICAgICAgIHtcbiAgICAgICAgICBmaWxlOiBvcHRpb25zLmNvbmZpZyxcbiAgICAgICAgICBwcm9maWxlczogb3B0aW9ucy5wcm9maWxlLFxuICAgICAgICAgIHByb3ZpZGVkOiBhcmd2Q29uZmlndXJhdGlvbixcbiAgICAgICAgfSxcbiAgICAgICAgZW52aXJvbm1lbnRcbiAgICAgIClcbiAgICBjb25zdCB7IHN1Y2Nlc3MgfSA9IGF3YWl0IHJ1bkN1Y3VtYmVyKHJ1bkNvbmZpZ3VyYXRpb24sIGVudmlyb25tZW50KVxuICAgIHJldHVybiB7XG4gICAgICBzaG91bGRBZHZlcnRpc2VQdWJsaXNoOlxuICAgICAgICAhcnVuQ29uZmlndXJhdGlvbi5mb3JtYXRzLnB1Ymxpc2ggJiZcbiAgICAgICAgIWNvbmZpZ3VyYXRpb24ucHVibGlzaFF1aWV0ICYmXG4gICAgICAgICFpc1RydXRoeVN0cmluZyh0aGlzLmVudi5DVUNVTUJFUl9QVUJMSVNIX1FVSUVUKSxcbiAgICAgIHNob3VsZEV4aXRJbW1lZGlhdGVseTogY29uZmlndXJhdGlvbi5mb3JjZUV4aXQsXG4gICAgICBzdWNjZXNzLFxuICAgIH1cbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsTUFBQUEsZUFBQSxHQUFBQyxPQUFBO0FBRUEsTUFBQUMsS0FBQSxHQUFBRCxPQUFBO0FBQ0EsTUFBQUUsTUFBQSxHQUFBRixPQUFBO0FBQ0EsTUFBQUcsbUJBQUEsR0FBQUgsT0FBQTtBQUNBLE1BQUFJLE9BQUEsR0FBQUMsZUFBQSxDQUFBTCxPQUFBO0FBUUEsTUFBcUJNLEdBQUc7RUFPdEJDLFlBQVk7SUFDVkMsSUFBSTtJQUNKQyxHQUFHO0lBQ0hDLE1BQU07SUFDTkMsTUFBTSxHQUFHQyxPQUFPLENBQUNELE1BQU07SUFDdkJFO0VBQUcsQ0FPSjtJQUNDLElBQUksQ0FBQ0wsSUFBSSxHQUFHQSxJQUFJO0lBQ2hCLElBQUksQ0FBQ0MsR0FBRyxHQUFHQSxHQUFHO0lBQ2QsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07SUFDcEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07SUFDcEIsSUFBSSxDQUFDRSxHQUFHLEdBQUdBLEdBQUc7RUFDaEI7RUFFQSxNQUFNQyxHQUFHQSxDQUFBO0lBQ1AsTUFBTSxJQUFBWCxtQkFBQSxDQUFBWSxlQUFlLEdBQUU7SUFDdkIsTUFBTTtNQUFFQyxPQUFPO01BQUVDLGFBQWEsRUFBRUM7SUFBaUIsQ0FBRSxHQUFHbkIsZUFBQSxDQUFBb0IsVUFBVSxDQUFDQyxLQUFLLENBQ3BFLElBQUksQ0FBQ1osSUFBSSxDQUNWO0lBQ0QsSUFBSVEsT0FBTyxDQUFDSyxhQUFhLEVBQUU7TUFDekIsSUFBSSxDQUFDWCxNQUFNLENBQUNZLEtBQUssQ0FBQyxJQUFBcEIsTUFBQSxDQUFBcUIsWUFBWSxHQUFFLENBQUM7TUFDakMsT0FBTztRQUNMQyxzQkFBc0IsRUFBRSxLQUFLO1FBQzdCQyxxQkFBcUIsRUFBRSxJQUFJO1FBQzNCQyxPQUFPLEVBQUU7T0FDVjs7SUFFSCxJQUFJVixPQUFPLENBQUNXLFlBQVksRUFBRTtNQUN4QixJQUFJLENBQUNqQixNQUFNLENBQUNZLEtBQUssQ0FBQyxJQUFBcEIsTUFBQSxDQUFBMEIsV0FBVyxFQUFDWixPQUFPLENBQUNXLFlBQVksQ0FBQyxDQUFDO01BQ3BELE9BQU87UUFDTEgsc0JBQXNCLEVBQUUsS0FBSztRQUM3QkMscUJBQXFCLEVBQUUsSUFBSTtRQUMzQkMsT0FBTyxFQUFFO09BQ1Y7O0lBRUgsTUFBTUcsV0FBVyxHQUFHO01BQ2xCcEIsR0FBRyxFQUFFLElBQUksQ0FBQ0EsR0FBRztNQUNiQyxNQUFNLEVBQUUsSUFBSSxDQUFDQSxNQUFNO01BQ25CQyxNQUFNLEVBQUUsSUFBSSxDQUFDQSxNQUFNO01BQ25CRSxHQUFHLEVBQUUsSUFBSSxDQUFDQSxHQUFHO01BQ2JpQixLQUFLLEVBQUUxQixPQUFBLENBQUEyQixPQUFLLENBQUNDLE9BQU8sQ0FBQyxVQUFVO0tBQ2hDO0lBQ0QsTUFBTTtNQUFFQyxnQkFBZ0IsRUFBRWhCLGFBQWE7TUFBRWlCO0lBQWdCLENBQUUsR0FDekQsTUFBTSxJQUFBakMsS0FBQSxDQUFBa0MsaUJBQWlCLEVBQ3JCO01BQ0VDLElBQUksRUFBRXBCLE9BQU8sQ0FBQ3FCLE1BQU07TUFDcEJDLFFBQVEsRUFBRXRCLE9BQU8sQ0FBQ3VCLE9BQU87TUFDekJDLFFBQVEsRUFBRXRCO0tBQ1gsRUFDRFcsV0FBVyxDQUNaO0lBQ0gsTUFBTTtNQUFFSDtJQUFPLENBQUUsR0FBRyxNQUFNLElBQUF6QixLQUFBLENBQUF3QyxXQUFXLEVBQUNQLGdCQUFnQixFQUFFTCxXQUFXLENBQUM7SUFDcEUsT0FBTztNQUNMTCxzQkFBc0IsRUFDcEIsQ0FBQ1UsZ0JBQWdCLENBQUNRLE9BQU8sQ0FBQ0MsT0FBTyxJQUNqQyxDQUFDMUIsYUFBYSxDQUFDMkIsWUFBWSxJQUMzQixDQUFDLElBQUE3QyxlQUFBLENBQUE4QyxjQUFjLEVBQUMsSUFBSSxDQUFDaEMsR0FBRyxDQUFDaUMsc0JBQXNCLENBQUM7TUFDbERyQixxQkFBcUIsRUFBRVIsYUFBYSxDQUFDOEIsU0FBUztNQUM5Q3JCO0tBQ0Q7RUFDSDs7QUF6RUZzQixPQUFBLENBQUFqQixPQUFBLEdBQUF6QixHQUFBIn0=