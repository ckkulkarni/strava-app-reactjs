d5948b191615f36d7634456f81710717
'use strict';

var Node = require('../nodes/Node.js');
var visit = require('../visit.js');

/**
 * Verify that the input string is a valid anchor.
 *
 * Will throw on errors.
 */
function anchorIsValid(anchor) {
  if (/[\x00-\x19\s,[\]{}]/.test(anchor)) {
    const sa = JSON.stringify(anchor);
    const msg = `Anchor must not contain whitespace or control characters: ${sa}`;
    throw new Error(msg);
  }
  return true;
}
function anchorNames(root) {
  const anchors = new Set();
  visit.visit(root, {
    Value(_key, node) {
      if (node.anchor) anchors.add(node.anchor);
    }
  });
  return anchors;
}
/** Find a new anchor name with the given `prefix` and a one-indexed suffix. */
function findNewAnchor(prefix, exclude) {
  for (let i = 1; true; ++i) {
    const name = `${prefix}${i}`;
    if (!exclude.has(name)) return name;
  }
}
function createNodeAnchors(doc, prefix) {
  const aliasObjects = [];
  const sourceObjects = new Map();
  let prevAnchors = null;
  return {
    onAnchor: source => {
      aliasObjects.push(source);
      if (!prevAnchors) prevAnchors = anchorNames(doc);
      const anchor = findNewAnchor(prefix, prevAnchors);
      prevAnchors.add(anchor);
      return anchor;
    },
    /**
     * With circular references, the source node is only resolved after all
     * of its child nodes are. This is why anchors are set only after all of
     * the nodes have been created.
     */
    setAnchors: () => {
      for (const source of aliasObjects) {
        const ref = sourceObjects.get(source);
        if (typeof ref === 'object' && ref.anchor && (Node.isScalar(ref.node) || Node.isCollection(ref.node))) {
          ref.node.anchor = ref.anchor;
        } else {
          const error = new Error('Failed to resolve repeated object (this should not happen)');
          error.source = source;
          throw error;
        }
      }
    },
    sourceObjects
  };
}
exports.anchorIsValid = anchorIsValid;
exports.anchorNames = anchorNames;
exports.createNodeAnchors = createNodeAnchors;
exports.findNewAnchor = findNewAnchor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwicmVxdWlyZSIsInZpc2l0IiwiYW5jaG9ySXNWYWxpZCIsImFuY2hvciIsInRlc3QiLCJzYSIsIkpTT04iLCJzdHJpbmdpZnkiLCJtc2ciLCJFcnJvciIsImFuY2hvck5hbWVzIiwicm9vdCIsImFuY2hvcnMiLCJTZXQiLCJWYWx1ZSIsIl9rZXkiLCJub2RlIiwiYWRkIiwiZmluZE5ld0FuY2hvciIsInByZWZpeCIsImV4Y2x1ZGUiLCJpIiwibmFtZSIsImhhcyIsImNyZWF0ZU5vZGVBbmNob3JzIiwiZG9jIiwiYWxpYXNPYmplY3RzIiwic291cmNlT2JqZWN0cyIsIk1hcCIsInByZXZBbmNob3JzIiwib25BbmNob3IiLCJzb3VyY2UiLCJwdXNoIiwic2V0QW5jaG9ycyIsInJlZiIsImdldCIsImlzU2NhbGFyIiwiaXNDb2xsZWN0aW9uIiwiZXJyb3IiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiYW5jaG9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBOb2RlID0gcmVxdWlyZSgnLi4vbm9kZXMvTm9kZS5qcycpO1xudmFyIHZpc2l0ID0gcmVxdWlyZSgnLi4vdmlzaXQuanMnKTtcblxuLyoqXG4gKiBWZXJpZnkgdGhhdCB0aGUgaW5wdXQgc3RyaW5nIGlzIGEgdmFsaWQgYW5jaG9yLlxuICpcbiAqIFdpbGwgdGhyb3cgb24gZXJyb3JzLlxuICovXG5mdW5jdGlvbiBhbmNob3JJc1ZhbGlkKGFuY2hvcikge1xuICAgIGlmICgvW1xceDAwLVxceDE5XFxzLFtcXF17fV0vLnRlc3QoYW5jaG9yKSkge1xuICAgICAgICBjb25zdCBzYSA9IEpTT04uc3RyaW5naWZ5KGFuY2hvcik7XG4gICAgICAgIGNvbnN0IG1zZyA9IGBBbmNob3IgbXVzdCBub3QgY29udGFpbiB3aGl0ZXNwYWNlIG9yIGNvbnRyb2wgY2hhcmFjdGVyczogJHtzYX1gO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBhbmNob3JOYW1lcyhyb290KSB7XG4gICAgY29uc3QgYW5jaG9ycyA9IG5ldyBTZXQoKTtcbiAgICB2aXNpdC52aXNpdChyb290LCB7XG4gICAgICAgIFZhbHVlKF9rZXksIG5vZGUpIHtcbiAgICAgICAgICAgIGlmIChub2RlLmFuY2hvcilcbiAgICAgICAgICAgICAgICBhbmNob3JzLmFkZChub2RlLmFuY2hvcik7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYW5jaG9ycztcbn1cbi8qKiBGaW5kIGEgbmV3IGFuY2hvciBuYW1lIHdpdGggdGhlIGdpdmVuIGBwcmVmaXhgIGFuZCBhIG9uZS1pbmRleGVkIHN1ZmZpeC4gKi9cbmZ1bmN0aW9uIGZpbmROZXdBbmNob3IocHJlZml4LCBleGNsdWRlKSB7XG4gICAgZm9yIChsZXQgaSA9IDE7IHRydWU7ICsraSkge1xuICAgICAgICBjb25zdCBuYW1lID0gYCR7cHJlZml4fSR7aX1gO1xuICAgICAgICBpZiAoIWV4Y2x1ZGUuaGFzKG5hbWUpKVxuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlTm9kZUFuY2hvcnMoZG9jLCBwcmVmaXgpIHtcbiAgICBjb25zdCBhbGlhc09iamVjdHMgPSBbXTtcbiAgICBjb25zdCBzb3VyY2VPYmplY3RzID0gbmV3IE1hcCgpO1xuICAgIGxldCBwcmV2QW5jaG9ycyA9IG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb25BbmNob3I6IChzb3VyY2UpID0+IHtcbiAgICAgICAgICAgIGFsaWFzT2JqZWN0cy5wdXNoKHNvdXJjZSk7XG4gICAgICAgICAgICBpZiAoIXByZXZBbmNob3JzKVxuICAgICAgICAgICAgICAgIHByZXZBbmNob3JzID0gYW5jaG9yTmFtZXMoZG9jKTtcbiAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IGZpbmROZXdBbmNob3IocHJlZml4LCBwcmV2QW5jaG9ycyk7XG4gICAgICAgICAgICBwcmV2QW5jaG9ycy5hZGQoYW5jaG9yKTtcbiAgICAgICAgICAgIHJldHVybiBhbmNob3I7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaXRoIGNpcmN1bGFyIHJlZmVyZW5jZXMsIHRoZSBzb3VyY2Ugbm9kZSBpcyBvbmx5IHJlc29sdmVkIGFmdGVyIGFsbFxuICAgICAgICAgKiBvZiBpdHMgY2hpbGQgbm9kZXMgYXJlLiBUaGlzIGlzIHdoeSBhbmNob3JzIGFyZSBzZXQgb25seSBhZnRlciBhbGwgb2ZcbiAgICAgICAgICogdGhlIG5vZGVzIGhhdmUgYmVlbiBjcmVhdGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0QW5jaG9yczogKCkgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBzb3VyY2Ugb2YgYWxpYXNPYmplY3RzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVmID0gc291cmNlT2JqZWN0cy5nZXQoc291cmNlKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlZiA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAgICAgcmVmLmFuY2hvciAmJlxuICAgICAgICAgICAgICAgICAgICAoTm9kZS5pc1NjYWxhcihyZWYubm9kZSkgfHwgTm9kZS5pc0NvbGxlY3Rpb24ocmVmLm5vZGUpKSkge1xuICAgICAgICAgICAgICAgICAgICByZWYubm9kZS5hbmNob3IgPSByZWYuYW5jaG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ0ZhaWxlZCB0byByZXNvbHZlIHJlcGVhdGVkIG9iamVjdCAodGhpcyBzaG91bGQgbm90IGhhcHBlbiknKTtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3Iuc291cmNlID0gc291cmNlO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNvdXJjZU9iamVjdHNcbiAgICB9O1xufVxuXG5leHBvcnRzLmFuY2hvcklzVmFsaWQgPSBhbmNob3JJc1ZhbGlkO1xuZXhwb3J0cy5hbmNob3JOYW1lcyA9IGFuY2hvck5hbWVzO1xuZXhwb3J0cy5jcmVhdGVOb2RlQW5jaG9ycyA9IGNyZWF0ZU5vZGVBbmNob3JzO1xuZXhwb3J0cy5maW5kTmV3QW5jaG9yID0gZmluZE5ld0FuY2hvcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztBQUN0QyxJQUFJQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxhQUFhLENBQUM7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxhQUFhQSxDQUFDQyxNQUFNLEVBQUU7RUFDM0IsSUFBSSxxQkFBcUIsQ0FBQ0MsSUFBSSxDQUFDRCxNQUFNLENBQUMsRUFBRTtJQUNwQyxNQUFNRSxFQUFFLEdBQUdDLElBQUksQ0FBQ0MsU0FBUyxDQUFDSixNQUFNLENBQUM7SUFDakMsTUFBTUssR0FBRyxHQUFJLDZEQUE0REgsRUFBRyxFQUFDO0lBQzdFLE1BQU0sSUFBSUksS0FBSyxDQUFDRCxHQUFHLENBQUM7RUFDeEI7RUFDQSxPQUFPLElBQUk7QUFDZjtBQUNBLFNBQVNFLFdBQVdBLENBQUNDLElBQUksRUFBRTtFQUN2QixNQUFNQyxPQUFPLEdBQUcsSUFBSUMsR0FBRyxFQUFFO0VBQ3pCWixLQUFLLENBQUNBLEtBQUssQ0FBQ1UsSUFBSSxFQUFFO0lBQ2RHLEtBQUtBLENBQUNDLElBQUksRUFBRUMsSUFBSSxFQUFFO01BQ2QsSUFBSUEsSUFBSSxDQUFDYixNQUFNLEVBQ1hTLE9BQU8sQ0FBQ0ssR0FBRyxDQUFDRCxJQUFJLENBQUNiLE1BQU0sQ0FBQztJQUNoQztFQUNKLENBQUMsQ0FBQztFQUNGLE9BQU9TLE9BQU87QUFDbEI7QUFDQTtBQUNBLFNBQVNNLGFBQWFBLENBQUNDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO0VBQ3BDLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRUEsQ0FBQyxFQUFFO0lBQ3ZCLE1BQU1DLElBQUksR0FBSSxHQUFFSCxNQUFPLEdBQUVFLENBQUUsRUFBQztJQUM1QixJQUFJLENBQUNELE9BQU8sQ0FBQ0csR0FBRyxDQUFDRCxJQUFJLENBQUMsRUFDbEIsT0FBT0EsSUFBSTtFQUNuQjtBQUNKO0FBQ0EsU0FBU0UsaUJBQWlCQSxDQUFDQyxHQUFHLEVBQUVOLE1BQU0sRUFBRTtFQUNwQyxNQUFNTyxZQUFZLEdBQUcsRUFBRTtFQUN2QixNQUFNQyxhQUFhLEdBQUcsSUFBSUMsR0FBRyxFQUFFO0VBQy9CLElBQUlDLFdBQVcsR0FBRyxJQUFJO0VBQ3RCLE9BQU87SUFDSEMsUUFBUSxFQUFHQyxNQUFNLElBQUs7TUFDbEJMLFlBQVksQ0FBQ00sSUFBSSxDQUFDRCxNQUFNLENBQUM7TUFDekIsSUFBSSxDQUFDRixXQUFXLEVBQ1pBLFdBQVcsR0FBR25CLFdBQVcsQ0FBQ2UsR0FBRyxDQUFDO01BQ2xDLE1BQU10QixNQUFNLEdBQUdlLGFBQWEsQ0FBQ0MsTUFBTSxFQUFFVSxXQUFXLENBQUM7TUFDakRBLFdBQVcsQ0FBQ1osR0FBRyxDQUFDZCxNQUFNLENBQUM7TUFDdkIsT0FBT0EsTUFBTTtJQUNqQixDQUFDO0lBQ0Q7QUFDUjtBQUNBO0FBQ0E7QUFDQTtJQUNROEIsVUFBVSxFQUFFQSxDQUFBLEtBQU07TUFDZCxLQUFLLE1BQU1GLE1BQU0sSUFBSUwsWUFBWSxFQUFFO1FBQy9CLE1BQU1RLEdBQUcsR0FBR1AsYUFBYSxDQUFDUSxHQUFHLENBQUNKLE1BQU0sQ0FBQztRQUNyQyxJQUFJLE9BQU9HLEdBQUcsS0FBSyxRQUFRLElBQ3ZCQSxHQUFHLENBQUMvQixNQUFNLEtBQ1RKLElBQUksQ0FBQ3FDLFFBQVEsQ0FBQ0YsR0FBRyxDQUFDbEIsSUFBSSxDQUFDLElBQUlqQixJQUFJLENBQUNzQyxZQUFZLENBQUNILEdBQUcsQ0FBQ2xCLElBQUksQ0FBQyxDQUFDLEVBQUU7VUFDMURrQixHQUFHLENBQUNsQixJQUFJLENBQUNiLE1BQU0sR0FBRytCLEdBQUcsQ0FBQy9CLE1BQU07UUFDaEMsQ0FBQyxNQUNJO1VBQ0QsTUFBTW1DLEtBQUssR0FBRyxJQUFJN0IsS0FBSyxDQUFDLDREQUE0RCxDQUFDO1VBQ3JGNkIsS0FBSyxDQUFDUCxNQUFNLEdBQUdBLE1BQU07VUFDckIsTUFBTU8sS0FBSztRQUNmO01BQ0o7SUFDSixDQUFDO0lBQ0RYO0VBQ0osQ0FBQztBQUNMO0FBRUFZLE9BQU8sQ0FBQ3JDLGFBQWEsR0FBR0EsYUFBYTtBQUNyQ3FDLE9BQU8sQ0FBQzdCLFdBQVcsR0FBR0EsV0FBVztBQUNqQzZCLE9BQU8sQ0FBQ2YsaUJBQWlCLEdBQUdBLGlCQUFpQjtBQUM3Q2UsT0FBTyxDQUFDckIsYUFBYSxHQUFHQSxhQUFhIn0=