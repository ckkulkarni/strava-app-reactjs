{"version":3,"names":["storage_1","require","Type","typeFunction","options","target","propertyName","reflectedType","Reflect","getMetadata","defaultMetadataStorage","addTypeMetadata","constructor","exports"],"sources":["../../../src/decorators/type.decorator.ts"],"sourcesContent":["import { defaultMetadataStorage } from '../storage';\nimport { TypeHelpOptions, TypeOptions } from '../interfaces';\n\n/**\n * Specifies a type of the property.\n * The given TypeFunction can return a constructor. A discriminator can be given in the options.\n *\n * Can be applied to properties only.\n */\nexport function Type(\n  typeFunction?: (type?: TypeHelpOptions) => Function,\n  options: TypeOptions = {}\n): PropertyDecorator {\n  return function (target: any, propertyName: string | Symbol): void {\n    const reflectedType = (Reflect as any).getMetadata('design:type', target, propertyName);\n    defaultMetadataStorage.addTypeMetadata({\n      target: target.constructor,\n      propertyName: propertyName as string,\n      reflectedType,\n      typeFunction,\n      options,\n    });\n  };\n}\n"],"mappings":";;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AAGA;;;;;;AAMA,SAAgBC,IAAIA,CAClBC,YAAmD,EACnDC,OAAA,GAAuB,EAAE;EAEzB,OAAO,UAAUC,MAAW,EAAEC,YAA6B;IACzD,MAAMC,aAAa,GAAIC,OAAe,CAACC,WAAW,CAAC,aAAa,EAAEJ,MAAM,EAAEC,YAAY,CAAC;IACvFN,SAAA,CAAAU,sBAAsB,CAACC,eAAe,CAAC;MACrCN,MAAM,EAAEA,MAAM,CAACO,WAAW;MAC1BN,YAAY,EAAEA,YAAsB;MACpCC,aAAa;MACbJ,YAAY;MACZC;KACD,CAAC;EACJ,CAAC;AACH;AAdAS,OAAA,CAAAX,IAAA,GAAAA,IAAA"}