49d2a6d26f2b9fbc1b8b25f257f4e2e6
/**
 * The MIT License (MIT)
 * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>
 */

'use strict';

/**
 * A regexp-tree plugin to translate `/./s` to `/[\0-\uFFFF]/`.
 */
module.exports = {
  // Whether `u` flag present. In which case we transform to
  // \u{10FFFF} instead of \uFFFF.
  _hasUFlag: false,
  // Only run this plugin if we have `s` flag.
  shouldRun: function shouldRun(ast) {
    var shouldRun = ast.flags.includes('s');
    if (!shouldRun) {
      return false;
    }

    // Strip the `s` flag.
    ast.flags = ast.flags.replace('s', '');

    // Whether we have also `u`.
    this._hasUFlag = ast.flags.includes('u');
    return true;
  },
  Char: function Char(path) {
    var node = path.node;
    if (node.kind !== 'meta' || node.value !== '.') {
      return;
    }
    var toValue = '\\uFFFF';
    var toSymbol = '\uFFFF';
    if (this._hasUFlag) {
      toValue = '\\u{10FFFF}';
      toSymbol = '\uDBFF\uDFFF';
    }
    path.replace({
      type: 'CharacterClass',
      expressions: [{
        type: 'ClassRange',
        from: {
          type: 'Char',
          value: '\\0',
          kind: 'decimal',
          symbol: '\0'
        },
        to: {
          type: 'Char',
          value: toValue,
          kind: 'unicode',
          symbol: toSymbol
        }
      }]
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiX2hhc1VGbGFnIiwic2hvdWxkUnVuIiwiYXN0IiwiZmxhZ3MiLCJpbmNsdWRlcyIsInJlcGxhY2UiLCJDaGFyIiwicGF0aCIsIm5vZGUiLCJraW5kIiwidmFsdWUiLCJ0b1ZhbHVlIiwidG9TeW1ib2wiLCJ0eXBlIiwiZXhwcmVzc2lvbnMiLCJmcm9tIiwic3ltYm9sIiwidG8iXSwic291cmNlcyI6WyJjb21wYXQtZG90YWxsLXMtdHJhbnNmb3JtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCBEbWl0cnkgU29zaG5pa292IDxkbWl0cnkuc29zaG5pa292QGdtYWlsLmNvbT5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSByZWdleHAtdHJlZSBwbHVnaW4gdG8gdHJhbnNsYXRlIGAvLi9zYCB0byBgL1tcXDAtXFx1RkZGRl0vYC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAvLyBXaGV0aGVyIGB1YCBmbGFnIHByZXNlbnQuIEluIHdoaWNoIGNhc2Ugd2UgdHJhbnNmb3JtIHRvXG4gIC8vIFxcdXsxMEZGRkZ9IGluc3RlYWQgb2YgXFx1RkZGRi5cbiAgX2hhc1VGbGFnOiBmYWxzZSxcblxuICAvLyBPbmx5IHJ1biB0aGlzIHBsdWdpbiBpZiB3ZSBoYXZlIGBzYCBmbGFnLlxuICBzaG91bGRSdW46IGZ1bmN0aW9uIHNob3VsZFJ1bihhc3QpIHtcbiAgICB2YXIgc2hvdWxkUnVuID0gYXN0LmZsYWdzLmluY2x1ZGVzKCdzJyk7XG5cbiAgICBpZiAoIXNob3VsZFJ1bikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFN0cmlwIHRoZSBgc2AgZmxhZy5cbiAgICBhc3QuZmxhZ3MgPSBhc3QuZmxhZ3MucmVwbGFjZSgncycsICcnKTtcblxuICAgIC8vIFdoZXRoZXIgd2UgaGF2ZSBhbHNvIGB1YC5cbiAgICB0aGlzLl9oYXNVRmxhZyA9IGFzdC5mbGFncy5pbmNsdWRlcygndScpO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIENoYXI6IGZ1bmN0aW9uIENoYXIocGF0aCkge1xuICAgIHZhciBub2RlID0gcGF0aC5ub2RlO1xuXG5cbiAgICBpZiAobm9kZS5raW5kICE9PSAnbWV0YScgfHwgbm9kZS52YWx1ZSAhPT0gJy4nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRvVmFsdWUgPSAnXFxcXHVGRkZGJztcbiAgICB2YXIgdG9TeW1ib2wgPSAnXFx1RkZGRic7XG5cbiAgICBpZiAodGhpcy5faGFzVUZsYWcpIHtcbiAgICAgIHRvVmFsdWUgPSAnXFxcXHV7MTBGRkZGfSc7XG4gICAgICB0b1N5bWJvbCA9ICdcXHVEQkZGXFx1REZGRic7XG4gICAgfVxuXG4gICAgcGF0aC5yZXBsYWNlKHtcbiAgICAgIHR5cGU6ICdDaGFyYWN0ZXJDbGFzcycsXG4gICAgICBleHByZXNzaW9uczogW3tcbiAgICAgICAgdHlwZTogJ0NsYXNzUmFuZ2UnLFxuICAgICAgICBmcm9tOiB7XG4gICAgICAgICAgdHlwZTogJ0NoYXInLFxuICAgICAgICAgIHZhbHVlOiAnXFxcXDAnLFxuICAgICAgICAgIGtpbmQ6ICdkZWNpbWFsJyxcbiAgICAgICAgICBzeW1ib2w6ICdcXDAnXG4gICAgICAgIH0sXG4gICAgICAgIHRvOiB7XG4gICAgICAgICAgdHlwZTogJ0NoYXInLFxuICAgICAgICAgIHZhbHVlOiB0b1ZhbHVlLFxuICAgICAgICAgIGtpbmQ6ICd1bmljb2RlJyxcbiAgICAgICAgICBzeW1ib2w6IHRvU3ltYm9sXG4gICAgICAgIH1cbiAgICAgIH1dXG4gICAgfSk7XG4gIH1cbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUVBQSxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUVmO0VBQ0E7RUFDQUMsU0FBUyxFQUFFLEtBQUs7RUFFaEI7RUFDQUMsU0FBUyxFQUFFLFNBQVNBLFNBQVNBLENBQUNDLEdBQUcsRUFBRTtJQUNqQyxJQUFJRCxTQUFTLEdBQUdDLEdBQUcsQ0FBQ0MsS0FBSyxDQUFDQyxRQUFRLENBQUMsR0FBRyxDQUFDO0lBRXZDLElBQUksQ0FBQ0gsU0FBUyxFQUFFO01BQ2QsT0FBTyxLQUFLO0lBQ2Q7O0lBRUE7SUFDQUMsR0FBRyxDQUFDQyxLQUFLLEdBQUdELEdBQUcsQ0FBQ0MsS0FBSyxDQUFDRSxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQzs7SUFFdEM7SUFDQSxJQUFJLENBQUNMLFNBQVMsR0FBR0UsR0FBRyxDQUFDQyxLQUFLLENBQUNDLFFBQVEsQ0FBQyxHQUFHLENBQUM7SUFFeEMsT0FBTyxJQUFJO0VBQ2IsQ0FBQztFQUNERSxJQUFJLEVBQUUsU0FBU0EsSUFBSUEsQ0FBQ0MsSUFBSSxFQUFFO0lBQ3hCLElBQUlDLElBQUksR0FBR0QsSUFBSSxDQUFDQyxJQUFJO0lBR3BCLElBQUlBLElBQUksQ0FBQ0MsSUFBSSxLQUFLLE1BQU0sSUFBSUQsSUFBSSxDQUFDRSxLQUFLLEtBQUssR0FBRyxFQUFFO01BQzlDO0lBQ0Y7SUFFQSxJQUFJQyxPQUFPLEdBQUcsU0FBUztJQUN2QixJQUFJQyxRQUFRLEdBQUcsUUFBUTtJQUV2QixJQUFJLElBQUksQ0FBQ1osU0FBUyxFQUFFO01BQ2xCVyxPQUFPLEdBQUcsYUFBYTtNQUN2QkMsUUFBUSxHQUFHLGNBQWM7SUFDM0I7SUFFQUwsSUFBSSxDQUFDRixPQUFPLENBQUM7TUFDWFEsSUFBSSxFQUFFLGdCQUFnQjtNQUN0QkMsV0FBVyxFQUFFLENBQUM7UUFDWkQsSUFBSSxFQUFFLFlBQVk7UUFDbEJFLElBQUksRUFBRTtVQUNKRixJQUFJLEVBQUUsTUFBTTtVQUNaSCxLQUFLLEVBQUUsS0FBSztVQUNaRCxJQUFJLEVBQUUsU0FBUztVQUNmTyxNQUFNLEVBQUU7UUFDVixDQUFDO1FBQ0RDLEVBQUUsRUFBRTtVQUNGSixJQUFJLEVBQUUsTUFBTTtVQUNaSCxLQUFLLEVBQUVDLE9BQU87VUFDZEYsSUFBSSxFQUFFLFNBQVM7VUFDZk8sTUFBTSxFQUFFSjtRQUNWO01BQ0YsQ0FBQztJQUNILENBQUMsQ0FBQztFQUNKO0FBQ0YsQ0FBQyJ9