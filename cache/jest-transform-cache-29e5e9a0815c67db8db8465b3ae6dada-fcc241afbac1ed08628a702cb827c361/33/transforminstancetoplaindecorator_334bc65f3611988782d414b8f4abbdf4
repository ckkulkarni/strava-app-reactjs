bc6391126a81c5f10a14d7d692a63c01
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransformInstanceToPlain = void 0;
const ClassTransformer_1 = require("../ClassTransformer");
/**
 * Transform the object from class to plain object and return only with the exposed properties.
 *
 * Can be applied to functions and getters/setters only.
 */
function TransformInstanceToPlain(params) {
  return function (target, propertyKey, descriptor) {
    const classTransformer = new ClassTransformer_1.ClassTransformer();
    const originalMethod = descriptor.value;
    descriptor.value = function (...args) {
      const result = originalMethod.apply(this, args);
      const isPromise = !!result && (typeof result === 'object' || typeof result === 'function') && typeof result.then === 'function';
      return isPromise ? result.then(data => classTransformer.instanceToPlain(data, params)) : classTransformer.instanceToPlain(result, params);
    };
  };
}
exports.TransformInstanceToPlain = TransformInstanceToPlain;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDbGFzc1RyYW5zZm9ybWVyXzEiLCJyZXF1aXJlIiwiVHJhbnNmb3JtSW5zdGFuY2VUb1BsYWluIiwicGFyYW1zIiwidGFyZ2V0IiwicHJvcGVydHlLZXkiLCJkZXNjcmlwdG9yIiwiY2xhc3NUcmFuc2Zvcm1lciIsIkNsYXNzVHJhbnNmb3JtZXIiLCJvcmlnaW5hbE1ldGhvZCIsInZhbHVlIiwiYXJncyIsInJlc3VsdCIsImFwcGx5IiwiaXNQcm9taXNlIiwidGhlbiIsImRhdGEiLCJpbnN0YW5jZVRvUGxhaW4iLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2RlY29yYXRvcnMvdHJhbnNmb3JtLWluc3RhbmNlLXRvLXBsYWluLmRlY29yYXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGFzc1RyYW5zZm9ybWVyIH0gZnJvbSAnLi4vQ2xhc3NUcmFuc2Zvcm1lcic7XG5pbXBvcnQgeyBDbGFzc1RyYW5zZm9ybU9wdGlvbnMgfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIG9iamVjdCBmcm9tIGNsYXNzIHRvIHBsYWluIG9iamVjdCBhbmQgcmV0dXJuIG9ubHkgd2l0aCB0aGUgZXhwb3NlZCBwcm9wZXJ0aWVzLlxuICpcbiAqIENhbiBiZSBhcHBsaWVkIHRvIGZ1bmN0aW9ucyBhbmQgZ2V0dGVycy9zZXR0ZXJzIG9ubHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBUcmFuc2Zvcm1JbnN0YW5jZVRvUGxhaW4ocGFyYW1zPzogQ2xhc3NUcmFuc2Zvcm1PcHRpb25zKTogTWV0aG9kRGVjb3JhdG9yIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQ6IFJlY29yZDxzdHJpbmcsIGFueT4sIHByb3BlcnR5S2V5OiBzdHJpbmcgfCBTeW1ib2wsIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcik6IHZvaWQge1xuICAgIGNvbnN0IGNsYXNzVHJhbnNmb3JtZXI6IENsYXNzVHJhbnNmb3JtZXIgPSBuZXcgQ2xhc3NUcmFuc2Zvcm1lcigpO1xuICAgIGNvbnN0IG9yaWdpbmFsTWV0aG9kID0gZGVzY3JpcHRvci52YWx1ZTtcblxuICAgIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoLi4uYXJnczogYW55W10pOiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHtcbiAgICAgIGNvbnN0IHJlc3VsdDogYW55ID0gb3JpZ2luYWxNZXRob2QuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICBjb25zdCBpc1Byb21pc2UgPVxuICAgICAgICAhIXJlc3VsdCAmJiAodHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHJlc3VsdCA9PT0gJ2Z1bmN0aW9uJykgJiYgdHlwZW9mIHJlc3VsdC50aGVuID09PSAnZnVuY3Rpb24nO1xuICAgICAgcmV0dXJuIGlzUHJvbWlzZVxuICAgICAgICA/IHJlc3VsdC50aGVuKChkYXRhOiBhbnkpID0+IGNsYXNzVHJhbnNmb3JtZXIuaW5zdGFuY2VUb1BsYWluKGRhdGEsIHBhcmFtcykpXG4gICAgICAgIDogY2xhc3NUcmFuc2Zvcm1lci5pbnN0YW5jZVRvUGxhaW4ocmVzdWx0LCBwYXJhbXMpO1xuICAgIH07XG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE1BQUFBLGtCQUFBLEdBQUFDLE9BQUE7QUFHQTs7Ozs7QUFLQSxTQUFnQkMsd0JBQXdCQSxDQUFDQyxNQUE4QjtFQUNyRSxPQUFPLFVBQVVDLE1BQTJCLEVBQUVDLFdBQTRCLEVBQUVDLFVBQThCO0lBQ3hHLE1BQU1DLGdCQUFnQixHQUFxQixJQUFJUCxrQkFBQSxDQUFBUSxnQkFBZ0IsRUFBRTtJQUNqRSxNQUFNQyxjQUFjLEdBQUdILFVBQVUsQ0FBQ0ksS0FBSztJQUV2Q0osVUFBVSxDQUFDSSxLQUFLLEdBQUcsVUFBVSxHQUFHQyxJQUFXO01BQ3pDLE1BQU1DLE1BQU0sR0FBUUgsY0FBYyxDQUFDSSxLQUFLLENBQUMsSUFBSSxFQUFFRixJQUFJLENBQUM7TUFDcEQsTUFBTUcsU0FBUyxHQUNiLENBQUMsQ0FBQ0YsTUFBTSxLQUFLLE9BQU9BLE1BQU0sS0FBSyxRQUFRLElBQUksT0FBT0EsTUFBTSxLQUFLLFVBQVUsQ0FBQyxJQUFJLE9BQU9BLE1BQU0sQ0FBQ0csSUFBSSxLQUFLLFVBQVU7TUFDL0csT0FBT0QsU0FBUyxHQUNaRixNQUFNLENBQUNHLElBQUksQ0FBRUMsSUFBUyxJQUFLVCxnQkFBZ0IsQ0FBQ1UsZUFBZSxDQUFDRCxJQUFJLEVBQUViLE1BQU0sQ0FBQyxDQUFDLEdBQzFFSSxnQkFBZ0IsQ0FBQ1UsZUFBZSxDQUFDTCxNQUFNLEVBQUVULE1BQU0sQ0FBQztJQUN0RCxDQUFDO0VBQ0gsQ0FBQztBQUNIO0FBZEFlLE9BQUEsQ0FBQWhCLHdCQUFBLEdBQUFBLHdCQUFBIn0=