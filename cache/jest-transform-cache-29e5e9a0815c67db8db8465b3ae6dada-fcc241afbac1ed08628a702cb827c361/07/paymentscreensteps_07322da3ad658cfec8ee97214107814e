1c72f6029bea37491833f717c2c3c8b9
"use strict";

var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
var _PaymentScreen = _interopRequireDefault(require("../../PaymentScreen"));
var _toolkit = require("@reduxjs/toolkit");
var _parkingSlice = _interopRequireDefault(require("./../../redux/reducer/parkingSlice"));
var _reactRedux = require("react-redux");
require("@testing-library/jest-dom/extend-expect");
var _jestCucumber = require("jest-cucumber");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/paymentscreen.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User pays for occupied parking spot", ({
    given,
    when,
    then,
    and
  }) => {
    const postMock = jest.fn().mockResolvedValueOnce({
      ok: true
    });
    global.fetch = jest.fn().mockResolvedValueOnce({
      ok: true,
      json: jest.fn().mockResolvedValueOnce({})
    });
    const alertMock = jest.spyOn(window, "alert").mockImplementation(() => {});
    const state = {
      spaceDetails: {
        registration: "ABC",
        parkingTime: "10:00"
      },
      space: "1"
    };
    const store = (0, _toolkit.configureStore)({
      reducer: {
        parkingSpaces: _parkingSlice.default
      }
    });
    const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
      initialEntries: [{
        pathname: "/payment",
        state
      }]
    }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: "/payment",
      element: /*#__PURE__*/_react.default.createElement(_PaymentScreen.default, null)
    })))));
    given("I am on the Payment Screen", () => {
      expect(screen).toBeDefined();
    });
    and("I see the vehicle registration and hours parked for the occupied parking spot", () => {
      const regElement = screen.getByTestId("reg");
      expect(regElement).toHaveTextContent("Vehicle Registration: ABC");
      const parkingHoursElement = screen.getByTestId("parkingHours");
      expect(parkingHoursElement).toHaveTextContent("Hours Parked: 9");
    });
    and("I see the parking charge for the occupied parking spot", () => {
      const paymentElement = screen.getByTestId("payment");
      expect(paymentElement).toHaveTextContent("Parking Charge: $80");
    });
    when("I click on the Make Payment button", () => {
      const paymentButton = screen.getByTestId("paymentButton");
      (0, _react2.act)(() => {
        _react2.fireEvent.click(paymentButton);
      });
    });
    and("the payment is successfully processed", () => {
      const postMock = jest.fn().mockResolvedValueOnce({
        ok: true
      });
      global.fetch = jest.fn().mockResolvedValueOnce({
        ok: true,
        json: jest.fn().mockResolvedValueOnce({})
      });
      const paymentButton = screen.getByTestId("paymentButton");
      (0, _react2.act)(() => {
        _react2.fireEvent.click(paymentButton);
      });
      expect(fetch).toHaveBeenCalledWith("https://httpstat.us/200", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          "car-registration": state.spaceDetails.registration,
          charge: 80
        })
      });
    });
    then("I see an alert indicating that the payment was successful", async () => {
      const postMock = jest.fn().mockResolvedValueOnce({
        ok: true
      });
      global.fetch = jest.fn().mockResolvedValueOnce({
        ok: true,
        json: jest.fn().mockResolvedValueOnce({})
      });
      const paymentButton = screen.getByTestId("paymentButton");
      (0, _react2.act)(() => {
        _react2.fireEvent.click(paymentButton);
      });
      expect(fetch).toHaveBeenCalledWith("https://httpstat.us/200", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          "car-registration": state.spaceDetails.registration,
          charge: 80
        })
      });
      await (0, _react2.waitFor)(() => {
        expect(alertMock).toHaveBeenCalledWith("10 Spaces selected");
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,