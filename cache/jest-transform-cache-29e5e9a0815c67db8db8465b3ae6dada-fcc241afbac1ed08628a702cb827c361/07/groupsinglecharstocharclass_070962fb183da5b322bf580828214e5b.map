{"version":3,"names":["module","exports","Disjunction","path","node","parent","handlers","type","charset","Map","shouldProcess","size","characterClass","expressions","Array","from","keys","sort","map","key","get","getParent","RegExp","body","Group","capturing","expression","replace","left","right","value","set","negative","every"],"sources":["group-single-chars-to-char-class.js"],"sourcesContent":["/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n'use strict';\n\n/**\n * A regexp-tree plugin to replace single char group disjunction to char group\n *\n * a|b|c -> [abc]\n * [12]|3|4 -> [1234]\n * (a|b|c) -> ([abc])\n * (?:a|b|c) -> [abc]\n */\n\nmodule.exports = {\n  Disjunction: function Disjunction(path) {\n    var node = path.node,\n        parent = path.parent;\n\n\n    if (!handlers[parent.type]) {\n      return;\n    }\n\n    var charset = new Map();\n\n    if (!shouldProcess(node, charset) || !charset.size) {\n      return;\n    }\n\n    var characterClass = {\n      type: 'CharacterClass',\n      expressions: Array.from(charset.keys()).sort().map(function (key) {\n        return charset.get(key);\n      })\n    };\n\n    handlers[parent.type](path.getParent(), characterClass);\n  }\n};\n\nvar handlers = {\n  RegExp: function RegExp(path, characterClass) {\n    var node = path.node;\n\n\n    node.body = characterClass;\n  },\n  Group: function Group(path, characterClass) {\n    var node = path.node;\n\n\n    if (node.capturing) {\n      node.expression = characterClass;\n    } else {\n      path.replace(characterClass);\n    }\n  }\n};\n\nfunction shouldProcess(expression, charset) {\n  if (!expression) {\n    // Abort on empty disjunction part\n    return false;\n  }\n\n  var type = expression.type;\n\n\n  if (type === 'Disjunction') {\n    var left = expression.left,\n        right = expression.right;\n\n\n    return shouldProcess(left, charset) && shouldProcess(right, charset);\n  } else if (type === 'Char') {\n    var value = expression.value;\n\n\n    charset.set(value, expression);\n\n    return true;\n  } else if (type === 'CharacterClass' && !expression.negative) {\n    return expression.expressions.every(function (expression) {\n      return shouldProcess(expression, charset);\n    });\n  }\n\n  return false;\n}"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACfC,WAAW,EAAE,SAASA,WAAWA,CAACC,IAAI,EAAE;IACtC,IAAIC,IAAI,GAAGD,IAAI,CAACC,IAAI;MAChBC,MAAM,GAAGF,IAAI,CAACE,MAAM;IAGxB,IAAI,CAACC,QAAQ,CAACD,MAAM,CAACE,IAAI,CAAC,EAAE;MAC1B;IACF;IAEA,IAAIC,OAAO,GAAG,IAAIC,GAAG,EAAE;IAEvB,IAAI,CAACC,aAAa,CAACN,IAAI,EAAEI,OAAO,CAAC,IAAI,CAACA,OAAO,CAACG,IAAI,EAAE;MAClD;IACF;IAEA,IAAIC,cAAc,GAAG;MACnBL,IAAI,EAAE,gBAAgB;MACtBM,WAAW,EAAEC,KAAK,CAACC,IAAI,CAACP,OAAO,CAACQ,IAAI,EAAE,CAAC,CAACC,IAAI,EAAE,CAACC,GAAG,CAAC,UAAUC,GAAG,EAAE;QAChE,OAAOX,OAAO,CAACY,GAAG,CAACD,GAAG,CAAC;MACzB,CAAC;IACH,CAAC;IAEDb,QAAQ,CAACD,MAAM,CAACE,IAAI,CAAC,CAACJ,IAAI,CAACkB,SAAS,EAAE,EAAET,cAAc,CAAC;EACzD;AACF,CAAC;AAED,IAAIN,QAAQ,GAAG;EACbgB,MAAM,EAAE,SAASA,MAAMA,CAACnB,IAAI,EAAES,cAAc,EAAE;IAC5C,IAAIR,IAAI,GAAGD,IAAI,CAACC,IAAI;IAGpBA,IAAI,CAACmB,IAAI,GAAGX,cAAc;EAC5B,CAAC;EACDY,KAAK,EAAE,SAASA,KAAKA,CAACrB,IAAI,EAAES,cAAc,EAAE;IAC1C,IAAIR,IAAI,GAAGD,IAAI,CAACC,IAAI;IAGpB,IAAIA,IAAI,CAACqB,SAAS,EAAE;MAClBrB,IAAI,CAACsB,UAAU,GAAGd,cAAc;IAClC,CAAC,MAAM;MACLT,IAAI,CAACwB,OAAO,CAACf,cAAc,CAAC;IAC9B;EACF;AACF,CAAC;AAED,SAASF,aAAaA,CAACgB,UAAU,EAAElB,OAAO,EAAE;EAC1C,IAAI,CAACkB,UAAU,EAAE;IACf;IACA,OAAO,KAAK;EACd;EAEA,IAAInB,IAAI,GAAGmB,UAAU,CAACnB,IAAI;EAG1B,IAAIA,IAAI,KAAK,aAAa,EAAE;IAC1B,IAAIqB,IAAI,GAAGF,UAAU,CAACE,IAAI;MACtBC,KAAK,GAAGH,UAAU,CAACG,KAAK;IAG5B,OAAOnB,aAAa,CAACkB,IAAI,EAAEpB,OAAO,CAAC,IAAIE,aAAa,CAACmB,KAAK,EAAErB,OAAO,CAAC;EACtE,CAAC,MAAM,IAAID,IAAI,KAAK,MAAM,EAAE;IAC1B,IAAIuB,KAAK,GAAGJ,UAAU,CAACI,KAAK;IAG5BtB,OAAO,CAACuB,GAAG,CAACD,KAAK,EAAEJ,UAAU,CAAC;IAE9B,OAAO,IAAI;EACb,CAAC,MAAM,IAAInB,IAAI,KAAK,gBAAgB,IAAI,CAACmB,UAAU,CAACM,QAAQ,EAAE;IAC5D,OAAON,UAAU,CAACb,WAAW,CAACoB,KAAK,CAAC,UAAUP,UAAU,EAAE;MACxD,OAAOhB,aAAa,CAACgB,UAAU,EAAElB,OAAO,CAAC;IAC3C,CAAC,CAAC;EACJ;EAEA,OAAO,KAAK;AACd"}