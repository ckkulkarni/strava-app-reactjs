60975926a6844a3d91f1cf7d84d73b99
/**
 * The MIT License (MIT)
 * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>
 */

'use strict';

/**
 * A regexp-tree plugin to replace single char group disjunction to char group
 *
 * a|b|c -> [abc]
 * [12]|3|4 -> [1234]
 * (a|b|c) -> ([abc])
 * (?:a|b|c) -> [abc]
 */
module.exports = {
  Disjunction: function Disjunction(path) {
    var node = path.node,
      parent = path.parent;
    if (!handlers[parent.type]) {
      return;
    }
    var charset = new Map();
    if (!shouldProcess(node, charset) || !charset.size) {
      return;
    }
    var characterClass = {
      type: 'CharacterClass',
      expressions: Array.from(charset.keys()).sort().map(function (key) {
        return charset.get(key);
      })
    };
    handlers[parent.type](path.getParent(), characterClass);
  }
};
var handlers = {
  RegExp: function RegExp(path, characterClass) {
    var node = path.node;
    node.body = characterClass;
  },
  Group: function Group(path, characterClass) {
    var node = path.node;
    if (node.capturing) {
      node.expression = characterClass;
    } else {
      path.replace(characterClass);
    }
  }
};
function shouldProcess(expression, charset) {
  if (!expression) {
    // Abort on empty disjunction part
    return false;
  }
  var type = expression.type;
  if (type === 'Disjunction') {
    var left = expression.left,
      right = expression.right;
    return shouldProcess(left, charset) && shouldProcess(right, charset);
  } else if (type === 'Char') {
    var value = expression.value;
    charset.set(value, expression);
    return true;
  } else if (type === 'CharacterClass' && !expression.negative) {
    return expression.expressions.every(function (expression) {
      return shouldProcess(expression, charset);
    });
  }
  return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiRGlzanVuY3Rpb24iLCJwYXRoIiwibm9kZSIsInBhcmVudCIsImhhbmRsZXJzIiwidHlwZSIsImNoYXJzZXQiLCJNYXAiLCJzaG91bGRQcm9jZXNzIiwic2l6ZSIsImNoYXJhY3RlckNsYXNzIiwiZXhwcmVzc2lvbnMiLCJBcnJheSIsImZyb20iLCJrZXlzIiwic29ydCIsIm1hcCIsImtleSIsImdldCIsImdldFBhcmVudCIsIlJlZ0V4cCIsImJvZHkiLCJHcm91cCIsImNhcHR1cmluZyIsImV4cHJlc3Npb24iLCJyZXBsYWNlIiwibGVmdCIsInJpZ2h0IiwidmFsdWUiLCJzZXQiLCJuZWdhdGl2ZSIsImV2ZXJ5Il0sInNvdXJjZXMiOlsiZ3JvdXAtc2luZ2xlLWNoYXJzLXRvLWNoYXItY2xhc3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50IERtaXRyeSBTb3Nobmlrb3YgPGRtaXRyeS5zb3Nobmlrb3ZAZ21haWwuY29tPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIHJlZ2V4cC10cmVlIHBsdWdpbiB0byByZXBsYWNlIHNpbmdsZSBjaGFyIGdyb3VwIGRpc2p1bmN0aW9uIHRvIGNoYXIgZ3JvdXBcbiAqXG4gKiBhfGJ8YyAtPiBbYWJjXVxuICogWzEyXXwzfDQgLT4gWzEyMzRdXG4gKiAoYXxifGMpIC0+IChbYWJjXSlcbiAqICg/OmF8YnxjKSAtPiBbYWJjXVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBEaXNqdW5jdGlvbjogZnVuY3Rpb24gRGlzanVuY3Rpb24ocGF0aCkge1xuICAgIHZhciBub2RlID0gcGF0aC5ub2RlLFxuICAgICAgICBwYXJlbnQgPSBwYXRoLnBhcmVudDtcblxuXG4gICAgaWYgKCFoYW5kbGVyc1twYXJlbnQudHlwZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY2hhcnNldCA9IG5ldyBNYXAoKTtcblxuICAgIGlmICghc2hvdWxkUHJvY2Vzcyhub2RlLCBjaGFyc2V0KSB8fCAhY2hhcnNldC5zaXplKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNoYXJhY3RlckNsYXNzID0ge1xuICAgICAgdHlwZTogJ0NoYXJhY3RlckNsYXNzJyxcbiAgICAgIGV4cHJlc3Npb25zOiBBcnJheS5mcm9tKGNoYXJzZXQua2V5cygpKS5zb3J0KCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIGNoYXJzZXQuZ2V0KGtleSk7XG4gICAgICB9KVxuICAgIH07XG5cbiAgICBoYW5kbGVyc1twYXJlbnQudHlwZV0ocGF0aC5nZXRQYXJlbnQoKSwgY2hhcmFjdGVyQ2xhc3MpO1xuICB9XG59O1xuXG52YXIgaGFuZGxlcnMgPSB7XG4gIFJlZ0V4cDogZnVuY3Rpb24gUmVnRXhwKHBhdGgsIGNoYXJhY3RlckNsYXNzKSB7XG4gICAgdmFyIG5vZGUgPSBwYXRoLm5vZGU7XG5cblxuICAgIG5vZGUuYm9keSA9IGNoYXJhY3RlckNsYXNzO1xuICB9LFxuICBHcm91cDogZnVuY3Rpb24gR3JvdXAocGF0aCwgY2hhcmFjdGVyQ2xhc3MpIHtcbiAgICB2YXIgbm9kZSA9IHBhdGgubm9kZTtcblxuXG4gICAgaWYgKG5vZGUuY2FwdHVyaW5nKSB7XG4gICAgICBub2RlLmV4cHJlc3Npb24gPSBjaGFyYWN0ZXJDbGFzcztcbiAgICB9IGVsc2Uge1xuICAgICAgcGF0aC5yZXBsYWNlKGNoYXJhY3RlckNsYXNzKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNob3VsZFByb2Nlc3MoZXhwcmVzc2lvbiwgY2hhcnNldCkge1xuICBpZiAoIWV4cHJlc3Npb24pIHtcbiAgICAvLyBBYm9ydCBvbiBlbXB0eSBkaXNqdW5jdGlvbiBwYXJ0XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHR5cGUgPSBleHByZXNzaW9uLnR5cGU7XG5cblxuICBpZiAodHlwZSA9PT0gJ0Rpc2p1bmN0aW9uJykge1xuICAgIHZhciBsZWZ0ID0gZXhwcmVzc2lvbi5sZWZ0LFxuICAgICAgICByaWdodCA9IGV4cHJlc3Npb24ucmlnaHQ7XG5cblxuICAgIHJldHVybiBzaG91bGRQcm9jZXNzKGxlZnQsIGNoYXJzZXQpICYmIHNob3VsZFByb2Nlc3MocmlnaHQsIGNoYXJzZXQpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdDaGFyJykge1xuICAgIHZhciB2YWx1ZSA9IGV4cHJlc3Npb24udmFsdWU7XG5cblxuICAgIGNoYXJzZXQuc2V0KHZhbHVlLCBleHByZXNzaW9uKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdDaGFyYWN0ZXJDbGFzcycgJiYgIWV4cHJlc3Npb24ubmVnYXRpdmUpIHtcbiAgICByZXR1cm4gZXhwcmVzc2lvbi5leHByZXNzaW9ucy5ldmVyeShmdW5jdGlvbiAoZXhwcmVzc2lvbikge1xuICAgICAgcmV0dXJuIHNob3VsZFByb2Nlc3MoZXhwcmVzc2lvbiwgY2hhcnNldCk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZkMsV0FBVyxFQUFFLFNBQVNBLFdBQVdBLENBQUNDLElBQUksRUFBRTtJQUN0QyxJQUFJQyxJQUFJLEdBQUdELElBQUksQ0FBQ0MsSUFBSTtNQUNoQkMsTUFBTSxHQUFHRixJQUFJLENBQUNFLE1BQU07SUFHeEIsSUFBSSxDQUFDQyxRQUFRLENBQUNELE1BQU0sQ0FBQ0UsSUFBSSxDQUFDLEVBQUU7TUFDMUI7SUFDRjtJQUVBLElBQUlDLE9BQU8sR0FBRyxJQUFJQyxHQUFHLEVBQUU7SUFFdkIsSUFBSSxDQUFDQyxhQUFhLENBQUNOLElBQUksRUFBRUksT0FBTyxDQUFDLElBQUksQ0FBQ0EsT0FBTyxDQUFDRyxJQUFJLEVBQUU7TUFDbEQ7SUFDRjtJQUVBLElBQUlDLGNBQWMsR0FBRztNQUNuQkwsSUFBSSxFQUFFLGdCQUFnQjtNQUN0Qk0sV0FBVyxFQUFFQyxLQUFLLENBQUNDLElBQUksQ0FBQ1AsT0FBTyxDQUFDUSxJQUFJLEVBQUUsQ0FBQyxDQUFDQyxJQUFJLEVBQUUsQ0FBQ0MsR0FBRyxDQUFDLFVBQVVDLEdBQUcsRUFBRTtRQUNoRSxPQUFPWCxPQUFPLENBQUNZLEdBQUcsQ0FBQ0QsR0FBRyxDQUFDO01BQ3pCLENBQUM7SUFDSCxDQUFDO0lBRURiLFFBQVEsQ0FBQ0QsTUFBTSxDQUFDRSxJQUFJLENBQUMsQ0FBQ0osSUFBSSxDQUFDa0IsU0FBUyxFQUFFLEVBQUVULGNBQWMsQ0FBQztFQUN6RDtBQUNGLENBQUM7QUFFRCxJQUFJTixRQUFRLEdBQUc7RUFDYmdCLE1BQU0sRUFBRSxTQUFTQSxNQUFNQSxDQUFDbkIsSUFBSSxFQUFFUyxjQUFjLEVBQUU7SUFDNUMsSUFBSVIsSUFBSSxHQUFHRCxJQUFJLENBQUNDLElBQUk7SUFHcEJBLElBQUksQ0FBQ21CLElBQUksR0FBR1gsY0FBYztFQUM1QixDQUFDO0VBQ0RZLEtBQUssRUFBRSxTQUFTQSxLQUFLQSxDQUFDckIsSUFBSSxFQUFFUyxjQUFjLEVBQUU7SUFDMUMsSUFBSVIsSUFBSSxHQUFHRCxJQUFJLENBQUNDLElBQUk7SUFHcEIsSUFBSUEsSUFBSSxDQUFDcUIsU0FBUyxFQUFFO01BQ2xCckIsSUFBSSxDQUFDc0IsVUFBVSxHQUFHZCxjQUFjO0lBQ2xDLENBQUMsTUFBTTtNQUNMVCxJQUFJLENBQUN3QixPQUFPLENBQUNmLGNBQWMsQ0FBQztJQUM5QjtFQUNGO0FBQ0YsQ0FBQztBQUVELFNBQVNGLGFBQWFBLENBQUNnQixVQUFVLEVBQUVsQixPQUFPLEVBQUU7RUFDMUMsSUFBSSxDQUFDa0IsVUFBVSxFQUFFO0lBQ2Y7SUFDQSxPQUFPLEtBQUs7RUFDZDtFQUVBLElBQUluQixJQUFJLEdBQUdtQixVQUFVLENBQUNuQixJQUFJO0VBRzFCLElBQUlBLElBQUksS0FBSyxhQUFhLEVBQUU7SUFDMUIsSUFBSXFCLElBQUksR0FBR0YsVUFBVSxDQUFDRSxJQUFJO01BQ3RCQyxLQUFLLEdBQUdILFVBQVUsQ0FBQ0csS0FBSztJQUc1QixPQUFPbkIsYUFBYSxDQUFDa0IsSUFBSSxFQUFFcEIsT0FBTyxDQUFDLElBQUlFLGFBQWEsQ0FBQ21CLEtBQUssRUFBRXJCLE9BQU8sQ0FBQztFQUN0RSxDQUFDLE1BQU0sSUFBSUQsSUFBSSxLQUFLLE1BQU0sRUFBRTtJQUMxQixJQUFJdUIsS0FBSyxHQUFHSixVQUFVLENBQUNJLEtBQUs7SUFHNUJ0QixPQUFPLENBQUN1QixHQUFHLENBQUNELEtBQUssRUFBRUosVUFBVSxDQUFDO0lBRTlCLE9BQU8sSUFBSTtFQUNiLENBQUMsTUFBTSxJQUFJbkIsSUFBSSxLQUFLLGdCQUFnQixJQUFJLENBQUNtQixVQUFVLENBQUNNLFFBQVEsRUFBRTtJQUM1RCxPQUFPTixVQUFVLENBQUNiLFdBQVcsQ0FBQ29CLEtBQUssQ0FBQyxVQUFVUCxVQUFVLEVBQUU7TUFDeEQsT0FBT2hCLGFBQWEsQ0FBQ2dCLFVBQVUsRUFBRWxCLE9BQU8sQ0FBQztJQUMzQyxDQUFDLENBQUM7RUFDSjtFQUVBLE9BQU8sS0FBSztBQUNkIn0=