{"version":3,"names":["ClassTransformer_1","require","ClassTransformer_2","Object","defineProperty","exports","enumerable","get","ClassTransformer","__exportStar","classTransformer","classToPlain","object","options","instanceToPlain","classToPlainFromExist","plainObject","plainToClass","cls","plain","plainToInstance","plainToClassFromExist","clsObject","instanceToInstance","classToClassFromExist","fromObject","serialize","deserialize","json","deserializeArray"],"sources":["../../src/index.ts"],"sourcesContent":["import { ClassTransformer } from './ClassTransformer';\nimport { ClassTransformOptions } from './interfaces';\nimport { ClassConstructor } from './interfaces';\n\nexport { ClassTransformer } from './ClassTransformer';\nexport * from './decorators';\nexport * from './interfaces';\nexport * from './enums';\n\nconst classTransformer = new ClassTransformer();\n\n/**\n * Converts class (constructor) object to plain (literal) object. Also works with arrays.\n *\n * @deprecated Function name changed, use the `instanceToPlain` method instead.\n */\nexport function classToPlain<T>(object: T, options?: ClassTransformOptions): Record<string, any>;\nexport function classToPlain<T>(object: T[], options?: ClassTransformOptions): Record<string, any>[];\nexport function classToPlain<T>(\n  object: T | T[],\n  options?: ClassTransformOptions\n): Record<string, any> | Record<string, any>[] {\n  return classTransformer.instanceToPlain(object, options);\n}\n\n/**\n * Converts class (constructor) object to plain (literal) object. Also works with arrays.\n */\nexport function instanceToPlain<T>(object: T, options?: ClassTransformOptions): Record<string, any>;\nexport function instanceToPlain<T>(object: T[], options?: ClassTransformOptions): Record<string, any>[];\nexport function instanceToPlain<T>(\n  object: T | T[],\n  options?: ClassTransformOptions\n): Record<string, any> | Record<string, any>[] {\n  return classTransformer.instanceToPlain(object, options);\n}\n\n/**\n * Converts class (constructor) object to plain (literal) object.\n * Uses given plain object as source object (it means fills given plain object with data from class object).\n * Also works with arrays.\n *\n * @deprecated This function is being removed.\n */\nexport function classToPlainFromExist<T>(\n  object: T,\n  plainObject: Record<string, any>,\n  options?: ClassTransformOptions\n): Record<string, any>;\nexport function classToPlainFromExist<T>(\n  object: T,\n  plainObjects: Record<string, any>[],\n  options?: ClassTransformOptions\n): Record<string, any>[];\nexport function classToPlainFromExist<T>(\n  object: T,\n  plainObject: Record<string, any> | Record<string, any>[],\n  options?: ClassTransformOptions\n): Record<string, any> | Record<string, any>[] {\n  return classTransformer.classToPlainFromExist(object, plainObject, options);\n}\n\n/**\n * Converts plain (literal) object to class (constructor) object. Also works with arrays.\n *\n * @deprecated Function name changed, use the `plainToInstance` method instead.\n */\nexport function plainToClass<T, V>(cls: ClassConstructor<T>, plain: V[], options?: ClassTransformOptions): T[];\nexport function plainToClass<T, V>(cls: ClassConstructor<T>, plain: V, options?: ClassTransformOptions): T;\nexport function plainToClass<T, V>(cls: ClassConstructor<T>, plain: V | V[], options?: ClassTransformOptions): T | T[] {\n  return classTransformer.plainToInstance(cls, plain as any, options);\n}\n\n/**\n * Converts plain (literal) object to class (constructor) object. Also works with arrays.\n */\nexport function plainToInstance<T, V>(cls: ClassConstructor<T>, plain: V[], options?: ClassTransformOptions): T[];\nexport function plainToInstance<T, V>(cls: ClassConstructor<T>, plain: V, options?: ClassTransformOptions): T;\nexport function plainToInstance<T, V>(\n  cls: ClassConstructor<T>,\n  plain: V | V[],\n  options?: ClassTransformOptions\n): T | T[] {\n  return classTransformer.plainToInstance(cls, plain as any, options);\n}\n\n/**\n * Converts plain (literal) object to class (constructor) object.\n * Uses given object as source object (it means fills given object with data from plain object).\n *  Also works with arrays.\n *\n * @deprecated This function is being removed. The current implementation is incorrect as it modifies the source object.\n */\nexport function plainToClassFromExist<T, V>(clsObject: T[], plain: V[], options?: ClassTransformOptions): T[];\nexport function plainToClassFromExist<T, V>(clsObject: T, plain: V, options?: ClassTransformOptions): T;\nexport function plainToClassFromExist<T, V>(clsObject: T, plain: V | V[], options?: ClassTransformOptions): T | T[] {\n  return classTransformer.plainToClassFromExist(clsObject, plain, options);\n}\n\n/**\n * Converts class (constructor) object to new class (constructor) object. Also works with arrays.\n */\nexport function instanceToInstance<T>(object: T, options?: ClassTransformOptions): T;\nexport function instanceToInstance<T>(object: T[], options?: ClassTransformOptions): T[];\nexport function instanceToInstance<T>(object: T | T[], options?: ClassTransformOptions): T | T[] {\n  return classTransformer.instanceToInstance(object, options);\n}\n\n/**\n * Converts class (constructor) object to plain (literal) object.\n * Uses given plain object as source object (it means fills given plain object with data from class object).\n * Also works with arrays.\n *\n * @deprecated This function is being removed. The current implementation is incorrect as it modifies the source object.\n */\nexport function classToClassFromExist<T>(object: T, fromObject: T, options?: ClassTransformOptions): T;\nexport function classToClassFromExist<T>(object: T, fromObjects: T[], options?: ClassTransformOptions): T[];\nexport function classToClassFromExist<T>(object: T, fromObject: T | T[], options?: ClassTransformOptions): T | T[] {\n  return classTransformer.classToClassFromExist(object, fromObject, options);\n}\n\n/**\n * Serializes given object to a JSON string.\n *\n * @deprecated This function is being removed. Please use\n * ```\n * JSON.stringify(instanceToPlain(object, options))\n * ```\n */\nexport function serialize<T>(object: T, options?: ClassTransformOptions): string;\nexport function serialize<T>(object: T[], options?: ClassTransformOptions): string;\nexport function serialize<T>(object: T | T[], options?: ClassTransformOptions): string {\n  return classTransformer.serialize(object, options);\n}\n\n/**\n * Deserializes given JSON string to a object of the given class.\n *\n * @deprecated This function is being removed. Please use the following instead:\n * ```\n * instanceToClass(cls, JSON.parse(json), options)\n * ```\n */\nexport function deserialize<T>(cls: ClassConstructor<T>, json: string, options?: ClassTransformOptions): T {\n  return classTransformer.deserialize(cls, json, options);\n}\n\n/**\n * Deserializes given JSON string to an array of objects of the given class.\n *\n * @deprecated This function is being removed. Please use the following instead:\n * ```\n * JSON.parse(json).map(value => instanceToClass(cls, value, options))\n * ```\n *\n */\nexport function deserializeArray<T>(cls: ClassConstructor<T>, json: string, options?: ClassTransformOptions): T[] {\n  return classTransformer.deserializeArray(cls, json, options);\n}\n"],"mappings":"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"}