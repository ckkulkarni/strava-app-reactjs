{"version":3,"names":["storage_1","require","Transform","transformFn","options","target","propertyName","defaultMetadataStorage","addTransformMetadata","constructor","exports"],"sources":["../../../src/decorators/transform.decorator.ts"],"sourcesContent":["import { defaultMetadataStorage } from '../storage';\nimport { TransformFnParams, TransformOptions } from '../interfaces';\n\n/**\n * Defines a custom logic for value transformation.\n *\n * Can be applied to properties only.\n */\nexport function Transform(\n  transformFn: (params: TransformFnParams) => any,\n  options: TransformOptions = {}\n): PropertyDecorator {\n  return function (target: any, propertyName: string | Symbol): void {\n    defaultMetadataStorage.addTransformMetadata({\n      target: target.constructor,\n      propertyName: propertyName as string,\n      transformFn,\n      options,\n    });\n  };\n}\n"],"mappings":";;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AAGA;;;;;AAKA,SAAgBC,SAASA,CACvBC,WAA+C,EAC/CC,OAAA,GAA4B,EAAE;EAE9B,OAAO,UAAUC,MAAW,EAAEC,YAA6B;IACzDN,SAAA,CAAAO,sBAAsB,CAACC,oBAAoB,CAAC;MAC1CH,MAAM,EAAEA,MAAM,CAACI,WAAW;MAC1BH,YAAY,EAAEA,YAAsB;MACpCH,WAAW;MACXC;KACD,CAAC;EACJ,CAAC;AACH;AAZAM,OAAA,CAAAR,SAAA,GAAAA,SAAA"}