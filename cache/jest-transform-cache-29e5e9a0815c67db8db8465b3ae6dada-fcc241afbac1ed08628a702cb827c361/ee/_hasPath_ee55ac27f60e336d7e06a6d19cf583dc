ab8270d525be2de364142c73764fa6b7
"use strict";

var castPath = require('./_castPath'),
  isArguments = require('./isArguments'),
  isArray = require('./isArray'),
  isIndex = require('./_isIndex'),
  isLength = require('./isLength'),
  toKey = require('./_toKey');

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);
  var index = -1,
    length = path.length,
    result = false;
  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
}
module.exports = hasPath;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYXN0UGF0aCIsInJlcXVpcmUiLCJpc0FyZ3VtZW50cyIsImlzQXJyYXkiLCJpc0luZGV4IiwiaXNMZW5ndGgiLCJ0b0tleSIsImhhc1BhdGgiLCJvYmplY3QiLCJwYXRoIiwiaGFzRnVuYyIsImluZGV4IiwibGVuZ3RoIiwicmVzdWx0Iiwia2V5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIl9oYXNQYXRoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICB9XG4gIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNQYXRoO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFFBQVEsR0FBR0MsT0FBTyxDQUFDLGFBQWEsQ0FBQztFQUNqQ0MsV0FBVyxHQUFHRCxPQUFPLENBQUMsZUFBZSxDQUFDO0VBQ3RDRSxPQUFPLEdBQUdGLE9BQU8sQ0FBQyxXQUFXLENBQUM7RUFDOUJHLE9BQU8sR0FBR0gsT0FBTyxDQUFDLFlBQVksQ0FBQztFQUMvQkksUUFBUSxHQUFHSixPQUFPLENBQUMsWUFBWSxDQUFDO0VBQ2hDSyxLQUFLLEdBQUdMLE9BQU8sQ0FBQyxVQUFVLENBQUM7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNNLE9BQU9BLENBQUNDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxPQUFPLEVBQUU7RUFDdENELElBQUksR0FBR1QsUUFBUSxDQUFDUyxJQUFJLEVBQUVELE1BQU0sQ0FBQztFQUU3QixJQUFJRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ1ZDLE1BQU0sR0FBR0gsSUFBSSxDQUFDRyxNQUFNO0lBQ3BCQyxNQUFNLEdBQUcsS0FBSztFQUVsQixPQUFPLEVBQUVGLEtBQUssR0FBR0MsTUFBTSxFQUFFO0lBQ3ZCLElBQUlFLEdBQUcsR0FBR1IsS0FBSyxDQUFDRyxJQUFJLENBQUNFLEtBQUssQ0FBQyxDQUFDO0lBQzVCLElBQUksRUFBRUUsTUFBTSxHQUFHTCxNQUFNLElBQUksSUFBSSxJQUFJRSxPQUFPLENBQUNGLE1BQU0sRUFBRU0sR0FBRyxDQUFDLENBQUMsRUFBRTtNQUN0RDtJQUNGO0lBQ0FOLE1BQU0sR0FBR0EsTUFBTSxDQUFDTSxHQUFHLENBQUM7RUFDdEI7RUFDQSxJQUFJRCxNQUFNLElBQUksRUFBRUYsS0FBSyxJQUFJQyxNQUFNLEVBQUU7SUFDL0IsT0FBT0MsTUFBTTtFQUNmO0VBQ0FELE1BQU0sR0FBR0osTUFBTSxJQUFJLElBQUksR0FBRyxDQUFDLEdBQUdBLE1BQU0sQ0FBQ0ksTUFBTTtFQUMzQyxPQUFPLENBQUMsQ0FBQ0EsTUFBTSxJQUFJUCxRQUFRLENBQUNPLE1BQU0sQ0FBQyxJQUFJUixPQUFPLENBQUNVLEdBQUcsRUFBRUYsTUFBTSxDQUFDLEtBQ3hEVCxPQUFPLENBQUNLLE1BQU0sQ0FBQyxJQUFJTixXQUFXLENBQUNNLE1BQU0sQ0FBQyxDQUFDO0FBQzVDO0FBRUFPLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHVCxPQUFPIn0=