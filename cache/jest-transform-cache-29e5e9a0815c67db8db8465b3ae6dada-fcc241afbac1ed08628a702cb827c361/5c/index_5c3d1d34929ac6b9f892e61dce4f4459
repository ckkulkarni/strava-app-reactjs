773c7fad66b4cad2d0a5e55cf5cf55fc
"use strict";

/**
 * Topological sorting function
 *
 * @param {Array} edges
 * @returns {Array}
 */

module.exports = function (edges) {
  return toposort(uniqueNodes(edges), edges);
};
module.exports.array = toposort;
function toposort(nodes, edges) {
  var cursor = nodes.length,
    sorted = new Array(cursor),
    visited = {},
    i = cursor
    // Better data structures make algorithm much faster.
    ,
    outgoingEdges = makeOutgoingEdges(edges),
    nodesHash = makeNodesHash(nodes);

  // check for unknown nodes
  edges.forEach(function (edge) {
    if (!nodesHash.has(edge[0]) || !nodesHash.has(edge[1])) {
      throw new Error('Unknown node. There is an unknown node in the supplied edges.');
    }
  });
  while (i--) {
    if (!visited[i]) visit(nodes[i], i, new Set());
  }
  return sorted;
  function visit(node, i, predecessors) {
    if (predecessors.has(node)) {
      var nodeRep;
      try {
        nodeRep = ", node was:" + JSON.stringify(node);
      } catch (e) {
        nodeRep = "";
      }
      throw new Error('Cyclic dependency' + nodeRep);
    }
    if (!nodesHash.has(node)) {
      throw new Error('Found unknown node. Make sure to provided all involved nodes. Unknown node: ' + JSON.stringify(node));
    }
    if (visited[i]) return;
    visited[i] = true;
    var outgoing = outgoingEdges.get(node) || new Set();
    outgoing = Array.from(outgoing);
    if (i = outgoing.length) {
      predecessors.add(node);
      do {
        var child = outgoing[--i];
        visit(child, nodesHash.get(child), predecessors);
      } while (i);
      predecessors.delete(node);
    }
    sorted[--cursor] = node;
  }
}
function uniqueNodes(arr) {
  var res = new Set();
  for (var i = 0, len = arr.length; i < len; i++) {
    var edge = arr[i];
    res.add(edge[0]);
    res.add(edge[1]);
  }
  return Array.from(res);
}
function makeOutgoingEdges(arr) {
  var edges = new Map();
  for (var i = 0, len = arr.length; i < len; i++) {
    var edge = arr[i];
    if (!edges.has(edge[0])) edges.set(edge[0], new Set());
    if (!edges.has(edge[1])) edges.set(edge[1], new Set());
    edges.get(edge[0]).add(edge[1]);
  }
  return edges;
}
function makeNodesHash(arr) {
  var res = new Map();
  for (var i = 0, len = arr.length; i < len; i++) {
    res.set(arr[i], i);
  }
  return res;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZWRnZXMiLCJ0b3Bvc29ydCIsInVuaXF1ZU5vZGVzIiwiYXJyYXkiLCJub2RlcyIsImN1cnNvciIsImxlbmd0aCIsInNvcnRlZCIsIkFycmF5IiwidmlzaXRlZCIsImkiLCJvdXRnb2luZ0VkZ2VzIiwibWFrZU91dGdvaW5nRWRnZXMiLCJub2Rlc0hhc2giLCJtYWtlTm9kZXNIYXNoIiwiZm9yRWFjaCIsImVkZ2UiLCJoYXMiLCJFcnJvciIsInZpc2l0IiwiU2V0Iiwibm9kZSIsInByZWRlY2Vzc29ycyIsIm5vZGVSZXAiLCJKU09OIiwic3RyaW5naWZ5IiwiZSIsIm91dGdvaW5nIiwiZ2V0IiwiZnJvbSIsImFkZCIsImNoaWxkIiwiZGVsZXRlIiwiYXJyIiwicmVzIiwibGVuIiwiTWFwIiwic2V0Il0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIFRvcG9sb2dpY2FsIHNvcnRpbmcgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBlZGdlc1xuICogQHJldHVybnMge0FycmF5fVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZWRnZXMpIHtcbiAgcmV0dXJuIHRvcG9zb3J0KHVuaXF1ZU5vZGVzKGVkZ2VzKSwgZWRnZXMpXG59XG5cbm1vZHVsZS5leHBvcnRzLmFycmF5ID0gdG9wb3NvcnRcblxuZnVuY3Rpb24gdG9wb3NvcnQobm9kZXMsIGVkZ2VzKSB7XG4gIHZhciBjdXJzb3IgPSBub2Rlcy5sZW5ndGhcbiAgICAsIHNvcnRlZCA9IG5ldyBBcnJheShjdXJzb3IpXG4gICAgLCB2aXNpdGVkID0ge31cbiAgICAsIGkgPSBjdXJzb3JcbiAgICAvLyBCZXR0ZXIgZGF0YSBzdHJ1Y3R1cmVzIG1ha2UgYWxnb3JpdGhtIG11Y2ggZmFzdGVyLlxuICAgICwgb3V0Z29pbmdFZGdlcyA9IG1ha2VPdXRnb2luZ0VkZ2VzKGVkZ2VzKVxuICAgICwgbm9kZXNIYXNoID0gbWFrZU5vZGVzSGFzaChub2RlcylcblxuICAvLyBjaGVjayBmb3IgdW5rbm93biBub2Rlc1xuICBlZGdlcy5mb3JFYWNoKGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICBpZiAoIW5vZGVzSGFzaC5oYXMoZWRnZVswXSkgfHwgIW5vZGVzSGFzaC5oYXMoZWRnZVsxXSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBub2RlLiBUaGVyZSBpcyBhbiB1bmtub3duIG5vZGUgaW4gdGhlIHN1cHBsaWVkIGVkZ2VzLicpXG4gICAgfVxuICB9KVxuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAoIXZpc2l0ZWRbaV0pIHZpc2l0KG5vZGVzW2ldLCBpLCBuZXcgU2V0KCkpXG4gIH1cblxuICByZXR1cm4gc29ydGVkXG5cbiAgZnVuY3Rpb24gdmlzaXQobm9kZSwgaSwgcHJlZGVjZXNzb3JzKSB7XG4gICAgaWYocHJlZGVjZXNzb3JzLmhhcyhub2RlKSkge1xuICAgICAgdmFyIG5vZGVSZXBcbiAgICAgIHRyeSB7XG4gICAgICAgIG5vZGVSZXAgPSBcIiwgbm9kZSB3YXM6XCIgKyBKU09OLnN0cmluZ2lmeShub2RlKVxuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIG5vZGVSZXAgPSBcIlwiXG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0N5Y2xpYyBkZXBlbmRlbmN5JyArIG5vZGVSZXApXG4gICAgfVxuXG4gICAgaWYgKCFub2Rlc0hhc2guaGFzKG5vZGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIHVua25vd24gbm9kZS4gTWFrZSBzdXJlIHRvIHByb3ZpZGVkIGFsbCBpbnZvbHZlZCBub2Rlcy4gVW5rbm93biBub2RlOiAnK0pTT04uc3RyaW5naWZ5KG5vZGUpKVxuICAgIH1cblxuICAgIGlmICh2aXNpdGVkW2ldKSByZXR1cm47XG4gICAgdmlzaXRlZFtpXSA9IHRydWVcblxuICAgIHZhciBvdXRnb2luZyA9IG91dGdvaW5nRWRnZXMuZ2V0KG5vZGUpIHx8IG5ldyBTZXQoKVxuICAgIG91dGdvaW5nID0gQXJyYXkuZnJvbShvdXRnb2luZylcblxuICAgIGlmIChpID0gb3V0Z29pbmcubGVuZ3RoKSB7XG4gICAgICBwcmVkZWNlc3NvcnMuYWRkKG5vZGUpXG4gICAgICBkbyB7XG4gICAgICAgIHZhciBjaGlsZCA9IG91dGdvaW5nWy0taV1cbiAgICAgICAgdmlzaXQoY2hpbGQsIG5vZGVzSGFzaC5nZXQoY2hpbGQpLCBwcmVkZWNlc3NvcnMpXG4gICAgICB9IHdoaWxlIChpKVxuICAgICAgcHJlZGVjZXNzb3JzLmRlbGV0ZShub2RlKVxuICAgIH1cblxuICAgIHNvcnRlZFstLWN1cnNvcl0gPSBub2RlXG4gIH1cbn1cblxuZnVuY3Rpb24gdW5pcXVlTm9kZXMoYXJyKXtcbiAgdmFyIHJlcyA9IG5ldyBTZXQoKVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGVkZ2UgPSBhcnJbaV1cbiAgICByZXMuYWRkKGVkZ2VbMF0pXG4gICAgcmVzLmFkZChlZGdlWzFdKVxuICB9XG4gIHJldHVybiBBcnJheS5mcm9tKHJlcylcbn1cblxuZnVuY3Rpb24gbWFrZU91dGdvaW5nRWRnZXMoYXJyKXtcbiAgdmFyIGVkZ2VzID0gbmV3IE1hcCgpXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgZWRnZSA9IGFycltpXVxuICAgIGlmICghZWRnZXMuaGFzKGVkZ2VbMF0pKSBlZGdlcy5zZXQoZWRnZVswXSwgbmV3IFNldCgpKVxuICAgIGlmICghZWRnZXMuaGFzKGVkZ2VbMV0pKSBlZGdlcy5zZXQoZWRnZVsxXSwgbmV3IFNldCgpKVxuICAgIGVkZ2VzLmdldChlZGdlWzBdKS5hZGQoZWRnZVsxXSlcbiAgfVxuICByZXR1cm4gZWRnZXNcbn1cblxuZnVuY3Rpb24gbWFrZU5vZGVzSGFzaChhcnIpe1xuICB2YXIgcmVzID0gbmV3IE1hcCgpXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICByZXMuc2V0KGFycltpXSwgaSlcbiAgfVxuICByZXR1cm4gcmVzXG59XG4iXSwibWFwcGluZ3MiOiI7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFTQyxLQUFLLEVBQUU7RUFDL0IsT0FBT0MsUUFBUSxDQUFDQyxXQUFXLENBQUNGLEtBQUssQ0FBQyxFQUFFQSxLQUFLLENBQUM7QUFDNUMsQ0FBQztBQUVERixNQUFNLENBQUNDLE9BQU8sQ0FBQ0ksS0FBSyxHQUFHRixRQUFRO0FBRS9CLFNBQVNBLFFBQVFBLENBQUNHLEtBQUssRUFBRUosS0FBSyxFQUFFO0VBQzlCLElBQUlLLE1BQU0sR0FBR0QsS0FBSyxDQUFDRSxNQUFNO0lBQ3JCQyxNQUFNLEdBQUcsSUFBSUMsS0FBSyxDQUFDSCxNQUFNLENBQUM7SUFDMUJJLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDWkMsQ0FBQyxHQUFHTDtJQUNOO0lBQUE7SUFDRU0sYUFBYSxHQUFHQyxpQkFBaUIsQ0FBQ1osS0FBSyxDQUFDO0lBQ3hDYSxTQUFTLEdBQUdDLGFBQWEsQ0FBQ1YsS0FBSyxDQUFDOztFQUVwQztFQUNBSixLQUFLLENBQUNlLE9BQU8sQ0FBQyxVQUFTQyxJQUFJLEVBQUU7SUFDM0IsSUFBSSxDQUFDSCxTQUFTLENBQUNJLEdBQUcsQ0FBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQ0gsU0FBUyxDQUFDSSxHQUFHLENBQUNELElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO01BQ3RELE1BQU0sSUFBSUUsS0FBSyxDQUFDLCtEQUErRCxDQUFDO0lBQ2xGO0VBQ0YsQ0FBQyxDQUFDO0VBRUYsT0FBT1IsQ0FBQyxFQUFFLEVBQUU7SUFDVixJQUFJLENBQUNELE9BQU8sQ0FBQ0MsQ0FBQyxDQUFDLEVBQUVTLEtBQUssQ0FBQ2YsS0FBSyxDQUFDTSxDQUFDLENBQUMs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