cb7373a1b7324debf8bcf5e1c3ceacb0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = runTests;
var _ValidationError = _interopRequireDefault(require("../ValidationError"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
const once = cb => {
  let fired = false;
  return (...args) => {
    if (fired) return;
    fired = true;
    cb(...args);
  };
};
function runTests(options, cb) {
  let {
    endEarly,
    tests,
    args,
    value,
    errors,
    sort,
    path
  } = options;
  let callback = once(cb);
  let count = tests.length;
  const nestedErrors = [];
  errors = errors ? errors : [];
  if (!count) return errors.length ? callback(new _ValidationError.default(errors, value, path)) : callback(null, value);
  for (let i = 0; i < tests.length; i++) {
    const test = tests[i];
    test(args, function finishTestRun(err) {
      if (err) {
        // always return early for non validation errors
        if (!_ValidationError.default.isError(err)) {
          return callback(err, value);
        }
        if (endEarly) {
          err.value = value;
          return callback(err, value);
        }
        nestedErrors.push(err);
      }
      if (--count <= 0) {
        if (nestedErrors.length) {
          if (sort) nestedErrors.sort(sort); //show parent errors after the nested ones: name.first, name

          if (errors.length) nestedErrors.push(...errors);
          errors = nestedErrors;
        }
        if (errors.length) {
          callback(new _ValidationError.default(errors, value, path), value);
          return;
        }
        callback(null, value);
      }
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJydW5UZXN0cyIsIl9WYWxpZGF0aW9uRXJyb3IiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJvbmNlIiwiY2IiLCJmaXJlZCIsImFyZ3MiLCJvcHRpb25zIiwiZW5kRWFybHkiLCJ0ZXN0cyIsImVycm9ycyIsInNvcnQiLCJwYXRoIiwiY2FsbGJhY2siLCJjb3VudCIsImxlbmd0aCIsIm5lc3RlZEVycm9ycyIsImkiLCJ0ZXN0IiwiZmluaXNoVGVzdFJ1biIsImVyciIsImlzRXJyb3IiLCJwdXNoIl0sInNvdXJjZXMiOlsicnVuVGVzdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBydW5UZXN0cztcblxudmFyIF9WYWxpZGF0aW9uRXJyb3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9WYWxpZGF0aW9uRXJyb3JcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCBvbmNlID0gY2IgPT4ge1xuICBsZXQgZmlyZWQgPSBmYWxzZTtcbiAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgaWYgKGZpcmVkKSByZXR1cm47XG4gICAgZmlyZWQgPSB0cnVlO1xuICAgIGNiKC4uLmFyZ3MpO1xuICB9O1xufTtcblxuZnVuY3Rpb24gcnVuVGVzdHMob3B0aW9ucywgY2IpIHtcbiAgbGV0IHtcbiAgICBlbmRFYXJseSxcbiAgICB0ZXN0cyxcbiAgICBhcmdzLFxuICAgIHZhbHVlLFxuICAgIGVycm9ycyxcbiAgICBzb3J0LFxuICAgIHBhdGhcbiAgfSA9IG9wdGlvbnM7XG4gIGxldCBjYWxsYmFjayA9IG9uY2UoY2IpO1xuICBsZXQgY291bnQgPSB0ZXN0cy5sZW5ndGg7XG4gIGNvbnN0IG5lc3RlZEVycm9ycyA9IFtdO1xuICBlcnJvcnMgPSBlcnJvcnMgPyBlcnJvcnMgOiBbXTtcbiAgaWYgKCFjb3VudCkgcmV0dXJuIGVycm9ycy5sZW5ndGggPyBjYWxsYmFjayhuZXcgX1ZhbGlkYXRpb25FcnJvci5kZWZhdWx0KGVycm9ycywgdmFsdWUsIHBhdGgpKSA6IGNhbGxiYWNrKG51bGwsIHZhbHVlKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRlc3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdGVzdCA9IHRlc3RzW2ldO1xuICAgIHRlc3QoYXJncywgZnVuY3Rpb24gZmluaXNoVGVzdFJ1bihlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgLy8gYWx3YXlzIHJldHVybiBlYXJseSBmb3Igbm9uIHZhbGlkYXRpb24gZXJyb3JzXG4gICAgICAgIGlmICghX1ZhbGlkYXRpb25FcnJvci5kZWZhdWx0LmlzRXJyb3IoZXJyKSkge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbmRFYXJseSkge1xuICAgICAgICAgIGVyci52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5lc3RlZEVycm9ycy5wdXNoKGVycik7XG4gICAgICB9XG5cbiAgICAgIGlmICgtLWNvdW50IDw9IDApIHtcbiAgICAgICAgaWYgKG5lc3RlZEVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoc29ydCkgbmVzdGVkRXJyb3JzLnNvcnQoc29ydCk7IC8vc2hvdyBwYXJlbnQgZXJyb3JzIGFmdGVyIHRoZSBuZXN0ZWQgb25lczogbmFtZS5maXJzdCwgbmFtZVxuXG4gICAgICAgICAgaWYgKGVycm9ycy5sZW5ndGgpIG5lc3RlZEVycm9ycy5wdXNoKC4uLmVycm9ycyk7XG4gICAgICAgICAgZXJyb3JzID0gbmVzdGVkRXJyb3JzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICBjYWxsYmFjayhuZXcgX1ZhbGlkYXRpb25FcnJvci5kZWZhdWx0KGVycm9ycywgdmFsdWUsIHBhdGgpLCB2YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2sobnVsbCwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHQyxRQUFRO0FBRTFCLElBQUlDLGdCQUFnQixHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFFNUUsU0FBU0Qsc0JBQXNCQSxDQUFDRSxHQUFHLEVBQUU7RUFBRSxPQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBVSxHQUFHRCxHQUFHLEdBQUc7SUFBRUwsT0FBTyxFQUFFSztFQUFJLENBQUM7QUFBRTtBQUU5RixNQUFNRSxJQUFJLEdBQUdDLEVBQUUsSUFBSTtFQUNqQixJQUFJQyxLQUFLLEdBQUcsS0FBSztFQUNqQixPQUFPLENBQUMsR0FBR0MsSUFBSSxLQUFLO0lBQ2xCLElBQUlELEtBQUssRUFBRTtJQUNYQSxLQUFLLEdBQUcsSUFBSTtJQUNaRCxFQUFFLENBQUMsR0FBR0UsSUFBSSxDQUFDO0VBQ2IsQ0FBQztBQUNILENBQUM7QUFFRCxTQUFTVCxRQUFRQSxDQUFDVSxPQUFPLEVBQUVILEVBQUUsRUFBRTtFQUM3QixJQUFJO0lBQ0ZJLFFBQVE7SUFDUkMsS0FBSztJQUNMSCxJQUFJO0lBQ0pYLEtBQUs7SUFDTGUsTUFBTTtJQUNOQyxJQUFJO0lBQ0pDO0VBQ0YsQ0FBQyxHQUFHTCxPQUFPO0VBQ1gsSUFBSU0sUUFBUSxHQUFHVixJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUN2QixJQUFJVSxLQUFLLEdBQUdMLEtBQUssQ0FBQ00sTUFBTTtFQUN4QixNQUFNQyxZQUFZLEdBQUcsRUFBRTtFQUN2Qk4sTUFBTSxHQUFHQSxNQUFNLEdBQUdBLE1BQU0sR0FBRyxFQUFFO0VBQzdCLElBQUksQ0FBQ0ksS0FBSyxFQUFFLE9BQU9KLE1BQU0sQ0FBQ0ssTUFBTSxHQUFHRixRQUFRLENBQUMsSUFBSWYsZ0JBQWdCLENBQUNGLE9BQU8sQ0FBQ2MsTUFBTSxFQUFFZixLQUFLLEVBQUVpQixJQUFJLENBQUMsQ0FBQyxHQUFHQyxRQUFRLENBQUMsSUFBSSxFQUFFbEIsS0FBSyxDQUFDO0VBRXRILEtBQUssSUFBSXNCLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR1IsS0FBSyxDQUFDTSxNQUFNLEVBQUVFLENBQUMsRUFBRSxFQUFFO0lBQ3JDLE1BQU1DLElBQUksR0FBR1QsS0FBSyxDQUFDUSxDQUFDLENBQUM7SUFDckJDLElBQUksQ0FBQ1osSUFBSSxFQUFFLFNBQVNhLGFBQWFBLENBQUNDLEdBQUcsRUFBRTtNQUNyQyxJQUFJQSxHQUFHLEVBQUU7UUFDUDtRQUNBLElBQUksQ0FBQ3RCLGdCQUFnQixDQUFDRixPQUFPLENBQUN5QixPQUFPLENBQUNELEdBQUcsQ0FBQyxFQUFFO1VBQzFDLE9BQU9QLFFBQVEsQ0FBQ08sR0FBRyxFQUFFekIsS0FBSyxDQUFDO1FBQzdCO1FBRUEsSUFBSWEsUUFBUSxFQUFFO1VBQ1pZLEdBQUcsQ0FBQ3pCLEtBQUssR0FBR0EsS0FBSztVQUNqQixPQUFPa0IsUUFBUSxDQUFDTyxHQUFHLEVBQUV6QixLQUFLLENBQUM7UUFDN0I7UUFFQXFCLFlBQVksQ0FBQ00sSUFBSSxDQUFDRixHQUFHLENBQUM7TUFDeEI7TUFFQSxJQUFJLEVBQUVOLEtBQUssSUFBSSxDQUFDLEVBQUU7UUFDaEIsSUFBSUUsWUFBWSxDQUFDRCxNQUFNLEVBQUU7VUFDdkIsSUFBSUosSUFBSSxFQUFFSyxZQUFZLENBQUNMLElBQUksQ0FBQ0EsSUFBSSxDQUFDLENBQUMsQ0FBQzs7VUFFbkMsSUFBSUQsTUFBTSxDQUFDSyxNQUFNLEVBQUVDLFlBQVksQ0FBQ00sSUFBSSxDQUFDLEdBQUdaLE1BQU0sQ0FBQztVQUMvQ0EsTUFBTSxHQUFHTSxZQUFZO1FBQ3ZCO1FBRUEsSUFBSU4sTUFBTSxDQUFDSyxNQUFNLEVBQUU7VUFDakJGLFFBQVEsQ0FBQyxJQUFJZixnQkFBZ0IsQ0FBQ0YsT0FBTyxDQUFDYyxNQUFNLEVBQUVmLEtBQUssRUFBRWlCLElBQUksQ0FBQyxFQUFFakIsS0FBSyxDQUFDO1VBQ2xFO1FBQ0Y7UUFFQWtCLFFBQVEsQ0FBQyxJQUFJLEVBQUVsQixLQUFLLENBQUM7TUFDdkI7SUFDRixDQUFDLENBQUM7RUFDSjtBQUNGIn0=