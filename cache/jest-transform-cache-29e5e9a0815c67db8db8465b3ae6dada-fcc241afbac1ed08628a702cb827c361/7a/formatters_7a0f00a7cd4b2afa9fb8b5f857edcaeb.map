{"version":3,"names":["json_formatter_1","__importDefault","require","message_formatter_1","progress_bar_formatter_1","progress_formatter_1","rerun_formatter_1","snippets_formatter_1","summary_formatter_1","usage_formatter_1","usage_json_formatter_1","html_formatter_1","junit_formatter_1","Formatters","getFormatters","json","default","message","html","progress","rerun","snippets","summary","usage","junit","buildFormattersDocumentationString","concatanatedFormattersDocumentation","formatters","formatterName","documentation","exports"],"sources":["../../../src/formatter/helpers/formatters.ts"],"sourcesContent":["import Formatter from '../.'\nimport JsonFormatter from '../json_formatter'\nimport MessageFormatter from '../message_formatter'\nimport ProgressBarFormatter from '../progress_bar_formatter'\nimport ProgressFormatter from '../progress_formatter'\nimport RerunFormatter from '../rerun_formatter'\nimport SnippetsFormatter from '../snippets_formatter'\nimport SummaryFormatter from '../summary_formatter'\nimport UsageFormatter from '../usage_formatter'\nimport UsageJsonFormatter from '../usage_json_formatter'\nimport HtmlFormatter from '../html_formatter'\nimport JunitFormatter from '../junit_formatter'\n\nconst Formatters = {\n  getFormatters(): Record<string, typeof Formatter> {\n    return {\n      json: JsonFormatter,\n      message: MessageFormatter,\n      html: HtmlFormatter,\n      progress: ProgressFormatter,\n      'progress-bar': ProgressBarFormatter,\n      rerun: RerunFormatter,\n      snippets: SnippetsFormatter,\n      summary: SummaryFormatter,\n      usage: UsageFormatter,\n      'usage-json': UsageJsonFormatter,\n      junit: JunitFormatter,\n    }\n  },\n  buildFormattersDocumentationString(): string {\n    let concatanatedFormattersDocumentation: string = ''\n    const formatters = this.getFormatters()\n    for (const formatterName in formatters) {\n      concatanatedFormattersDocumentation += `    ${formatterName}: ${formatters[formatterName].documentation}\\n`\n    }\n\n    return concatanatedFormattersDocumentation\n  },\n}\n\nexport default Formatters\n"],"mappings":";;;;;;;;;;AACA,MAAAA,gBAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,mBAAA,GAAAF,eAAA,CAAAC,OAAA;AACA,MAAAE,wBAAA,GAAAH,eAAA,CAAAC,OAAA;AACA,MAAAG,oBAAA,GAAAJ,eAAA,CAAAC,OAAA;AACA,MAAAI,iBAAA,GAAAL,eAAA,CAAAC,OAAA;AACA,MAAAK,oBAAA,GAAAN,eAAA,CAAAC,OAAA;AACA,MAAAM,mBAAA,GAAAP,eAAA,CAAAC,OAAA;AACA,MAAAO,iBAAA,GAAAR,eAAA,CAAAC,OAAA;AACA,MAAAQ,sBAAA,GAAAT,eAAA,CAAAC,OAAA;AACA,MAAAS,gBAAA,GAAAV,eAAA,CAAAC,OAAA;AACA,MAAAU,iBAAA,GAAAX,eAAA,CAAAC,OAAA;AAEA,MAAMW,UAAU,GAAG;EACjBC,aAAaA,CAAA;IACX,OAAO;MACLC,IAAI,EAAEf,gBAAA,CAAAgB,OAAa;MACnBC,OAAO,EAAEd,mBAAA,CAAAa,OAAgB;MACzBE,IAAI,EAAEP,gBAAA,CAAAK,OAAa;MACnBG,QAAQ,EAAEd,oBAAA,CAAAW,OAAiB;MAC3B,cAAc,EAAEZ,wBAAA,CAAAY,OAAoB;MACpCI,KAAK,EAAEd,iBAAA,CAAAU,OAAc;MACrBK,QAAQ,EAAEd,oBAAA,CAAAS,OAAiB;MAC3BM,OAAO,EAAEd,mBAAA,CAAAQ,OAAgB;MACzBO,KAAK,EAAEd,iBAAA,CAAAO,OAAc;MACrB,YAAY,EAAEN,sBAAA,CAAAM,OAAkB;MAChCQ,KAAK,EAAEZ,iBAAA,CAAAI;KACR;EACH,CAAC;EACDS,kCAAkCA,CAAA;IAChC,IAAIC,mCAAmC,GAAW,EAAE;IACpD,MAAMC,UAAU,GAAG,IAAI,CAACb,aAAa,EAAE;IACvC,KAAK,MAAMc,aAAa,IAAID,UAAU,EAAE;MACtCD,mCAAmC,IAAI,OAAOE,aAAa,KAAKD,UAAU,CAACC,aAAa,CAAC,CAACC,aAAa,IAAI;;IAG7G,OAAOH,mCAAmC;EAC5C;CACD;AAEDI,OAAA,CAAAd,OAAA,GAAeH,UAAU"}