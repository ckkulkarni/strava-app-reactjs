041cc361574b6572e0763b1742191e1c
"use strict";

var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _PaymentScreen = _interopRequireDefault(require("./../../PaymentScreen"));
require("@testing-library/jest-dom/extend-expect");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _jestCucumber = require("jest-cucumber");
var _reactRouterDom = require("react-router-dom");
var _parkingSlice = _interopRequireDefault(require("../../redux/reducer/parkingSlice"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
let store;
const feature = (0, _jestCucumber.loadFeature)("src/components/features/paymentscreen.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User pays for occupied parking spot", ({
    given,
    then,
    when,
    and
  }) => {
    _getJestObj().mock("react-router-dom", () => ({
      ...jest.requireActual("react-router-dom"),
      useLocation: jest.fn().mockImplementation(() => {
        return {
          pathname: "/payment"
        };
      })
    }));
    const spaceDetails = {
      registration: "ABC",
      parkingTime: "14:00"
    };
    const space = "1";
    const mockLocation = {
      state: {
        spaceDetails,
        space
      }
    };
    given("I am on the Payment Screen", () => {
      store = (0, _toolkit.configureStore)({
        reducer: {
          parkingSpaces: _parkingSlice.default
        }
      });
      const state = {
        spaceDetails: {
          registration: "ABC123",
          parkingTime: "08:30"
        },
        space: 1
      };
      jest.spyOn(require("react-router-dom"), "useLocation").mockReturnValue(mockLocation);
      (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
        initialEntries: ["/payment"]
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/payment",
        element: /*#__PURE__*/_react.default.createElement(_PaymentScreen.default, null)
      })))));
    });
    and("I see the vehicle registration and hours parked for the occupied parking spot", async () => {
      store = (0, _toolkit.configureStore)({
        reducer: {
          parkingSpaces: _parkingSlice.default
        }
      });
      const spaceDetails = {
        registration: "ABC",
        parkingTime: "12:30"
      };
      const space = 1;
      jest.spyOn(require("react-router-dom"), "useLocation").mockReturnValue(mockLocation);
      const {
        getByTestId
      } = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
        store: store
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
        initialEntries: [`/payment`]
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/payment"
      }, /*#__PURE__*/_react.default.createElement(_PaymentScreen.default, null)))));
      expect(await _react2.screen.findByTestId("reg")).toHaveTextContent("Vehicle Registration: ABC123");
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,