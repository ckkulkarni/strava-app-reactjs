7d2e0795909e1345852e04ed2113c7e0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _nanoclone = _interopRequireDefault(require("nanoclone"));
var _locale = require("./locale");
var _Condition = _interopRequireDefault(require("./Condition"));
var _runTests = _interopRequireDefault(require("./util/runTests"));
var _createValidation = _interopRequireDefault(require("./util/createValidation"));
var _printValue = _interopRequireDefault(require("./util/printValue"));
var _Reference = _interopRequireDefault(require("./Reference"));
var _reach = require("./util/reach");
var _ValidationError = _interopRequireDefault(require("./ValidationError"));
var _ReferenceSet = _interopRequireDefault(require("./util/ReferenceSet"));
var _toArray = _interopRequireDefault(require("./util/toArray"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
class BaseSchema {
  constructor(options) {
    this.deps = [];
    this.tests = void 0;
    this.transforms = void 0;
    this.conditions = [];
    this._mutate = void 0;
    this._typeError = void 0;
    this._whitelist = new _ReferenceSet.default();
    this._blacklist = new _ReferenceSet.default();
    this.exclusiveTests = Object.create(null);
    this.spec = void 0;
    this.tests = [];
    this.transforms = [];
    this.withMutation(() => {
      this.typeError(_locale.mixed.notType);
    });
    this.type = (options == null ? void 0 : options.type) || 'mixed';
    this.spec = _extends({
      strip: false,
      strict: false,
      abortEarly: true,
      recursive: true,
      nullable: false,
      presence: 'optional'
    }, options == null ? void 0 : options.spec);
  } // TODO: remove

  get _type() {
    return this.type;
  }
  _typeCheck(_value) {
    return true;
  }
  clone(spec) {
    if (this._mutate) {
      if (spec) Object.assign(this.spec, spec);
      return this;
    } // if the nested value is a schema we can skip cloning, since
    // they are already immutable

    const next = Object.create(Object.getPrototypeOf(this)); // @ts-expect-error this is readonly

    next.type = this.type;
    next._typeError = this._typeError;
    next._whitelistError = this._whitelistError;
    next._blacklistError = this._blacklistError;
    next._whitelist = this._whitelist.clone();
    next._blacklist = this._blacklist.clone();
    next.exclusiveTests = _extends({}, this.exclusiveTests); // @ts-expect-error this is readonly

    next.deps = [...this.deps];
    next.conditions = [...this.conditions];
    next.tests = [...this.tests];
    next.transforms = [...this.transforms];
    next.spec = (0, _nanoclone.default)(_extends({}, this.spec, spec));
    return next;
  }
  label(label) {
    let next = this.clone();
    next.spec.label = label;
    return next;
  }
  meta(...args) {
    if (args.length === 0) return this.spec.meta;
    let next = this.clone();
    next.spec.meta = Object.assign(next.spec.meta || {}, args[0]);
    return next;
  } // withContext<TContext extends AnyObject>(): BaseSchema<
  //   TCast,
  //   TContext,
  //   TOutput
  // > {
  //   return this as any;
  // }

  withMutation(fn) {
    let before = this._mutate;
    this._mutate = true;
    let result = fn(this);
    this._mutate = before;
    return result;
  }
  concat(schema) {
    if (!schema || schema === this) return this;
    if (schema.type !== this.type && this.type !== 'mixed') throw new TypeError(`You cannot \`concat()\` schema's of different types: ${this.type} and ${schema.type}`);
    let base = this;
    let combined = schema.clone();
    const mergedSpec = _extends({}, base.spec, combined.spec); // if (combined.spec.nullable === UNSET)
    //   mergedSpec.nullable = base.spec.nullable;
    // if (combined.spec.presence === UNSET)
    //   mergedSpec.presence = base.spec.presence;

    combined.spec = mergedSpec;
    combined._typeError || (combined._typeError = base._typeError);
    combined._whitelistError || (combined._whitelistError = base._whitelistError);
    combined._blacklistError || (combined._blacklistError = base._blacklistError); // manually merge the blacklist/whitelist (the other `schema` takes
    // precedence in case of conflicts)

    combined._whitelist = base._whitelist.merge(schema._whitelist, schema._blacklist);
    combined._blacklist = base._blacklist.merge(schema._blacklist, schema._whitelist); // start with the current tests

    combined.tests = base.tests;
    combined.exclusiveTests = base.exclusiveTests; // manually add the new tests to ensure
    // the deduping logic is consistent

    combined.withMutation(next => {
      schema.tests.forEach(fn => {
        next.test(fn.OPTIONS);
      });
    });
    combined.transforms = [...base.transforms, ...combined.transforms];
    return combined;
  }
  isType(v) {
    if (this.spec.nullable && v === null) return true;
    return this._typeCheck(v);
  }
  resolve(options) {
    let schema = this;
    if (schema.conditions.length) {
      let conditions = schema.conditions;
      schema = schema.clone();
      schema.conditions = [];
      schema = conditions.reduce((schema, condition) => condition.resolve(schema, options), schema);
      schema = schema.resolve(options);
    }
    return schema;
  }
  /**
   *
   * @param {*} value
   * @param {Object} options
   * @param {*=} options.parent
   * @param {*=} options.context
   */

  cast(value, options = {}) {
    let resolvedSchema = this.resolve(_extends({
      value
    }, options));
    let result = resolvedSchema._cast(value, options);
    if (value !== undefined && options.assert !== false && resolvedSchema.isType(result) !== true) {
      let formattedValue = (0, _printValue.default)(value);
      let formattedResult = (0, _printValue.default)(result);
      throw new TypeError(`The value of ${options.path || 'field'} could not be cast to a value ` + `that satisfies the schema type: "${resolvedSchema._type}". \n\n` + `attempted value: ${formattedValue} \n` + (formattedResult !== formattedValue ? `result of cast: ${formattedResult}` : ''));
    }
    return result;
  }
  _cast(rawValue, _options) {
    let value = rawValue === undefined ? rawValue : this.transforms.reduce((value, fn) => fn.call(this, value, rawValue, this), rawValue);
    if (value === undefined) {
      value = this.getDefault();
    }
    return value;
  }
  _validate(_value, options = {}, cb) {
    let {
      sync,
      path,
      from = [],
      originalValue = _value,
      strict = this.spec.strict,
      abortEarly = this.spec.abortEarly
    } = options;
    let value = _value;
    if (!strict) {
      // this._validating = true;
      value = this._cast(value, _extends({
        assert: false
      }, options)); // this._validating = false;
    } // value is cast, we can check if it meets type requirements

    let args = {
      value,
      path,
      options,
      originalValue,
      schema: this,
      label: this.spec.label,
      sync,
      from
    };
    let initialTests = [];
    if (this._typeError) initialTests.push(this._typeError);
    let finalTests = [];
    if (this._whitelistError) finalTests.push(this._whitelistError);
    if (this._blacklistError) finalTests.push(this._blacklistError);
    (0, _runTests.default)({
      args,
      value,
      path,
      sync,
      tests: initialTests,
      endEarly: abortEarly
    }, err => {
      if (err) return void cb(err, value);
      (0, _runTests.default)({
        tests: this.tests.concat(finalTests),
        args,
        path,
        sync,
        value,
        endEarly: abortEarly
      }, cb);
    });
  }
  validate(value, options, maybeCb) {
    let schema = this.resolve(_extends({}, options, {
      value
    })); // callback case is for nested validations

    return typeof maybeCb === 'function' ? schema._validate(value, options, maybeCb) : new Promise((resolve, reject) => schema._validate(value, options, (err, value) => {
      if (err) reject(err);else resolve(value);
    }));
  }
  validateSync(value, options) {
    let schema = this.resolve(_extends({}, options, {
      value
    }));
    let result;
    schema._validate(value, _extends({}, options, {
      sync: true
    }), (err, value) => {
      if (err) throw err;
      result = value;
    });
    return result;
  }
  isValid(value, options) {
    return this.validate(value, options).then(() => true, err => {
      if (_ValidationError.default.isError(err)) return false;
      throw err;
    });
  }
  isValidSync(value, options) {
    try {
      this.validateSync(value, options);
      return true;
    } catch (err) {
      if (_ValidationError.default.isError(err)) return false;
      throw err;
    }
  }
  _getDefault() {
    let defaultValue = this.spec.default;
    if (defaultValue == null) {
      return defaultValue;
    }
    return typeof defaultValue === 'function' ? defaultValue.call(this) : (0, _nanoclone.default)(defaultValue);
  }
  getDefault(options) {
    let schema = this.resolve(options || {});
    return schema._getDefault();
  }
  default(def) {
    if (arguments.length === 0) {
      return this._getDefault();
    }
    let next = this.clone({
      default: def
    });
    return next;
  }
  strict(isStrict = true) {
    let next = this.clone();
    next.spec.strict = isStrict;
    return next;
  }
  _isPresent(value) {
    return value != null;
  }
  defined(message = _locale.mixed.defined) {
    return this.test({
      message,
      name: 'defined',
      exclusive: true,
      test(value) {
        return value !== undefined;
      }
    });
  }
  required(message = _locale.mixed.required) {
    return this.clone({
      presence: 'required'
    }).withMutation(s => s.test({
      message,
      name: 'required',
      exclusive: true,
      test(value) {
        return this.schema._isPresent(value);
      }
    }));
  }
  notRequired() {
    let next = this.clone({
      presence: 'optional'
    });
    next.tests = next.tests.filter(test => test.OPTIONS.name !== 'required');
    return next;
  }
  nullable(isNullable = true) {
    let next = this.clone({
      nullable: isNullable !== false
    });
    return next;
  }
  transform(fn) {
    let next = this.clone();
    next.transforms.push(fn);
    return next;
  }
  /**
   * Adds a test function to the schema's queue of tests.
   * tests can be exclusive or non-exclusive.
   *
   * - exclusive tests, will replace any existing tests of the same name.
   * - non-exclusive: can be stacked
   *
   * If a non-exclusive test is added to a schema with an exclusive test of the same name
   * the exclusive test is removed and further tests of the same name will be stacked.
   *
   * If an exclusive test is added to a schema with non-exclusive tests of the same name
   * the previous tests are removed and further tests of the same name will replace each other.
   */

  test(...args) {
    let opts;
    if (args.length === 1) {
      if (typeof args[0] === 'function') {
        opts = {
          test: args[0]
        };
      } else {
        opts = args[0];
      }
    } else if (args.length === 2) {
      opts = {
        name: args[0],
        test: args[1]
      };
    } else {
      opts = {
        name: args[0],
        message: args[1],
        test: args[2]
      };
    }
    if (opts.message === undefined) opts.message = _locale.mixed.default;
    if (typeof opts.test !== 'function') throw new TypeError('`test` is a required parameters');
    let next = this.clone();
    let validate = (0, _createValidation.default)(opts);
    let isExclusive = opts.exclusive || opts.name && next.exclusiveTests[opts.name] === true;
    if (opts.exclusive) {
      if (!opts.name) throw new TypeError('Exclusive tests must provide a unique `name` identifying the test');
    }
    if (opts.name) next.exclusiveTests[opts.name] = !!opts.exclusive;
    next.tests = next.tests.filter(fn => {
      if (fn.OPTIONS.name === opts.name) {
        if (isExclusive) return false;
        if (fn.OPTIONS.test === validate.OPTIONS.test) return false;
      }
      return true;
    });
    next.tests.push(validate);
    return next;
  }
  when(keys, options) {
    if (!Array.isArray(keys) && typeof keys !== 'string') {
      options = keys;
      keys = '.';
    }
    let next = this.clone();
    let deps = (0, _toArray.default)(keys).map(key => new _Reference.default(key));
    deps.forEach(dep => {
      // @ts-ignore
      if (dep.isSibling) next.deps.push(dep.key);
    });
    next.conditions.push(new _Condition.default(deps, options));
    return next;
  }
  typeError(message) {
    let next = this.clone();
    next._typeError = (0, _createValidation.default)({
      message,
      name: 'typeError',
      test(value) {
        if (value !== undefined && !this.schema.isType(value)) return this.createError({
          params: {
            type: this.schema._type
          }
        });
        return true;
      }
    });
    return next;
  }
  oneOf(enums, message = _locale.mixed.oneOf) {
    let next = this.clone();
    enums.forEach(val => {
      next._whitelist.add(val);
      next._blacklist.delete(val);
    });
    next._whitelistError = (0, _createValidation.default)({
      message,
      name: 'oneOf',
      test(value) {
        if (value === undefined) return true;
        let valids = this.schema._whitelist;
        let resolved = valids.resolveAll(this.resolve);
        return resolved.includes(value) ? true : this.createError({
          params: {
            values: valids.toArray().join(', '),
            resolved
          }
        });
      }
    });
    return next;
  }
  notOneOf(enums, message = _locale.mixed.notOneOf) {
    let next = this.clone();
    enums.forEach(val => {
      next._blacklist.add(val);
      next._whitelist.delete(val);
    });
    next._blacklistError = (0, _createValidation.default)({
      message,
      name: 'notOneOf',
      test(value) {
        let invalids = this.schema._blacklist;
        let resolved = invalids.resolveAll(this.resolve);
        if (resolved.includes(value)) return this.createError({
          params: {
            values: invalids.toArray().join(', '),
            resolved
          }
        });
        return true;
      }
    });
    return next;
  }
  strip(strip = true) {
    let next = this.clone();
    next.spec.strip = strip;
    return next;
  }
  describe() {
    const next = this.clone();
    const {
      label,
      meta
    } = next.spec;
    const description = {
      meta,
      label,
      type: next.type,
      oneOf: next._whitelist.describe(),
      notOneOf: next._blacklist.describe(),
      tests: next.tests.map(fn => ({
        name: fn.OPTIONS.name,
        params: fn.OPTIONS.params
      })).filter((n, idx, list) => list.findIndex(c => c.name === n.name) === idx)
    };
    return description;
  }
} // eslint-disable-next-line @typescript-eslint/no-unused-vars

exports.default = BaseSchema;
// @ts-expect-error
BaseSchema.prototype.__isYupSchema__ = true;
for (const method of ['validate', 'validateSync']) BaseSchema.prototype[`${method}At`] = function (path, value, options = {}) {
  const {
    parent,
    parentPath,
    schema
  } = (0, _reach.getIn)(this, path, value, options.context);
  return schema[method](parent && parent[parentPath], _extends({}, options, {
    parent,
    path
  }));
};
for (const alias of ['equals', 'is']) BaseSchema.prototype[alias] = BaseSchema.prototype.oneOf;
for (const alias of ['not', 'nope']) BaseSchema.prototype[alias] = BaseSchema.prototype.notOneOf;
BaseSchema.prototype.optional = BaseSchema.prototype.notRequired;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfbmFub2Nsb25lIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfbG9jYWxlIiwiX0NvbmRpdGlvbiIsIl9ydW5UZXN0cyIsIl9jcmVhdGVWYWxpZGF0aW9uIiwiX3ByaW50VmFsdWUiLCJfUmVmZXJlbmNlIiwiX3JlYWNoIiwiX1ZhbGlkYXRpb25FcnJvciIsIl9SZWZlcmVuY2VTZXQiLCJfdG9BcnJheSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsIkJhc2VTY2hlbWEiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJkZXBzIiwidGVzdHMiLCJ0cmFuc2Zvcm1zIiwiY29uZGl0aW9ucyIsIl9tdXRhdGUiLCJfdHlwZUVycm9yIiwiX3doaXRlbGlzdCIsIl9ibGFja2xpc3QiLCJleGNsdXNpdmVUZXN0cyIsImNyZWF0ZSIsInNwZWMiLCJ3aXRoTXV0YXRpb24iLCJ0eXBlRXJyb3IiLCJtaXhlZCIsIm5vdFR5cGUiLCJ0eXBlIiwic3RyaXAiLCJzdHJpY3QiLCJhYm9ydEVhcmx5IiwicmVjdXJzaXZlIiwibnVsbGFibGUiLCJwcmVzZW5jZSIsIl90eXBlIiwiX3R5cGVDaGVjayIsIl92YWx1ZSIsImNsb25lIiwibmV4dCIsImdldFByb3RvdHlwZU9mIiwiX3doaXRlbGlzdEVycm9yIiwiX2JsYWNrbGlzdEVycm9yIiwibGFiZWwiLCJtZXRhIiwiYXJncyIsImZuIiwiYmVmb3JlIiwicmVzdWx0IiwiY29uY2F0Iiwic2NoZW1hIiwiVHlwZUVycm9yIiwiYmFzZSIsImNvbWJpbmVkIiwibWVyZ2VkU3BlYyIsIm1lcmdlIiwiZm9yRWFjaCIsInRlc3QiLCJPUFRJT05TIiwiaXNUeXBlIiwidiIsInJlc29sdmUiLCJyZWR1Y2UiLCJjb25kaXRpb24iLCJjYXN0IiwicmVzb2x2ZWRTY2hlbWEiLCJfY2FzdCIsInVuZGVmaW5lZCIsImFzc2VydCIsImZvcm1hdHRlZFZhbHVlIiwiZm9ybWF0dGVkUmVzdWx0IiwicGF0aCIsInJhd1ZhbHVlIiwiX29wdGlvbnMiLCJnZXREZWZhdWx0IiwiX3ZhbGlkYXRlIiwiY2IiLCJzeW5jIiwiZnJvbSIsIm9yaWdpbmFsVmFsdWUiLCJpbml0aWFsVGVzdHMiLCJwdXNoIiwiZmluYWxUZXN0cyIsImVuZEVhcmx5IiwiZXJyIiwidmFsaWRhdGUiLCJtYXliZUNiIiwiUHJvbWlzZSIsInJlamVjdCIsInZhbGlkYXRlU3luYyIsImlzVmFsaWQiLCJ0aGVuIiwiaXNFcnJvciIsImlzVmFsaWRTeW5jIiwiX2dldERlZmF1bHQiLCJkZWZhdWx0VmFsdWUiLCJkZWYiLCJpc1N0cmljdCIsIl9pc1ByZXNlbnQiLCJkZWZpbmVkIiwibWVzc2FnZSIsIm5hbWUiLCJleGNsdXNpdmUiLCJyZXF1aXJlZCIsInMiLCJub3RSZXF1aXJlZCIsImZpbHRlciIsImlzTnVsbGFibGUiLCJ0cmFuc2Zvcm0iLCJvcHRzIiwiaXNFeGNsdXNpdmUiLCJ3aGVuIiwia2V5cyIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsImRlcCIsImlzU2libGluZyIsImNyZWF0ZUVycm9yIiwicGFyYW1zIiwib25lT2YiLCJlbnVtcyIsInZhbCIsImFkZCIsImRlbGV0ZSIsInZhbGlkcyIsInJlc29sdmVkIiwicmVzb2x2ZUFsbCIsImluY2x1ZGVzIiwidmFsdWVzIiwidG9BcnJheSIsImpvaW4iLCJub3RPbmVPZiIsImludmFsaWRzIiwiZGVzY3JpYmUiLCJkZXNjcmlwdGlvbiIsIm4iLCJpZHgiLCJsaXN0IiwiZmluZEluZGV4IiwiYyIsIl9faXNZdXBTY2hlbWFfXyIsIm1ldGhvZCIsInBhcmVudCIsInBhcmVudFBhdGgiLCJnZXRJbiIsImNvbnRleHQiLCJhbGlhcyIsIm9wdGlvbmFsIl0sInNvdXJjZXMiOlsic2NoZW1hLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX25hbm9jbG9uZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm5hbm9jbG9uZVwiKSk7XG5cbnZhciBfbG9jYWxlID0gcmVxdWlyZShcIi4vbG9jYWxlXCIpO1xuXG52YXIgX0NvbmRpdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ29uZGl0aW9uXCIpKTtcblxudmFyIF9ydW5UZXN0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9ydW5UZXN0c1wiKSk7XG5cbnZhciBfY3JlYXRlVmFsaWRhdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9jcmVhdGVWYWxpZGF0aW9uXCIpKTtcblxudmFyIF9wcmludFZhbHVlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL3ByaW50VmFsdWVcIikpO1xuXG52YXIgX1JlZmVyZW5jZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUmVmZXJlbmNlXCIpKTtcblxudmFyIF9yZWFjaCA9IHJlcXVpcmUoXCIuL3V0aWwvcmVhY2hcIik7XG5cbnZhciBfVmFsaWRhdGlvbkVycm9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9WYWxpZGF0aW9uRXJyb3JcIikpO1xuXG52YXIgX1JlZmVyZW5jZVNldCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9SZWZlcmVuY2VTZXRcIikpO1xuXG52YXIgX3RvQXJyYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvdG9BcnJheVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmNsYXNzIEJhc2VTY2hlbWEge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5kZXBzID0gW107XG4gICAgdGhpcy50ZXN0cyA9IHZvaWQgMDtcbiAgICB0aGlzLnRyYW5zZm9ybXMgPSB2b2lkIDA7XG4gICAgdGhpcy5jb25kaXRpb25zID0gW107XG4gICAgdGhpcy5fbXV0YXRlID0gdm9pZCAwO1xuICAgIHRoaXMuX3R5cGVFcnJvciA9IHZvaWQgMDtcbiAgICB0aGlzLl93aGl0ZWxpc3QgPSBuZXcgX1JlZmVyZW5jZVNldC5kZWZhdWx0KCk7XG4gICAgdGhpcy5fYmxhY2tsaXN0ID0gbmV3IF9SZWZlcmVuY2VTZXQuZGVmYXVsdCgpO1xuICAgIHRoaXMuZXhjbHVzaXZlVGVzdHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuc3BlYyA9IHZvaWQgMDtcbiAgICB0aGlzLnRlc3RzID0gW107XG4gICAgdGhpcy50cmFuc2Zvcm1zID0gW107XG4gICAgdGhpcy53aXRoTXV0YXRpb24oKCkgPT4ge1xuICAgICAgdGhpcy50eXBlRXJyb3IoX2xvY2FsZS5taXhlZC5ub3RUeXBlKTtcbiAgICB9KTtcbiAgICB0aGlzLnR5cGUgPSAob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy50eXBlKSB8fCAnbWl4ZWQnO1xuICAgIHRoaXMuc3BlYyA9IF9leHRlbmRzKHtcbiAgICAgIHN0cmlwOiBmYWxzZSxcbiAgICAgIHN0cmljdDogZmFsc2UsXG4gICAgICBhYm9ydEVhcmx5OiB0cnVlLFxuICAgICAgcmVjdXJzaXZlOiB0cnVlLFxuICAgICAgbnVsbGFibGU6IGZhbHNlLFxuICAgICAgcHJlc2VuY2U6ICdvcHRpb25hbCdcbiAgICB9LCBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnNwZWMpO1xuICB9IC8vIFRPRE86IHJlbW92ZVxuXG5cbiAgZ2V0IF90eXBlKCkge1xuICAgIHJldHVybiB0aGlzLnR5cGU7XG4gIH1cblxuICBfdHlwZUNoZWNrKF92YWx1ZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY2xvbmUoc3BlYykge1xuICAgIGlmICh0aGlzLl9tdXRhdGUpIHtcbiAgICAgIGlmIChzcGVjKSBPYmplY3QuYXNzaWduKHRoaXMuc3BlYywgc3BlYyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IC8vIGlmIHRoZSBuZXN0ZWQgdmFsdWUgaXMgYSBzY2hlbWEgd2UgY2FuIHNraXAgY2xvbmluZywgc2luY2VcbiAgICAvLyB0aGV5IGFyZSBhbHJlYWR5IGltbXV0YWJsZVxuXG5cbiAgICBjb25zdCBuZXh0ID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykpOyAvLyBAdHMtZXhwZWN0LWVycm9yIHRoaXMgaXMgcmVhZG9ubHlcblxuICAgIG5leHQudHlwZSA9IHRoaXMudHlwZTtcbiAgICBuZXh0Ll90eXBlRXJyb3IgPSB0aGlzLl90eXBlRXJyb3I7XG4gICAgbmV4dC5fd2hpdGVsaXN0RXJyb3IgPSB0aGlzLl93aGl0ZWxpc3RFcnJvcjtcbiAgICBuZXh0Ll9ibGFja2xpc3RFcnJvciA9IHRoaXMuX2JsYWNrbGlzdEVycm9yO1xuICAgIG5leHQuX3doaXRlbGlzdCA9IHRoaXMuX3doaXRlbGlzdC5jbG9uZSgpO1xuICAgIG5leHQuX2JsYWNrbGlzdCA9IHRoaXMuX2JsYWNrbGlzdC5jbG9uZSgpO1xuICAgIG5leHQuZXhjbHVzaXZlVGVzdHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5leGNsdXNpdmVUZXN0cyk7IC8vIEB0cy1leHBlY3QtZXJyb3IgdGhpcyBpcyByZWFkb25seVxuXG4gICAgbmV4dC5kZXBzID0gWy4uLnRoaXMuZGVwc107XG4gICAgbmV4dC5jb25kaXRpb25zID0gWy4uLnRoaXMuY29uZGl0aW9uc107XG4gICAgbmV4dC50ZXN0cyA9IFsuLi50aGlzLnRlc3RzXTtcbiAgICBuZXh0LnRyYW5zZm9ybXMgPSBbLi4udGhpcy50cmFuc2Zvcm1zXTtcbiAgICBuZXh0LnNwZWMgPSAoMCwgX25hbm9jbG9uZS5kZWZhdWx0KShfZXh0ZW5kcyh7fSwgdGhpcy5zcGVjLCBzcGVjKSk7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH1cblxuICBsYWJlbChsYWJlbCkge1xuICAgIGxldCBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIG5leHQuc3BlYy5sYWJlbCA9IGxhYmVsO1xuICAgIHJldHVybiBuZXh0O1xuICB9XG5cbiAgbWV0YSguLi5hcmdzKSB7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSByZXR1cm4gdGhpcy5zcGVjLm1ldGE7XG4gICAgbGV0IG5leHQgPSB0aGlzLmNsb25lKCk7XG4gICAgbmV4dC5zcGVjLm1ldGEgPSBPYmplY3QuYXNzaWduKG5leHQuc3BlYy5tZXRhIHx8IHt9LCBhcmdzWzBdKTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSAvLyB3aXRoQ29udGV4dDxUQ29udGV4dCBleHRlbmRzIEFueU9iamVjdD4oKTogQmFzZVNjaGVtYTxcbiAgLy8gICBUQ2FzdCxcbiAgLy8gICBUQ29udGV4dCxcbiAgLy8gICBUT3V0cHV0XG4gIC8vID4ge1xuICAvLyAgIHJldHVybiB0aGlzIGFzIGFueTtcbiAgLy8gfVxuXG5cbiAgd2l0aE11dGF0aW9uKGZuKSB7XG4gICAgbGV0IGJlZm9yZSA9IHRoaXMuX211dGF0ZTtcbiAgICB0aGlzLl9tdXRhdGUgPSB0cnVlO1xuICAgIGxldCByZXN1bHQgPSBmbih0aGlzKTtcbiAgICB0aGlzLl9tdXRhdGUgPSBiZWZvcmU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGNvbmNhdChzY2hlbWEpIHtcbiAgICBpZiAoIXNjaGVtYSB8fCBzY2hlbWEgPT09IHRoaXMpIHJldHVybiB0aGlzO1xuICAgIGlmIChzY2hlbWEudHlwZSAhPT0gdGhpcy50eXBlICYmIHRoaXMudHlwZSAhPT0gJ21peGVkJykgdGhyb3cgbmV3IFR5cGVFcnJvcihgWW91IGNhbm5vdCBcXGBjb25jYXQoKVxcYCBzY2hlbWEncyBvZiBkaWZmZXJlbnQgdHlwZXM6ICR7dGhpcy50eXBlfSBhbmQgJHtzY2hlbWEudHlwZX1gKTtcbiAgICBsZXQgYmFzZSA9IHRoaXM7XG4gICAgbGV0IGNvbWJpbmVkID0gc2NoZW1hLmNsb25lKCk7XG5cbiAgICBjb25zdCBtZXJnZWRTcGVjID0gX2V4dGVuZHMoe30sIGJhc2Uuc3BlYywgY29tYmluZWQuc3BlYyk7IC8vIGlmIChjb21iaW5lZC5zcGVjLm51bGxhYmxlID09PSBVTlNFVClcbiAgICAvLyAgIG1lcmdlZFNwZWMubnVsbGFibGUgPSBiYXNlLnNwZWMubnVsbGFibGU7XG4gICAgLy8gaWYgKGNvbWJpbmVkLnNwZWMucHJlc2VuY2UgPT09IFVOU0VUKVxuICAgIC8vICAgbWVyZ2VkU3BlYy5wcmVzZW5jZSA9IGJhc2Uuc3BlYy5wcmVzZW5jZTtcblxuXG4gICAgY29tYmluZWQuc3BlYyA9IG1lcmdlZFNwZWM7XG4gICAgY29tYmluZWQuX3R5cGVFcnJvciB8fCAoY29tYmluZWQuX3R5cGVFcnJvciA9IGJhc2UuX3R5cGVFcnJvcik7XG4gICAgY29tYmluZWQuX3doaXRlbGlzdEVycm9yIHx8IChjb21iaW5lZC5fd2hpdGVsaXN0RXJyb3IgPSBiYXNlLl93aGl0ZWxpc3RFcnJvcik7XG4gICAgY29tYmluZWQuX2JsYWNrbGlzdEVycm9yIHx8IChjb21iaW5lZC5fYmxhY2tsaXN0RXJyb3IgPSBiYXNlLl9ibGFja2xpc3RFcnJvcik7IC8vIG1hbnVhbGx5IG1lcmdlIHRoZSBibGFja2xpc3Qvd2hpdGVsaXN0ICh0aGUgb3RoZXIgYHNjaGVtYWAgdGFrZXNcbiAgICAvLyBwcmVjZWRlbmNlIGluIGNhc2Ugb2YgY29uZmxpY3RzKVxuXG4gICAgY29tYmluZWQuX3doaXRlbGlzdCA9IGJhc2UuX3doaXRlbGlzdC5tZXJnZShzY2hlbWEuX3doaXRlbGlzdCwgc2NoZW1hLl9ibGFja2xpc3QpO1xuICAgIGNvbWJpbmVkLl9ibGFja2xpc3QgPSBiYXNlLl9ibGFja2xpc3QubWVyZ2Uoc2NoZW1hLl9ibGFja2xpc3QsIHNjaGVtYS5fd2hpdGVsaXN0KTsgLy8gc3RhcnQgd2l0aCB0aGUgY3VycmVudCB0ZXN0c1xuXG4gICAgY29tYmluZWQudGVzdHMgPSBiYXNlLnRlc3RzO1xuICAgIGNvbWJpbmVkLmV4Y2x1c2l2ZVRlc3RzID0gYmFzZS5leGNsdXNpdmVUZXN0czsgLy8gbWFudWFsbHkgYWRkIHRoZSBuZXcgdGVzdHMgdG8gZW5zdXJlXG4gICAgLy8gdGhlIGRlZHVwaW5nIGxvZ2ljIGlzIGNvbnNpc3RlbnRcblxuICAgIGNvbWJpbmVkLndpdGhNdXRhdGlvbihuZXh0ID0+IHtcbiAgICAgIHNjaGVtYS50ZXN0cy5mb3JFYWNoKGZuID0+IHtcbiAgICAgICAgbmV4dC50ZXN0KGZuLk9QVElPTlMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgY29tYmluZWQudHJhbnNmb3JtcyA9IFsuLi5iYXNlLnRyYW5zZm9ybXMsIC4uLmNvbWJpbmVkLnRyYW5zZm9ybXNdO1xuICAgIHJldHVybiBjb21iaW5lZDtcbiAgfVxuXG4gIGlzVHlwZSh2KSB7XG4gICAgaWYgKHRoaXMuc3BlYy5udWxsYWJsZSAmJiB2ID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy5fdHlwZUNoZWNrKHYpO1xuICB9XG5cbiAgcmVzb2x2ZShvcHRpb25zKSB7XG4gICAgbGV0IHNjaGVtYSA9IHRoaXM7XG5cbiAgICBpZiAoc2NoZW1hLmNvbmRpdGlvbnMubGVuZ3RoKSB7XG4gICAgICBsZXQgY29uZGl0aW9ucyA9IHNjaGVtYS5jb25kaXRpb25zO1xuICAgICAgc2NoZW1hID0gc2NoZW1hLmNsb25lKCk7XG4gICAgICBzY2hlbWEuY29uZGl0aW9ucyA9IFtdO1xuICAgICAgc2NoZW1hID0gY29uZGl0aW9ucy5yZWR1Y2UoKHNjaGVtYSwgY29uZGl0aW9uKSA9PiBjb25kaXRpb24ucmVzb2x2ZShzY2hlbWEsIG9wdGlvbnMpLCBzY2hlbWEpO1xuICAgICAgc2NoZW1hID0gc2NoZW1hLnJlc29sdmUob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjaGVtYTtcbiAgfVxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiBAcGFyYW0geyo9fSBvcHRpb25zLnBhcmVudFxuICAgKiBAcGFyYW0geyo9fSBvcHRpb25zLmNvbnRleHRcbiAgICovXG5cblxuICBjYXN0KHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgICBsZXQgcmVzb2x2ZWRTY2hlbWEgPSB0aGlzLnJlc29sdmUoX2V4dGVuZHMoe1xuICAgICAgdmFsdWVcbiAgICB9LCBvcHRpb25zKSk7XG5cbiAgICBsZXQgcmVzdWx0ID0gcmVzb2x2ZWRTY2hlbWEuX2Nhc3QodmFsdWUsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5hc3NlcnQgIT09IGZhbHNlICYmIHJlc29sdmVkU2NoZW1hLmlzVHlwZShyZXN1bHQpICE9PSB0cnVlKSB7XG4gICAgICBsZXQgZm9ybWF0dGVkVmFsdWUgPSAoMCwgX3ByaW50VmFsdWUuZGVmYXVsdCkodmFsdWUpO1xuICAgICAgbGV0IGZvcm1hdHRlZFJlc3VsdCA9ICgwLCBfcHJpbnRWYWx1ZS5kZWZhdWx0KShyZXN1bHQpO1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVGhlIHZhbHVlIG9mICR7b3B0aW9ucy5wYXRoIHx8ICdmaWVsZCd9IGNvdWxkIG5vdCBiZSBjYXN0IHRvIGEgdmFsdWUgYCArIGB0aGF0IHNhdGlzZmllcyB0aGUgc2NoZW1hIHR5cGU6IFwiJHtyZXNvbHZlZFNjaGVtYS5fdHlwZX1cIi4gXFxuXFxuYCArIGBhdHRlbXB0ZWQgdmFsdWU6ICR7Zm9ybWF0dGVkVmFsdWV9IFxcbmAgKyAoZm9ybWF0dGVkUmVzdWx0ICE9PSBmb3JtYXR0ZWRWYWx1ZSA/IGByZXN1bHQgb2YgY2FzdDogJHtmb3JtYXR0ZWRSZXN1bHR9YCA6ICcnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIF9jYXN0KHJhd1ZhbHVlLCBfb3B0aW9ucykge1xuICAgIGxldCB2YWx1ZSA9IHJhd1ZhbHVlID09PSB1bmRlZmluZWQgPyByYXdWYWx1ZSA6IHRoaXMudHJhbnNmb3Jtcy5yZWR1Y2UoKHZhbHVlLCBmbikgPT4gZm4uY2FsbCh0aGlzLCB2YWx1ZSwgcmF3VmFsdWUsIHRoaXMpLCByYXdWYWx1ZSk7XG5cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFsdWUgPSB0aGlzLmdldERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBfdmFsaWRhdGUoX3ZhbHVlLCBvcHRpb25zID0ge30sIGNiKSB7XG4gICAgbGV0IHtcbiAgICAgIHN5bmMsXG4gICAgICBwYXRoLFxuICAgICAgZnJvbSA9IFtdLFxuICAgICAgb3JpZ2luYWxWYWx1ZSA9IF92YWx1ZSxcbiAgICAgIHN0cmljdCA9IHRoaXMuc3BlYy5zdHJpY3QsXG4gICAgICBhYm9ydEVhcmx5ID0gdGhpcy5zcGVjLmFib3J0RWFybHlcbiAgICB9ID0gb3B0aW9ucztcbiAgICBsZXQgdmFsdWUgPSBfdmFsdWU7XG5cbiAgICBpZiAoIXN0cmljdCkge1xuICAgICAgLy8gdGhpcy5fdmFsaWRhdGluZyA9IHRydWU7XG4gICAgICB2YWx1ZSA9IHRoaXMuX2Nhc3QodmFsdWUsIF9leHRlbmRzKHtcbiAgICAgICAgYXNzZXJ0OiBmYWxzZVxuICAgICAgfSwgb3B0aW9ucykpOyAvLyB0aGlzLl92YWxpZGF0aW5nID0gZmFsc2U7XG4gICAgfSAvLyB2YWx1ZSBpcyBjYXN0LCB3ZSBjYW4gY2hlY2sgaWYgaXQgbWVldHMgdHlwZSByZXF1aXJlbWVudHNcblxuXG4gICAgbGV0IGFyZ3MgPSB7XG4gICAgICB2YWx1ZSxcbiAgICAgIHBhdGgsXG4gICAgICBvcHRpb25zLFxuICAgICAgb3JpZ2luYWxWYWx1ZSxcbiAgICAgIHNjaGVtYTogdGhpcyxcbiAgICAgIGxhYmVsOiB0aGlzLnNwZWMubGFiZWwsXG4gICAgICBzeW5jLFxuICAgICAgZnJvbVxuICAgIH07XG4gICAgbGV0IGluaXRpYWxUZXN0cyA9IFtdO1xuICAgIGlmICh0aGlzLl90eXBlRXJyb3IpIGluaXRpYWxUZXN0cy5wdXNoKHRoaXMuX3R5cGVFcnJvcik7XG4gICAgbGV0IGZpbmFsVGVzdHMgPSBbXTtcbiAgICBpZiAodGhpcy5fd2hpdGVsaXN0RXJyb3IpIGZpbmFsVGVzdHMucHVzaCh0aGlzLl93aGl0ZWxpc3RFcnJvcik7XG4gICAgaWYgKHRoaXMuX2JsYWNrbGlzdEVycm9yKSBmaW5hbFRlc3RzLnB1c2godGhpcy5fYmxhY2tsaXN0RXJyb3IpO1xuICAgICgwLCBfcnVuVGVzdHMuZGVmYXVsdCkoe1xuICAgICAgYXJncyxcbiAgICAgIHZhbHVlLFxuICAgICAgcGF0aCxcbiAgICAgIHN5bmMsXG4gICAgICB0ZXN0czogaW5pdGlhbFRlc3RzLFxuICAgICAgZW5kRWFybHk6IGFib3J0RWFybHlcbiAgICB9LCBlcnIgPT4ge1xuICAgICAgaWYgKGVycikgcmV0dXJuIHZvaWQgY2IoZXJyLCB2YWx1ZSk7XG4gICAgICAoMCwgX3J1blRlc3RzLmRlZmF1bHQpKHtcbiAgICAgICAgdGVzdHM6IHRoaXMudGVzdHMuY29uY2F0KGZpbmFsVGVzdHMpLFxuICAgICAgICBhcmdzLFxuICAgICAgICBwYXRoLFxuICAgICAgICBzeW5jLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgZW5kRWFybHk6IGFib3J0RWFybHlcbiAgICAgIH0sIGNiKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhbGlkYXRlKHZhbHVlLCBvcHRpb25zLCBtYXliZUNiKSB7XG4gICAgbGV0IHNjaGVtYSA9IHRoaXMucmVzb2x2ZShfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgdmFsdWVcbiAgICB9KSk7IC8vIGNhbGxiYWNrIGNhc2UgaXMgZm9yIG5lc3RlZCB2YWxpZGF0aW9uc1xuXG4gICAgcmV0dXJuIHR5cGVvZiBtYXliZUNiID09PSAnZnVuY3Rpb24nID8gc2NoZW1hLl92YWxpZGF0ZSh2YWx1ZSwgb3B0aW9ucywgbWF5YmVDYikgOiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiBzY2hlbWEuX3ZhbGlkYXRlKHZhbHVlLCBvcHRpb25zLCAoZXJyLCB2YWx1ZSkgPT4ge1xuICAgICAgaWYgKGVycikgcmVqZWN0KGVycik7ZWxzZSByZXNvbHZlKHZhbHVlKTtcbiAgICB9KSk7XG4gIH1cblxuICB2YWxpZGF0ZVN5bmModmFsdWUsIG9wdGlvbnMpIHtcbiAgICBsZXQgc2NoZW1hID0gdGhpcy5yZXNvbHZlKF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICB2YWx1ZVxuICAgIH0pKTtcbiAgICBsZXQgcmVzdWx0O1xuXG4gICAgc2NoZW1hLl92YWxpZGF0ZSh2YWx1ZSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHN5bmM6IHRydWVcbiAgICB9KSwgKGVyciwgdmFsdWUpID0+IHtcbiAgICAgIGlmIChlcnIpIHRocm93IGVycjtcbiAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlzVmFsaWQodmFsdWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZSh2YWx1ZSwgb3B0aW9ucykudGhlbigoKSA9PiB0cnVlLCBlcnIgPT4ge1xuICAgICAgaWYgKF9WYWxpZGF0aW9uRXJyb3IuZGVmYXVsdC5pc0Vycm9yKGVycikpIHJldHVybiBmYWxzZTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9KTtcbiAgfVxuXG4gIGlzVmFsaWRTeW5jKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMudmFsaWRhdGVTeW5jKHZhbHVlLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKF9WYWxpZGF0aW9uRXJyb3IuZGVmYXVsdC5pc0Vycm9yKGVycikpIHJldHVybiBmYWxzZTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cblxuICBfZ2V0RGVmYXVsdCgpIHtcbiAgICBsZXQgZGVmYXVsdFZhbHVlID0gdGhpcy5zcGVjLmRlZmF1bHQ7XG5cbiAgICBpZiAoZGVmYXVsdFZhbHVlID09IG51bGwpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHR5cGVvZiBkZWZhdWx0VmFsdWUgPT09ICdmdW5jdGlvbicgPyBkZWZhdWx0VmFsdWUuY2FsbCh0aGlzKSA6ICgwLCBfbmFub2Nsb25lLmRlZmF1bHQpKGRlZmF1bHRWYWx1ZSk7XG4gIH1cblxuICBnZXREZWZhdWx0KG9wdGlvbnMpIHtcbiAgICBsZXQgc2NoZW1hID0gdGhpcy5yZXNvbHZlKG9wdGlvbnMgfHwge30pO1xuICAgIHJldHVybiBzY2hlbWEuX2dldERlZmF1bHQoKTtcbiAgfVxuXG4gIGRlZmF1bHQoZGVmKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLl9nZXREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgbGV0IG5leHQgPSB0aGlzLmNsb25lKHtcbiAgICAgIGRlZmF1bHQ6IGRlZlxuICAgIH0pO1xuICAgIHJldHVybiBuZXh0O1xuICB9XG5cbiAgc3RyaWN0KGlzU3RyaWN0ID0gdHJ1ZSkge1xuICAgIGxldCBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIG5leHQuc3BlYy5zdHJpY3QgPSBpc1N0cmljdDtcbiAgICByZXR1cm4gbmV4dDtcbiAgfVxuXG4gIF9pc1ByZXNlbnQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT0gbnVsbDtcbiAgfVxuXG4gIGRlZmluZWQobWVzc2FnZSA9IF9sb2NhbGUubWl4ZWQuZGVmaW5lZCkge1xuICAgIHJldHVybiB0aGlzLnRlc3Qoe1xuICAgICAgbWVzc2FnZSxcbiAgICAgIG5hbWU6ICdkZWZpbmVkJyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcblxuICAgICAgdGVzdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0pO1xuICB9XG5cbiAgcmVxdWlyZWQobWVzc2FnZSA9IF9sb2NhbGUubWl4ZWQucmVxdWlyZWQpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSh7XG4gICAgICBwcmVzZW5jZTogJ3JlcXVpcmVkJ1xuICAgIH0pLndpdGhNdXRhdGlvbihzID0+IHMudGVzdCh7XG4gICAgICBtZXNzYWdlLFxuICAgICAgbmFtZTogJ3JlcXVpcmVkJyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcblxuICAgICAgdGVzdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY2hlbWEuX2lzUHJlc2VudCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICB9KSk7XG4gIH1cblxuICBub3RSZXF1aXJlZCgpIHtcbiAgICBsZXQgbmV4dCA9IHRoaXMuY2xvbmUoe1xuICAgICAgcHJlc2VuY2U6ICdvcHRpb25hbCdcbiAgICB9KTtcbiAgICBuZXh0LnRlc3RzID0gbmV4dC50ZXN0cy5maWx0ZXIodGVzdCA9PiB0ZXN0Lk9QVElPTlMubmFtZSAhPT0gJ3JlcXVpcmVkJyk7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH1cblxuICBudWxsYWJsZShpc051bGxhYmxlID0gdHJ1ZSkge1xuICAgIGxldCBuZXh0ID0gdGhpcy5jbG9uZSh7XG4gICAgICBudWxsYWJsZTogaXNOdWxsYWJsZSAhPT0gZmFsc2VcbiAgICB9KTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfVxuXG4gIHRyYW5zZm9ybShmbikge1xuICAgIGxldCBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIG5leHQudHJhbnNmb3Jtcy5wdXNoKGZuKTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIHRlc3QgZnVuY3Rpb24gdG8gdGhlIHNjaGVtYSdzIHF1ZXVlIG9mIHRlc3RzLlxuICAgKiB0ZXN0cyBjYW4gYmUgZXhjbHVzaXZlIG9yIG5vbi1leGNsdXNpdmUuXG4gICAqXG4gICAqIC0gZXhjbHVzaXZlIHRlc3RzLCB3aWxsIHJlcGxhY2UgYW55IGV4aXN0aW5nIHRlc3RzIG9mIHRoZSBzYW1lIG5hbWUuXG4gICAqIC0gbm9uLWV4Y2x1c2l2ZTogY2FuIGJlIHN0YWNrZWRcbiAgICpcbiAgICogSWYgYSBub24tZXhjbHVzaXZlIHRlc3QgaXMgYWRkZWQgdG8gYSBzY2hlbWEgd2l0aCBhbiBleGNsdXNpdmUgdGVzdCBvZiB0aGUgc2FtZSBuYW1lXG4gICAqIHRoZSBleGNsdXNpdmUgdGVzdCBpcyByZW1vdmVkIGFuZCBmdXJ0aGVyIHRlc3RzIG9mIHRoZSBzYW1lIG5hbWUgd2lsbCBiZSBzdGFja2VkLlxuICAgKlxuICAgKiBJZiBhbiBleGNsdXNpdmUgdGVzdCBpcyBhZGRlZCB0byBhIHNjaGVtYSB3aXRoIG5vbi1leGNsdXNpdmUgdGVzdHMgb2YgdGhlIHNhbWUgbmFtZVxuICAgKiB0aGUgcHJldmlvdXMgdGVzdHMgYXJlIHJlbW92ZWQgYW5kIGZ1cnRoZXIgdGVzdHMgb2YgdGhlIHNhbWUgbmFtZSB3aWxsIHJlcGxhY2UgZWFjaCBvdGhlci5cbiAgICovXG5cblxuICB0ZXN0KC4uLmFyZ3MpIHtcbiAgICBsZXQgb3B0cztcblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9wdHMgPSB7XG4gICAgICAgICAgdGVzdDogYXJnc1swXVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0cyA9IGFyZ3NbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgICAgb3B0cyA9IHtcbiAgICAgICAgbmFtZTogYXJnc1swXSxcbiAgICAgICAgdGVzdDogYXJnc1sxXVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0cyA9IHtcbiAgICAgICAgbmFtZTogYXJnc1swXSxcbiAgICAgICAgbWVzc2FnZTogYXJnc1sxXSxcbiAgICAgICAgdGVzdDogYXJnc1syXVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAob3B0cy5tZXNzYWdlID09PSB1bmRlZmluZWQpIG9wdHMubWVzc2FnZSA9IF9sb2NhbGUubWl4ZWQuZGVmYXVsdDtcbiAgICBpZiAodHlwZW9mIG9wdHMudGVzdCAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IFR5cGVFcnJvcignYHRlc3RgIGlzIGEgcmVxdWlyZWQgcGFyYW1ldGVycycpO1xuICAgIGxldCBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIGxldCB2YWxpZGF0ZSA9ICgwLCBfY3JlYXRlVmFsaWRhdGlvbi5kZWZhdWx0KShvcHRzKTtcbiAgICBsZXQgaXNFeGNsdXNpdmUgPSBvcHRzLmV4Y2x1c2l2ZSB8fCBvcHRzLm5hbWUgJiYgbmV4dC5leGNsdXNpdmVUZXN0c1tvcHRzLm5hbWVdID09PSB0cnVlO1xuXG4gICAgaWYgKG9wdHMuZXhjbHVzaXZlKSB7XG4gICAgICBpZiAoIW9wdHMubmFtZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhjbHVzaXZlIHRlc3RzIG11c3QgcHJvdmlkZSBhIHVuaXF1ZSBgbmFtZWAgaWRlbnRpZnlpbmcgdGhlIHRlc3QnKTtcbiAgICB9XG5cbiAgICBpZiAob3B0cy5uYW1lKSBuZXh0LmV4Y2x1c2l2ZVRlc3RzW29wdHMubmFtZV0gPSAhIW9wdHMuZXhjbHVzaXZlO1xuICAgIG5leHQudGVzdHMgPSBuZXh0LnRlc3RzLmZpbHRlcihmbiA9PiB7XG4gICAgICBpZiAoZm4uT1BUSU9OUy5uYW1lID09PSBvcHRzLm5hbWUpIHtcbiAgICAgICAgaWYgKGlzRXhjbHVzaXZlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChmbi5PUFRJT05TLnRlc3QgPT09IHZhbGlkYXRlLk9QVElPTlMudGVzdCkgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICBuZXh0LnRlc3RzLnB1c2godmFsaWRhdGUpO1xuICAgIHJldHVybiBuZXh0O1xuICB9XG5cbiAgd2hlbihrZXlzLCBvcHRpb25zKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGtleXMpICYmIHR5cGVvZiBrZXlzICE9PSAnc3RyaW5nJykge1xuICAgICAgb3B0aW9ucyA9IGtleXM7XG4gICAgICBrZXlzID0gJy4nO1xuICAgIH1cblxuICAgIGxldCBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIGxldCBkZXBzID0gKDAsIF90b0FycmF5LmRlZmF1bHQpKGtleXMpLm1hcChrZXkgPT4gbmV3IF9SZWZlcmVuY2UuZGVmYXVsdChrZXkpKTtcbiAgICBkZXBzLmZvckVhY2goZGVwID0+IHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGlmIChkZXAuaXNTaWJsaW5nKSBuZXh0LmRlcHMucHVzaChkZXAua2V5KTtcbiAgICB9KTtcbiAgICBuZXh0LmNvbmRpdGlvbnMucHVzaChuZXcgX0NvbmRpdGlvbi5kZWZhdWx0KGRlcHMsIG9wdGlvbnMpKTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfVxuXG4gIHR5cGVFcnJvcihtZXNzYWdlKSB7XG4gICAgbGV0IG5leHQgPSB0aGlzLmNsb25lKCk7XG4gICAgbmV4dC5fdHlwZUVycm9yID0gKDAsIF9jcmVhdGVWYWxpZGF0aW9uLmRlZmF1bHQpKHtcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBuYW1lOiAndHlwZUVycm9yJyxcblxuICAgICAgdGVzdCh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhdGhpcy5zY2hlbWEuaXNUeXBlKHZhbHVlKSkgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Ioe1xuICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgdHlwZTogdGhpcy5zY2hlbWEuX3R5cGVcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgIH0pO1xuICAgIHJldHVybiBuZXh0O1xuICB9XG5cbiAgb25lT2YoZW51bXMsIG1lc3NhZ2UgPSBfbG9jYWxlLm1peGVkLm9uZU9mKSB7XG4gICAgbGV0IG5leHQgPSB0aGlzLmNsb25lKCk7XG4gICAgZW51bXMuZm9yRWFjaCh2YWwgPT4ge1xuICAgICAgbmV4dC5fd2hpdGVsaXN0LmFkZCh2YWwpO1xuXG4gICAgICBuZXh0Ll9ibGFja2xpc3QuZGVsZXRlKHZhbCk7XG4gICAgfSk7XG4gICAgbmV4dC5fd2hpdGVsaXN0RXJyb3IgPSAoMCwgX2NyZWF0ZVZhbGlkYXRpb24uZGVmYXVsdCkoe1xuICAgICAgbWVzc2FnZSxcbiAgICAgIG5hbWU6ICdvbmVPZicsXG5cbiAgICAgIHRlc3QodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiB0cnVlO1xuICAgICAgICBsZXQgdmFsaWRzID0gdGhpcy5zY2hlbWEuX3doaXRlbGlzdDtcbiAgICAgICAgbGV0IHJlc29sdmVkID0gdmFsaWRzLnJlc29sdmVBbGwodGhpcy5yZXNvbHZlKTtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVkLmluY2x1ZGVzKHZhbHVlKSA/IHRydWUgOiB0aGlzLmNyZWF0ZUVycm9yKHtcbiAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIHZhbHVlczogdmFsaWRzLnRvQXJyYXkoKS5qb2luKCcsICcpLFxuICAgICAgICAgICAgcmVzb2x2ZWRcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgfSk7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH1cblxuICBub3RPbmVPZihlbnVtcywgbWVzc2FnZSA9IF9sb2NhbGUubWl4ZWQubm90T25lT2YpIHtcbiAgICBsZXQgbmV4dCA9IHRoaXMuY2xvbmUoKTtcbiAgICBlbnVtcy5mb3JFYWNoKHZhbCA9PiB7XG4gICAgICBuZXh0Ll9ibGFja2xpc3QuYWRkKHZhbCk7XG5cbiAgICAgIG5leHQuX3doaXRlbGlzdC5kZWxldGUodmFsKTtcbiAgICB9KTtcbiAgICBuZXh0Ll9ibGFja2xpc3RFcnJvciA9ICgwLCBfY3JlYXRlVmFsaWRhdGlvbi5kZWZhdWx0KSh7XG4gICAgICBtZXNzYWdlLFxuICAgICAgbmFtZTogJ25vdE9uZU9mJyxcblxuICAgICAgdGVzdCh2YWx1ZSkge1xuICAgICAgICBsZXQgaW52YWxpZHMgPSB0aGlzLnNjaGVtYS5fYmxhY2tsaXN0O1xuICAgICAgICBsZXQgcmVzb2x2ZWQgPSBpbnZhbGlkcy5yZXNvbHZlQWxsKHRoaXMucmVzb2x2ZSk7XG4gICAgICAgIGlmIChyZXNvbHZlZC5pbmNsdWRlcyh2YWx1ZSkpIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHtcbiAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIHZhbHVlczogaW52YWxpZHMudG9BcnJheSgpLmpvaW4oJywgJyksXG4gICAgICAgICAgICByZXNvbHZlZFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgfSk7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH1cblxuICBzdHJpcChzdHJpcCA9IHRydWUpIHtcbiAgICBsZXQgbmV4dCA9IHRoaXMuY2xvbmUoKTtcbiAgICBuZXh0LnNwZWMuc3RyaXAgPSBzdHJpcDtcbiAgICByZXR1cm4gbmV4dDtcbiAgfVxuXG4gIGRlc2NyaWJlKCkge1xuICAgIGNvbnN0IG5leHQgPSB0aGlzLmNsb25lKCk7XG4gICAgY29uc3Qge1xuICAgICAgbGFiZWwsXG4gICAgICBtZXRhXG4gICAgfSA9IG5leHQuc3BlYztcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHtcbiAgICAgIG1ldGEsXG4gICAgICBsYWJlbCxcbiAgICAgIHR5cGU6IG5leHQudHlwZSxcbiAgICAgIG9uZU9mOiBuZXh0Ll93aGl0ZWxpc3QuZGVzY3JpYmUoKSxcbiAgICAgIG5vdE9uZU9mOiBuZXh0Ll9ibGFja2xpc3QuZGVzY3JpYmUoKSxcbiAgICAgIHRlc3RzOiBuZXh0LnRlc3RzLm1hcChmbiA9PiAoe1xuICAgICAgICBuYW1lOiBmbi5PUFRJT05TLm5hbWUsXG4gICAgICAgIHBhcmFtczogZm4uT1BUSU9OUy5wYXJhbXNcbiAgICAgIH0pKS5maWx0ZXIoKG4sIGlkeCwgbGlzdCkgPT4gbGlzdC5maW5kSW5kZXgoYyA9PiBjLm5hbWUgPT09IG4ubmFtZSkgPT09IGlkeClcbiAgICB9O1xuICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgfVxuXG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcblxuXG5leHBvcnRzLmRlZmF1bHQgPSBCYXNlU2NoZW1hO1xuLy8gQHRzLWV4cGVjdC1lcnJvclxuQmFzZVNjaGVtYS5wcm90b3R5cGUuX19pc1l1cFNjaGVtYV9fID0gdHJ1ZTtcblxuZm9yIChjb25zdCBtZXRob2Qgb2YgWyd2YWxpZGF0ZScsICd2YWxpZGF0ZVN5bmMnXSkgQmFzZVNjaGVtYS5wcm90b3R5cGVbYCR7bWV0aG9kfUF0YF0gPSBmdW5jdGlvbiAocGF0aCwgdmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgcGFyZW50LFxuICAgIHBhcmVudFBhdGgsXG4gICAgc2NoZW1hXG4gIH0gPSAoMCwgX3JlYWNoLmdldEluKSh0aGlzLCBwYXRoLCB2YWx1ZSwgb3B0aW9ucy5jb250ZXh0KTtcbiAgcmV0dXJuIHNjaGVtYVttZXRob2RdKHBhcmVudCAmJiBwYXJlbnRbcGFyZW50UGF0aF0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgcGFyZW50LFxuICAgIHBhdGhcbiAgfSkpO1xufTtcblxuZm9yIChjb25zdCBhbGlhcyBvZiBbJ2VxdWFscycsICdpcyddKSBCYXNlU2NoZW1hLnByb3RvdHlwZVthbGlhc10gPSBCYXNlU2NoZW1hLnByb3RvdHlwZS5vbmVPZjtcblxuZm9yIChjb25zdCBhbGlhcyBvZiBbJ25vdCcsICdub3BlJ10pIEJhc2VTY2hlbWEucHJvdG90eXBlW2FsaWFzXSA9IEJhc2VTY2hlbWEucHJvdG90eXBlLm5vdE9uZU9mO1xuXG5CYXNlU2NoZW1hLnByb3RvdHlwZS5vcHRpb25hbCA9IEJhc2VTY2hlbWEucHJvdG90eXBlLm5vdFJlcXVpcmVkOyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFFeEIsSUFBSUMsVUFBVSxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRTdELElBQUlDLE9BQU8sR0FBR0QsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUVqQyxJQUFJRSxVQUFVLEdBQUdILHNCQUFzQixDQUFDQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFFL0QsSUFBSUcsU0FBUyxHQUFHSixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7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