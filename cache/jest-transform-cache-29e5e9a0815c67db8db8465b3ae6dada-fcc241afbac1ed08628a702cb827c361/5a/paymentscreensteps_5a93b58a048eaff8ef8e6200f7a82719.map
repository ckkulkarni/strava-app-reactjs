{"version":3,"names":["_react","_interopRequireDefault","require","_react2","_reactRouterDom","_PaymentScreen","_toolkit","_parkingSlice","_reactRedux","obj","__esModule","default","describe","it","state","spaceDetails","registration","parkingTime","space","store","configureStore","reducer","parkingSpaces","parkingSlice","getByTestId","render","createElement","Provider","MemoryRouter","initialEntries","pathname","Routes","Route","path","element","regElement","expect","toHaveTextContent","parkingHoursElement","paymentElement"],"sources":["paymentscreen.steps.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { render, fireEvent, screen } from \"@testing-library/react\";\r\nimport { MemoryRouter, Route, Routes } from \"react-router-dom\";\r\nimport PaymentScreen from \"../../PaymentScreen\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport parkingSlice from \"./../../redux/reducer/parkingSlice\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"@testing-library/jest-dom/extend-expect\";\r\ndescribe(\"PaymentScreen\", () => {\r\n  it(\"displays the vehicle registration and hours parked for the occupied parking spot\", () => {\r\n    const state = {\r\n      spaceDetails: {\r\n        registration: \"ABC\",\r\n        parkingTime: \"10:00\",\r\n      },\r\n      space: \"1\",\r\n    };\r\n    const store = configureStore({\r\n      reducer: {\r\n        parkingSpaces: parkingSlice,\r\n      },\r\n    });\r\n    const { getByTestId } = render(\r\n      <Provider store={store}>\r\n        <MemoryRouter initialEntries={[{ pathname: \"/payment\", state }]}>\r\n          <Routes>\r\n            <Route path=\"/payment\" element={<PaymentScreen />} />\r\n          </Routes>\r\n        </MemoryRouter>\r\n      </Provider>\r\n    );\r\n\r\n    const regElement = getByTestId(\"reg\");\r\n    expect(regElement).toHaveTextContent(\"Vehicle Registration: ABC\");\r\n\r\n    const parkingHoursElement = getByTestId(\"parkingHours\");\r\n    expect(parkingHoursElement).toHaveTextContent(\"Hours Parked: 9\");\r\n\r\n    const paymentElement = getByTestId(\"payment\");\r\n    expect(paymentElement).toHaveTextContent(\"Parking Charge: $80\");\r\n  });\r\n});\r\n"],"mappings":";;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AACA,IAAAE,eAAA,GAAAF,OAAA;AACA,IAAAG,cAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,QAAA,GAAAJ,OAAA;AACA,IAAAK,aAAA,GAAAN,sBAAA,CAAAC,OAAA;AACA,IAAAM,WAAA,GAAAN,OAAA;AACAA,OAAA;AAAiD,SAAAD,uBAAAQ,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AACjDG,QAAQ,CAAC,eAAe,EAAE,MAAM;EAC9BC,EAAE,CAAC,kFAAkF,EAAE,MAAM;IAC3F,MAAMC,KAAK,GAAG;MACZC,YAAY,EAAE;QACZC,YAAY,EAAE,KAAK;QACnBC,WAAW,EAAE;MACf,CAAC;MACDC,KAAK,EAAE;IACT,CAAC;IACD,MAAMC,KAAK,GAAG,IAAAC,uBAAc,EAAC;MAC3BC,OAAO,EAAE;QACPC,aAAa,EAAEC;MACjB;IACF,CAAC,CAAC;IACF,MAAM;MAAEC;IAAY,CAAC,GAAG,IAAAC,cAAM,gBAC5BzB,MAAA,CAAAW,OAAA,CAAAe,aAAA,CAAClB,WAAA,CAAAmB,QAAQ;MAACR,KAAK,EAAEA;IAAM,gBACrBnB,MAAA,CAAAW,OAAA,CAAAe,aAAA,CAACtB,eAAA,CAAAwB,YAAY;MAACC,cAAc,EAAE,CAAC;QAAEC,QAAQ,EAAE,UAAU;QAAEhB;MAAM,CAAC;IAAE,gBAC9Dd,MAAA,CAAAW,OAAA,CAAAe,aAAA,CAACtB,eAAA,CAAA2B,MAAM,qBACL/B,MAAA,CAAAW,OAAA,CAAAe,aAAA,CAACtB,eAAA,CAAA4B,KAAK;MAACC,IAAI,EAAC,UAAU;MAACC,OAAO,eAAElC,MAAA,CAAAW,OAAA,CAAAe,aAAA,CAACrB,cAAA,CAAAM,OAAa;IAAI,EAAG,CAC9C,CACI,CACN,CACZ;IAED,MAAMwB,UAAU,GAAGX,WAAW,CAAC,KAAK,CAAC;IACrCY,MAAM,CAACD,UAAU,CAAC,CAACE,iBAAiB,CAAC,2BAA2B,CAAC;IAEjE,MAAMC,mBAAmB,GAAGd,WAAW,CAAC,cAAc,CAAC;IACvDY,MAAM,CAACE,mBAAmB,CAAC,CAACD,iBAAiB,CAAC,iBAAiB,CAAC;IAEhE,MAAME,cAAc,GAAGf,WAAW,CAAC,SAAS,CAAC;IAC7CY,MAAM,CAACG,cAAc,CAAC,CAACF,iBAAiB,CAAC,qBAAqB,CAAC;EACjE,CAAC,CAAC;AACJ,CAAC,CAAC"}