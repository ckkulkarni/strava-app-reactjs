579639fb4d8a8fe1ba0667819d34e61f
"use strict";

var _ParkingSpace = _interopRequireDefault(require("../../ParkingSpace"));
var _jestCucumber = require("jest-cucumber");
var _react = require("@testing-library/react");
var _react2 = _interopRequireDefault(require("react"));
require("text-encoding");
var _parkingSlice = _interopRequireWildcard(require("../../redux/reducer/parkingSlice"));
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _reactRouterDom = require("react-router-dom");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/parkingspace.feature");
let store;
(0, _jestCucumber.defineFeature)(feature, test => {
  test("Add a new parking space", ({
    given,
    when,
    then,
    and
  }) => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        parkingSpaces: _parkingSlice.default
      }
    });
    const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
    given("that there is a Parking Space Component", () => {
      expect(screen).toBeTruthy();
    });
    when('I click on the "Add Space" button', () => {
      const addSpace = screen.getAllByTestId("addSpace");
      _react.fireEvent.click(addSpace[0]);
    });
    then("a new parking space should be added to the list of available spaces", () => {
      const addSpace = screen.getAllByTestId("addSpace");
      _react.fireEvent.click(addSpace[0]);
      store.dispatch((0, _parkingSlice.addToParkingSpace)());
    });
  });
  test("Remove an existing parking space", ({
    given,
    when,
    then,
    and
  }) => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        parkingSpaces: _parkingSlice.default
      }
    });
    const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null)));
    given("that there is a Parking Space Component", () => {
      expect(screen).toBeTruthy();
    });
    and("there is more than one parking space available", () => {
      const addSpace = screen.getAllByTestId("addSpace");
      (0, _react.act)(() => {
        _react.fireEvent.click(addSpace[0]);
        store.dispatch((0, _parkingSlice.addToParkingSpace)());
      });
      const numSpaces = store.getState().parkingSpaces.numSpaces;
      expect(numSpaces).toBeGreaterThan(1);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,