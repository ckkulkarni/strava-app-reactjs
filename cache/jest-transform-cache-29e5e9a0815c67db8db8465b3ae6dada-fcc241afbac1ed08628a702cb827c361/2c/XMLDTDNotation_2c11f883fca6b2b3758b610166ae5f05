4518b4b8b048b0eaae47a1cbbe2b4e6b
"use strict";

// Generated by CoffeeScript 2.4.1
(function () {
  var NodeType, XMLDTDNotation, XMLNode;
  XMLNode = require('./XMLNode');
  NodeType = require('./NodeType');

  // Represents a NOTATION entry in the DTD
  module.exports = XMLDTDNotation = function () {
    class XMLDTDNotation extends XMLNode {
      // Initializes a new instance of `XMLDTDNotation`

      // `parent` the parent `XMLDocType` element
      // `name` the name of the notation
      // `value` an object with external entity details
      // `value.pubID` public identifier
      // `value.sysID` system identifier
      constructor(parent, name, value) {
        super(parent);
        if (name == null) {
          throw new Error("Missing DTD notation name. " + this.debugInfo(name));
        }
        if (!value.pubID && !value.sysID) {
          throw new Error("Public or system identifiers are required for an external entity. " + this.debugInfo(name));
        }
        this.name = this.stringify.name(name);
        this.type = NodeType.NotationDeclaration;
        if (value.pubID != null) {
          this.pubID = this.stringify.dtdPubID(value.pubID);
        }
        if (value.sysID != null) {
          this.sysID = this.stringify.dtdSysID(value.sysID);
        }
      }

      // Converts the XML fragment to string

      // `options.pretty` pretty prints the result
      // `options.indent` indentation for pretty print
      // `options.offset` how many indentations to add to every line for pretty print
      // `options.newline` newline sequence for pretty print
      toString(options) {
        return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));
      }
    }
    ;

    // DOM level 1
    Object.defineProperty(XMLDTDNotation.prototype, 'publicId', {
      get: function () {
        return this.pubID;
      }
    });
    Object.defineProperty(XMLDTDNotation.prototype, 'systemId', {
      get: function () {
        return this.sysID;
      }
    });
    return XMLDTDNotation;
  }.call(this);
}).call(void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlVHlwZSIsIlhNTERURE5vdGF0aW9uIiwiWE1MTm9kZSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29uc3RydWN0b3IiLCJwYXJlbnQiLCJuYW1lIiwidmFsdWUiLCJFcnJvciIsImRlYnVnSW5mbyIsInB1YklEIiwic3lzSUQiLCJzdHJpbmdpZnkiLCJ0eXBlIiwiTm90YXRpb25EZWNsYXJhdGlvbiIsImR0ZFB1YklEIiwiZHRkU3lzSUQiLCJ0b1N0cmluZyIsIm9wdGlvbnMiLCJ3cml0ZXIiLCJkdGROb3RhdGlvbiIsImZpbHRlck9wdGlvbnMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvdHlwZSIsImdldCIsImNhbGwiXSwic291cmNlcyI6WyJYTUxEVEROb3RhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDIuNC4xXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRFRETm90YXRpb24sIFhNTE5vZGU7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIC8vIFJlcHJlc2VudHMgYSBOT1RBVElPTiBlbnRyeSBpbiB0aGUgRFREXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRFRETm90YXRpb24gPSAoZnVuY3Rpb24oKSB7XG4gICAgY2xhc3MgWE1MRFRETm90YXRpb24gZXh0ZW5kcyBYTUxOb2RlIHtcbiAgICAgIC8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIGBYTUxEVEROb3RhdGlvbmBcblxuICAgICAgLy8gYHBhcmVudGAgdGhlIHBhcmVudCBgWE1MRG9jVHlwZWAgZWxlbWVudFxuICAgICAgLy8gYG5hbWVgIHRoZSBuYW1lIG9mIHRoZSBub3RhdGlvblxuICAgICAgLy8gYHZhbHVlYCBhbiBvYmplY3Qgd2l0aCBleHRlcm5hbCBlbnRpdHkgZGV0YWlsc1xuICAgICAgLy8gYHZhbHVlLnB1YklEYCBwdWJsaWMgaWRlbnRpZmllclxuICAgICAgLy8gYHZhbHVlLnN5c0lEYCBzeXN0ZW0gaWRlbnRpZmllclxuICAgICAgY29uc3RydWN0b3IocGFyZW50LCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICBzdXBlcihwYXJlbnQpO1xuICAgICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBEVEQgbm90YXRpb24gbmFtZS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhuYW1lKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF2YWx1ZS5wdWJJRCAmJiAhdmFsdWUuc3lzSUQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQdWJsaWMgb3Igc3lzdGVtIGlkZW50aWZpZXJzIGFyZSByZXF1aXJlZCBmb3IgYW4gZXh0ZXJuYWwgZW50aXR5LiBcIiArIHRoaXMuZGVidWdJbmZvKG5hbWUpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLnN0cmluZ2lmeS5uYW1lKG5hbWUpO1xuICAgICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5Ob3RhdGlvbkRlY2xhcmF0aW9uO1xuICAgICAgICBpZiAodmFsdWUucHViSUQgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMucHViSUQgPSB0aGlzLnN0cmluZ2lmeS5kdGRQdWJJRCh2YWx1ZS5wdWJJRCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlLnN5c0lEICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnN5c0lEID0gdGhpcy5zdHJpbmdpZnkuZHRkU3lzSUQodmFsdWUuc3lzSUQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENvbnZlcnRzIHRoZSBYTUwgZnJhZ21lbnQgdG8gc3RyaW5nXG5cbiAgICAgIC8vIGBvcHRpb25zLnByZXR0eWAgcHJldHR5IHByaW50cyB0aGUgcmVzdWx0XG4gICAgICAvLyBgb3B0aW9ucy5pbmRlbnRgIGluZGVudGF0aW9uIGZvciBwcmV0dHkgcHJpbnRcbiAgICAgIC8vIGBvcHRpb25zLm9mZnNldGAgaG93IG1hbnkgaW5kZW50YXRpb25zIHRvIGFkZCB0byBldmVyeSBsaW5lIGZvciBwcmV0dHkgcHJpbnRcbiAgICAgIC8vIGBvcHRpb25zLm5ld2xpbmVgIG5ld2xpbmUgc2VxdWVuY2UgZm9yIHByZXR0eSBwcmludFxuICAgICAgdG9TdHJpbmcob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5kdGROb3RhdGlvbih0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgICAgfVxuXG4gICAgfTtcblxuICAgIC8vIERPTSBsZXZlbCAxXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTERURE5vdGF0aW9uLnByb3RvdHlwZSwgJ3B1YmxpY0lkJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHViSUQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRFRETm90YXRpb24ucHJvdG90eXBlLCAnc3lzdGVtSWQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zeXNJRDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBYTUxEVEROb3RhdGlvbjtcblxuICB9KS5jYWxsKHRoaXMpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0EsQ0FBQyxZQUFXO0VBQ1YsSUFBSUEsUUFBUSxFQUFFQyxjQUFjLEVBQUVDLE9BQU87RUFFckNBLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFdBQVcsQ0FBQztFQUU5QkgsUUFBUSxHQUFHRyxPQUFPLENBQUMsWUFBWSxDQUFDOztFQUVoQztFQUNBQyxNQUFNLENBQUNDLE9BQU8sR0FBR0osY0FBYyxHQUFJLFlBQVc7SUFDNUMsTUFBTUEsY0FBYyxTQUFTQyxPQUFPLENBQUM7TUFDbkM7O01BRUE7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBSSxXQUFXQSxDQUFDQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFO1FBQy9CLEtBQUssQ0FBQ0YsTUFBTSxDQUFDO1FBQ2IsSUFBSUMsSUFBSSxJQUFJLElBQUksRUFBRTtVQUNoQixNQUFNLElBQUlFLEtBQUssQ0FBQyw2QkFBNkIsR0FBRyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0gsSUFBSSxDQUFDLENBQUM7UUFDdkU7UUFDQSxJQUFJLENBQUNDLEtBQUssQ0FBQ0csS0FBSyxJQUFJLENBQUNILEtBQUssQ0FBQ0ksS0FBSyxFQUFFO1VBQ2hDLE1BQU0sSUFBSUgsS0FBSyxDQUFDLG9FQUFvRSxHQUFHLElBQUksQ0FBQ0MsU0FBUyxDQUFDSCxJQUFJLENBQUMsQ0FBQztRQUM5RztRQUNBLElBQUksQ0FBQ0EsSUFBSSxHQUFHLElBQUksQ0FBQ00sU0FBUyxDQUFDTixJQUFJLENBQUNBLElBQUksQ0FBQztRQUNyQyxJQUFJLENBQUNPLElBQUksR0FBR2YsUUFBUSxDQUFDZ0IsbUJBQW1CO1FBQ3hDLElBQUlQLEtBQUssQ0FBQ0csS0FBSyxJQUFJLElBQUksRUFBRTtVQUN2QixJQUFJLENBQUNBLEtBQUssR0FBRyxJQUFJLENBQUNFLFNBQVMsQ0FBQ0csUUFBUSxDQUFDUixLQUFLLENBQUNHLEtBQUssQ0FBQztRQUNuRDtRQUNBLElBQUlILEtBQUssQ0FBQ0ksS0FBSyxJQUFJLElBQUksRUFBRTtVQUN2QixJQUFJLENBQUNBLEtBQUssR0FBRyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0ksUUFBUSxDQUFDVCxLQUFLLENBQUNJLEtBQUssQ0FBQztRQUNuRDtNQUNGOztNQUVBOztNQUVBO01BQ0E7TUFDQTtNQUNBO01BQ0FNLFFBQVFBLENBQUNDLE9BQU8sRUFBRTtRQUNoQixPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLENBQUNDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDRixPQUFPLENBQUNDLE1BQU0sQ0FBQ0UsYUFBYSxDQUFDSCxPQUFPLENBQUMsQ0FBQztNQUMxRjtJQUVGO0lBQUM7O0lBRUQ7SUFDQUksTUFBTSxDQUFDQyxjQUFjLENBQUN4QixjQUFjLENBQUN5QixTQUFTLEVBQUUsVUFBVSxFQUFFO01BQzFEQyxHQUFHLEVBQUUsU0FBQUEsQ0FBQSxFQUFXO1FBQ2QsT0FBTyxJQUFJLENBQUNmLEtBQUs7TUFDbkI7SUFDRixDQUFDLENBQUM7SUFFRlksTUFBTSxDQUFDQyxjQUFjLENBQUN4QixjQUFjLENBQUN5QixTQUFTLEVBQUUsVUFBVSxFQUFFO01BQzFEQyxHQUFHLEVBQUUsU0FBQUEsQ0FBQSxFQUFXO1FBQ2QsT0FBTyxJQUFJLENBQUNkLEtBQUs7TUFDbkI7SUFDRixDQUFDLENBQUM7SUFFRixPQUFPWixjQUFjO0VBRXZCLENBQUMsQ0FBRTJCLElBQUksQ0FBQyxJQUFJLENBQUM7QUFFZixDQUFDLEVBQUVBLElBQUksUUFBTSJ9