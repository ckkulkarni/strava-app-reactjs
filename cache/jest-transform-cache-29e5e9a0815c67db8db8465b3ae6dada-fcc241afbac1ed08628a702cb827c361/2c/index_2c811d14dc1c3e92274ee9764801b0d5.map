{"version":3,"names":["build_parameter_type_1","require","get_definition_line_and_uri_1","test_case_hook_definition_1","__importDefault","test_step_hook_definition_1","test_run_hook_definition_1","step_definition_1","helpers_1","validate_arguments_1","util_arity_1","cucumber_expressions_1","value_checker_1","world_1","exports","builtinParameterTypes","SupportCodeLibraryBuilder","constructor","methods","After","defineTestCaseHook","afterTestCaseHookDefinitionConfigs","AfterAll","defineTestRunHook","afterTestRunHookDefinitionConfigs","AfterStep","defineTestStepHook","afterTestStepHookDefinitionConfigs","Before","beforeTestCaseHookDefinitionConfigs","BeforeAll","beforeTestRunHookDefinitionConfigs","BeforeStep","beforeTestStepHookDefinitionConfigs","defineParameterType","bind","defineStep","stepDefinitionConfigs","Given","setDefaultTimeout","milliseconds","defaultTimeout","setDefinitionFunctionWrapper","fn","definitionFunctionWrapper","setWorldConstructor","World","setParallelCanAssign","parallelCanAssign","Then","When","checkInstall","method","doesNotHaveValue","cwd","Error","Proxy","get","target","args","options","parameterType","buildParameterType","parameterTypeRegistry","keyword","getCollection","pattern","code","line","uri","getDefinitionLineAndUri","default","fnName","location","formatLocation","push","tags","wrapCode","wrapperOptions","doesHaveValue","codeLength","length","wrappedCode","buildTestCaseHookDefinitions","configs","canonicalIds","map","index","id","newId","unwrappedCode","buildTestStepHookDefinitions","buildTestRunHookDefinitions","buildStepDefinitions","stepDefinitions","undefinedParameterTypes","forEach","expression","CucumberExpression","e","undefinedParameterTypeName","name","RegularExpression","finalize","stepDefinitionsResult","stepDefinitionIds","originalCoordinates","afterTestCaseHookDefinitions","afterTestCaseHookDefinitionIds","afterTestRunHookDefinitions","afterTestStepHookDefinitions","beforeTestCaseHookDefinitions","beforeTestCaseHookDefinitionIds","beforeTestRunHookDefinitions","beforeTestStepHookDefinitions","reset","requireModules","requirePaths","importPaths","ParameterTypeRegistry"],"sources":["../../src/support_code_library_builder/index.ts"],"sourcesContent":["import { buildParameterType } from './build_parameter_type'\nimport { getDefinitionLineAndUri } from './get_definition_line_and_uri'\nimport { IdGenerator } from '@cucumber/messages'\nimport * as messages from '@cucumber/messages'\nimport TestCaseHookDefinition from '../models/test_case_hook_definition'\nimport TestStepHookDefinition from '../models/test_step_hook_definition'\nimport TestRunHookDefinition from '../models/test_run_hook_definition'\nimport StepDefinition from '../models/step_definition'\nimport { formatLocation } from '../formatter/helpers'\nimport validateArguments from './validate_arguments'\nimport arity from 'util-arity'\n\nimport {\n  CucumberExpression,\n  ParameterTypeRegistry,\n  RegularExpression,\n} from '@cucumber/cucumber-expressions'\nimport { doesHaveValue, doesNotHaveValue } from '../value_checker'\nimport {\n  DefineStepPattern,\n  IDefineStepOptions,\n  IDefineSupportCodeMethods,\n  IDefineTestCaseHookOptions,\n  IDefineTestStepHookOptions,\n  IDefineTestRunHookOptions,\n  IParameterTypeDefinition,\n  ISupportCodeLibrary,\n  TestCaseHookFunction,\n  TestStepHookFunction,\n  ParallelAssignmentValidator,\n  ISupportCodeCoordinates,\n  IDefineStep,\n} from './types'\nimport World from './world'\nimport { ICanonicalSupportCodeIds } from '../runtime/parallel/command_types'\nimport { GherkinStepKeyword } from '../models/gherkin_step_keyword'\n\ninterface IStepDefinitionConfig {\n  code: any\n  line: number\n  options: any\n  keyword: GherkinStepKeyword\n  pattern: string | RegExp\n  uri: string\n}\n\ninterface ITestCaseHookDefinitionConfig {\n  code: any\n  line: number\n  options: any\n  uri: string\n}\n\ninterface ITestStepHookDefinitionConfig {\n  code: any\n  line: number\n  options: any\n  uri: string\n}\n\ninterface ITestRunHookDefinitionConfig {\n  code: any\n  line: number\n  options: any\n  uri: string\n}\n\nexport const builtinParameterTypes = [\n  'bigdecimal',\n  'biginteger',\n  'byte',\n  'double',\n  'float',\n  'int',\n  'long',\n  'short',\n  'string',\n  'word',\n  '',\n]\n\nexport class SupportCodeLibraryBuilder {\n  public readonly methods: IDefineSupportCodeMethods\n\n  private originalCoordinates: ISupportCodeCoordinates\n  private afterTestCaseHookDefinitionConfigs: ITestCaseHookDefinitionConfig[]\n  private afterTestRunHookDefinitionConfigs: ITestRunHookDefinitionConfig[]\n  private afterTestStepHookDefinitionConfigs: ITestStepHookDefinitionConfig[]\n  private beforeTestCaseHookDefinitionConfigs: ITestCaseHookDefinitionConfig[]\n  private beforeTestRunHookDefinitionConfigs: ITestRunHookDefinitionConfig[]\n  private beforeTestStepHookDefinitionConfigs: ITestStepHookDefinitionConfig[]\n  private cwd: string\n  private defaultTimeout: number\n  private definitionFunctionWrapper: any\n  private newId: IdGenerator.NewId\n  private parameterTypeRegistry: ParameterTypeRegistry\n  private stepDefinitionConfigs: IStepDefinitionConfig[]\n  private World: any\n  private parallelCanAssign: ParallelAssignmentValidator\n\n  constructor() {\n    const methods: IDefineSupportCodeMethods = {\n      After: this.defineTestCaseHook(\n        () => this.afterTestCaseHookDefinitionConfigs\n      ),\n      AfterAll: this.defineTestRunHook(\n        () => this.afterTestRunHookDefinitionConfigs\n      ),\n      AfterStep: this.defineTestStepHook(\n        () => this.afterTestStepHookDefinitionConfigs\n      ),\n      Before: this.defineTestCaseHook(\n        () => this.beforeTestCaseHookDefinitionConfigs\n      ),\n      BeforeAll: this.defineTestRunHook(\n        () => this.beforeTestRunHookDefinitionConfigs\n      ),\n      BeforeStep: this.defineTestStepHook(\n        () => this.beforeTestStepHookDefinitionConfigs\n      ),\n      defineParameterType: this.defineParameterType.bind(this),\n      defineStep: this.defineStep('Unknown', () => this.stepDefinitionConfigs),\n      Given: this.defineStep('Given', () => this.stepDefinitionConfigs),\n      setDefaultTimeout: (milliseconds) => {\n        this.defaultTimeout = milliseconds\n      },\n      setDefinitionFunctionWrapper: (fn) => {\n        this.definitionFunctionWrapper = fn\n      },\n      setWorldConstructor: (fn) => {\n        this.World = fn\n      },\n      setParallelCanAssign: (fn: ParallelAssignmentValidator): void => {\n        this.parallelCanAssign = fn\n      },\n      Then: this.defineStep('Then', () => this.stepDefinitionConfigs),\n      When: this.defineStep('When', () => this.stepDefinitionConfigs),\n    }\n    const checkInstall = (method: string) => {\n      if (doesNotHaveValue(this.cwd)) {\n        throw new Error(\n          `\n          You're calling functions (e.g. \"${method}\") on an instance of Cucumber that isn't running.\n          This means you have an invalid installation, mostly likely due to:\n          - Cucumber being installed globally\n          - A project structure where your support code is depending on a different instance of Cucumber\n          Either way, you'll need to address this in order for Cucumber to work.\n          See https://github.com/cucumber/cucumber-js/blob/main/docs/installation.md#invalid-installations\n          `\n        )\n      }\n    }\n    this.methods = new Proxy(methods, {\n      get(\n        target: IDefineSupportCodeMethods,\n        method: keyof IDefineSupportCodeMethods\n      ): any {\n        return (...args: any[]) => {\n          checkInstall(method)\n          // @ts-expect-error difficult to type this correctly\n          return target[method](...args)\n        }\n      },\n    })\n  }\n\n  defineParameterType(options: IParameterTypeDefinition<any>): void {\n    const parameterType = buildParameterType(options)\n    this.parameterTypeRegistry.defineParameterType(parameterType)\n  }\n\n  defineStep(\n    keyword: GherkinStepKeyword,\n    getCollection: () => IStepDefinitionConfig[]\n  ): IDefineStep {\n    return (\n      pattern: DefineStepPattern,\n      options: IDefineStepOptions | Function,\n      code?: Function\n    ) => {\n      if (typeof options === 'function') {\n        code = options\n        options = {}\n      }\n      const { line, uri } = getDefinitionLineAndUri(this.cwd)\n      validateArguments({\n        args: { code, pattern, options },\n        fnName: 'defineStep',\n        location: formatLocation({ line, uri }),\n      })\n      getCollection().push({\n        code,\n        line,\n        options,\n        keyword,\n        pattern,\n        uri,\n      })\n    }\n  }\n\n  defineTestCaseHook(\n    getCollection: () => ITestCaseHookDefinitionConfig[]\n  ): <WorldType>(\n    options:\n      | string\n      | IDefineTestCaseHookOptions\n      | TestCaseHookFunction<WorldType>,\n    code?: TestCaseHookFunction<WorldType>\n  ) => void {\n    return <WorldType>(\n      options:\n        | string\n        | IDefineTestCaseHookOptions\n        | TestCaseHookFunction<WorldType>,\n      code?: TestCaseHookFunction<WorldType>\n    ) => {\n      if (typeof options === 'string') {\n        options = { tags: options }\n      } else if (typeof options === 'function') {\n        code = options\n        options = {}\n      }\n      const { line, uri } = getDefinitionLineAndUri(this.cwd)\n      validateArguments({\n        args: { code, options },\n        fnName: 'defineTestCaseHook',\n        location: formatLocation({ line, uri }),\n      })\n      getCollection().push({\n        code,\n        line,\n        options,\n        uri,\n      })\n    }\n  }\n\n  defineTestStepHook(\n    getCollection: () => ITestStepHookDefinitionConfig[]\n  ): <WorldType>(\n    options:\n      | string\n      | IDefineTestStepHookOptions\n      | TestStepHookFunction<WorldType>,\n    code?: TestStepHookFunction<WorldType>\n  ) => void {\n    return <WorldType>(\n      options:\n        | string\n        | IDefineTestStepHookOptions\n        | TestStepHookFunction<WorldType>,\n      code?: TestStepHookFunction<WorldType>\n    ) => {\n      if (typeof options === 'string') {\n        options = { tags: options }\n      } else if (typeof options === 'function') {\n        code = options\n        options = {}\n      }\n      const { line, uri } = getDefinitionLineAndUri(this.cwd)\n      validateArguments({\n        args: { code, options },\n        fnName: 'defineTestStepHook',\n        location: formatLocation({ line, uri }),\n      })\n      getCollection().push({\n        code,\n        line,\n        options,\n        uri,\n      })\n    }\n  }\n\n  defineTestRunHook(\n    getCollection: () => ITestRunHookDefinitionConfig[]\n  ): (options: IDefineTestRunHookOptions | Function, code?: Function) => void {\n    return (options: IDefineTestRunHookOptions | Function, code?: Function) => {\n      if (typeof options === 'function') {\n        code = options\n        options = {}\n      }\n      const { line, uri } = getDefinitionLineAndUri(this.cwd)\n      validateArguments({\n        args: { code, options },\n        fnName: 'defineTestRunHook',\n        location: formatLocation({ line, uri }),\n      })\n      getCollection().push({\n        code,\n        line,\n        options,\n        uri,\n      })\n    }\n  }\n\n  wrapCode({\n    code,\n    wrapperOptions,\n  }: {\n    code: Function\n    wrapperOptions: any\n  }): Function {\n    if (doesHaveValue(this.definitionFunctionWrapper)) {\n      const codeLength = code.length\n      const wrappedCode = this.definitionFunctionWrapper(code, wrapperOptions)\n      if (wrappedCode !== code) {\n        return arity(codeLength, wrappedCode)\n      }\n      return wrappedCode\n    }\n    return code\n  }\n\n  buildTestCaseHookDefinitions(\n    configs: ITestCaseHookDefinitionConfig[],\n    canonicalIds?: string[]\n  ): TestCaseHookDefinition[] {\n    return configs.map(({ code, line, options, uri }, index) => {\n      const wrappedCode = this.wrapCode({\n        code,\n        wrapperOptions: options.wrapperOptions,\n      })\n      return new TestCaseHookDefinition({\n        code: wrappedCode,\n        id: canonicalIds ? canonicalIds[index] : this.newId(),\n        line,\n        options,\n        unwrappedCode: code,\n        uri,\n      })\n    })\n  }\n\n  buildTestStepHookDefinitions(\n    configs: ITestStepHookDefinitionConfig[]\n  ): TestStepHookDefinition[] {\n    return configs.map(({ code, line, options, uri }) => {\n      const wrappedCode = this.wrapCode({\n        code,\n        wrapperOptions: options.wrapperOptions,\n      })\n      return new TestStepHookDefinition({\n        code: wrappedCode,\n        id: this.newId(),\n        line,\n        options,\n        unwrappedCode: code,\n        uri,\n      })\n    })\n  }\n\n  buildTestRunHookDefinitions(\n    configs: ITestRunHookDefinitionConfig[]\n  ): TestRunHookDefinition[] {\n    return configs.map(({ code, line, options, uri }) => {\n      const wrappedCode = this.wrapCode({\n        code,\n        wrapperOptions: options.wrapperOptions,\n      })\n      return new TestRunHookDefinition({\n        code: wrappedCode,\n        id: this.newId(),\n        line,\n        options,\n        unwrappedCode: code,\n        uri,\n      })\n    })\n  }\n\n  buildStepDefinitions(canonicalIds?: string[]): {\n    stepDefinitions: StepDefinition[]\n    undefinedParameterTypes: messages.UndefinedParameterType[]\n  } {\n    const stepDefinitions: StepDefinition[] = []\n    const undefinedParameterTypes: messages.UndefinedParameterType[] = []\n    this.stepDefinitionConfigs.forEach(\n      ({ code, line, options, keyword, pattern, uri }, index) => {\n        let expression\n        if (typeof pattern === 'string') {\n          try {\n            expression = new CucumberExpression(\n              pattern,\n              this.parameterTypeRegistry\n            )\n          } catch (e) {\n            if (doesHaveValue(e.undefinedParameterTypeName)) {\n              undefinedParameterTypes.push({\n                name: e.undefinedParameterTypeName,\n                expression: pattern,\n              })\n              return\n            }\n            throw e\n          }\n        } else {\n          expression = new RegularExpression(\n            pattern,\n            this.parameterTypeRegistry\n          )\n        }\n\n        const wrappedCode = this.wrapCode({\n          code,\n          wrapperOptions: options.wrapperOptions,\n        })\n        stepDefinitions.push(\n          new StepDefinition({\n            code: wrappedCode,\n            expression,\n            id: canonicalIds ? canonicalIds[index] : this.newId(),\n            line,\n            options,\n            keyword,\n            pattern,\n            unwrappedCode: code,\n            uri,\n          })\n        )\n      }\n    )\n    return { stepDefinitions, undefinedParameterTypes }\n  }\n\n  finalize(canonicalIds?: ICanonicalSupportCodeIds): ISupportCodeLibrary {\n    const stepDefinitionsResult = this.buildStepDefinitions(\n      canonicalIds?.stepDefinitionIds\n    )\n    return {\n      originalCoordinates: this.originalCoordinates,\n      afterTestCaseHookDefinitions: this.buildTestCaseHookDefinitions(\n        this.afterTestCaseHookDefinitionConfigs,\n        canonicalIds?.afterTestCaseHookDefinitionIds\n      ),\n      afterTestRunHookDefinitions: this.buildTestRunHookDefinitions(\n        this.afterTestRunHookDefinitionConfigs\n      ),\n      afterTestStepHookDefinitions: this.buildTestStepHookDefinitions(\n        this.afterTestStepHookDefinitionConfigs\n      ),\n      beforeTestCaseHookDefinitions: this.buildTestCaseHookDefinitions(\n        this.beforeTestCaseHookDefinitionConfigs,\n        canonicalIds?.beforeTestCaseHookDefinitionIds\n      ),\n      beforeTestRunHookDefinitions: this.buildTestRunHookDefinitions(\n        this.beforeTestRunHookDefinitionConfigs\n      ),\n      beforeTestStepHookDefinitions: this.buildTestStepHookDefinitions(\n        this.beforeTestStepHookDefinitionConfigs\n      ),\n      defaultTimeout: this.defaultTimeout,\n      parameterTypeRegistry: this.parameterTypeRegistry,\n      undefinedParameterTypes: stepDefinitionsResult.undefinedParameterTypes,\n      stepDefinitions: stepDefinitionsResult.stepDefinitions,\n      World: this.World,\n      parallelCanAssign: this.parallelCanAssign,\n    }\n  }\n\n  reset(\n    cwd: string,\n    newId: IdGenerator.NewId,\n    originalCoordinates: ISupportCodeCoordinates = {\n      requireModules: [],\n      requirePaths: [],\n      importPaths: [],\n    }\n  ): void {\n    this.cwd = cwd\n    this.newId = newId\n    this.originalCoordinates = originalCoordinates\n    this.afterTestCaseHookDefinitionConfigs = []\n    this.afterTestRunHookDefinitionConfigs = []\n    this.afterTestStepHookDefinitionConfigs = []\n    this.beforeTestCaseHookDefinitionConfigs = []\n    this.beforeTestRunHookDefinitionConfigs = []\n    this.beforeTestStepHookDefinitionConfigs = []\n    this.definitionFunctionWrapper = null\n    this.defaultTimeout = 5000\n    this.parameterTypeRegistry = new ParameterTypeRegistry()\n    this.stepDefinitionConfigs = []\n    this.parallelCanAssign = () => true\n    this.World = World\n  }\n}\n\nexport default new SupportCodeLibraryBuilder()\n"],"mappings":";;;;;;;;;;;AAAA,MAAAA,sBAAA,GAAAC,OAAA;AACA,MAAAC,6BAAA,GAAAD,OAAA;AAGA,MAAAE,2BAAA,GAAAC,eAAA,CAAAH,OAAA;AACA,MAAAI,2BAAA,GAAAD,eAAA,CAAAH,OAAA;AACA,MAAAK,0BAAA,GAAAF,eAAA,CAAAH,OAAA;AACA,MAAAM,iBAAA,GAAAH,eAAA,CAAAH,OAAA;AACA,MAAAO,SAAA,GAAAP,OAAA;AACA,MAAAQ,oBAAA,GAAAL,eAAA,CAAAH,OAAA;AACA,MAAAS,YAAA,GAAAN,eAAA,CAAAH,OAAA;AAEA,MAAAU,sBAAA,GAAAV,OAAA;AAKA,MAAAW,eAAA,GAAAX,OAAA;AAgBA,MAAAY,OAAA,GAAAT,eAAA,CAAAH,OAAA;AAkCaa,OAAA,CAAAC,qBAAqB,GAAG,CACnC,YAAY,EACZ,YAAY,EACZ,MAAM,EACN,QAAQ,EACR,OAAO,EACP,KAAK,EACL,MAAM,EACN,OAAO,EACP,QAAQ,EACR,MAAM,EACN,EAAE,CACH;AAED,MAAaC,yBAAyB;EAmBpCC,YAAA;IACE,MAAMC,OAAO,GAA8B;MACzCC,KAAK,EAAE,IAAI,CAACC,kBAAkB,CAC5B,MAAM,IAAI,CAACC,kCAAkC,CAC9C;MACDC,QAAQ,EAAE,IAAI,CAACC,iBAAiB,CAC9B,MAAM,IAAI,CAACC,iCAAiC,CAC7C;MACDC,SAAS,EAAE,IAAI,CAACC,kBAAkB,CAChC,MAAM,IAAI,CAACC,kCAAkC,CAC9C;MACDC,MAAM,EAAE,IAAI,CAACR,kBAAkB,CAC7B,MAAM,IAAI,CAACS,mCAAmC,CAC/C;MACDC,SAAS,EAAE,IAAI,CAACP,iBAAiB,CAC/B,MAAM,IAAI,CAACQ,kCAAkC,CAC9C;MACDC,UAAU,EAAE,IAAI,CAACN,kBAAkB,CACjC,MAAM,IAAI,CAACO,mCAAmC,CAC/C;MACDC,mBAAmB,EAAE,IAAI,CAACA,mBAAmB,CAACC,IAAI,CAAC,IAAI,CAAC;MACxDC,UAAU,EAAE,IAAI,CAACA,UAAU,CAAC,SAAS,EAAE,MAAM,IAAI,CAACC,qBAAqB,CAAC;MACxEC,KAAK,EAAE,IAAI,CAACF,UAAU,CAAC,OAAO,EAAE,MAAM,IAAI,CAACC,qBAAqB,CAAC;MACjEE,iBAAiB,EAAGC,YAAY,IAAI;QAClC,IAAI,CAACC,cAAc,GAAGD,YAAY;MACpC,CAAC;MACDE,4BAA4B,EAAGC,EAAE,IAAI;QACnC,IAAI,CAACC,yBAAyB,GAAGD,EAAE;MACrC,CAAC;MACDE,mBAAmB,EAAGF,EAAE,IAAI;QAC1B,IAAI,CAACG,KAAK,GAAGH,EAAE;MACjB,CAAC;MACDI,oBAAoB,EAAGJ,EAA+B,IAAU;QAC9D,IAAI,CAACK,iBAAiB,GAAGL,EAAE;MAC7B,CAAC;MACDM,IAAI,EAAE,IAAI,CAACb,UAAU,CAAC,MAAM,EAAE,MAAM,IAAI,CAACC,qBAAqB,CAAC;MAC/Da,IAAI,EAAE,IAAI,CAACd,UAAU,CAAC,MAAM,EAAE,MAAM,IAAI,CAACC,qBAAqB;KAC/D;IACD,MAAMc,YAAY,GAAIC,MAAc,IAAI;MACtC,IAAI,IAAAxC,eAAA,CAAAyC,gBAAgB,EAAC,IAAI,CAACC,GAAG,CAAC,EAAE;QAC9B,MAAM,IAAIC,KAAK,CACb;4CACkCH,MAAM;;;;;;WAMvC,CACF;;IAEL,CAAC;IACD,IAAI,CAAClC,OAAO,GAAG,IAAIsC,KAAK,CAACtC,OAAO,EAAE;MAChCuC,GAAGA,CACDC,MAAiC,EACjCN,MAAuC;QAEvC,OAAO,CAAC,GAAGO,IAAW,KAAI;UACxBR,YAAY,CAACC,MAAM,CAAC;UACpB;UACA,OAAOM,MAAM,CAACN,MAAM,CAAC,CAAC,GAAGO,IAAI,CAAC;QAChC,CAAC;MACH;KACD,CAAC;EACJ;EAEAzB,mBAAmBA,CAAC0B,OAAsC;IACxD,MAAMC,aAAa,GAAG,IAAA7D,sBAAA,CAAA8D,kBAAkB,EAACF,OAAO,CAAC;IACjD,IAAI,CAACG,qBAAqB,CAAC7B,mBAAmB,CAAC2B,aAAa,CAAC;EAC/D;EAEAzB,UAAUA,CACR4B,OAA2B,EAC3BC,aAA4C;IAE5C,OAAO,CACLC,OAA0B,EAC1BN,OAAsC,EACtCO,IAAe,KACb;MACF,IAAI,OAAOP,OAAO,KAAK,UAAU,EAAE;QACjCO,IAAI,GAAGP,OAAO;QACdA,OAAO,GAAG,EAAE;;MAEd,MAAM;QAAEQ,IAAI;QAAEC;MAAG,CAAE,GAAG,IAAAnE,6BAAA,CAAAoE,uBAAuB,EAAC,IAAI,CAAChB,GAAG,CAAC;MACvD,IAAA7C,oBAAA,CAAA8D,OAAiB,EAAC;QAChBZ,IAAI,EAAE;UAAEQ,IAAI;UAAED,OAAO;UAAEN;QAAO,CAAE;QAChCY,MAAM,EAAE,YAAY;QACpBC,QAAQ,EAAE,IAAAjE,SAAA,CAAAkE,cAAc,EAAC;UAAEN,IAAI;UAAEC;QAAG,CAAE;OACvC,CAAC;MACFJ,aAAa,EAAE,CAACU,IAAI,CAAC;QACnBR,IAAI;QACJC,IAAI;QACJR,OAAO;QACPI,OAAO;QACPE,OAAO;QACPG;OACD,CAAC;IACJ,CAAC;EACH;EAEAjD,kBAAkBA,CAChB6C,aAAoD;IAQpD,OAAO,CACLL,OAGmC,EACnCO,IAAsC,KACpC;MACF,IAAI,OAAOP,OAAO,KAAK,QAAQ,EAAE;QAC/BA,OAAO,GAAG;UAAEgB,IAAI,EAAEhB;QAAO,CAAE;OAC5B,MAAM,IAAI,OAAOA,OAAO,KAAK,UAAU,EAAE;QACxCO,IAAI,GAAGP,OAAO;QACdA,OAAO,GAAG,EAAE;;MAEd,MAAM;QAAEQ,IAAI;QAAEC;MAAG,CAAE,GAAG,IAAAnE,6BAAA,CAAAoE,uBAAuB,EAAC,IAAI,CAAChB,GAAG,CAAC;MACvD,IAAA7C,oBAAA,CAAA8D,OAAiB,EAAC;QAChBZ,IAAI,EAAE;UAAEQ,IAAI;UAAEP;QAAO,CAAE;QACvBY,MAAM,EAAE,oBAAoB;QAC5BC,QAAQ,EAAE,IAAAjE,SAAA,CAAAkE,cAAc,EAAC;UAAEN,IAAI;UAAEC;QAAG,CAAE;OACvC,CAAC;MACFJ,aAAa,EAAE,CAACU,IAAI,CAAC;QACnBR,IAAI;QACJC,IAAI;QACJR,OAAO;QACPS;OACD,CAAC;IACJ,CAAC;EACH;EAEA3C,kBAAkBA,CAChBuC,aAAoD;IAQpD,OAAO,CACLL,OAGmC,EACnCO,IAAsC,KACpC;MACF,IAAI,OAAOP,OAAO,KAAK,QAAQ,EAAE;QAC/BA,OAAO,GAAG;UAAEgB,IAAI,EAAEhB;QAAO,CAAE;OAC5B,MAAM,IAAI,OAAOA,OAAO,KAAK,UAAU,EAAE;QACxCO,IAAI,GAAGP,OAAO;QACdA,OAAO,GAAG,EAAE;;MAEd,MAAM;QAAEQ,IAAI;QAAEC;MAAG,CAAE,GAAG,IAAAnE,6BAAA,CAAAoE,uBAAuB,EAAC,IAAI,CAAChB,GAAG,CAAC;MACvD,IAAA7C,oBAAA,CAAA8D,OAAiB,EAAC;QAChBZ,IAAI,EAAE;UAAEQ,IAAI;UAAEP;QAAO,CAAE;QACvBY,MAAM,EAAE,oBAAoB;QAC5BC,QAAQ,EAAE,IAAAjE,SAAA,CAAAkE,cAAc,EAAC;UAAEN,IAAI;UAAEC;QAAG,CAAE;OACvC,CAAC;MACFJ,aAAa,EAAE,CAACU,IAAI,CAAC;QACnBR,IAAI;QACJC,IAAI;QACJR,OAAO;QACPS;OACD,CAAC;IACJ,CAAC;EACH;EAEA9C,iBAAiBA,CACf0C,aAAmD;IAEnD,OAAO,CAACL,OAA6C,EAAEO,IAAe,KAAI;MACxE,IAAI,OAAOP,OAAO,KAAK,UAAU,EAAE;QACjCO,IAAI,GAAGP,OAAO;QACdA,OAAO,GAAG,EAAE;;MAEd,MAAM;QAAEQ,IAAI;QAAEC;MAAG,CAAE,GAAG,IAAAnE,6BAAA,CAAAoE,uBAAuB,EAAC,IAAI,CAAChB,GAAG,CAAC;MACvD,IAAA7C,oBAAA,CAAA8D,OAAiB,EAAC;QAChBZ,IAAI,EAAE;UAAEQ,IAAI;UAAEP;QAAO,CAAE;QACvBY,MAAM,EAAE,mBAAmB;QAC3BC,QAAQ,EAAE,IAAAjE,SAAA,CAAAkE,cAAc,EAAC;UAAEN,IAAI;UAAEC;QAAG,CAAE;OACvC,CAAC;MACFJ,aAAa,EAAE,CAACU,IAAI,CAAC;QACnBR,IAAI;QACJC,IAAI;QACJR,OAAO;QACPS;OACD,CAAC;IACJ,CAAC;EACH;EAEAQ,QAAQA,CAAC;IACPV,IAAI;IACJW;EAAc,CAIf;IACC,IAAI,IAAAlE,eAAA,CAAAmE,aAAa,EAAC,IAAI,CAACnC,yBAAyB,CAAC,EAAE;MACjD,MAAMoC,UAAU,GAAGb,IAAI,CAACc,MAAM;MAC9B,MAAMC,WAAW,GAAG,IAAI,CAACtC,yBAAyB,CAACuB,IAAI,EAAEW,cAAc,CAAC;MACxE,IAAII,WAAW,KAAKf,IAAI,EAAE;QACxB,OAAO,IAAAzD,YAAA,CAAA6D,OAAK,EAACS,UAAU,EAAEE,WAAW,CAAC;;MAEvC,OAAOA,WAAW;;IAEpB,OAAOf,IAAI;EACb;EAEAgB,4BAA4BA,CAC1BC,OAAwC,EACxCC,YAAuB;IAEvB,OAAOD,OAAO,CAACE,GAAG,CAAC,CAAC;MAAEnB,IAAI;MAAEC,IAAI;MAAER,OAAO;MAAES;IAAG,CAAE,EAAEkB,KAAK,KAAI;MACzD,MAAML,WAAW,GAAG,IAAI,CAACL,QAAQ,CAAC;QAChCV,IAAI;QACJW,cAAc,EAAElB,OAAO,CAACkB;OACzB,CAAC;MACF,OAAO,IAAI3E,2BAAA,CAAAoE,OAAsB,CAAC;QAChCJ,IAAI,EAAEe,WAAW;QACjBM,EAAE,EAAEH,YAAY,GAAGA,YAAY,CAACE,KAAK,CAAC,GAAG,IAAI,CAACE,KAAK,EAAE;QACrDrB,IAAI;QACJR,OAAO;QACP8B,aAAa,EAAEvB,IAAI;QACnBE;OACD,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAsB,4BAA4BA,CAC1BP,OAAwC;IAExC,OAAOA,OAAO,CAACE,GAAG,CAAC,CAAC;MAAEnB,IAAI;MAAEC,IAAI;MAAER,OAAO;MAAES;IAAG,CAAE,KAAI;MAClD,MAAMa,WAAW,GAAG,IAAI,CAACL,QAAQ,CAAC;QAChCV,IAAI;QACJW,cAAc,EAAElB,OAAO,CAACkB;OACzB,CAAC;MACF,OAAO,IAAIzE,2BAAA,CAAAkE,OAAsB,CAAC;QAChCJ,IAAI,EAAEe,WAAW;QACjBM,EAAE,EAAE,IAAI,CAACC,KAAK,EAAE;QAChBrB,IAAI;QACJR,OAAO;QACP8B,aAAa,EAAEvB,IAAI;QACnBE;OACD,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAuB,2BAA2BA,CACzBR,OAAuC;IAEvC,OAAOA,OAAO,CAACE,GAAG,CAAC,CAAC;MAAEnB,IAAI;MAAEC,IAAI;MAAER,OAAO;MAAES;IAAG,CAAE,KAAI;MAClD,MAAMa,WAAW,GAAG,IAAI,CAACL,QAAQ,CAAC;QAChCV,IAAI;QACJW,cAAc,EAAElB,OAAO,CAACkB;OACzB,CAAC;MACF,OAAO,IAAIxE,0BAAA,CAAAiE,OAAqB,CAAC;QAC/BJ,IAAI,EAAEe,WAAW;QACjBM,EAAE,EAAE,IAAI,CAACC,KAAK,EAAE;QAChBrB,IAAI;QACJR,OAAO;QACP8B,aAAa,EAAEvB,IAAI;QACnBE;OACD,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAwB,oBAAoBA,CAACR,YAAuB;IAI1C,MAAMS,eAAe,GAAqB,EAAE;IAC5C,MAAMC,uBAAuB,GAAsC,EAAE;IACrE,IAAI,CAAC1D,qBAAqB,CAAC2D,OAAO,CAChC,CAAC;MAAE7B,IAAI;MAAEC,IAAI;MAAER,OAAO;MAAEI,OAAO;MAAEE,OAAO;MAAEG;IAAG,CAAE,EAAEkB,KAAK,KAAI;MACxD,IAAIU,UAAU;MACd,IAAI,OAAO/B,OAAO,KAAK,QAAQ,EAAE;QAC/B,IAAI;UACF+B,UAAU,GAAG,IAAItF,sBAAA,CAAAuF,kBAAkB,CACjChC,OAAO,EACP,IAAI,CAACH,qBAAqB,CAC3B;SACF,CAAC,OAAOoC,CAAC,EAAE;UACV,IAAI,IAAAvF,eAAA,CAAAmE,aAAa,EAACoB,CAAC,CAACC,0BAA0B,CAAC,EAAE;YAC/CL,uBAAuB,CAACpB,IAAI,CAAC;cAC3B0B,IAAI,EAAEF,CAAC,CAACC,0BAA0B;cAClCH,UAAU,EAAE/B;aACb,CAAC;YACF;;UAEF,MAAMiC,CAAC;;OAEV,MAAM;QACLF,UAAU,GAAG,IAAItF,sBAAA,CAAA2F,iBAAiB,CAChCpC,OAAO,EACP,IAAI,CAACH,qBAAqB,CAC3B;;MAGH,MAAMmB,WAAW,GAAG,IAAI,CAACL,QAAQ,CAAC;QAChCV,IAAI;QACJW,cAAc,EAAElB,OAAO,CAACkB;OACzB,CAAC;MACFgB,eAAe,CAACnB,IAAI,CAClB,IAAIpE,iBAAA,CAAAgE,OAAc,CAAC;QACjBJ,IAAI,EAAEe,WAAW;QACjBe,UAAU;QACVT,EAAE,EAAEH,YAAY,GAAGA,YAAY,CAACE,KAAK,CAAC,GAAG,IAAI,CAACE,KAAK,EAAE;QACrDrB,IAAI;QACJR,OAAO;QACPI,OAAO;QACPE,OAAO;QACPwB,aAAa,EAAEvB,IAAI;QACnBE;OACD,CAAC,CACH;IACH,CAAC,CACF;IACD,OAAO;MAAEyB,eAAe;MAAEC;IAAuB,CAAE;EACrD;EAEAQ,QAAQA,CAAClB,YAAuC;IAC9C,MAAMmB,qBAAqB,GAAG,IAAI,CAACX,oBAAoB,CACrDR,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEoB,iBAAiB,CAChC;IACD,OAAO;MACLC,mBAAmB,EAAE,IAAI,CAACA,mBAAmB;MAC7CC,4BAA4B,EAAE,IAAI,CAACxB,4BAA4B,CAC7D,IAAI,CAAC9D,kCAAkC,EACvCgE,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEuB,8BAA8B,CAC7C;MACDC,2BAA2B,EAAE,IAAI,CAACjB,2BAA2B,CAC3D,IAAI,CAACpE,iCAAiC,CACvC;MACDsF,4BAA4B,EAAE,IAAI,CAACnB,4BAA4B,CAC7D,IAAI,CAAChE,kCAAkC,CACxC;MACDoF,6BAA6B,EAAE,IAAI,CAAC5B,4BAA4B,CAC9D,IAAI,CAACtD,mCAAmC,EACxCwD,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAE2B,+BAA+B,CAC9C;MACDC,4BAA4B,EAAE,IAAI,CAACrB,2BAA2B,CAC5D,IAAI,CAAC7D,kCAAkC,CACxC;MACDmF,6BAA6B,EAAE,IAAI,CAACvB,4BAA4B,CAC9D,IAAI,CAAC1D,mCAAmC,CACzC;MACDQ,cAAc,EAAE,IAAI,CAACA,cAAc;MACnCsB,qBAAqB,EAAE,IAAI,CAACA,qBAAqB;MACjDgC,uBAAuB,EAAES,qBAAqB,CAACT,uBAAuB;MACtED,eAAe,EAAEU,qBAAqB,CAACV,eAAe;MACtDhD,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBE,iBAAiB,EAAE,IAAI,CAACA;KACzB;EACH;EAEAmE,KAAKA,CACH7D,GAAW,EACXmC,KAAwB,EACxBiB,mBAAA,GAA+C;IAC7CU,cAAc,EAAE,EAAE;IAClBC,YAAY,EAAE,EAAE;IAChBC,WAAW,EAAE;GACd;IAED,IAAI,CAAChE,GAAG,GAAGA,GAAG;IACd,IAAI,CAACmC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACiB,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACrF,kCAAkC,GAAG,EAAE;IAC5C,IAAI,CAACG,iCAAiC,GAAG,EAAE;IAC3C,IAAI,CAACG,kCAAkC,GAAG,EAAE;IAC5C,IAAI,CAACE,mCAAmC,GAAG,EAAE;IAC7C,IAAI,CAACE,kCAAkC,GAAG,EAAE;IAC5C,IAAI,CAACE,mCAAmC,GAAG,EAAE;IAC7C,IAAI,CAACW,yBAAyB,GAAG,IAAI;IACrC,IAAI,CAACH,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACsB,qBAAqB,GAAG,IAAIpD,sBAAA,CAAA4G,qBAAqB,EAAE;IACxD,IAAI,CAAClF,qBAAqB,GAAG,EAAE;IAC/B,IAAI,CAACW,iBAAiB,GAAG,MAAM,IAAI;IACnC,IAAI,CAACF,KAAK,GAAGjC,OAAA,CAAA0D,OAAK;EACpB;;AAtZFzD,OAAA,CAAAE,yBAAA,GAAAA,yBAAA;AAyZAF,OAAA,CAAAyD,OAAA,GAAe,IAAIvD,yBAAyB,EAAE"}