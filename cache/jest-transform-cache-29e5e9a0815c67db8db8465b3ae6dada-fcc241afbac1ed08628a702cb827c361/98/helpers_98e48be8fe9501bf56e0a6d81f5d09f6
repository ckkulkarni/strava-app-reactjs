f5e9a1fdd6cf5a742a9eb29f27ab0a5f
"use strict";

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function () {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.emitSupportCodeMessages = exports.emitMetaMessage = exports.orderPickles = exports.parseGherkinMessageStream = void 0;
const knuth_shuffle_seeded_1 = __importDefault(require("knuth-shuffle-seeded"));
const value_checker_1 = require("../value_checker");
const configuration_1 = require("../configuration");
const os_1 = __importDefault(require("os"));
const messages = __importStar(require("@cucumber/messages"));
const ci_environment_1 = __importDefault(require("@cucumber/ci-environment"));
const support_code_library_builder_1 = require("../support_code_library_builder");
const version_1 = require("../version");
/**
 * Process a stream of envelopes from Gherkin and resolve to an array of filtered, ordered pickle Ids
 *
 * @param eventBroadcaster
 * @param eventDataCollector
 * @param gherkinMessageStream
 * @param order
 * @param pickleFilter
 */
async function parseGherkinMessageStream({
  eventBroadcaster,
  eventDataCollector,
  gherkinMessageStream,
  order,
  pickleFilter
}) {
  return await new Promise((resolve, reject) => {
    const result = [];
    gherkinMessageStream.on('data', envelope => {
      eventBroadcaster.emit('envelope', envelope);
      if ((0, value_checker_1.doesHaveValue)(envelope.pickle)) {
        const pickle = envelope.pickle;
        const pickleId = pickle.id;
        const gherkinDocument = eventDataCollector.getGherkinDocument(pickle.uri);
        if (pickleFilter.matches({
          gherkinDocument,
          pickle
        })) {
          result.push(pickleId);
        }
      }
    });
    gherkinMessageStream.on('end', () => {
      orderPickles(result, order, console);
      resolve(result);
    });
    gherkinMessageStream.on('error', reject);
  });
}
exports.parseGherkinMessageStream = parseGherkinMessageStream;
// Orders the pickleIds in place - morphs input
function orderPickles(pickleIds, order, logger) {
  const [type, seed] = configuration_1.OptionSplitter.split(order);
  switch (type) {
    case 'defined':
      break;
    case 'random':
      if (seed === '') {
        const newSeed = Math.floor(Math.random() * 1000 * 1000).toString();
        logger.warn(`Random order using seed: ${newSeed}`);
        (0, knuth_shuffle_seeded_1.default)(pickleIds, newSeed);
      } else {
        (0, knuth_shuffle_seeded_1.default)(pickleIds, seed);
      }
      break;
    default:
      throw new Error('Unrecgonized order type. Should be `defined` or `random`');
  }
}
exports.orderPickles = orderPickles;
async function emitMetaMessage(eventBroadcaster, env) {
  const meta = {
    protocolVersion: messages.version,
    implementation: {
      version: version_1.version,
      name: 'cucumber-js'
    },
    cpu: {
      name: os_1.default.arch()
    },
    os: {
      name: os_1.default.platform(),
      version: os_1.default.release()
    },
    runtime: {
      name: 'node.js',
      version: process.versions.node
    },
    ci: (0, ci_environment_1.default)(env)
  };
  eventBroadcaster.emit('envelope', {
    meta
  });
}
exports.emitMetaMessage = emitMetaMessage;
function emitParameterTypes(supportCodeLibrary, eventBroadcaster, newId) {
  for (const parameterType of supportCodeLibrary.parameterTypeRegistry.parameterTypes) {
    if (support_code_library_builder_1.builtinParameterTypes.includes(parameterType.name)) {
      continue;
    }
    const envelope = {
      parameterType: {
        id: newId(),
        name: parameterType.name,
        preferForRegularExpressionMatch: parameterType.preferForRegexpMatch,
        regularExpressions: parameterType.regexpStrings,
        useForSnippets: parameterType.useForSnippets
      }
    };
    eventBroadcaster.emit('envelope', envelope);
  }
}
function emitUndefinedParameterTypes(supportCodeLibrary, eventBroadcaster) {
  for (const undefinedParameterType of supportCodeLibrary.undefinedParameterTypes) {
    const envelope = {
      undefinedParameterType
    };
    eventBroadcaster.emit('envelope', envelope);
  }
}
function emitStepDefinitions(supportCodeLibrary, eventBroadcaster) {
  supportCodeLibrary.stepDefinitions.forEach(stepDefinition => {
    const envelope = {
      stepDefinition: {
        id: stepDefinition.id,
        pattern: {
          source: stepDefinition.pattern.toString(),
          type: typeof stepDefinition.pattern === 'string' ? messages.StepDefinitionPatternType.CUCUMBER_EXPRESSION : messages.StepDefinitionPatternType.REGULAR_EXPRESSION
        },
        sourceReference: {
          uri: stepDefinition.uri,
          location: {
            line: stepDefinition.line
          }
        }
      }
    };
    eventBroadcaster.emit('envelope', envelope);
  });
}
function emitTestCaseHooks(supportCodeLibrary, eventBroadcaster) {
  ;
  [].concat(supportCodeLibrary.beforeTestCaseHookDefinitions, supportCodeLibrary.afterTestCaseHookDefinitions).forEach(testCaseHookDefinition => {
    const envelope = {
      hook: {
        id: testCaseHookDefinition.id,
        name: testCaseHookDefinition.name,
        tagExpression: testCaseHookDefinition.tagExpression,
        sourceReference: {
          uri: testCaseHookDefinition.uri,
          location: {
            line: testCaseHookDefinition.line
          }
        }
      }
    };
    eventBroadcaster.emit('envelope', envelope);
  });
}
function emitTestRunHooks(supportCodeLibrary, eventBroadcaster) {
  ;
  [].concat(supportCodeLibrary.beforeTestRunHookDefinitions, supportCodeLibrary.afterTestRunHookDefinitions).forEach(testRunHookDefinition => {
    const envelope = {
      hook: {
        id: testRunHookDefinition.id,
        sourceReference: {
          uri: testRunHookDefinition.uri,
          location: {
            line: testRunHookDefinition.line
          }
        }
      }
    };
    eventBroadcaster.emit('envelope', envelope);
  });
}
function emitSupportCodeMessages({
  eventBroadcaster,
  supportCodeLibrary,
  newId
}) {
  emitParameterTypes(supportCodeLibrary, eventBroadcaster, newId);
  emitUndefinedParameterTypes(supportCodeLibrary, eventBroadcaster);
  emitStepDefinitions(supportCodeLibrary, eventBroadcaster);
  emitTestCaseHooks(supportCodeLibrary, eventBroadcaster);
  emitTestRunHooks(supportCodeLibrary, eventBroadcaster);
}
exports.emitSupportCodeMessages = emitSupportCodeMessages;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,