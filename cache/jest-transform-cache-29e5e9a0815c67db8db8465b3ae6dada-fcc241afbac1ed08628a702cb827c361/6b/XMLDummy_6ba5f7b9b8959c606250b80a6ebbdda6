535191f6a68a8888775d02a788323fe3
"use strict";

// Generated by CoffeeScript 2.4.1
(function () {
  var NodeType, XMLDummy, XMLNode;
  XMLNode = require('./XMLNode');
  NodeType = require('./NodeType');

  // Represents a  raw node
  module.exports = XMLDummy = class XMLDummy extends XMLNode {
    // Initializes a new instance of `XMLDummy`

    // `XMLDummy` is a special node representing a node with 
    // a null value. Dummy nodes are created while recursively
    // building the XML tree. Simply skipping null values doesn't
    // work because that would break the recursive chain.
    constructor(parent) {
      super(parent);
      this.type = NodeType.Dummy;
    }

    // Creates and returns a deep clone of `this`
    clone() {
      return Object.create(this);
    }

    // Converts the XML fragment to string

    // `options.pretty` pretty prints the result
    // `options.indent` indentation for pretty print
    // `options.offset` how many indentations to add to every line for pretty print
    // `options.newline` newline sequence for pretty print
    toString(options) {
      return '';
    }
  };
}).call(void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlVHlwZSIsIlhNTER1bW15IiwiWE1MTm9kZSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29uc3RydWN0b3IiLCJwYXJlbnQiLCJ0eXBlIiwiRHVtbXkiLCJjbG9uZSIsIk9iamVjdCIsImNyZWF0ZSIsInRvU3RyaW5nIiwib3B0aW9ucyIsImNhbGwiXSwic291cmNlcyI6WyJYTUxEdW1teS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDIuNC4xXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBOb2RlVHlwZSwgWE1MRHVtbXksIFhNTE5vZGU7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIC8vIFJlcHJlc2VudHMgYSAgcmF3IG5vZGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEdW1teSA9IGNsYXNzIFhNTER1bW15IGV4dGVuZHMgWE1MTm9kZSB7XG4gICAgLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYFhNTER1bW15YFxuXG4gICAgLy8gYFhNTER1bW15YCBpcyBhIHNwZWNpYWwgbm9kZSByZXByZXNlbnRpbmcgYSBub2RlIHdpdGggXG4gICAgLy8gYSBudWxsIHZhbHVlLiBEdW1teSBub2RlcyBhcmUgY3JlYXRlZCB3aGlsZSByZWN1cnNpdmVseVxuICAgIC8vIGJ1aWxkaW5nIHRoZSBYTUwgdHJlZS4gU2ltcGx5IHNraXBwaW5nIG51bGwgdmFsdWVzIGRvZXNuJ3RcbiAgICAvLyB3b3JrIGJlY2F1c2UgdGhhdCB3b3VsZCBicmVhayB0aGUgcmVjdXJzaXZlIGNoYWluLlxuICAgIGNvbnN0cnVjdG9yKHBhcmVudCkge1xuICAgICAgc3VwZXIocGFyZW50KTtcbiAgICAgIHRoaXMudHlwZSA9IE5vZGVUeXBlLkR1bW15O1xuICAgIH1cblxuICAgIC8vIENyZWF0ZXMgYW5kIHJldHVybnMgYSBkZWVwIGNsb25lIG9mIGB0aGlzYFxuICAgIGNsb25lKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfVxuXG4gICAgLy8gQ29udmVydHMgdGhlIFhNTCBmcmFnbWVudCB0byBzdHJpbmdcblxuICAgIC8vIGBvcHRpb25zLnByZXR0eWAgcHJldHR5IHByaW50cyB0aGUgcmVzdWx0XG4gICAgLy8gYG9wdGlvbnMuaW5kZW50YCBpbmRlbnRhdGlvbiBmb3IgcHJldHR5IHByaW50XG4gICAgLy8gYG9wdGlvbnMub2Zmc2V0YCBob3cgbWFueSBpbmRlbnRhdGlvbnMgdG8gYWRkIHRvIGV2ZXJ5IGxpbmUgZm9yIHByZXR0eSBwcmludFxuICAgIC8vIGBvcHRpb25zLm5ld2xpbmVgIG5ld2xpbmUgc2VxdWVuY2UgZm9yIHByZXR0eSBwcmludFxuICAgIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBLENBQUMsWUFBVztFQUNWLElBQUlBLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxPQUFPO0VBRS9CQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxXQUFXLENBQUM7RUFFOUJILFFBQVEsR0FBR0csT0FBTyxDQUFDLFlBQVksQ0FBQzs7RUFFaEM7RUFDQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUdKLFFBQVEsR0FBRyxNQUFNQSxRQUFRLFNBQVNDLE9BQU8sQ0FBQztJQUN6RDs7SUFFQTtJQUNBO0lBQ0E7SUFDQTtJQUNBSSxXQUFXQSxDQUFDQyxNQUFNLEVBQUU7TUFDbEIsS0FBSyxDQUFDQSxNQUFNLENBQUM7TUFDYixJQUFJLENBQUNDLElBQUksR0FBR1IsUUFBUSxDQUFDUyxLQUFLO0lBQzVCOztJQUVBO0lBQ0FDLEtBQUtBLENBQUEsRUFBRztNQUNOLE9BQU9DLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLElBQUksQ0FBQztJQUM1Qjs7SUFFQTs7SUFFQTtJQUNBO0lBQ0E7SUFDQTtJQUNBQyxRQUFRQSxDQUFDQyxPQUFPLEVBQUU7TUFDaEIsT0FBTyxFQUFFO0lBQ1g7RUFFRixDQUFDO0FBRUgsQ0FBQyxFQUFFQyxJQUFJLFFBQU0ifQ==