1aa9bb452108e62796bc8fad8a09376c
"use strict";

// Generated by CoffeeScript 2.4.1
(function () {
  var NodeType, XMLDeclaration, XMLNode, isObject;
  ({
    isObject
  } = require('./Utility'));
  XMLNode = require('./XMLNode');
  NodeType = require('./NodeType');

  // Represents the XML declaration
  module.exports = XMLDeclaration = class XMLDeclaration extends XMLNode {
    // Initializes a new instance of `XMLDeclaration`

    // `parent` the document object

    // `version` A version number string, e.g. 1.0
    // `encoding` Encoding declaration, e.g. UTF-8
    // `standalone` standalone document declaration: true or false
    constructor(parent, version, encoding, standalone) {
      super(parent);
      // arguments may also be passed as an object
      if (isObject(version)) {
        ({
          version,
          encoding,
          standalone
        } = version);
      }
      if (!version) {
        version = '1.0';
      }
      this.type = NodeType.Declaration;
      this.version = this.stringify.xmlVersion(version);
      if (encoding != null) {
        this.encoding = this.stringify.xmlEncoding(encoding);
      }
      if (standalone != null) {
        this.standalone = this.stringify.xmlStandalone(standalone);
      }
    }

    // Converts to string

    // `options.pretty` pretty prints the result
    // `options.indent` indentation for pretty print
    // `options.offset` how many indentations to add to every line for pretty print
    // `options.newline` newline sequence for pretty print
    toString(options) {
      return this.options.writer.declaration(this, this.options.writer.filterOptions(options));
    }
  };
}).call(void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlVHlwZSIsIlhNTERlY2xhcmF0aW9uIiwiWE1MTm9kZSIsImlzT2JqZWN0IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb25zdHJ1Y3RvciIsInBhcmVudCIsInZlcnNpb24iLCJlbmNvZGluZyIsInN0YW5kYWxvbmUiLCJ0eXBlIiwiRGVjbGFyYXRpb24iLCJzdHJpbmdpZnkiLCJ4bWxWZXJzaW9uIiwieG1sRW5jb2RpbmciLCJ4bWxTdGFuZGFsb25lIiwidG9TdHJpbmciLCJvcHRpb25zIiwid3JpdGVyIiwiZGVjbGFyYXRpb24iLCJmaWx0ZXJPcHRpb25zIiwiY2FsbCJdLCJzb3VyY2VzIjpbIlhNTERlY2xhcmF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMi40LjFcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxEZWNsYXJhdGlvbiwgWE1MTm9kZSwgaXNPYmplY3Q7XG5cbiAgKHtpc09iamVjdH0gPSByZXF1aXJlKCcuL1V0aWxpdHknKSk7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIC8vIFJlcHJlc2VudHMgdGhlIFhNTCBkZWNsYXJhdGlvblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERlY2xhcmF0aW9uID0gY2xhc3MgWE1MRGVjbGFyYXRpb24gZXh0ZW5kcyBYTUxOb2RlIHtcbiAgICAvLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiBgWE1MRGVjbGFyYXRpb25gXG5cbiAgICAvLyBgcGFyZW50YCB0aGUgZG9jdW1lbnQgb2JqZWN0XG5cbiAgICAvLyBgdmVyc2lvbmAgQSB2ZXJzaW9uIG51bWJlciBzdHJpbmcsIGUuZy4gMS4wXG4gICAgLy8gYGVuY29kaW5nYCBFbmNvZGluZyBkZWNsYXJhdGlvbiwgZS5nLiBVVEYtOFxuICAgIC8vIGBzdGFuZGFsb25lYCBzdGFuZGFsb25lIGRvY3VtZW50IGRlY2xhcmF0aW9uOiB0cnVlIG9yIGZhbHNlXG4gICAgY29uc3RydWN0b3IocGFyZW50LCB2ZXJzaW9uLCBlbmNvZGluZywgc3RhbmRhbG9uZSkge1xuICAgICAgc3VwZXIocGFyZW50KTtcbiAgICAgIC8vIGFyZ3VtZW50cyBtYXkgYWxzbyBiZSBwYXNzZWQgYXMgYW4gb2JqZWN0XG4gICAgICBpZiAoaXNPYmplY3QodmVyc2lvbikpIHtcbiAgICAgICAgKHt2ZXJzaW9uLCBlbmNvZGluZywgc3RhbmRhbG9uZX0gPSB2ZXJzaW9uKTtcbiAgICAgIH1cbiAgICAgIGlmICghdmVyc2lvbikge1xuICAgICAgICB2ZXJzaW9uID0gJzEuMCc7XG4gICAgICB9XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5EZWNsYXJhdGlvbjtcbiAgICAgIHRoaXMudmVyc2lvbiA9IHRoaXMuc3RyaW5naWZ5LnhtbFZlcnNpb24odmVyc2lvbik7XG4gICAgICBpZiAoZW5jb2RpbmcgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLmVuY29kaW5nID0gdGhpcy5zdHJpbmdpZnkueG1sRW5jb2RpbmcoZW5jb2RpbmcpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YW5kYWxvbmUgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnN0YW5kYWxvbmUgPSB0aGlzLnN0cmluZ2lmeS54bWxTdGFuZGFsb25lKHN0YW5kYWxvbmUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENvbnZlcnRzIHRvIHN0cmluZ1xuXG4gICAgLy8gYG9wdGlvbnMucHJldHR5YCBwcmV0dHkgcHJpbnRzIHRoZSByZXN1bHRcbiAgICAvLyBgb3B0aW9ucy5pbmRlbnRgIGluZGVudGF0aW9uIGZvciBwcmV0dHkgcHJpbnRcbiAgICAvLyBgb3B0aW9ucy5vZmZzZXRgIGhvdyBtYW55IGluZGVudGF0aW9ucyB0byBhZGQgdG8gZXZlcnkgbGluZSBmb3IgcHJldHR5IHByaW50XG4gICAgLy8gYG9wdGlvbnMubmV3bGluZWAgbmV3bGluZSBzZXF1ZW5jZSBmb3IgcHJldHR5IHByaW50XG4gICAgdG9TdHJpbmcob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuZGVjbGFyYXRpb24odGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9XG5cbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBLENBQUMsWUFBVztFQUNWLElBQUlBLFFBQVEsRUFBRUMsY0FBYyxFQUFFQyxPQUFPLEVBQUVDLFFBQVE7RUFFL0MsQ0FBQztJQUFDQTtFQUFRLENBQUMsR0FBR0MsT0FBTyxDQUFDLFdBQVcsQ0FBQztFQUVsQ0YsT0FBTyxHQUFHRSxPQUFPLENBQUMsV0FBVyxDQUFDO0VBRTlCSixRQUFRLEdBQUdJLE9BQU8sQ0FBQyxZQUFZLENBQUM7O0VBRWhDO0VBQ0FDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHTCxjQUFjLEdBQUcsTUFBTUEsY0FBYyxTQUFTQyxPQUFPLENBQUM7SUFDckU7O0lBRUE7O0lBRUE7SUFDQTtJQUNBO0lBQ0FLLFdBQVdBLENBQUNDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLFVBQVUsRUFBRTtNQUNqRCxLQUFLLENBQUNILE1BQU0sQ0FBQztNQUNiO01BQ0EsSUFBSUwsUUFBUSxDQUFDTSxPQUFPLENBQUMsRUFBRTtRQUNyQixDQUFDO1VBQUNBLE9BQU87VUFBRUMsUUFBUTtVQUFFQztRQUFVLENBQUMsR0FBR0YsT0FBTztNQUM1QztNQUNBLElBQUksQ0FBQ0EsT0FBTyxFQUFFO1FBQ1pBLE9BQU8sR0FBRyxLQUFLO01BQ2pCO01BQ0EsSUFBSSxDQUFDRyxJQUFJLEdBQUdaLFFBQVEsQ0FBQ2EsV0FBVztNQUNoQyxJQUFJLENBQUNKLE9BQU8sR0FBRyxJQUFJLENBQUNLLFNBQVMsQ0FBQ0MsVUFBVSxDQUFDTixPQUFPLENBQUM7TUFDakQsSUFBSUMsUUFBUSxJQUFJLElBQUksRUFBRTtRQUNwQixJQUFJLENBQUNBLFFBQVEsR0FBRyxJQUFJLENBQUNJLFNBQVMsQ0FBQ0UsV0FBVyxDQUFDTixRQUFRLENBQUM7TUFDdEQ7TUFDQSxJQUFJQyxVQUFVLElBQUksSUFBSSxFQUFFO1FBQ3RCLElBQUksQ0FBQ0EsVUFBVSxHQUFHLElBQUksQ0FBQ0csU0FBUyxDQUFDRyxhQUFhLENBQUNOLFVBQVUsQ0FBQztNQUM1RDtJQUNGOztJQUVBOztJQUVBO0lBQ0E7SUFDQTtJQUNBO0lBQ0FPLFFBQVFBLENBQUNDLE9BQU8sRUFBRTtNQUNoQixPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLENBQUNDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDRixPQUFPLENBQUNDLE1BQU0sQ0FBQ0UsYUFBYSxDQUFDSCxPQUFPLENBQUMsQ0FBQztJQUMxRjtFQUVGLENBQUM7QUFFSCxDQUFDLEVBQUVJLElBQUksUUFBTSJ9