583ae8fdc2d68837ef5937698543b09d
'use strict';

function emptyScalarPosition(offset, before, pos) {
  if (before) {
    if (pos === null) pos = before.length;
    for (let i = pos - 1; i >= 0; --i) {
      let st = before[i];
      switch (st.type) {
        case 'space':
        case 'comment':
        case 'newline':
          offset -= st.source.length;
          continue;
      }
      // Technically, an empty scalar is immediately after the last non-empty
      // node, but it's more useful to place it after any whitespace.
      st = before[++i];
      while (st?.type === 'space') {
        offset += st.source.length;
        st = before[++i];
      }
      break;
    }
  }
  return offset;
}
exports.emptyScalarPosition = emptyScalarPosition;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJlbXB0eVNjYWxhclBvc2l0aW9uIiwib2Zmc2V0IiwiYmVmb3JlIiwicG9zIiwibGVuZ3RoIiwiaSIsInN0IiwidHlwZSIsInNvdXJjZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJ1dGlsLWVtcHR5LXNjYWxhci1wb3NpdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGVtcHR5U2NhbGFyUG9zaXRpb24ob2Zmc2V0LCBiZWZvcmUsIHBvcykge1xuICAgIGlmIChiZWZvcmUpIHtcbiAgICAgICAgaWYgKHBvcyA9PT0gbnVsbClcbiAgICAgICAgICAgIHBvcyA9IGJlZm9yZS5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSBwb3MgLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgbGV0IHN0ID0gYmVmb3JlW2ldO1xuICAgICAgICAgICAgc3dpdGNoIChzdC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgLT0gc3Quc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUZWNobmljYWxseSwgYW4gZW1wdHkgc2NhbGFyIGlzIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBsYXN0IG5vbi1lbXB0eVxuICAgICAgICAgICAgLy8gbm9kZSwgYnV0IGl0J3MgbW9yZSB1c2VmdWwgdG8gcGxhY2UgaXQgYWZ0ZXIgYW55IHdoaXRlc3BhY2UuXG4gICAgICAgICAgICBzdCA9IGJlZm9yZVsrK2ldO1xuICAgICAgICAgICAgd2hpbGUgKHN0Py50eXBlID09PSAnc3BhY2UnKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IHN0LnNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgc3QgPSBiZWZvcmVbKytpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvZmZzZXQ7XG59XG5cbmV4cG9ydHMuZW1wdHlTY2FsYXJQb3NpdGlvbiA9IGVtcHR5U2NhbGFyUG9zaXRpb247XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosU0FBU0EsbUJBQW1CQSxDQUFDQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsR0FBRyxFQUFFO0VBQzlDLElBQUlELE1BQU0sRUFBRTtJQUNSLElBQUlDLEdBQUcsS0FBSyxJQUFJLEVBQ1pBLEdBQUcsR0FBR0QsTUFBTSxDQUFDRSxNQUFNO0lBQ3ZCLEtBQUssSUFBSUMsQ0FBQyxHQUFHRixHQUFHLEdBQUcsQ0FBQyxFQUFFRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUVBLENBQUMsRUFBRTtNQUMvQixJQUFJQyxFQUFFLEdBQUdKLE1BQU0sQ0FBQ0csQ0FBQyxDQUFDO01BQ2xCLFFBQVFDLEVBQUUsQ0FBQ0MsSUFBSTtRQUNYLEtBQUssT0FBTztRQUNaLEtBQUssU0FBUztRQUNkLEtBQUssU0FBUztVQUNWTixNQUFNLElBQUlLLEVBQUUsQ0FBQ0UsTUFBTSxDQUFDSixNQUFNO1VBQzFCO01BQVM7TUFFakI7TUFDQTtNQUNBRSxFQUFFLEdBQUdKLE1BQU0sQ0FBQyxFQUFFRyxDQUFDLENBQUM7TUFDaEIsT0FBT0MsRUFBRSxFQUFFQyxJQUFJLEtBQUssT0FBTyxFQUFFO1FBQ3pCTixNQUFNLElBQUlLLEVBQUUsQ0FBQ0UsTUFBTSxDQUFDSixNQUFNO1FBQzFCRSxFQUFFLEdBQUdKLE1BQU0sQ0FBQyxFQUFFRyxDQUFDLENBQUM7TUFDcEI7TUFDQTtJQUNKO0VBQ0o7RUFDQSxPQUFPSixNQUFNO0FBQ2pCO0FBRUFRLE9BQU8sQ0FBQ1QsbUJBQW1CLEdBQUdBLG1CQUFtQiJ9