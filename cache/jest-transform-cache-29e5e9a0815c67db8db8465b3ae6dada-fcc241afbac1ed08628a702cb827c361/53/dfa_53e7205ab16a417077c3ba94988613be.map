{"version":3,"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_toConsumableArray","arr","Array","isArray","arr2","from","_classCallCheck","instance","TypeError","DFAMinimizer","require","_require","EPSILON_CLOSURE","DFA","nfa","_nfa","value","minimize","getTransitionTable","_originalAcceptingStateNumbers","_acceptingStateNumbers","_originalTransitionTable","_transitionTable","getAlphabet","getAcceptingStateNumbers","getOriginaAcceptingStateNumbers","setTransitionTable","table","setAcceptingStateNumbers","stateNumbers","_this","nfaTable","nfaStates","keys","Set","startState","worklist","alphabet","nfaAcceptingStates","dfaTable","updateAcceptingStates","states","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","nfaAcceptingState","indexOf","add","join","err","return","shift","dfaStateLabel","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","symbol","onSymbol","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","state","nfaStatesOnSymbol","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","nfaStateOnSymbol","push","apply","dfaStatesOnSymbolSet","dfaStatesOnSymbol","concat","dfaOnSymbolStr","hasOwnProperty","unshift","_remapStateNumbers","calculatedDFATable","newStatesMap","transitionTable","forEach","originalNumber","newNumber","originalRow","row","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","_originalNumber","getOriginalTransitionTable","matches","string","has","module","exports"],"sources":["dfa.js"],"sourcesContent":["/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar DFAMinimizer = require('./dfa-minimizer');\n\nvar _require = require('../special-symbols'),\n    EPSILON_CLOSURE = _require.EPSILON_CLOSURE;\n\n/**\n * DFA is build by converting from NFA (subset construction).\n */\n\n\nvar DFA = function () {\n  function DFA(nfa) {\n    _classCallCheck(this, DFA);\n\n    this._nfa = nfa;\n  }\n\n  /**\n   * Minimizes DFA.\n   */\n\n\n  _createClass(DFA, [{\n    key: 'minimize',\n    value: function minimize() {\n      this.getTransitionTable();\n\n      this._originalAcceptingStateNumbers = this._acceptingStateNumbers;\n      this._originalTransitionTable = this._transitionTable;\n\n      DFAMinimizer.minimize(this);\n    }\n\n    /**\n     * Returns alphabet for this DFA.\n     */\n\n  }, {\n    key: 'getAlphabet',\n    value: function getAlphabet() {\n      return this._nfa.getAlphabet();\n    }\n\n    /**\n     * Returns accepting states.\n     */\n\n  }, {\n    key: 'getAcceptingStateNumbers',\n    value: function getAcceptingStateNumbers() {\n      if (!this._acceptingStateNumbers) {\n        // Accepting states are determined during table construction.\n        this.getTransitionTable();\n      }\n\n      return this._acceptingStateNumbers;\n    }\n\n    /**\n     * Returns original accepting states.\n     */\n\n  }, {\n    key: 'getOriginaAcceptingStateNumbers',\n    value: function getOriginaAcceptingStateNumbers() {\n      if (!this._originalAcceptingStateNumbers) {\n        // Accepting states are determined during table construction.\n        this.getTransitionTable();\n      }\n\n      return this._originalAcceptingStateNumbers;\n    }\n\n    /**\n     * Sets transition table.\n     */\n\n  }, {\n    key: 'setTransitionTable',\n    value: function setTransitionTable(table) {\n      this._transitionTable = table;\n    }\n\n    /**\n     * Sets accepting states.\n     */\n\n  }, {\n    key: 'setAcceptingStateNumbers',\n    value: function setAcceptingStateNumbers(stateNumbers) {\n      this._acceptingStateNumbers = stateNumbers;\n    }\n\n    /**\n     * DFA transition table is built from NFA table.\n     */\n\n  }, {\n    key: 'getTransitionTable',\n    value: function getTransitionTable() {\n      var _this = this;\n\n      if (this._transitionTable) {\n        return this._transitionTable;\n      }\n\n      // Calculate from NFA transition table.\n      var nfaTable = this._nfa.getTransitionTable();\n      var nfaStates = Object.keys(nfaTable);\n\n      this._acceptingStateNumbers = new Set();\n\n      // Start state of DFA is E(S[nfa])\n      var startState = nfaTable[nfaStates[0]][EPSILON_CLOSURE];\n\n      // Init the worklist (states which should be in the DFA).\n      var worklist = [startState];\n\n      var alphabet = this.getAlphabet();\n      var nfaAcceptingStates = this._nfa.getAcceptingStateNumbers();\n\n      var dfaTable = {};\n\n      // Determine whether the combined DFA state is accepting.\n      var updateAcceptingStates = function updateAcceptingStates(states) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = nfaAcceptingStates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var nfaAcceptingState = _step.value;\n\n            // If any of the states from NFA is accepting, DFA's\n            // state is accepting as well.\n            if (states.indexOf(nfaAcceptingState) !== -1) {\n              _this._acceptingStateNumbers.add(states.join(','));\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      };\n\n      while (worklist.length > 0) {\n        var states = worklist.shift();\n        var dfaStateLabel = states.join(',');\n        dfaTable[dfaStateLabel] = {};\n\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = alphabet[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var symbol = _step2.value;\n\n            var onSymbol = [];\n\n            // Determine whether the combined state is accepting.\n            updateAcceptingStates(states);\n\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n              for (var _iterator3 = states[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var state = _step3.value;\n\n                var nfaStatesOnSymbol = nfaTable[state][symbol];\n                if (!nfaStatesOnSymbol) {\n                  continue;\n                }\n\n                var _iteratorNormalCompletion4 = true;\n                var _didIteratorError4 = false;\n                var _iteratorError4 = undefined;\n\n                try {\n                  for (var _iterator4 = nfaStatesOnSymbol[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                    var nfaStateOnSymbol = _step4.value;\n\n                    if (!nfaTable[nfaStateOnSymbol]) {\n                      continue;\n                    }\n                    onSymbol.push.apply(onSymbol, _toConsumableArray(nfaTable[nfaStateOnSymbol][EPSILON_CLOSURE]));\n                  }\n                } catch (err) {\n                  _didIteratorError4 = true;\n                  _iteratorError4 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                      _iterator4.return();\n                    }\n                  } finally {\n                    if (_didIteratorError4) {\n                      throw _iteratorError4;\n                    }\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                  _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n\n            var dfaStatesOnSymbolSet = new Set(onSymbol);\n            var dfaStatesOnSymbol = [].concat(_toConsumableArray(dfaStatesOnSymbolSet));\n\n            if (dfaStatesOnSymbol.length > 0) {\n              var dfaOnSymbolStr = dfaStatesOnSymbol.join(',');\n\n              dfaTable[dfaStateLabel][symbol] = dfaOnSymbolStr;\n\n              if (!dfaTable.hasOwnProperty(dfaOnSymbolStr)) {\n                worklist.unshift(dfaStatesOnSymbol);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n\n      return this._transitionTable = this._remapStateNumbers(dfaTable);\n    }\n\n    /**\n     * Remaps state numbers in the resulting table:\n     * combined states '1,2,3' -> 1, '3,4' -> 2, etc.\n     */\n\n  }, {\n    key: '_remapStateNumbers',\n    value: function _remapStateNumbers(calculatedDFATable) {\n      var newStatesMap = {};\n\n      this._originalTransitionTable = calculatedDFATable;\n      var transitionTable = {};\n\n      Object.keys(calculatedDFATable).forEach(function (originalNumber, newNumber) {\n        newStatesMap[originalNumber] = newNumber + 1;\n      });\n\n      for (var originalNumber in calculatedDFATable) {\n        var originalRow = calculatedDFATable[originalNumber];\n        var row = {};\n\n        for (var symbol in originalRow) {\n          row[symbol] = newStatesMap[originalRow[symbol]];\n        }\n\n        transitionTable[newStatesMap[originalNumber]] = row;\n      }\n\n      // Remap accepting states.\n      this._originalAcceptingStateNumbers = this._acceptingStateNumbers;\n      this._acceptingStateNumbers = new Set();\n\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = this._originalAcceptingStateNumbers[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var _originalNumber = _step5.value;\n\n          this._acceptingStateNumbers.add(newStatesMap[_originalNumber]);\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      return transitionTable;\n    }\n\n    /**\n     * Returns original DFA table, where state numbers\n     * are combined numbers from NFA.\n     */\n\n  }, {\n    key: 'getOriginalTransitionTable',\n    value: function getOriginalTransitionTable() {\n      if (!this._originalTransitionTable) {\n        // Original table is determined during table construction.\n        this.getTransitionTable();\n      }\n      return this._originalTransitionTable;\n    }\n\n    /**\n     * Checks whether this DFA accepts a string.\n     */\n\n  }, {\n    key: 'matches',\n    value: function matches(string) {\n      var state = 1;\n      var i = 0;\n      var table = this.getTransitionTable();\n\n      while (string[i]) {\n        state = table[state][string[i++]];\n        if (!state) {\n          return false;\n        }\n      }\n\n      if (!this.getAcceptingStateNumbers().has(state)) {\n        return false;\n      }\n\n      return true;\n    }\n  }]);\n\n  return DFA;\n}();\n\nmodule.exports = DFA;"],"mappings":"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"}