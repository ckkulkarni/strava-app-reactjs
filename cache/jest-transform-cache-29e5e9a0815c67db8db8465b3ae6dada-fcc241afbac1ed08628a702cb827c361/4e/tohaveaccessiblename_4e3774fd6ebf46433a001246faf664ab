bccbfb749b92c4e1e5adb6442b7d0c6b
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveAccessibleName = toHaveAccessibleName;
var _domAccessibilityApi = require("dom-accessibility-api");
var _utils = require("./utils");
function toHaveAccessibleName(htmlElement, expectedAccessibleName) {
  (0, _utils.checkHtmlElement)(htmlElement, toHaveAccessibleName, this);
  const actualAccessibleName = (0, _domAccessibilityApi.computeAccessibleName)(htmlElement);
  const missingExpectedValue = arguments.length === 1;
  let pass = false;
  if (missingExpectedValue) {
    // When called without an expected value we only want to validate that the element has an
    // accessible name, whatever it may be.
    pass = actualAccessibleName !== '';
  } else {
    pass = expectedAccessibleName instanceof RegExp ? expectedAccessibleName.test(actualAccessibleName) : this.equals(actualAccessibleName, expectedAccessibleName);
  }
  return {
    pass,
    message: () => {
      const to = this.isNot ? 'not to' : 'to';
      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.${toHaveAccessibleName.name}`, 'element', ''), `Expected element ${to} have accessible name`, expectedAccessibleName, 'Received', actualAccessibleName);
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvSGF2ZUFjY2Vzc2libGVOYW1lIiwiX2RvbUFjY2Vzc2liaWxpdHlBcGkiLCJyZXF1aXJlIiwiX3V0aWxzIiwiaHRtbEVsZW1lbnQiLCJleHBlY3RlZEFjY2Vzc2libGVOYW1lIiwiY2hlY2tIdG1sRWxlbWVudCIsImFjdHVhbEFjY2Vzc2libGVOYW1lIiwiY29tcHV0ZUFjY2Vzc2libGVOYW1lIiwibWlzc2luZ0V4cGVjdGVkVmFsdWUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwYXNzIiwiUmVnRXhwIiwidGVzdCIsImVxdWFscyIsIm1lc3NhZ2UiLCJ0byIsImlzTm90IiwiZ2V0TWVzc2FnZSIsInV0aWxzIiwibWF0Y2hlckhpbnQiLCJuYW1lIl0sInNvdXJjZXMiOlsidG8taGF2ZS1hY2Nlc3NpYmxlLW5hbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnRvSGF2ZUFjY2Vzc2libGVOYW1lID0gdG9IYXZlQWNjZXNzaWJsZU5hbWU7XG5cbnZhciBfZG9tQWNjZXNzaWJpbGl0eUFwaSA9IHJlcXVpcmUoXCJkb20tYWNjZXNzaWJpbGl0eS1hcGlcIik7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxuZnVuY3Rpb24gdG9IYXZlQWNjZXNzaWJsZU5hbWUoaHRtbEVsZW1lbnQsIGV4cGVjdGVkQWNjZXNzaWJsZU5hbWUpIHtcbiAgKDAsIF91dGlscy5jaGVja0h0bWxFbGVtZW50KShodG1sRWxlbWVudCwgdG9IYXZlQWNjZXNzaWJsZU5hbWUsIHRoaXMpO1xuICBjb25zdCBhY3R1YWxBY2Nlc3NpYmxlTmFtZSA9ICgwLCBfZG9tQWNjZXNzaWJpbGl0eUFwaS5jb21wdXRlQWNjZXNzaWJsZU5hbWUpKGh0bWxFbGVtZW50KTtcbiAgY29uc3QgbWlzc2luZ0V4cGVjdGVkVmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID09PSAxO1xuICBsZXQgcGFzcyA9IGZhbHNlO1xuXG4gIGlmIChtaXNzaW5nRXhwZWN0ZWRWYWx1ZSkge1xuICAgIC8vIFdoZW4gY2FsbGVkIHdpdGhvdXQgYW4gZXhwZWN0ZWQgdmFsdWUgd2Ugb25seSB3YW50IHRvIHZhbGlkYXRlIHRoYXQgdGhlIGVsZW1lbnQgaGFzIGFuXG4gICAgLy8gYWNjZXNzaWJsZSBuYW1lLCB3aGF0ZXZlciBpdCBtYXkgYmUuXG4gICAgcGFzcyA9IGFjdHVhbEFjY2Vzc2libGVOYW1lICE9PSAnJztcbiAgfSBlbHNlIHtcbiAgICBwYXNzID0gZXhwZWN0ZWRBY2Nlc3NpYmxlTmFtZSBpbnN0YW5jZW9mIFJlZ0V4cCA/IGV4cGVjdGVkQWNjZXNzaWJsZU5hbWUudGVzdChhY3R1YWxBY2Nlc3NpYmxlTmFtZSkgOiB0aGlzLmVxdWFscyhhY3R1YWxBY2Nlc3NpYmxlTmFtZSwgZXhwZWN0ZWRBY2Nlc3NpYmxlTmFtZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhc3MsXG4gICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgY29uc3QgdG8gPSB0aGlzLmlzTm90ID8gJ25vdCB0bycgOiAndG8nO1xuICAgICAgcmV0dXJuICgwLCBfdXRpbHMuZ2V0TWVzc2FnZSkodGhpcywgdGhpcy51dGlscy5tYXRjaGVySGludChgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LiR7dG9IYXZlQWNjZXNzaWJsZU5hbWUubmFtZX1gLCAnZWxlbWVudCcsICcnKSwgYEV4cGVjdGVkIGVsZW1lbnQgJHt0b30gaGF2ZSBhY2Nlc3NpYmxlIG5hbWVgLCBleHBlY3RlZEFjY2Vzc2libGVOYW1lLCAnUmVjZWl2ZWQnLCBhY3R1YWxBY2Nlc3NpYmxlTmFtZSk7XG4gICAgfVxuICB9O1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLG9CQUFvQixHQUFHQSxvQkFBb0I7QUFFbkQsSUFBSUMsb0JBQW9CLEdBQUdDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztBQUUzRCxJQUFJQyxNQUFNLEdBQUdELE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFFL0IsU0FBU0Ysb0JBQW9CQSxDQUFDSSxXQUFXLEVBQUVDLHNCQUFzQixFQUFFO0VBQ2pFLENBQUMsQ0FBQyxFQUFFRixNQUFNLENBQUNHLGdCQUFnQixFQUFFRixXQUFXLEVBQUVKLG9CQUFvQixFQUFFLElBQUksQ0FBQztFQUNyRSxNQUFNTyxvQkFBb0IsR0FBRyxDQUFDLENBQUMsRUFBRU4sb0JBQW9CLENBQUNPLHFCQUFxQixFQUFFSixXQUFXLENBQUM7RUFDekYsTUFBTUssb0JBQW9CLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBTSxLQUFLLENBQUM7RUFDbkQsSUFBSUMsSUFBSSxHQUFHLEtBQUs7RUFFaEIsSUFBSUgsb0JBQW9CLEVBQUU7SUFDeEI7SUFDQTtJQUNBRyxJQUFJLEdBQUdMLG9CQUFvQixLQUFLLEVBQUU7RUFDcEMsQ0FBQyxNQUFNO0lBQ0xLLElBQUksR0FBR1Asc0JBQXNCLFlBQVlRLE1BQU0sR0FBR1Isc0JBQXNCLENBQUNTLElBQUksQ0FBQ1Asb0JBQW9CLENBQUMsR0FBRyxJQUFJLENBQUNRLE1BQU0sQ0FBQ1Isb0JBQW9CLEVBQUVGLHNCQUFzQixDQUFDO0VBQ2pLO0VBRUEsT0FBTztJQUNMTyxJQUFJO0lBQ0pJLE9BQU8sRUFBRUEsQ0FBQSxLQUFNO01BQ2IsTUFBTUMsRUFBRSxHQUFHLElBQUksQ0FBQ0MsS0FBSyxHQUFHLFFBQVEsR0FBRyxJQUFJO01BQ3ZDLE9BQU8sQ0FBQyxDQUFDLEVBQUVmLE1BQU0sQ0FBQ2dCLFVBQVUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDQyxLQUFLLENBQUNDLFdBQVcsQ0FBRSxHQUFFLElBQUksQ0FBQ0gsS0FBSyxHQUFHLE1BQU0sR0FBRyxFQUFHLElBQUdsQixvQkFBb0IsQ0FBQ3NCLElBQUssRUFBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsRUFBRyxvQkFBbUJMLEVBQUcsdUJBQXNCLEVBQUVaLHNCQUFzQixFQUFFLFVBQVUsRUFBRUUsb0JBQW9CLENBQUM7SUFDalA7RUFDRixDQUFDO0FBQ0gifQ==