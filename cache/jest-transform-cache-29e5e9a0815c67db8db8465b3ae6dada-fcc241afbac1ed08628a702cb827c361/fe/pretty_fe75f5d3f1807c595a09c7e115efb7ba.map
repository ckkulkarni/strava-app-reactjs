{"version":3,"names":["walkGherkinDocument_1","require","pretty","gherkinDocument","syntax","scenarioLevel","walkGherkinDocument","feature","content","concat","prettyLanguageHeader","language","prettyKeywordContainer","rule","background","scenario","examples","tableRows","tableHeader","tableBody","prettyTableRows","step","stepPrefix","keyword","text","dataTable","level","rows","docString","delimiter","makeDocStringDelimiter","indent","spaces","docStringContent","replace","mediaType","exports","default","stepContainer","tags","stepCount","steps","length","description","prettyDescription","prettyTags","keywordPrefix","name","undefined","prefix","tagQuote","map","tag","join","Array","substring","threeOrMoreBackticks","maxContentBackTickCount","match","exec","Math","max","maxWidths","cells","fill","forEach","tableRow","tableCell","j","escapeCell","value","n","s","row","prettyTableRow","separatorRow","location","id","cell","actualLevel","escapedCellValue","spaceCount","isNumeric","e","characters","split","c","isNaN","parseFloat"],"sources":["../../src/pretty.ts"],"sourcesContent":["import * as messages from '@cucumber/messages'\nimport { walkGherkinDocument } from './walkGherkinDocument'\n\nexport type Syntax = 'markdown' | 'gherkin'\n\nexport default function pretty(\n  gherkinDocument: messages.GherkinDocument,\n  syntax: Syntax = 'gherkin'\n): string {\n  let scenarioLevel = 1\n  return walkGherkinDocument<string>(gherkinDocument, '', {\n    feature(feature, content) {\n      return content\n        .concat(prettyLanguageHeader(feature.language))\n        .concat(prettyKeywordContainer(feature, syntax, 0))\n    },\n    rule(rule, content) {\n      scenarioLevel = 2\n      return content.concat(prettyKeywordContainer(rule, syntax, 1))\n    },\n    background(background, content) {\n      return content.concat(prettyKeywordContainer(background, syntax, scenarioLevel))\n    },\n    scenario(scenario, content) {\n      return content.concat(prettyKeywordContainer(scenario, syntax, scenarioLevel))\n    },\n    examples(examples, content) {\n      const tableRows = examples.tableHeader ? [examples.tableHeader, ...examples.tableBody] : []\n      return content\n        .concat(prettyKeywordContainer(examples, syntax, scenarioLevel + 1))\n        .concat(prettyTableRows(tableRows, syntax, scenarioLevel + 2))\n    },\n    step(step, content) {\n      return content\n        .concat(stepPrefix(scenarioLevel + 1, syntax))\n        .concat(step.keyword)\n        .concat(step.text)\n        .concat('\\n')\n    },\n    dataTable(dataTable, content) {\n      const level = syntax === 'markdown' ? 1 : scenarioLevel + 2\n      return content.concat(prettyTableRows(dataTable.rows || [], syntax, level))\n    },\n    docString(docString, content) {\n      const delimiter = makeDocStringDelimiter(syntax, docString)\n      const level = syntax === 'markdown' ? 1 : scenarioLevel + 2\n      const indent = spaces(level)\n      let docStringContent = docString.content.replace(/^/gm, indent)\n      if (syntax === 'gherkin') {\n        if (docString.delimiter === '\"\"\"') {\n          docStringContent = docStringContent.replace(/\"\"\"/gm, '\\\\\"\\\\\"\\\\\"')\n        } else {\n          docStringContent = docStringContent.replace(/```/gm, '\\\\`\\\\`\\\\`')\n        }\n      }\n      return content\n        .concat(indent)\n        .concat(delimiter)\n        .concat(docString.mediaType || '')\n        .concat('\\n')\n        .concat(docStringContent)\n        .concat('\\n')\n        .concat(indent)\n        .concat(delimiter)\n        .concat('\\n')\n    },\n  })\n}\n\nfunction prettyLanguageHeader(language: string | undefined): string {\n  return language === 'en' ? '' : `# language: ${language}\\n`\n}\n\nfunction prettyKeywordContainer(\n  stepContainer:\n    | messages.Feature\n    | messages.Scenario\n    | messages.Rule\n    | messages.Examples\n    | messages.Background,\n  syntax: Syntax,\n  level: number\n): string {\n  const tags: readonly messages.Tag[] = 'tags' in stepContainer ? stepContainer.tags : []\n  const stepCount = 'steps' in stepContainer ? stepContainer.steps.length : 0\n  const description = prettyDescription(stepContainer.description, syntax)\n\n  return ''\n    .concat(level === 0 ? '' : '\\n')\n    .concat(prettyTags(tags, syntax, level))\n    .concat(keywordPrefix(level, syntax))\n    .concat(stepContainer.keyword)\n    .concat(': ')\n    .concat(stepContainer.name)\n    .concat('\\n')\n    .concat(description)\n    .concat(description && stepCount > 0 ? '\\n' : '')\n}\n\nfunction prettyDescription(description: string, syntax: Syntax): string {\n  if (!description) return ''\n  if (syntax === 'gherkin') return description + '\\n'\n  else return description.replace(/^\\s*/gm, '') + '\\n'\n}\n\nfunction prettyTags(tags: readonly messages.Tag[], syntax: Syntax, level: number): string {\n  if (tags === undefined || tags.length == 0) {\n    return ''\n  }\n  const prefix = syntax === 'gherkin' ? spaces(level) : ''\n  const tagQuote = syntax === 'gherkin' ? '' : '`'\n  return prefix + tags.map((tag) => `${tagQuote}${tag.name}${tagQuote}`).join(' ') + '\\n'\n}\n\nfunction keywordPrefix(level: number, syntax: Syntax): string {\n  if (syntax === 'markdown') {\n    return new Array(level + 2).join('#') + ' '\n  } else {\n    return spaces(level)\n  }\n}\n\nfunction stepPrefix(level: number, syntax: Syntax): string {\n  if (syntax === 'markdown') {\n    return '* '\n  } else {\n    return new Array(level + 1).join('  ')\n  }\n}\n\nfunction spaces(level: number): string {\n  return new Array(level + 1).join('  ')\n}\n\nfunction makeDocStringDelimiter(syntax: Syntax, docString: messages.DocString) {\n  if (syntax === 'gherkin') {\n    return docString.delimiter.substring(0, 3)\n  }\n\n  // The length of the fenced code block delimiter is three backticks when the content inside doesn't have backticks.\n  // If the content inside has three or more backticks, the number of backticks in the delimiter must be at least one more\n  // https://github.github.com/gfm/#fenced-code-blocks\n  const threeOrMoreBackticks = /(```+)/g\n  let maxContentBackTickCount = 2\n  let match\n  do {\n    match = threeOrMoreBackticks.exec(docString.content)\n    if (match) {\n      maxContentBackTickCount = Math.max(maxContentBackTickCount, match[1].length)\n    }\n  } while (match)\n  // Return a delimiter with one more backtick than the max number of backticks in the contents (3 ny default)\n  return new Array(maxContentBackTickCount + 2).join('`')\n}\n\nfunction prettyTableRows(\n  tableRows: readonly messages.TableRow[],\n  syntax: Syntax,\n  level: number\n): string {\n  if (tableRows.length === 0) return ''\n  const maxWidths: number[] = new Array(tableRows[0].cells.length).fill(0)\n  tableRows.forEach((tableRow) => {\n    tableRow.cells.forEach((tableCell, j) => {\n      maxWidths[j] = Math.max(maxWidths[j], escapeCell(tableCell.value).length)\n    })\n  })\n\n  let n = 0\n  let s = ''\n  for (const row of tableRows) {\n    s += prettyTableRow(row, level, maxWidths, syntax)\n    if (n === 0 && syntax === 'markdown') {\n      const separatorRow: messages.TableRow = {\n        location: row.location,\n        id: row.id + '-separator',\n        cells: row.cells.map((cell, j) => ({\n          location: cell.location,\n          value: new Array(maxWidths[j] + 1).join('-'),\n        })),\n      }\n      s += prettyTableRow(separatorRow, level, maxWidths, syntax)\n    }\n    n++\n  }\n  return s\n}\n\nfunction prettyTableRow(\n  row: messages.TableRow,\n  level: number,\n  maxWidths: readonly number[],\n  syntax: Syntax\n): string {\n  const actualLevel = syntax === 'markdown' ? 1 : level\n  return `${spaces(actualLevel)}| ${row.cells\n    .map((cell, j) => {\n      const escapedCellValue = escapeCell(cell.value)\n      const spaceCount = maxWidths[j] - escapedCellValue.length\n      const spaces = new Array(spaceCount + 1).join(' ')\n      return isNumeric(escapedCellValue) ? spaces + escapedCellValue : escapedCellValue + spaces\n    })\n    .join(' | ')} |\\n`\n}\n\nexport function escapeCell(s: string) {\n  let e = ''\n  const characters = s.split('')\n  for (const c of characters) {\n    switch (c) {\n      case '\\\\':\n        e += '\\\\\\\\'\n        break\n      case '\\n':\n        e += '\\\\n'\n        break\n      case '|':\n        e += '\\\\|'\n        break\n      default:\n        e += c\n    }\n  }\n  return e\n}\n\nfunction isNumeric(s: string) {\n  return !isNaN(parseFloat(s))\n}\n"],"mappings":"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"}