5dbba566f347343028f7b283b00b824c
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
const helpers_1 = require("../helpers");
const step_arguments_1 = require("../../step_arguments");
const cucumber_expressions_1 = require("@cucumber/cucumber-expressions");
const value_checker_1 = require("../../value_checker");
class StepDefinitionSnippetBuilder {
  constructor({
    snippetSyntax,
    parameterTypeRegistry
  }) {
    this.snippetSyntax = snippetSyntax;
    this.cucumberExpressionGenerator = new cucumber_expressions_1.CucumberExpressionGenerator(() => parameterTypeRegistry.parameterTypes);
  }
  build({
    keywordType,
    pickleStep
  }) {
    const comment = 'Write code here that turns the phrase above into concrete actions';
    const functionName = this.getFunctionName(keywordType);
    const generatedExpressions = this.cucumberExpressionGenerator.generateExpressions(pickleStep.text);
    const stepParameterNames = this.getStepParameterNames(pickleStep);
    return this.snippetSyntax.build({
      comment,
      functionName,
      generatedExpressions,
      stepParameterNames
    });
  }
  getFunctionName(keywordType) {
    switch (keywordType) {
      case helpers_1.KeywordType.Event:
        return 'When';
      case helpers_1.KeywordType.Outcome:
        return 'Then';
      case helpers_1.KeywordType.Precondition:
        return 'Given';
    }
  }
  getStepParameterNames(step) {
    if ((0, value_checker_1.doesHaveValue)(step.argument)) {
      const argumentName = (0, step_arguments_1.parseStepArgument)(step.argument, {
        dataTable: () => 'dataTable',
        docString: () => 'docString'
      });
      return [argumentName];
    }
    return [];
  }
}
exports.default = StepDefinitionSnippetBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJoZWxwZXJzXzEiLCJyZXF1aXJlIiwic3RlcF9hcmd1bWVudHNfMSIsImN1Y3VtYmVyX2V4cHJlc3Npb25zXzEiLCJ2YWx1ZV9jaGVja2VyXzEiLCJTdGVwRGVmaW5pdGlvblNuaXBwZXRCdWlsZGVyIiwiY29uc3RydWN0b3IiLCJzbmlwcGV0U3ludGF4IiwicGFyYW1ldGVyVHlwZVJlZ2lzdHJ5IiwiY3VjdW1iZXJFeHByZXNzaW9uR2VuZXJhdG9yIiwiQ3VjdW1iZXJFeHByZXNzaW9uR2VuZXJhdG9yIiwicGFyYW1ldGVyVHlwZXMiLCJidWlsZCIsImtleXdvcmRUeXBlIiwicGlja2xlU3RlcCIsImNvbW1lbnQiLCJmdW5jdGlvbk5hbWUiLCJnZXRGdW5jdGlvbk5hbWUiLCJnZW5lcmF0ZWRFeHByZXNzaW9ucyIsImdlbmVyYXRlRXhwcmVzc2lvbnMiLCJ0ZXh0Iiwic3RlcFBhcmFtZXRlck5hbWVzIiwiZ2V0U3RlcFBhcmFtZXRlck5hbWVzIiwiS2V5d29yZFR5cGUiLCJFdmVudCIsIk91dGNvbWUiLCJQcmVjb25kaXRpb24iLCJzdGVwIiwiZG9lc0hhdmVWYWx1ZSIsImFyZ3VtZW50IiwiYXJndW1lbnROYW1lIiwicGFyc2VTdGVwQXJndW1lbnQiLCJkYXRhVGFibGUiLCJkb2NTdHJpbmciLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9mb3JtYXR0ZXIvc3RlcF9kZWZpbml0aW9uX3NuaXBwZXRfYnVpbGRlci9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLZXl3b3JkVHlwZSB9IGZyb20gJy4uL2hlbHBlcnMnXG5pbXBvcnQgeyBwYXJzZVN0ZXBBcmd1bWVudCB9IGZyb20gJy4uLy4uL3N0ZXBfYXJndW1lbnRzJ1xuaW1wb3J0IHsgSVNuaXBwZXRTbnl0YXggfSBmcm9tICcuL3NuaXBwZXRfc3ludGF4J1xuaW1wb3J0IHtcbiAgQ3VjdW1iZXJFeHByZXNzaW9uR2VuZXJhdG9yLFxuICBQYXJhbWV0ZXJUeXBlUmVnaXN0cnksXG59IGZyb20gJ0BjdWN1bWJlci9jdWN1bWJlci1leHByZXNzaW9ucydcbmltcG9ydCAqIGFzIG1lc3NhZ2VzIGZyb20gJ0BjdWN1bWJlci9tZXNzYWdlcydcbmltcG9ydCB7IGRvZXNIYXZlVmFsdWUgfSBmcm9tICcuLi8uLi92YWx1ZV9jaGVja2VyJ1xuXG5leHBvcnQgaW50ZXJmYWNlIElOZXdTdGVwRGVmaW5pdGlvblNuaXBwZXRCdWlsZGVyT3B0aW9ucyB7XG4gIHNuaXBwZXRTeW50YXg6IElTbmlwcGV0U255dGF4XG4gIHBhcmFtZXRlclR5cGVSZWdpc3RyeTogUGFyYW1ldGVyVHlwZVJlZ2lzdHJ5XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUJ1aWxkUmVxdWVzdCB7XG4gIGtleXdvcmRUeXBlOiBLZXl3b3JkVHlwZVxuICBwaWNrbGVTdGVwOiBtZXNzYWdlcy5QaWNrbGVTdGVwXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0ZXBEZWZpbml0aW9uU25pcHBldEJ1aWxkZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IHNuaXBwZXRTeW50YXg6IElTbmlwcGV0U255dGF4XG4gIHByaXZhdGUgcmVhZG9ubHkgY3VjdW1iZXJFeHByZXNzaW9uR2VuZXJhdG9yOiBDdWN1bWJlckV4cHJlc3Npb25HZW5lcmF0b3JcblxuICBjb25zdHJ1Y3Rvcih7XG4gICAgc25pcHBldFN5bnRheCxcbiAgICBwYXJhbWV0ZXJUeXBlUmVnaXN0cnksXG4gIH06IElOZXdTdGVwRGVmaW5pdGlvblNuaXBwZXRCdWlsZGVyT3B0aW9ucykge1xuICAgIHRoaXMuc25pcHBldFN5bnRheCA9IHNuaXBwZXRTeW50YXhcbiAgICB0aGlzLmN1Y3VtYmVyRXhwcmVzc2lvbkdlbmVyYXRvciA9IG5ldyBDdWN1bWJlckV4cHJlc3Npb25HZW5lcmF0b3IoXG4gICAgICAoKSA9PiBwYXJhbWV0ZXJUeXBlUmVnaXN0cnkucGFyYW1ldGVyVHlwZXNcbiAgICApXG4gIH1cblxuICBidWlsZCh7IGtleXdvcmRUeXBlLCBwaWNrbGVTdGVwIH06IElCdWlsZFJlcXVlc3QpOiBzdHJpbmcge1xuICAgIGNvbnN0IGNvbW1lbnQgPVxuICAgICAgJ1dyaXRlIGNvZGUgaGVyZSB0aGF0IHR1cm5zIHRoZSBwaHJhc2UgYWJvdmUgaW50byBjb25jcmV0ZSBhY3Rpb25zJ1xuICAgIGNvbnN0IGZ1bmN0aW9uTmFtZSA9IHRoaXMuZ2V0RnVuY3Rpb25OYW1lKGtleXdvcmRUeXBlKVxuICAgIGNvbnN0IGdlbmVyYXRlZEV4cHJlc3Npb25zID1cbiAgICAgIHRoaXMuY3VjdW1iZXJFeHByZXNzaW9uR2VuZXJhdG9yLmdlbmVyYXRlRXhwcmVzc2lvbnMocGlja2xlU3RlcC50ZXh0KVxuICAgIGNvbnN0IHN0ZXBQYXJhbWV0ZXJOYW1lcyA9IHRoaXMuZ2V0U3RlcFBhcmFtZXRlck5hbWVzKHBpY2tsZVN0ZXApXG4gICAgcmV0dXJuIHRoaXMuc25pcHBldFN5bnRheC5idWlsZCh7XG4gICAgICBjb21tZW50LFxuICAgICAgZnVuY3Rpb25OYW1lLFxuICAgICAgZ2VuZXJhdGVkRXhwcmVzc2lvbnMsXG4gICAgICBzdGVwUGFyYW1ldGVyTmFtZXMsXG4gICAgfSlcbiAgfVxuXG4gIGdldEZ1bmN0aW9uTmFtZShrZXl3b3JkVHlwZTogS2V5d29yZFR5cGUpOiBzdHJpbmcge1xuICAgIHN3aXRjaCAoa2V5d29yZFR5cGUpIHtcbiAgICAgIGNhc2UgS2V5d29yZFR5cGUuRXZlbnQ6XG4gICAgICAgIHJldHVybiAnV2hlbidcbiAgICAgIGNhc2UgS2V5d29yZFR5cGUuT3V0Y29tZTpcbiAgICAgICAgcmV0dXJuICdUaGVuJ1xuICAgICAgY2FzZSBLZXl3b3JkVHlwZS5QcmVjb25kaXRpb246XG4gICAgICAgIHJldHVybiAnR2l2ZW4nXG4gICAgfVxuICB9XG5cbiAgZ2V0U3RlcFBhcmFtZXRlck5hbWVzKHN0ZXA6IG1lc3NhZ2VzLlBpY2tsZVN0ZXApOiBzdHJpbmdbXSB7XG4gICAgaWYgKGRvZXNIYXZlVmFsdWUoc3RlcC5hcmd1bWVudCkpIHtcbiAgICAgIGNvbnN0IGFyZ3VtZW50TmFtZSA9IHBhcnNlU3RlcEFyZ3VtZW50KHN0ZXAuYXJndW1lbnQsIHtcbiAgICAgICAgZGF0YVRhYmxlOiAoKSA9PiAnZGF0YVRhYmxlJyxcbiAgICAgICAgZG9jU3RyaW5nOiAoKSA9PiAnZG9jU3RyaW5nJyxcbiAgICAgIH0pXG4gICAgICByZXR1cm4gW2FyZ3VtZW50TmFtZV1cbiAgICB9XG4gICAgcmV0dXJuIFtdXG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxNQUFBQSxTQUFBLEdBQUFDLE9BQUE7QUFDQSxNQUFBQyxnQkFBQSxHQUFBRCxPQUFBO0FBRUEsTUFBQUUsc0JBQUEsR0FBQUYsT0FBQTtBQUtBLE1BQUFHLGVBQUEsR0FBQUgsT0FBQTtBQVlBLE1BQXFCSSw0QkFBNEI7RUFJL0NDLFlBQVk7SUFDVkMsYUFBYTtJQUNiQztFQUFxQixDQUNtQjtJQUN4QyxJQUFJLENBQUNELGFBQWEsR0FBR0EsYUFBYTtJQUNsQyxJQUFJLENBQUNFLDJCQUEyQixHQUFHLElBQUlOLHNCQUFBLENBQUFPLDJCQUEyQixDQUNoRSxNQUFNRixxQkFBcUIsQ0FBQ0csY0FBYyxDQUMzQztFQUNIO0VBRUFDLEtBQUtBLENBQUM7SUFBRUMsV0FBVztJQUFFQztFQUFVLENBQWlCO0lBQzlDLE1BQU1DLE9BQU8sR0FDWCxtRUFBbUU7SUFDckUsTUFBTUMsWUFBWSxHQUFHLElBQUksQ0FBQ0MsZUFBZSxDQUFDSixXQUFXLENBQUM7SUFDdEQsTUFBTUssb0JBQW9CLEdBQ3hCLElBQUksQ0FBQ1QsMkJBQTJCLENBQUNVLG1CQUFtQixDQUFDTCxVQUFVLENBQUNNLElBQUksQ0FBQztJQUN2RSxNQUFNQyxrQkFBa0IsR0FBRyxJQUFJLENBQUNDLHFCQUFxQixDQUFDUixVQUFVLENBQUM7SUFDakUsT0FBTyxJQUFJLENBQUNQLGFBQWEsQ0FBQ0ssS0FBSyxDQUFDO01BQzlCRyxPQUFPO01BQ1BDLFlBQVk7TUFDWkUsb0JBQW9CO01BQ3BCRztLQUNELENBQUM7RUFDSjtFQUVBSixlQUFlQSxDQUFDSixXQUF3QjtJQUN0QyxRQUFRQSxXQUFXO01BQ2pCLEtBQUtiLFNBQUEsQ0FBQXVCLFdBQVcsQ0FBQ0MsS0FBSztRQUNwQixPQUFPLE1BQU07TUFDZixLQUFLeEIsU0FBQSxDQUFBdUIsV0FBVyxDQUFDRSxPQUFPO1FBQ3RCLE9BQU8sTUFBTTtNQUNmLEtBQUt6QixTQUFBLENBQUF1QixXQUFXLENBQUNHLFlBQVk7UUFDM0IsT0FBTyxPQUFPO0lBQUE7RUFFcEI7RUFFQUoscUJBQXFCQSxDQUFDSyxJQUF5QjtJQUM3QyxJQUFJLElBQUF2QixlQUFBLENBQUF3QixhQUFhLEVBQUNELElBQUksQ0FBQ0UsUUFBUSxDQUFDLEVBQUU7TUFDaEMsTUFBTUMsWUFBWSxHQUFHLElBQUE1QixnQkFBQSxDQUFBNkIsaUJBQWlCLEVBQUNKLElBQUksQ0FBQ0UsUUFBUSxFQUFFO1FBQ3BERyxTQUFTLEVBQUVBLENBQUEsS0FBTSxXQUFXO1FBQzVCQyxTQUFTLEVBQUVBLENBQUEsS0FBTTtPQUNsQixDQUFDO01BQ0YsT0FBTyxDQUFDSCxZQUFZLENBQUM7O0lBRXZCLE9BQU8sRUFBRTtFQUNYOztBQWpERkksT0FBQSxDQUFBQyxPQUFBLEdBQUE5Qiw0QkFBQSJ9