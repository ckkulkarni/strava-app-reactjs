00248db718396c31f482723607a33234
"use strict";

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArrayMultimap = void 0;
var multimap_1 = require("./multimap");
var ArrayMultimap = /** @class */function (_super) {
  __extends(ArrayMultimap, _super);
  function ArrayMultimap(iterable) {
    return _super.call(this, new ArrayOperator(), iterable) || this;
  }
  Object.defineProperty(ArrayMultimap.prototype, Symbol.toStringTag, {
    get: function () {
      return "ArrayMultimap";
    },
    enumerable: false,
    configurable: true
  });
  return ArrayMultimap;
}(multimap_1.Multimap);
exports.ArrayMultimap = ArrayMultimap;
var ArrayOperator = /** @class */function () {
  function ArrayOperator() {}
  ArrayOperator.prototype.create = function () {
    return [];
  };
  ArrayOperator.prototype.clone = function (collection) {
    return collection.slice();
  };
  ArrayOperator.prototype.add = function (value, collection) {
    collection.push(value);
    return true;
  };
  ArrayOperator.prototype.size = function (collection) {
    return collection.length;
  };
  ArrayOperator.prototype.delete = function (value, collection) {
    var index = collection.indexOf(value);
    if (index > -1) {
      collection.splice(index, 1);
      return true;
    }
    return false;
  };
  ArrayOperator.prototype.has = function (value, collection) {
    return collection.includes(value);
  };
  return ArrayOperator;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9fIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkFycmF5TXVsdGltYXAiLCJtdWx0aW1hcF8xIiwicmVxdWlyZSIsIl9zdXBlciIsIml0ZXJhYmxlIiwiQXJyYXlPcGVyYXRvciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiZ2V0IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIk11bHRpbWFwIiwiY2xvbmUiLCJjb2xsZWN0aW9uIiwic2xpY2UiLCJhZGQiLCJwdXNoIiwic2l6ZSIsImxlbmd0aCIsImRlbGV0ZSIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImhhcyIsImluY2x1ZGVzIl0sInNvdXJjZXMiOlsiYXJyYXltdWx0aW1hcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFycmF5TXVsdGltYXAgPSB2b2lkIDA7XG52YXIgbXVsdGltYXBfMSA9IHJlcXVpcmUoXCIuL211bHRpbWFwXCIpO1xudmFyIEFycmF5TXVsdGltYXAgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFycmF5TXVsdGltYXAsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXJyYXlNdWx0aW1hcChpdGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgbmV3IEFycmF5T3BlcmF0b3IoKSwgaXRlcmFibGUpIHx8IHRoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheU11bHRpbWFwLnByb3RvdHlwZSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiQXJyYXlNdWx0aW1hcFwiO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIEFycmF5TXVsdGltYXA7XG59KG11bHRpbWFwXzEuTXVsdGltYXApKTtcbmV4cG9ydHMuQXJyYXlNdWx0aW1hcCA9IEFycmF5TXVsdGltYXA7XG52YXIgQXJyYXlPcGVyYXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBcnJheU9wZXJhdG9yKCkge1xuICAgIH1cbiAgICBBcnJheU9wZXJhdG9yLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9O1xuICAgIEFycmF5T3BlcmF0b3IucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uc2xpY2UoKTtcbiAgICB9O1xuICAgIEFycmF5T3BlcmF0b3IucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh2YWx1ZSwgY29sbGVjdGlvbikge1xuICAgICAgICBjb2xsZWN0aW9uLnB1c2godmFsdWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIEFycmF5T3BlcmF0b3IucHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbiAoY29sbGVjdGlvbikge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgfTtcbiAgICBBcnJheU9wZXJhdG9yLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodmFsdWUsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY29sbGVjdGlvbi5pbmRleE9mKHZhbHVlKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIGNvbGxlY3Rpb24uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIEFycmF5T3BlcmF0b3IucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uICh2YWx1ZSwgY29sbGVjdGlvbikge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5pbmNsdWRlcyh2YWx1ZSk7XG4gICAgfTtcbiAg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