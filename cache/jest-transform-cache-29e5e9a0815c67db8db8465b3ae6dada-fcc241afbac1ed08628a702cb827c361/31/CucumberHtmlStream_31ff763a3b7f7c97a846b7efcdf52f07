e6443d308052b57b9725153e778f6d0a
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
const fs_1 = __importDefault(require("fs"));
const stream_1 = require("stream");
class CucumberHtmlStream extends stream_1.Transform {
  /**
   * @param cssPath
   * @param jsPath
   */
  constructor(cssPath, jsPath) {
    super({
      objectMode: true
    });
    this.cssPath = cssPath;
    this.jsPath = jsPath;
    this.template = null;
    this.preMessageWritten = false;
    this.postMessageWritten = false;
    this.firstMessageWritten = false;
  }
  _transform(envelope, encoding, callback) {
    if (this.postMessageWritten) {
      return callback(new Error('Stream closed'));
    }
    this.writePreMessageUnlessAlreadyWritten(err => {
      if (err) return callback(err);
      this.writeMessage(envelope);
      callback();
    });
  }
  _flush(callback) {
    this.writePostMessage(callback);
  }
  writePreMessageUnlessAlreadyWritten(callback) {
    if (this.preMessageWritten) {
      return callback();
    }
    this.preMessageWritten = true;
    this.writeTemplateBetween(null, '{{css}}', err => {
      if (err) return callback(err);
      this.writeFile(this.cssPath, err => {
        if (err) return callback(err);
        this.writeTemplateBetween('{{css}}', '{{messages}}', err => {
          if (err) return callback(err);
          callback();
        });
      });
    });
  }
  writePostMessage(callback) {
    this.writePreMessageUnlessAlreadyWritten(err => {
      if (err) return callback(err);
      this.writeTemplateBetween('{{messages}}', '{{script}}', err => {
        if (err) return callback(err);
        this.writeFile(this.jsPath, err => {
          if (err) return callback(err);
          this.writeTemplateBetween('{{script}}', null, callback);
        });
      });
    });
  }
  writeFile(path, callback) {
    const cssStream = fs_1.default.createReadStream(path, {
      encoding: 'utf-8'
    });
    cssStream.on('data', chunk => this.push(chunk));
    cssStream.on('error', err => callback(err));
    cssStream.on('end', callback);
  }
  writeTemplateBetween(begin, end, callback) {
    this.readTemplate((err, template) => {
      if (err) return callback(err);
      if (!template) return callback(new Error('template is required if error is missing'));
      const beginIndex = begin == null ? 0 : template.indexOf(begin) + begin.length;
      const endIndex = end == null ? template.length : template.indexOf(end);
      this.push(template.substring(beginIndex, endIndex));
      callback();
    });
  }
  readTemplate(callback) {
    if (this.template !== null) {
      return callback(null, this.template);
    }
    fs_1.default.readFile(__dirname + '/index.mustache.html', {
      encoding: 'utf-8'
    }, (err, template) => {
      if (err) return callback(err);
      this.template = template;
      return callback(null, template);
    });
  }
  writeMessage(envelope) {
    if (!this.firstMessageWritten) {
      this.firstMessageWritten = true;
    } else {
      this.push(',');
    }
    this.push(JSON.stringify(envelope));
  }
}
exports.default = CucumberHtmlStream;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmc18xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInN0cmVhbV8xIiwiQ3VjdW1iZXJIdG1sU3RyZWFtIiwiVHJhbnNmb3JtIiwiY29uc3RydWN0b3IiLCJjc3NQYXRoIiwianNQYXRoIiwib2JqZWN0TW9kZSIsInRlbXBsYXRlIiwicHJlTWVzc2FnZVdyaXR0ZW4iLCJwb3N0TWVzc2FnZVdyaXR0ZW4iLCJmaXJzdE1lc3NhZ2VXcml0dGVuIiwiX3RyYW5zZm9ybSIsImVudmVsb3BlIiwiZW5jb2RpbmciLCJjYWxsYmFjayIsIkVycm9yIiwid3JpdGVQcmVNZXNzYWdlVW5sZXNzQWxyZWFkeVdyaXR0ZW4iLCJlcnIiLCJ3cml0ZU1lc3NhZ2UiLCJfZmx1c2giLCJ3cml0ZVBvc3RNZXNzYWdlIiwid3JpdGVUZW1wbGF0ZUJldHdlZW4iLCJ3cml0ZUZpbGUiLCJwYXRoIiwiY3NzU3RyZWFtIiwiZGVmYXVsdCIsImNyZWF0ZVJlYWRTdHJlYW0iLCJvbiIsImNodW5rIiwicHVzaCIsImJlZ2luIiwiZW5kIiwicmVhZFRlbXBsYXRlIiwiYmVnaW5JbmRleCIsImluZGV4T2YiLCJsZW5ndGgiLCJlbmRJbmRleCIsInN1YnN0cmluZyIsInJlYWRGaWxlIiwiX19kaXJuYW1lIiwiSlNPTiIsInN0cmluZ2lmeSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvQ3VjdW1iZXJIdG1sU3RyZWFtLnRzIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQ0EsTUFBQUEsSUFBQSxHQUFBQyxlQUFBLENBQUFDLE9BQUE7QUFDQSxNQUFBQyxRQUFBLEdBQUFELE9BQUE7QUFFQSxNQUFxQkUsa0JBQW1CLFNBQVFELFFBQUEsQ0FBQUUsU0FBUztFQUt2RDs7OztFQUlBQyxZQUNtQkMsT0FBZSxFQUNmQyxNQUFjO0lBRS9CLEtBQUssQ0FBQztNQUFFQyxVQUFVLEVBQUU7SUFBSSxDQUFFLENBQUM7SUFIVixLQUFBRixPQUFPLEdBQVBBLE9BQU87SUFDUCxLQUFBQyxNQUFNLEdBQU5BLE1BQU07SUFWakIsS0FBQUUsUUFBUSxHQUFrQixJQUFJO0lBQzlCLEtBQUFDLGlCQUFpQixHQUFHLEtBQUs7SUFDekIsS0FBQUMsa0JBQWtCLEdBQUcsS0FBSztJQUMxQixLQUFBQyxtQkFBbUIsR0FBRyxLQUFLO0VBVW5DO0VBRU9DLFVBQVVBLENBQ2ZDLFFBQTJCLEVBQzNCQyxRQUFnQixFQUNoQkMsUUFBMkI7SUFFM0IsSUFBSSxJQUFJLENBQUNMLGtCQUFrQixFQUFFO01BQzNCLE9BQU9LLFFBQVEsQ0FBQyxJQUFJQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7O0lBRzdDLElBQUksQ0FBQ0MsbUNBQW1DLENBQUVDLEdBQUcsSUFBSTtNQUMvQyxJQUFJQSxHQUFHLEVBQUUsT0FBT0gsUUFBUSxDQUFDRyxHQUFHLENBQUM7TUFDN0IsSUFBSSxDQUFDQyxZQUFZLENBQUNOLFFBQVEsQ0FBQztNQUMzQkUsUUFBUSxFQUFFO0lBQ1osQ0FBQyxDQUFDO0VBQ0o7RUFFT0ssTUFBTUEsQ0FBQ0wsUUFBMkI7SUFDdkMsSUFBSSxDQUFDTSxnQkFBZ0IsQ0FBQ04sUUFBUSxDQUFDO0VBQ2pDO0VBRVFFLG1DQUFtQ0EsQ0FBQ0YsUUFBMkI7SUFDckUsSUFBSSxJQUFJLENBQUNOLGlCQUFpQixFQUFFO01BQzFCLE9BQU9NLFFBQVEsRUFBRTs7SUFFbkIsSUFBSSxDQUFDTixpQkFBaUIsR0FBRyxJQUFJO0lBQzdCLElBQUksQ0FBQ2Esb0JBQW9CLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBR0osR0FBRyxJQUFJO01BQ2pELElBQUlBLEdBQUcsRUFBRSxPQUFPSCxRQUFRLENBQUNHLEdBQUcsQ0FBQztNQUM3QixJQUFJLENBQUNLLFNBQVMsQ0FBQyxJQUFJLENBQUNsQixPQUFPLEVBQUdhLEdBQUcsSUFBSTtRQUNuQyxJQUFJQSxHQUFHLEVBQUUsT0FBT0gsUUFBUSxDQUFDRyxHQUFHLENBQUM7UUFDN0IsSUFBSSxDQUFDSSxvQkFBb0IsQ0FBQyxTQUFTLEVBQUUsY0FBYyxFQUFHSixHQUFHLElBQUk7VUFDM0QsSUFBSUEsR0FBRyxFQUFFLE9BQU9ILFFBQVEsQ0FBQ0csR0FBRyxDQUFDO1VBQzdCSCxRQUFRLEVBQUU7UUFDWixDQUFDLENBQUM7TUFDSixDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7RUFDSjtFQUVRTSxnQkFBZ0JBLENBQUNOLFFBQTJCO0lBQ2xELElBQUksQ0FBQ0UsbUNBQW1DLENBQUVDLEdBQUcsSUFBSTtNQUMvQyxJQUFJQSxHQUFHLEVBQUUsT0FBT0gsUUFBUSxDQUFDRyxHQUFHLENBQUM7TUFDN0IsSUFBSSxDQUFDSSxvQkFBb0IsQ0FBQyxjQUFjLEVBQUUsWUFBWSxFQUFHSixHQUFHLElBQUk7UUFDOUQsSUFBSUEsR0FBRyxFQUFFLE9BQU9ILFFBQVEsQ0FBQ0csR0FBRyxDQUFDO1FBQzdCLElBQUksQ0FBQ0ssU0FBUyxDQUFDLElBQUksQ0FBQ2pCLE1BQU0sRUFBR1ksR0FBRyxJQUFJO1VBQ2xDLElBQUlBLEdBQUcsRUFBRSxPQUFPSCxRQUFRLENBQUNHLEdBQUcsQ0FBQztVQUM3QixJQUFJLENBQUNJLG9CQUFvQixDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUVQLFFBQVEsQ0FBQztRQUN6RCxDQUFDLENBQUM7TUFDSixDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7RUFDSjtFQUVRUSxTQUFTQSxDQUFDQyxJQUFZLEVBQUVULFFBQXdDO0lBQ3RFLE1BQU1VLFNBQVMsR0FBYTNCLElBQUEsQ0FBQTRCLE9BQUUsQ0FBQ0MsZ0JBQWdCLENBQUNILElBQUksRUFBRTtNQUFFVixRQUFRLEVBQUU7SUFBTyxDQUFFLENBQUM7SUFDNUVXLFNBQVMsQ0FBQ0csRUFBRSxDQUFDLE1BQU0sRUFBR0MsS0FBSyxJQUFLLElBQUksQ0FBQ0MsSUFBSSxDQUFDRCxLQUFLLENBQUMsQ0FBQztJQUNqREosU0FBUyxDQUFDRyxFQUFFLENBQUMsT0FBTyxFQUFHVixHQUFHLElBQUtILFFBQVEsQ0FBQ0csR0FBRyxDQUFDLENBQUM7SUFDN0NPLFNBQVMsQ0FBQ0csRUFBRSxDQUFDLEtBQUssRUFBRWIsUUFBUSxDQUFDO0VBQy9CO0VBRVFPLG9CQUFvQkEsQ0FDMUJTLEtBQW9CLEVBQ3BCQyxHQUFrQixFQUNsQmpCLFFBQXNDO0lBRXRDLElBQUksQ0FBQ2tCLFlBQVksQ0FBQyxDQUFDZixHQUFHLEVBQUVWLFFBQVEsS0FBSTtNQUNsQyxJQUFJVSxHQUFHLEVBQUUsT0FBT0gsUUFBUSxDQUFDRyxHQUFHLENBQUM7TUFDN0IsSUFBSSxDQUFDVixRQUFRLEVBQ1gsT0FBT08sUUFBUSxDQUFDLElBQUlDLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO01BQ3hFLE1BQU1rQixVQUFVLEdBQ2RILEtBQUssSUFBSSxJQUFJLEdBQUcsQ0FBQyxHQUFHdkIsUUFBUSxDQUFDMkIsT0FBTyxDQUFDSixLQUFLLENBQUMsR0FBR0EsS0FBSyxDQUFDSyxNQUFNO01BQzVELE1BQU1DLFFBQVEsR0FBR0wsR0FBRyxJQUFJLElBQUksR0FBR3hCLFFBQVEsQ0FBQzRCLE1BQU0sR0FBRzVCLFFBQVEsQ0FBQzJCLE9BQU8sQ0FBQ0gsR0FBRyxDQUFDO01BQ3RFLElBQUksQ0FBQ0YsSUFBSSxDQUFDdEIsUUFBUSxDQUFDOEIsU0FBUyxDQUFDSixVQUFVLEVBQUVHLFFBQVEsQ0FBQyxDQUFDO01BQ25EdEIsUUFBUSxFQUFFO0lBQ1osQ0FBQyxDQUFDO0VBQ0o7RUFFUWtCLFlBQVlBLENBQ2xCbEIsUUFBdUQ7SUFFdkQsSUFBSSxJQUFJLENBQUNQLFFBQVEsS0FBSyxJQUFJLEVBQUU7TUFDMUIsT0FBT08sUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUNQLFFBQVEsQ0FBQzs7SUFFdENWLElBQUEsQ0FBQTRCLE9BQUUsQ0FBQ2EsUUFBUSxDQUNUQyxTQUFTLEdBQUcsc0JBQXNCLEVBQ2xDO01BQUUxQixRQUFRLEVBQUU7SUFBTyxDQUFFLEVBQ3JCLENBQUNJLEdBQUcsRUFBRVYsUUFBUSxLQUFJO01BQ2hCLElBQUlVLEdBQUcsRUFBRSxPQUFPSCxRQUFRLENBQUNHLEdBQUcsQ0FBQztNQUM3QixJQUFJLENBQUNWLFFBQVEsR0FBR0EsUUFBUTtNQUN4QixPQUFPTyxRQUFRLENBQUMsSUFBSSxFQUFFUCxRQUFRLENBQUM7SUFDakMsQ0FBQyxDQUNGO0VBQ0g7RUFFUVcsWUFBWUEsQ0FBQ04sUUFBMkI7SUFDOUMsSUFBSSxDQUFDLElBQUksQ0FBQ0YsbUJBQW1CLEVBQUU7TUFDN0IsSUFBSSxDQUFDQSxtQkFBbUIsR0FBRyxJQUFJO0tBQ2hDLE1BQU07TUFDTCxJQUFJLENBQUNtQixJQUFJLENBQUMsR0FBRyxDQUFDOztJQUVoQixJQUFJLENBQUNBLElBQUksQ0FBQ1csSUFBSSxDQUFDQyxTQUFTLENBQUM3QixRQUFRLENBQUMsQ0FBQztFQUNyQzs7QUFsSEY4QixPQUFBLENBQUFqQixPQUFBLEdBQUF4QixrQkFBQSJ9