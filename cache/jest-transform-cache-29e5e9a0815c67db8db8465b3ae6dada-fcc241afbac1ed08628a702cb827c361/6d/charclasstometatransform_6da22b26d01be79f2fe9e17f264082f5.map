{"version":3,"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","module","exports","_hasIFlag","_hasUFlag","init","ast","flags","includes","CharacterClass","path","rewriteNumberRanges","rewriteWordRanges","rewriteWhitespaceRanges","node","expressions","forEach","expression","isFullNumberRange","getChild","replace","type","value","kind","hasIFlag","hasUFlag","numberPath","lowerCasePath","upperCasePath","underscorePath","u017fPath","u212aPath","isMetaChar","isLowerCaseRange","isUpperCaseRange","isUnderscore","isCodePoint","remove","whitespaceRangeTests","isChar","concat","map","char","codePoint","to","every","test","some","nNode","find","symbol","undefined","NaN","filter","Boolean","arguments"],"sources":["char-class-to-meta-transform.js"],"sourcesContent":["/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n'use strict';\n\n/**\n * A regexp-tree plugin to replace standard character classes with\n * their meta symbols equivalents.\n */\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nmodule.exports = {\n  _hasIFlag: false,\n  _hasUFlag: false,\n  init: function init(ast) {\n    this._hasIFlag = ast.flags.includes('i');\n    this._hasUFlag = ast.flags.includes('u');\n  },\n  CharacterClass: function CharacterClass(path) {\n    // [0-9] -> \\d\n    rewriteNumberRanges(path);\n\n    // [a-zA-Z_0-9] -> \\w\n    rewriteWordRanges(path, this._hasIFlag, this._hasUFlag);\n\n    // [ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff] -> \\s\n    rewriteWhitespaceRanges(path);\n  }\n};\n\n/**\n * Rewrites number ranges: [0-9] -> \\d\n */\nfunction rewriteNumberRanges(path) {\n  var node = path.node;\n\n\n  node.expressions.forEach(function (expression, i) {\n    if (isFullNumberRange(expression)) {\n      path.getChild(i).replace({\n        type: 'Char',\n        value: '\\\\d',\n        kind: 'meta'\n      });\n    }\n  });\n}\n\n/**\n * Rewrites word ranges: [a-zA-Z_0-9] -> \\w\n * Thus, the ranges may go in any order, and other symbols/ranges\n * are kept untouched, e.g. [a-z_\\dA-Z$] -> [\\w$]\n */\nfunction rewriteWordRanges(path, hasIFlag, hasUFlag) {\n  var node = path.node;\n\n\n  var numberPath = null;\n  var lowerCasePath = null;\n  var upperCasePath = null;\n  var underscorePath = null;\n  var u017fPath = null;\n  var u212aPath = null;\n\n  node.expressions.forEach(function (expression, i) {\n    // \\d\n    if (isMetaChar(expression, '\\\\d')) {\n      numberPath = path.getChild(i);\n    }\n\n    // a-z\n    else if (isLowerCaseRange(expression)) {\n        lowerCasePath = path.getChild(i);\n      }\n\n      // A-Z\n      else if (isUpperCaseRange(expression)) {\n          upperCasePath = path.getChild(i);\n        }\n\n        // _\n        else if (isUnderscore(expression)) {\n            underscorePath = path.getChild(i);\n          } else if (hasIFlag && hasUFlag && isCodePoint(expression, 0x017f)) {\n            u017fPath = path.getChild(i);\n          } else if (hasIFlag && hasUFlag && isCodePoint(expression, 0x212a)) {\n            u212aPath = path.getChild(i);\n          }\n  });\n\n  // If we found the whole pattern, replace it.\n  if (numberPath && (lowerCasePath && upperCasePath || hasIFlag && (lowerCasePath || upperCasePath)) && underscorePath && (!hasUFlag || !hasIFlag || u017fPath && u212aPath)) {\n    // Put \\w in place of \\d.\n    numberPath.replace({\n      type: 'Char',\n      value: '\\\\w',\n      kind: 'meta'\n    });\n\n    // Other paths are removed.\n    if (lowerCasePath) {\n      lowerCasePath.remove();\n    }\n    if (upperCasePath) {\n      upperCasePath.remove();\n    }\n    underscorePath.remove();\n    if (u017fPath) {\n      u017fPath.remove();\n    }\n    if (u212aPath) {\n      u212aPath.remove();\n    }\n  }\n}\n\n/**\n * Rewrites whitespace ranges: [ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff] -> \\s.\n */\nvar whitespaceRangeTests = [function (node) {\n  return isChar(node, ' ');\n}].concat(_toConsumableArray(['\\\\f', '\\\\n', '\\\\r', '\\\\t', '\\\\v'].map(function (char) {\n  return function (node) {\n    return isMetaChar(node, char);\n  };\n})), _toConsumableArray([0x00a0, 0x1680, 0x2028, 0x2029, 0x202f, 0x205f, 0x3000, 0xfeff].map(function (codePoint) {\n  return function (node) {\n    return isCodePoint(node, codePoint);\n  };\n})), [function (node) {\n  return node.type === 'ClassRange' && isCodePoint(node.from, 0x2000) && isCodePoint(node.to, 0x200a);\n}]);\n\nfunction rewriteWhitespaceRanges(path) {\n  var node = path.node;\n\n\n  if (node.expressions.length < whitespaceRangeTests.length || !whitespaceRangeTests.every(function (test) {\n    return node.expressions.some(function (expression) {\n      return test(expression);\n    });\n  })) {\n    return;\n  }\n\n  // If we found the whole pattern, replace it.\n\n  // Put \\s in place of \\n.\n  var nNode = node.expressions.find(function (expression) {\n    return isMetaChar(expression, '\\\\n');\n  });\n  nNode.value = '\\\\s';\n  nNode.symbol = undefined;\n  nNode.codePoint = NaN;\n\n  // Other paths are removed.\n  node.expressions.map(function (expression, i) {\n    return whitespaceRangeTests.some(function (test) {\n      return test(expression);\n    }) ? path.getChild(i) : undefined;\n  }).filter(Boolean).forEach(function (path) {\n    return path.remove();\n  });\n}\n\nfunction isFullNumberRange(node) {\n  return node.type === 'ClassRange' && node.from.value === '0' && node.to.value === '9';\n}\n\nfunction isChar(node, value) {\n  var kind = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'simple';\n\n  return node.type === 'Char' && node.value === value && node.kind === kind;\n}\n\nfunction isMetaChar(node, value) {\n  return isChar(node, value, 'meta');\n}\n\nfunction isLowerCaseRange(node) {\n  return node.type === 'ClassRange' && node.from.value === 'a' && node.to.value === 'z';\n}\n\nfunction isUpperCaseRange(node) {\n  return node.type === 'ClassRange' && node.from.value === 'A' && node.to.value === 'Z';\n}\n\nfunction isUnderscore(node) {\n  return node.type === 'Char' && node.value === '_' && node.kind === 'simple';\n}\n\nfunction isCodePoint(node, codePoint) {\n  return node.type === 'Char' && node.kind === 'unicode' && node.codePoint === codePoint;\n}"],"mappings":"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"}