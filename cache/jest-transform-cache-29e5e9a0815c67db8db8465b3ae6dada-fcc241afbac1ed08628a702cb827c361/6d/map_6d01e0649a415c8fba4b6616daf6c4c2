d93f8877d827bee8d159286fec976c3b
'use strict';

var Node = require('../../nodes/Node.js');
var Pair = require('../../nodes/Pair.js');
var YAMLMap = require('../../nodes/YAMLMap.js');
function createMap(schema, obj, ctx) {
  const {
    keepUndefined,
    replacer
  } = ctx;
  const map = new YAMLMap.YAMLMap(schema);
  const add = (key, value) => {
    if (typeof replacer === 'function') value = replacer.call(obj, key, value);else if (Array.isArray(replacer) && !replacer.includes(key)) return;
    if (value !== undefined || keepUndefined) map.items.push(Pair.createPair(key, value, ctx));
  };
  if (obj instanceof Map) {
    for (const [key, value] of obj) add(key, value);
  } else if (obj && typeof obj === 'object') {
    for (const key of Object.keys(obj)) add(key, obj[key]);
  }
  if (typeof schema.sortMapEntries === 'function') {
    map.items.sort(schema.sortMapEntries);
  }
  return map;
}
const map = {
  collection: 'map',
  createNode: createMap,
  default: true,
  nodeClass: YAMLMap.YAMLMap,
  tag: 'tag:yaml.org,2002:map',
  resolve(map, onError) {
    if (!Node.isMap(map)) onError('Expected a mapping for this tag');
    return map;
  }
};
exports.map = map;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwicmVxdWlyZSIsIlBhaXIiLCJZQU1MTWFwIiwiY3JlYXRlTWFwIiwic2NoZW1hIiwib2JqIiwiY3R4Iiwia2VlcFVuZGVmaW5lZCIsInJlcGxhY2VyIiwibWFwIiwiYWRkIiwia2V5IiwidmFsdWUiLCJjYWxsIiwiQXJyYXkiLCJpc0FycmF5IiwiaW5jbHVkZXMiLCJ1bmRlZmluZWQiLCJpdGVtcyIsInB1c2giLCJjcmVhdGVQYWlyIiwiTWFwIiwiT2JqZWN0Iiwia2V5cyIsInNvcnRNYXBFbnRyaWVzIiwic29ydCIsImNvbGxlY3Rpb24iLCJjcmVhdGVOb2RlIiwiZGVmYXVsdCIsIm5vZGVDbGFzcyIsInRhZyIsInJlc29sdmUiLCJvbkVycm9yIiwiaXNNYXAiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsibWFwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIE5vZGUgPSByZXF1aXJlKCcuLi8uLi9ub2Rlcy9Ob2RlLmpzJyk7XG52YXIgUGFpciA9IHJlcXVpcmUoJy4uLy4uL25vZGVzL1BhaXIuanMnKTtcbnZhciBZQU1MTWFwID0gcmVxdWlyZSgnLi4vLi4vbm9kZXMvWUFNTE1hcC5qcycpO1xuXG5mdW5jdGlvbiBjcmVhdGVNYXAoc2NoZW1hLCBvYmosIGN0eCkge1xuICAgIGNvbnN0IHsga2VlcFVuZGVmaW5lZCwgcmVwbGFjZXIgfSA9IGN0eDtcbiAgICBjb25zdCBtYXAgPSBuZXcgWUFNTE1hcC5ZQU1MTWFwKHNjaGVtYSk7XG4gICAgY29uc3QgYWRkID0gKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIHZhbHVlID0gcmVwbGFjZXIuY2FsbChvYmosIGtleSwgdmFsdWUpO1xuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlcGxhY2VyKSAmJiAhcmVwbGFjZXIuaW5jbHVkZXMoa2V5KSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgfHwga2VlcFVuZGVmaW5lZClcbiAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKFBhaXIuY3JlYXRlUGFpcihrZXksIHZhbHVlLCBjdHgpKTtcbiAgICB9O1xuICAgIGlmIChvYmogaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2Ygb2JqKVxuICAgICAgICAgICAgYWRkKGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMob2JqKSlcbiAgICAgICAgICAgIGFkZChrZXksIG9ialtrZXldKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzY2hlbWEuc29ydE1hcEVudHJpZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbWFwLml0ZW1zLnNvcnQoc2NoZW1hLnNvcnRNYXBFbnRyaWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbn1cbmNvbnN0IG1hcCA9IHtcbiAgICBjb2xsZWN0aW9uOiAnbWFwJyxcbiAgICBjcmVhdGVOb2RlOiBjcmVhdGVNYXAsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICBub2RlQ2xhc3M6IFlBTUxNYXAuWUFNTE1hcCxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjptYXAnLFxuICAgIHJlc29sdmUobWFwLCBvbkVycm9yKSB7XG4gICAgICAgIGlmICghTm9kZS5pc01hcChtYXApKVxuICAgICAgICAgICAgb25FcnJvcignRXhwZWN0ZWQgYSBtYXBwaW5nIGZvciB0aGlzIHRhZycpO1xuICAgICAgICByZXR1cm4gbWFwO1xuICAgIH1cbn07XG5cbmV4cG9ydHMubWFwID0gbWFwO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLElBQUksR0FBR0MsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0FBQ3pDLElBQUlDLElBQUksR0FBR0QsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0FBQ3pDLElBQUlFLE9BQU8sR0FBR0YsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0FBRS9DLFNBQVNHLFNBQVNBLENBQUNDLE1BQU0sRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUU7RUFDakMsTUFBTTtJQUFFQyxhQUFhO0lBQUVDO0VBQVMsQ0FBQyxHQUFHRixHQUFHO0VBQ3ZDLE1BQU1HLEdBQUcsR0FBRyxJQUFJUCxPQUFPLENBQUNBLE9BQU8sQ0FBQ0UsTUFBTSxDQUFDO0VBQ3ZDLE1BQU1NLEdBQUcsR0FBR0EsQ0FBQ0MsR0FBRyxFQUFFQyxLQUFLLEtBQUs7SUFDeEIsSUFBSSxPQUFPSixRQUFRLEtBQUssVUFBVSxFQUM5QkksS0FBSyxHQUFHSixRQUFRLENBQUNLLElBQUksQ0FBQ1IsR0FBRyxFQUFFTSxHQUFHLEVBQUVDLEtBQUssQ0FBQyxDQUFDLEtBQ3RDLElBQUlFLEtBQUssQ0FBQ0MsT0FBTyxDQUFDUCxRQUFRLENBQUMsSUFBSSxDQUFDQSxRQUFRLENBQUNRLFFBQVEsQ0FBQ0wsR0FBRyxDQUFDLEVBQ3ZEO0lBQ0osSUFBSUMsS0FBSyxLQUFLSyxTQUFTLElBQUlWLGFBQWEsRUFDcENFLEdBQUcsQ0FBQ1MsS0FBSyxDQUFDQyxJQUFJLENBQUNsQixJQUFJLENBQUNtQixVQUFVLENBQUNULEdBQUcsRUFBRUMsS0FBSyxFQUFFTixHQUFHLENBQUMsQ0FBQztFQUN4RCxDQUFDO0VBQ0QsSUFBSUQsR0FBRyxZQUFZZ0IsR0FBRyxFQUFFO0lBQ3BCLEtBQUssTUFBTSxDQUFDVixHQUFHLEVBQUVDLEtBQUssQ0FBQyxJQUFJUCxHQUFHLEVBQzFCSyxHQUFHLENBQUNDLEdBQUcsRUFBRUMsS0FBSyxDQUFDO0VBQ3ZCLENBQUMsTUFDSSxJQUFJUCxHQUFHLElBQUksT0FBT0EsR0FBRyxLQUFLLFFBQVEsRUFBRTtJQUNyQyxLQUFLLE1BQU1NLEdBQUcsSUFBSVcsTUFBTSxDQUFDQyxJQUFJLENBQUNsQixHQUFHLENBQUMsRUFDOUJLLEdBQUcsQ0FBQ0MsR0FBRyxFQUFFTixHQUFHLENBQUNNLEdBQUcsQ0FBQyxDQUFDO0VBQzFCO0VBQ0EsSUFBSSxPQUFPUCxNQUFNLENBQUNvQixjQUFjLEtBQUssVUFBVSxFQUFFO0lBQzdDZixHQUFHLENBQUNTLEtBQUssQ0FBQ08sSUFBSSxDQUFDckIsTUFBTSxDQUFDb0IsY0FBYyxDQUFDO0VBQ3pDO0VBQ0EsT0FBT2YsR0FBRztBQUNkO0FBQ0EsTUFBTUEsR0FBRyxHQUFHO0VBQ1JpQixVQUFVLEVBQUUsS0FBSztFQUNqQkMsVUFBVSxFQUFFeEIsU0FBUztFQUNyQnlCLE9BQU8sRUFBRSxJQUFJO0VBQ2JDLFNBQVMsRUFBRTNCLE9BQU8sQ0FBQ0EsT0FBTztFQUMxQjRCLEdBQUcsRUFBRSx1QkFBdUI7RUFDNUJDLE9BQU9BLENBQUN0QixHQUFHLEVBQUV1QixPQUFPLEVBQUU7SUFDbEIsSUFBSSxDQUFDakMsSUFBSSxDQUFDa0MsS0FBSyxDQUFDeEIsR0FBRyxDQUFDLEVBQ2hCdUIsT0FBTyxDQUFDLGlDQUFpQyxDQUFDO0lBQzlDLE9BQU92QixHQUFHO0VBQ2Q7QUFDSixDQUFDO0FBRUR5QixPQUFPLENBQUN6QixHQUFHLEdBQUdBLEdBQUcifQ==