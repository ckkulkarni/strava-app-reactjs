b1c851a9e10f12464f1932cc915f3947
/**
 * The MIT License (MIT)
 * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>
 */

'use strict';

/**
 * Flattens a nested disjunction node to a list.
 *
 * /a|b|c|d/
 *
 * {{{a, b}, c}, d} -> [a, b, c, d]
 */
function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  } else {
    return Array.from(arr);
  }
}
function disjunctionToList(node) {
  if (node.type !== 'Disjunction') {
    throw new TypeError('Expected "Disjunction" node, got "' + node.type + '"');
  }
  var list = [];
  if (node.left && node.left.type === 'Disjunction') {
    list.push.apply(list, _toConsumableArray(disjunctionToList(node.left)).concat([node.right]));
  } else {
    list.push(node.left, node.right);
  }
  return list;
}

/**
 * Builds a nested disjunction node from a list.
 *
 * /a|b|c|d/
 *
 * [a, b, c, d] -> {{{a, b}, c}, d}
 */
function listToDisjunction(list) {
  return list.reduce(function (left, right) {
    return {
      type: 'Disjunction',
      left: left,
      right: right
    };
  });
}

/**
 * Increases a quantifier by one.
 * Does not change greediness.
 * * -> +
 * + -> {2,}
 * ? -> {1,2}
 * {2} -> {3}
 * {2,} -> {3,}
 * {2,3} -> {3,4}
 */
function increaseQuantifierByOne(quantifier) {
  if (quantifier.kind === '*') {
    quantifier.kind = '+';
  } else if (quantifier.kind === '+') {
    quantifier.kind = 'Range';
    quantifier.from = 2;
    delete quantifier.to;
  } else if (quantifier.kind === '?') {
    quantifier.kind = 'Range';
    quantifier.from = 1;
    quantifier.to = 2;
  } else if (quantifier.kind === 'Range') {
    quantifier.from += 1;
    if (quantifier.to) {
      quantifier.to += 1;
    }
  }
}
module.exports = {
  disjunctionToList: disjunctionToList,
  listToDisjunction: listToDisjunction,
  increaseQuantifierByOne: increaseQuantifierByOne
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJBcnJheSIsImlzQXJyYXkiLCJpIiwiYXJyMiIsImxlbmd0aCIsImZyb20iLCJkaXNqdW5jdGlvblRvTGlzdCIsIm5vZGUiLCJ0eXBlIiwiVHlwZUVycm9yIiwibGlzdCIsImxlZnQiLCJwdXNoIiwiYXBwbHkiLCJjb25jYXQiLCJyaWdodCIsImxpc3RUb0Rpc2p1bmN0aW9uIiwicmVkdWNlIiwiaW5jcmVhc2VRdWFudGlmaWVyQnlPbmUiLCJxdWFudGlmaWVyIiwia2luZCIsInRvIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCBEbWl0cnkgU29zaG5pa292IDxkbWl0cnkuc29zaG5pa292QGdtYWlsLmNvbT5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRmxhdHRlbnMgYSBuZXN0ZWQgZGlzanVuY3Rpb24gbm9kZSB0byBhIGxpc3QuXG4gKlxuICogL2F8YnxjfGQvXG4gKlxuICoge3t7YSwgYn0sIGN9LCBkfSAtPiBbYSwgYiwgYywgZF1cbiAqL1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxuZnVuY3Rpb24gZGlzanVuY3Rpb25Ub0xpc3Qobm9kZSkge1xuICBpZiAobm9kZS50eXBlICE9PSAnRGlzanVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCJEaXNqdW5jdGlvblwiIG5vZGUsIGdvdCBcIicgKyBub2RlLnR5cGUgKyAnXCInKTtcbiAgfVxuXG4gIHZhciBsaXN0ID0gW107XG5cbiAgaWYgKG5vZGUubGVmdCAmJiBub2RlLmxlZnQudHlwZSA9PT0gJ0Rpc2p1bmN0aW9uJykge1xuICAgIGxpc3QucHVzaC5hcHBseShsaXN0LCBfdG9Db25zdW1hYmxlQXJyYXkoZGlzanVuY3Rpb25Ub0xpc3Qobm9kZS5sZWZ0KSkuY29uY2F0KFtub2RlLnJpZ2h0XSkpO1xuICB9IGVsc2Uge1xuICAgIGxpc3QucHVzaChub2RlLmxlZnQsIG5vZGUucmlnaHQpO1xuICB9XG5cbiAgcmV0dXJuIGxpc3Q7XG59XG5cbi8qKlxuICogQnVpbGRzIGEgbmVzdGVkIGRpc2p1bmN0aW9uIG5vZGUgZnJvbSBhIGxpc3QuXG4gKlxuICogL2F8YnxjfGQvXG4gKlxuICogW2EsIGIsIGMsIGRdIC0+IHt7e2EsIGJ9LCBjfSwgZH1cbiAqL1xuZnVuY3Rpb24gbGlzdFRvRGlzanVuY3Rpb24obGlzdCkge1xuICByZXR1cm4gbGlzdC5yZWR1Y2UoZnVuY3Rpb24gKGxlZnQsIHJpZ2h0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdEaXNqdW5jdGlvbicsXG4gICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgcmlnaHQ6IHJpZ2h0XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogSW5jcmVhc2VzIGEgcXVhbnRpZmllciBieSBvbmUuXG4gKiBEb2VzIG5vdCBjaGFuZ2UgZ3JlZWRpbmVzcy5cbiAqICogLT4gK1xuICogKyAtPiB7Mix9XG4gKiA/IC0+IHsxLDJ9XG4gKiB7Mn0gLT4gezN9XG4gKiB7Mix9IC0+IHszLH1cbiAqIHsyLDN9IC0+IHszLDR9XG4gKi9cbmZ1bmN0aW9uIGluY3JlYXNlUXVhbnRpZmllckJ5T25lKHF1YW50aWZpZXIpIHtcbiAgaWYgKHF1YW50aWZpZXIua2luZCA9PT0gJyonKSB7XG5cbiAgICBxdWFudGlmaWVyLmtpbmQgPSAnKyc7XG4gIH0gZWxzZSBpZiAocXVhbnRpZmllci5raW5kID09PSAnKycpIHtcblxuICAgIHF1YW50aWZpZXIua2luZCA9ICdSYW5nZSc7XG4gICAgcXVhbnRpZmllci5mcm9tID0gMjtcbiAgICBkZWxldGUgcXVhbnRpZmllci50bztcbiAgfSBlbHNlIGlmIChxdWFudGlmaWVyLmtpbmQgPT09ICc/Jykge1xuXG4gICAgcXVhbnRpZmllci5raW5kID0gJ1JhbmdlJztcbiAgICBxdWFudGlmaWVyLmZyb20gPSAxO1xuICAgIHF1YW50aWZpZXIudG8gPSAyO1xuICB9IGVsc2UgaWYgKHF1YW50aWZpZXIua2luZCA9PT0gJ1JhbmdlJykge1xuXG4gICAgcXVhbnRpZmllci5mcm9tICs9IDE7XG4gICAgaWYgKHF1YW50aWZpZXIudG8pIHtcbiAgICAgIHF1YW50aWZpZXIudG8gKz0gMTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRpc2p1bmN0aW9uVG9MaXN0OiBkaXNqdW5jdGlvblRvTGlzdCxcbiAgbGlzdFRvRGlzanVuY3Rpb246IGxpc3RUb0Rpc2p1bmN0aW9uLFxuICBpbmNyZWFzZVF1YW50aWZpZXJCeU9uZTogaW5jcmVhc2VRdWFudGlmaWVyQnlPbmVcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsU0FBU0Esa0JBQWtCQSxDQUFDQyxHQUFHLEVBQUU7RUFBRSxJQUFJQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0YsR0FBRyxDQUFDLEVBQUU7SUFBRSxLQUFLLElBQUlHLENBQUMsR0FBRyxDQUFDLEVBQUVDLElBQUksR0FBR0gsS0FBSyxDQUFDRCxHQUFHLENBQUNLLE1BQU0sQ0FBQyxFQUFFRixDQUFDLEdBQUdILEdBQUcsQ0FBQ0ssTUFBTSxFQUFFRixDQUFDLEVBQUUsRUFBRTtNQUFFQyxJQUFJLENBQUNELENBQUMsQ0FBQyxHQUFHSCxHQUFHLENBQUNHLENBQUMsQ0FBQztJQUFFO0lBQUUs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