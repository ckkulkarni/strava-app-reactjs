20a65172aa389136df0b6ef947b18532
"use strict";

var Promise = require('any-promise');
var assert = require('assert');
module.exports = thenify;

/**
 * Turn async functions into promises
 *
 * @param {Function} fn
 * @return {Function}
 * @api public
 */

function thenify(fn, options) {
  assert(typeof fn === 'function');
  return createWrapper(fn, options);
}

/**
 * Turn async functions into promises and backward compatible with callback
 *
 * @param {Function} fn
 * @return {Function}
 * @api public
 */

thenify.withCallback = function (fn, options) {
  assert(typeof fn === 'function');
  options = options || {};
  options.withCallback = true;
  return createWrapper(fn, options);
};
function createCallback(resolve, reject, multiArgs) {
  // default to true
  if (multiArgs === undefined) multiArgs = true;
  return function (err, value) {
    if (err) return reject(err);
    var length = arguments.length;
    if (length <= 2 || !multiArgs) return resolve(value);
    if (Array.isArray(multiArgs)) {
      var values = {};
      for (var i = 1; i < length; i++) values[multiArgs[i - 1]] = arguments[i];
      return resolve(values);
    }
    var values = new Array(length - 1);
    for (var i = 1; i < length; ++i) values[i - 1] = arguments[i];
    resolve(values);
  };
}
function createWrapper(fn, options) {
  options = options || {};
  var name = fn.name;
  name = (name || '').replace(/\s|bound(?!$)/g, '');
  var newFn = function () {
    var self = this;
    var len = arguments.length;
    if (options.withCallback) {
      var lastType = typeof arguments[len - 1];
      if (lastType === 'function') return fn.apply(self, arguments);
    }
    var args = new Array(len + 1);
    for (var i = 0; i < len; ++i) args[i] = arguments[i];
    var lastIndex = i;
    return new Promise(function (resolve, reject) {
      args[lastIndex] = createCallback(resolve, reject, options.multiArgs);
      fn.apply(self, args);
    });
  };
  Object.defineProperty(newFn, 'name', {
    value: name
  });
  return newFn;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9taXNlIiwicmVxdWlyZSIsImFzc2VydCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0aGVuaWZ5IiwiZm4iLCJvcHRpb25zIiwiY3JlYXRlV3JhcHBlciIsIndpdGhDYWxsYmFjayIsImNyZWF0ZUNhbGxiYWNrIiwicmVzb2x2ZSIsInJlamVjdCIsIm11bHRpQXJncyIsInVuZGVmaW5lZCIsImVyciIsInZhbHVlIiwibGVuZ3RoIiwiYXJndW1lbnRzIiwiQXJyYXkiLCJpc0FycmF5IiwidmFsdWVzIiwiaSIsIm5hbWUiLCJyZXBsYWNlIiwibmV3Rm4iLCJzZWxmIiwibGVuIiwibGFzdFR5cGUiLCJhcHBseSIsImFyZ3MiLCJsYXN0SW5kZXgiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxudmFyIFByb21pc2UgPSByZXF1aXJlKCdhbnktcHJvbWlzZScpXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0JylcblxubW9kdWxlLmV4cG9ydHMgPSB0aGVuaWZ5XG5cbi8qKlxuICogVHVybiBhc3luYyBmdW5jdGlvbnMgaW50byBwcm9taXNlc1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gdGhlbmlmeShmbiwgb3B0aW9ucykge1xuICBhc3NlcnQodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKVxuICByZXR1cm4gY3JlYXRlV3JhcHBlcihmbiwgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBUdXJuIGFzeW5jIGZ1bmN0aW9ucyBpbnRvIHByb21pc2VzIGFuZCBiYWNrd2FyZCBjb21wYXRpYmxlIHdpdGggY2FsbGJhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnRoZW5pZnkud2l0aENhbGxiYWNrID0gZnVuY3Rpb24gKGZuLCBvcHRpb25zKSB7XG4gIGFzc2VydCh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIG9wdGlvbnMud2l0aENhbGxiYWNrID0gdHJ1ZVxuICByZXR1cm4gY3JlYXRlV3JhcHBlcihmbiwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ2FsbGJhY2socmVzb2x2ZSwgcmVqZWN0LCBtdWx0aUFyZ3MpIHtcbiAgLy8gZGVmYXVsdCB0byB0cnVlXG4gIGlmIChtdWx0aUFyZ3MgPT09IHVuZGVmaW5lZCkgbXVsdGlBcmdzID0gdHJ1ZVxuICByZXR1cm4gZnVuY3Rpb24oZXJyLCB2YWx1ZSkge1xuICAgIGlmIChlcnIpIHJldHVybiByZWplY3QoZXJyKVxuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoXG5cbiAgICBpZiAobGVuZ3RoIDw9IDIgfHwgIW11bHRpQXJncykgcmV0dXJuIHJlc29sdmUodmFsdWUpXG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShtdWx0aUFyZ3MpKSB7XG4gICAgICB2YXIgdmFsdWVzID0ge31cbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHZhbHVlc1ttdWx0aUFyZ3NbaSAtIDFdXSA9IGFyZ3VtZW50c1tpXVxuICAgICAgcmV0dXJuIHJlc29sdmUodmFsdWVzKVxuICAgIH1cblxuICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkobGVuZ3RoIC0gMSlcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGxlbmd0aDsgKytpKSB2YWx1ZXNbaSAtIDFdID0gYXJndW1lbnRzW2ldXG4gICAgcmVzb2x2ZSh2YWx1ZXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlV3JhcHBlcihmbiwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgbmFtZSA9IGZuLm5hbWU7XG4gIG5hbWUgPSAobmFtZSB8fCAnJykucmVwbGFjZSgvXFxzfGJvdW5kKD8hJCkvZywgJycpXG4gIHZhciBuZXdGbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXNcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgIGlmIChvcHRpb25zLndpdGhDYWxsYmFjaykge1xuICAgICAgdmFyIGxhc3RUeXBlID0gdHlwZW9mIGFyZ3VtZW50c1tsZW4gLSAxXVxuICAgICAgaWYgKGxhc3RUeXBlID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZm4uYXBwbHkoc2VsZiwgYXJndW1lbnRzKVxuICAgIH1cbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShsZW4gKyAxKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV1cbiAgICB2YXIgbGFzdEluZGV4ID0gaVxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBhcmdzW2xhc3RJbmRleF0gPSBjcmVhdGVDYWxsYmFjayhyZXNvbHZlLCByZWplY3QsIG9wdGlvbnMubXVsdGlBcmdzKVxuICAgICAgZm4uYXBwbHkoc2VsZiwgYXJncylcbiAgICB9KVxuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdGbiwgJ25hbWUnLCB7IHZhbHVlOiBuYW1lIH0pXG4gIHJldHVybiBuZXdGblxufVxuIl0sIm1hcHBpbmdzIjoiOztBQUNBLElBQUlBLE9BQU8sR0FBR0MsT0FBTyxDQUFDLGFBQWEsQ0FBQztBQUNwQyxJQUFJQyxNQUFNLEdBQUdELE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFFOUJFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxPQUFPOztBQUV4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxPQUFPQSxDQUFDQyxFQUFFLEVBQUVDLE9BQU8sRUFBRTtFQUM1QkwsTUFBTSxDQUFDLE9BQU9JLEVBQUUsS0FBSyxVQUFVLENBQUM7RUFDaEMsT0FBT0UsYUFBYSxD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