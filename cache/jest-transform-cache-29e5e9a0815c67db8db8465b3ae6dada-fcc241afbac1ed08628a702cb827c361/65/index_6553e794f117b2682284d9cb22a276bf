6d3735bcf28c759170d63fdb6c643f1d
'use strict';

var composer = require('./compose/composer.js');
var Document = require('./doc/Document.js');
var Schema = require('./schema/Schema.js');
var errors = require('./errors.js');
var Alias = require('./nodes/Alias.js');
var Node = require('./nodes/Node.js');
var Pair = require('./nodes/Pair.js');
var Scalar = require('./nodes/Scalar.js');
var YAMLMap = require('./nodes/YAMLMap.js');
var YAMLSeq = require('./nodes/YAMLSeq.js');
var cst = require('./parse/cst.js');
var lexer = require('./parse/lexer.js');
var lineCounter = require('./parse/line-counter.js');
var parser = require('./parse/parser.js');
var publicApi = require('./public-api.js');
var visit = require('./visit.js');
exports.Composer = composer.Composer;
exports.Document = Document.Document;
exports.Schema = Schema.Schema;
exports.YAMLError = errors.YAMLError;
exports.YAMLParseError = errors.YAMLParseError;
exports.YAMLWarning = errors.YAMLWarning;
exports.Alias = Alias.Alias;
exports.isAlias = Node.isAlias;
exports.isCollection = Node.isCollection;
exports.isDocument = Node.isDocument;
exports.isMap = Node.isMap;
exports.isNode = Node.isNode;
exports.isPair = Node.isPair;
exports.isScalar = Node.isScalar;
exports.isSeq = Node.isSeq;
exports.Pair = Pair.Pair;
exports.Scalar = Scalar.Scalar;
exports.YAMLMap = YAMLMap.YAMLMap;
exports.YAMLSeq = YAMLSeq.YAMLSeq;
exports.CST = cst;
exports.Lexer = lexer.Lexer;
exports.LineCounter = lineCounter.LineCounter;
exports.Parser = parser.Parser;
exports.parse = publicApi.parse;
exports.parseAllDocuments = publicApi.parseAllDocuments;
exports.parseDocument = publicApi.parseDocument;
exports.stringify = publicApi.stringify;
exports.visit = visit.visit;
exports.visitAsync = visit.visitAsync;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21wb3NlciIsInJlcXVpcmUiLCJEb2N1bWVudCIsIlNjaGVtYSIsImVycm9ycyIsIkFsaWFzIiwiTm9kZSIsIlBhaXIiLCJTY2FsYXIiLCJZQU1MTWFwIiwiWUFNTFNlcSIsImNzdCIsImxleGVyIiwibGluZUNvdW50ZXIiLCJwYXJzZXIiLCJwdWJsaWNBcGkiLCJ2aXNpdCIsImV4cG9ydHMiLCJDb21wb3NlciIsIllBTUxFcnJvciIsIllBTUxQYXJzZUVycm9yIiwiWUFNTFdhcm5pbmciLCJpc0FsaWFzIiwiaXNDb2xsZWN0aW9uIiwiaXNEb2N1bWVudCIsImlzTWFwIiwiaXNOb2RlIiwiaXNQYWlyIiwiaXNTY2FsYXIiLCJpc1NlcSIsIkNTVCIsIkxleGVyIiwiTGluZUNvdW50ZXIiLCJQYXJzZXIiLCJwYXJzZSIsInBhcnNlQWxsRG9jdW1lbnRzIiwicGFyc2VEb2N1bWVudCIsInN0cmluZ2lmeSIsInZpc2l0QXN5bmMiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBjb21wb3NlciA9IHJlcXVpcmUoJy4vY29tcG9zZS9jb21wb3Nlci5qcycpO1xudmFyIERvY3VtZW50ID0gcmVxdWlyZSgnLi9kb2MvRG9jdW1lbnQuanMnKTtcbnZhciBTY2hlbWEgPSByZXF1aXJlKCcuL3NjaGVtYS9TY2hlbWEuanMnKTtcbnZhciBlcnJvcnMgPSByZXF1aXJlKCcuL2Vycm9ycy5qcycpO1xudmFyIEFsaWFzID0gcmVxdWlyZSgnLi9ub2Rlcy9BbGlhcy5qcycpO1xudmFyIE5vZGUgPSByZXF1aXJlKCcuL25vZGVzL05vZGUuanMnKTtcbnZhciBQYWlyID0gcmVxdWlyZSgnLi9ub2Rlcy9QYWlyLmpzJyk7XG52YXIgU2NhbGFyID0gcmVxdWlyZSgnLi9ub2Rlcy9TY2FsYXIuanMnKTtcbnZhciBZQU1MTWFwID0gcmVxdWlyZSgnLi9ub2Rlcy9ZQU1MTWFwLmpzJyk7XG52YXIgWUFNTFNlcSA9IHJlcXVpcmUoJy4vbm9kZXMvWUFNTFNlcS5qcycpO1xudmFyIGNzdCA9IHJlcXVpcmUoJy4vcGFyc2UvY3N0LmpzJyk7XG52YXIgbGV4ZXIgPSByZXF1aXJlKCcuL3BhcnNlL2xleGVyLmpzJyk7XG52YXIgbGluZUNvdW50ZXIgPSByZXF1aXJlKCcuL3BhcnNlL2xpbmUtY291bnRlci5qcycpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJy4vcGFyc2UvcGFyc2VyLmpzJyk7XG52YXIgcHVibGljQXBpID0gcmVxdWlyZSgnLi9wdWJsaWMtYXBpLmpzJyk7XG52YXIgdmlzaXQgPSByZXF1aXJlKCcuL3Zpc2l0LmpzJyk7XG5cblxuXG5leHBvcnRzLkNvbXBvc2VyID0gY29tcG9zZXIuQ29tcG9zZXI7XG5leHBvcnRzLkRvY3VtZW50ID0gRG9jdW1lbnQuRG9jdW1lbnQ7XG5leHBvcnRzLlNjaGVtYSA9IFNjaGVtYS5TY2hlbWE7XG5leHBvcnRzLllBTUxFcnJvciA9IGVycm9ycy5ZQU1MRXJyb3I7XG5leHBvcnRzLllBTUxQYXJzZUVycm9yID0gZXJyb3JzLllBTUxQYXJzZUVycm9yO1xuZXhwb3J0cy5ZQU1MV2FybmluZyA9IGVycm9ycy5ZQU1MV2FybmluZztcbmV4cG9ydHMuQWxpYXMgPSBBbGlhcy5BbGlhcztcbmV4cG9ydHMuaXNBbGlhcyA9IE5vZGUuaXNBbGlhcztcbmV4cG9ydHMuaXNDb2xsZWN0aW9uID0gTm9kZS5pc0NvbGxlY3Rpb247XG5leHBvcnRzLmlzRG9jdW1lbnQgPSBOb2RlLmlzRG9jdW1lbnQ7XG5leHBvcnRzLmlzTWFwID0gTm9kZS5pc01hcDtcbmV4cG9ydHMuaXNOb2RlID0gTm9kZS5pc05vZGU7XG5leHBvcnRzLmlzUGFpciA9IE5vZGUuaXNQYWlyO1xuZXhwb3J0cy5pc1NjYWxhciA9IE5vZGUuaXNTY2FsYXI7XG5leHBvcnRzLmlzU2VxID0gTm9kZS5pc1NlcTtcbmV4cG9ydHMuUGFpciA9IFBhaXIuUGFpcjtcbmV4cG9ydHMuU2NhbGFyID0gU2NhbGFyLlNjYWxhcjtcbmV4cG9ydHMuWUFNTE1hcCA9IFlBTUxNYXAuWUFNTE1hcDtcbmV4cG9ydHMuWUFNTFNlcSA9IFlBTUxTZXEuWUFNTFNlcTtcbmV4cG9ydHMuQ1NUID0gY3N0O1xuZXhwb3J0cy5MZXhlciA9IGxleGVyLkxleGVyO1xuZXhwb3J0cy5MaW5lQ291bnRlciA9IGxpbmVDb3VudGVyLkxpbmVDb3VudGVyO1xuZXhwb3J0cy5QYXJzZXIgPSBwYXJzZXIuUGFyc2VyO1xuZXhwb3J0cy5wYXJzZSA9IHB1YmxpY0FwaS5wYXJzZTtcbmV4cG9ydHMucGFyc2VBbGxEb2N1bWVudHMgPSBwdWJsaWNBcGkucGFyc2VBbGxEb2N1bWVudHM7XG5leHBvcnRzLnBhcnNlRG9jdW1lbnQgPSBwdWJsaWNBcGkucGFyc2VEb2N1bWVudDtcbmV4cG9ydHMuc3RyaW5naWZ5ID0gcHVibGljQXBpLnN0cmluZ2lmeTtcbmV4cG9ydHMudmlzaXQgPSB2aXNpdC52aXNpdDtcbmV4cG9ydHMudmlzaXRBc3luYyA9IHZpc2l0LnZpc2l0QXN5bmM7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsdUJBQXVCLENBQUM7QUFDL0MsSUFBSUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsbUJBQW1CLENBQUM7QUFDM0MsSUFBSUUsTUFBTSxHQUFHRixPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFDMUMsSUFBSUcsTUFBTSxHQUFHSCxPQUFPLENBQUMsYUFBYSxDQUFDO0FBQ25DLElBQUlJLEtBQUssR0FBR0osT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQ3ZDLElBQUlLLElBQUksR0FBR0wsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBQ3JDLElBQUlNLElBQUksR0FBR04sT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBQ3JDLElBQUlPLE1BQU0sR0FBR1AsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0FBQ3pDLElBQUlRLE9BQU8sR0FBR1IsT0FBTyxDQUFDLG9CQUFvQixDQUFDO0FBQzNDLElBQUlTLE9BQU8s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