{"version":3,"names":["stringifyNumber","require","intIdentify","value","Number","isInteger","intResolve","str","offset","radix","intAsBigInt","sign","substring","replace","n","BigInt","parseInt","intStringify","node","prefix","toString","substr","intBin","identify","default","tag","format","test","resolve","_onError","opt","stringify","intOct","int","intHex","exports"],"sources":["int.js"],"sourcesContent":["'use strict';\n\nvar stringifyNumber = require('../../stringify/stringifyNumber.js');\n\nconst intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);\nfunction intResolve(str, offset, radix, { intAsBigInt }) {\n    const sign = str[0];\n    if (sign === '-' || sign === '+')\n        offset += 1;\n    str = str.substring(offset).replace(/_/g, '');\n    if (intAsBigInt) {\n        switch (radix) {\n            case 2:\n                str = `0b${str}`;\n                break;\n            case 8:\n                str = `0o${str}`;\n                break;\n            case 16:\n                str = `0x${str}`;\n                break;\n        }\n        const n = BigInt(str);\n        return sign === '-' ? BigInt(-1) * n : n;\n    }\n    const n = parseInt(str, radix);\n    return sign === '-' ? -1 * n : n;\n}\nfunction intStringify(node, radix, prefix) {\n    const { value } = node;\n    if (intIdentify(value)) {\n        const str = value.toString(radix);\n        return value < 0 ? '-' + prefix + str.substr(1) : prefix + str;\n    }\n    return stringifyNumber.stringifyNumber(node);\n}\nconst intBin = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'BIN',\n    test: /^[-+]?0b[0-1_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),\n    stringify: node => intStringify(node, 2, '0b')\n};\nconst intOct = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'OCT',\n    test: /^[-+]?0[0-7_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),\n    stringify: node => intStringify(node, 8, '0')\n};\nconst int = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    test: /^[-+]?[0-9][0-9_]*$/,\n    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),\n    stringify: stringifyNumber.stringifyNumber\n};\nconst intHex = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'HEX',\n    test: /^[-+]?0x[0-9a-fA-F_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\n    stringify: node => intStringify(node, 16, '0x')\n};\n\nexports.int = int;\nexports.intBin = intBin;\nexports.intHex = intHex;\nexports.intOct = intOct;\n"],"mappings":"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"}