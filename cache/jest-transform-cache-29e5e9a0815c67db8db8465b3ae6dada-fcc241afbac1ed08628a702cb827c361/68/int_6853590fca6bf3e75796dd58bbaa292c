8578bbdf11017f071d2eb7e3bd7f1d36
'use strict';

var stringifyNumber = require('../../stringify/stringifyNumber.js');
const intIdentify = value => typeof value === 'bigint' || Number.isInteger(value);
function intResolve(str, offset, radix, {
  intAsBigInt
}) {
  const sign = str[0];
  if (sign === '-' || sign === '+') offset += 1;
  str = str.substring(offset).replace(/_/g, '');
  if (intAsBigInt) {
    switch (radix) {
      case 2:
        str = `0b${str}`;
        break;
      case 8:
        str = `0o${str}`;
        break;
      case 16:
        str = `0x${str}`;
        break;
    }
    const n = BigInt(str);
    return sign === '-' ? BigInt(-1) * n : n;
  }
  const n = parseInt(str, radix);
  return sign === '-' ? -1 * n : n;
}
function intStringify(node, radix, prefix) {
  const {
    value
  } = node;
  if (intIdentify(value)) {
    const str = value.toString(radix);
    return value < 0 ? '-' + prefix + str.substr(1) : prefix + str;
  }
  return stringifyNumber.stringifyNumber(node);
}
const intBin = {
  identify: intIdentify,
  default: true,
  tag: 'tag:yaml.org,2002:int',
  format: 'BIN',
  test: /^[-+]?0b[0-1_]+$/,
  resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),
  stringify: node => intStringify(node, 2, '0b')
};
const intOct = {
  identify: intIdentify,
  default: true,
  tag: 'tag:yaml.org,2002:int',
  format: 'OCT',
  test: /^[-+]?0[0-7_]+$/,
  resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),
  stringify: node => intStringify(node, 8, '0')
};
const int = {
  identify: intIdentify,
  default: true,
  tag: 'tag:yaml.org,2002:int',
  test: /^[-+]?[0-9][0-9_]*$/,
  resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),
  stringify: stringifyNumber.stringifyNumber
};
const intHex = {
  identify: intIdentify,
  default: true,
  tag: 'tag:yaml.org,2002:int',
  format: 'HEX',
  test: /^[-+]?0x[0-9a-fA-F_]+$/,
  resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),
  stringify: node => intStringify(node, 16, '0x')
};
exports.int = int;
exports.intBin = intBin;
exports.intHex = intHex;
exports.intOct = intOct;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdHJpbmdpZnlOdW1iZXIiLCJyZXF1aXJlIiwiaW50SWRlbnRpZnkiLCJ2YWx1ZSIsIk51bWJlciIsImlzSW50ZWdlciIsImludFJlc29sdmUiLCJzdHIiLCJvZmZzZXQiLCJyYWRpeCIsImludEFzQmlnSW50Iiwic2lnbiIsInN1YnN0cmluZyIsInJlcGxhY2UiLCJuIiwiQmlnSW50IiwicGFyc2VJbnQiLCJpbnRTdHJpbmdpZnkiLCJub2RlIiwicHJlZml4IiwidG9TdHJpbmciLCJzdWJzdHIiLCJpbnRCaW4iLCJpZGVudGlmeSIsImRlZmF1bHQiLCJ0YWciLCJmb3JtYXQiLCJ0ZXN0IiwicmVzb2x2ZSIsIl9vbkVycm9yIiwib3B0Iiwic3RyaW5naWZ5IiwiaW50T2N0IiwiaW50IiwiaW50SGV4IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImludC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBzdHJpbmdpZnlOdW1iZXIgPSByZXF1aXJlKCcuLi8uLi9zdHJpbmdpZnkvc3RyaW5naWZ5TnVtYmVyLmpzJyk7XG5cbmNvbnN0IGludElkZW50aWZ5ID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnIHx8IE51bWJlci5pc0ludGVnZXIodmFsdWUpO1xuZnVuY3Rpb24gaW50UmVzb2x2ZShzdHIsIG9mZnNldCwgcmFkaXgsIHsgaW50QXNCaWdJbnQgfSkge1xuICAgIGNvbnN0IHNpZ24gPSBzdHJbMF07XG4gICAgaWYgKHNpZ24gPT09ICctJyB8fCBzaWduID09PSAnKycpXG4gICAgICAgIG9mZnNldCArPSAxO1xuICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcob2Zmc2V0KS5yZXBsYWNlKC9fL2csICcnKTtcbiAgICBpZiAoaW50QXNCaWdJbnQpIHtcbiAgICAgICAgc3dpdGNoIChyYWRpeCkge1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHN0ciA9IGAwYiR7c3RyfWA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgc3RyID0gYDBvJHtzdHJ9YDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgICAgICAgc3RyID0gYDB4JHtzdHJ9YDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuID0gQmlnSW50KHN0cik7XG4gICAgICAgIHJldHVybiBzaWduID09PSAnLScgPyBCaWdJbnQoLTEpICogbiA6IG47XG4gICAgfVxuICAgIGNvbnN0IG4gPSBwYXJzZUludChzdHIsIHJhZGl4KTtcbiAgICByZXR1cm4gc2lnbiA9PT0gJy0nID8gLTEgKiBuIDogbjtcbn1cbmZ1bmN0aW9uIGludFN0cmluZ2lmeShub2RlLCByYWRpeCwgcHJlZml4KSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gbm9kZTtcbiAgICBpZiAoaW50SWRlbnRpZnkodmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHN0ciA9IHZhbHVlLnRvU3RyaW5nKHJhZGl4KTtcbiAgICAgICAgcmV0dXJuIHZhbHVlIDwgMCA/ICctJyArIHByZWZpeCArIHN0ci5zdWJzdHIoMSkgOiBwcmVmaXggKyBzdHI7XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmdpZnlOdW1iZXIuc3RyaW5naWZ5TnVtYmVyKG5vZGUpO1xufVxuY29uc3QgaW50QmluID0ge1xuICAgIGlkZW50aWZ5OiBpbnRJZGVudGlmeSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgZm9ybWF0OiAnQklOJyxcbiAgICB0ZXN0OiAvXlstK10/MGJbMC0xX10rJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIG9wdCkgPT4gaW50UmVzb2x2ZShzdHIsIDIsIDIsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBub2RlID0+IGludFN0cmluZ2lmeShub2RlLCAyLCAnMGInKVxufTtcbmNvbnN0IGludE9jdCA9IHtcbiAgICBpZGVudGlmeTogaW50SWRlbnRpZnksXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLFxuICAgIGZvcm1hdDogJ09DVCcsXG4gICAgdGVzdDogL15bLStdPzBbMC03X10rJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIG9wdCkgPT4gaW50UmVzb2x2ZShzdHIsIDEsIDgsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBub2RlID0+IGludFN0cmluZ2lmeShub2RlLCA4LCAnMCcpXG59O1xuY29uc3QgaW50ID0ge1xuICAgIGlkZW50aWZ5OiBpbnRJZGVudGlmeSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgdGVzdDogL15bLStdP1swLTldWzAtOV9dKiQvLFxuICAgIHJlc29sdmU6IChzdHIsIF9vbkVycm9yLCBvcHQpID0+IGludFJlc29sdmUoc3RyLCAwLCAxMCwgb3B0KSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeU51bWJlci5zdHJpbmdpZnlOdW1iZXJcbn07XG5jb25zdCBpbnRIZXggPSB7XG4gICAgaWRlbnRpZnk6IGludElkZW50aWZ5LFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6aW50JyxcbiAgICBmb3JtYXQ6ICdIRVgnLFxuICAgIHRlc3Q6IC9eWy0rXT8weFswLTlhLWZBLUZfXSskLyxcbiAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgb3B0KSA9PiBpbnRSZXNvbHZlKHN0ciwgMiwgMTYsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBub2RlID0+IGludFN0cmluZ2lmeShub2RlLCAxNiwgJzB4Jylcbn07XG5cbmV4cG9ydHMuaW50ID0gaW50O1xuZXhwb3J0cy5pbnRCaW4gPSBpbnRCaW47XG5leHBvcnRzLmludEhleCA9IGludEhleDtcbmV4cG9y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