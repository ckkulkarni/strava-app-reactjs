6e6534390ec9fed517bd1d89bcc200ff
'use strict';

var Node = require('./Node.js');

/**
 * Recursively convert any node or its contents to native JavaScript
 *
 * @param value - The input value
 * @param arg - If `value` defines a `toJSON()` method, use this
 *   as its first argument
 * @param ctx - Conversion context, originally set in Document#toJS(). If
 *   `{ keep: true }` is not set, output should be suitable for JSON
 *   stringification.
 */
function toJS(value, arg, ctx) {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  if (Array.isArray(value)) return value.map((v, i) => toJS(v, String(i), ctx));
  if (value && typeof value.toJSON === 'function') {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call
    if (!ctx || !Node.hasAnchor(value)) return value.toJSON(arg, ctx);
    const data = {
      aliasCount: 0,
      count: 1,
      res: undefined
    };
    ctx.anchors.set(value, data);
    ctx.onCreate = res => {
      data.res = res;
      delete ctx.onCreate;
    };
    const res = value.toJSON(arg, ctx);
    if (ctx.onCreate) ctx.onCreate(res);
    return res;
  }
  if (typeof value === 'bigint' && !ctx?.keep) return Number(value);
  return value;
}
exports.toJS = toJS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwicmVxdWlyZSIsInRvSlMiLCJ2YWx1ZSIsImFyZyIsImN0eCIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsInYiLCJpIiwiU3RyaW5nIiwidG9KU09OIiwiaGFzQW5jaG9yIiwiZGF0YSIsImFsaWFzQ291bnQiLCJjb3VudCIsInJlcyIsInVuZGVmaW5lZCIsImFuY2hvcnMiLCJzZXQiLCJvbkNyZWF0ZSIsImtlZXAiLCJOdW1iZXIiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsidG9KUy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBOb2RlID0gcmVxdWlyZSgnLi9Ob2RlLmpzJyk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgY29udmVydCBhbnkgbm9kZSBvciBpdHMgY29udGVudHMgdG8gbmF0aXZlIEphdmFTY3JpcHRcbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgaW5wdXQgdmFsdWVcbiAqIEBwYXJhbSBhcmcgLSBJZiBgdmFsdWVgIGRlZmluZXMgYSBgdG9KU09OKClgIG1ldGhvZCwgdXNlIHRoaXNcbiAqICAgYXMgaXRzIGZpcnN0IGFyZ3VtZW50XG4gKiBAcGFyYW0gY3R4IC0gQ29udmVyc2lvbiBjb250ZXh0LCBvcmlnaW5hbGx5IHNldCBpbiBEb2N1bWVudCN0b0pTKCkuIElmXG4gKiAgIGB7IGtlZXA6IHRydWUgfWAgaXMgbm90IHNldCwgb3V0cHV0IHNob3VsZCBiZSBzdWl0YWJsZSBmb3IgSlNPTlxuICogICBzdHJpbmdpZmljYXRpb24uXG4gKi9cbmZ1bmN0aW9uIHRvSlModmFsdWUsIGFyZywgY3R4KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtcmV0dXJuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKVxuICAgICAgICByZXR1cm4gdmFsdWUubWFwKCh2LCBpKSA9PiB0b0pTKHYsIFN0cmluZyhpKSwgY3R4KSk7XG4gICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZS50b0pTT04gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtY2FsbFxuICAgICAgICBpZiAoIWN0eCB8fCAhTm9kZS5oYXNBbmNob3IodmFsdWUpKVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvSlNPTihhcmcsIGN0eCk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB7IGFsaWFzQ291bnQ6IDAsIGNvdW50OiAxLCByZXM6IHVuZGVmaW5lZCB9O1xuICAgICAgICBjdHguYW5jaG9ycy5zZXQodmFsdWUsIGRhdGEpO1xuICAgICAgICBjdHgub25DcmVhdGUgPSByZXMgPT4ge1xuICAgICAgICAgICAgZGF0YS5yZXMgPSByZXM7XG4gICAgICAgICAgICBkZWxldGUgY3R4Lm9uQ3JlYXRlO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXMgPSB2YWx1ZS50b0pTT04oYXJnLCBjdHgpO1xuICAgICAgICBpZiAoY3R4Lm9uQ3JlYXRlKVxuICAgICAgICAgICAgY3R4Lm9uQ3JlYXRlKHJlcyk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnICYmICFjdHg/LmtlZXApXG4gICAgICAgIHJldHVybiBOdW1iZXIodmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0cy50b0pTID0gdG9KUztcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxXQUFXLENBQUM7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsSUFBSUEsQ0FBQ0MsS0FBSyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRTtFQUMzQjtFQUNBLElBQUlDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDSixLQUFLLENBQUMsRUFDcEIsT0FBT0EsS0FBSyxDQUFDSyxHQUFHLENBQUMsQ0FBQ0MsQ0FBQyxFQUFFQyxDQUFDLEtBQUtSLElBQUksQ0FBQ08sQ0FBQyxFQUFFRSxNQUFNLENBQUNELENBQUMsQ0FBQyxFQUFFTCxHQUFHLENBQUMsQ0FBQztFQUN2RCxJQUFJRixLQUFLLElBQUksT0FBT0EsS0FBSyxDQUFDUyxNQUFNLEtBQUssVUFBVSxFQUFFO0lBQzdDO0lBQ0EsSUFBSSxDQUFDUCxHQUFHLElBQUksQ0FBQ0wsSUFBSSxDQUFDYSxTQUFTLENBQUNWLEtBQUssQ0FBQyxFQUM5QixPQUFPQSxLQUFLLENBQUNTLE1BQU0sQ0FBQ1IsR0FBRyxFQUFFQyxHQUFHLENBQUM7SUFDakMsTUFBTVMsSUFBSSxHQUFHO01BQUVDLFVBQVUsRUFBRSxDQUFDO01BQUVDLEtBQUssRUFBRSxDQUFDO01BQUVDLEdBQUcsRUFBRUM7SUFBVSxDQUFDO0lBQ3hEYixHQUFHLENBQUNjLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDakIsS0FBSyxFQUFFVyxJQUFJLENBQUM7SUFDNUJULEdBQUcsQ0FBQ2dCLFFBQVEsR0FBR0osR0FBRyxJQUFJO01BQ2xCSCxJQUFJLENBQUNHLEdBQUcsR0FBR0EsR0FBRztNQUNkLE9BQU9aLEdBQUcsQ0FBQ2dCLFFBQVE7SUFDdkIsQ0FBQztJQUNELE1BQU1KLEdBQUcsR0FBR2QsS0FBSyxDQUFDUyxNQUFNLENBQUNSLEdBQUcsRUFBRUMsR0FBRyxDQUFDO0lBQ2xDLElBQUlBLEdBQUcsQ0FBQ2dCLFFBQVEsRUFDWmhCLEdBQUcsQ0FBQ2dCLFFBQVEsQ0FBQ0osR0FBRyxDQUFDO0lBQ3JCLE9BQU9BLEdBQUc7RUFDZDtFQUNBLElBQUksT0FBT2QsS0FBSyxLQUFLLFFBQVEsSUFBSSxDQUFDRSxHQUFHLEVBQUVpQixJQUFJLEVBQ3ZDLE9BQU9DLE1BQU0sQ0FBQ3BCLEtBQUssQ0FBQztFQUN4QixPQUFPQSxLQUFLO0FBQ2hCO0FBRUFxQixPQUFPLENBQUN0QixJQUFJLEdBQUdBLElBQUkifQ==