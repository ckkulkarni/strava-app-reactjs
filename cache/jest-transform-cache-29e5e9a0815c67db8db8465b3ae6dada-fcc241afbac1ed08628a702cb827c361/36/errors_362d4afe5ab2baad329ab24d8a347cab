0425ab4cda2d6a88ab6948c57509930f
'use strict';

class YAMLError extends Error {
  constructor(name, pos, code, message) {
    super();
    this.name = name;
    this.code = code;
    this.message = message;
    this.pos = pos;
  }
}
class YAMLParseError extends YAMLError {
  constructor(pos, code, message) {
    super('YAMLParseError', pos, code, message);
  }
}
class YAMLWarning extends YAMLError {
  constructor(pos, code, message) {
    super('YAMLWarning', pos, code, message);
  }
}
const prettifyError = (src, lc) => error => {
  if (error.pos[0] === -1) return;
  error.linePos = error.pos.map(pos => lc.linePos(pos));
  const {
    line,
    col
  } = error.linePos[0];
  error.message += ` at line ${line}, column ${col}`;
  let ci = col - 1;
  let lineStr = src.substring(lc.lineStarts[line - 1], lc.lineStarts[line]).replace(/[\n\r]+$/, '');
  // Trim to max 80 chars, keeping col position near the middle
  if (ci >= 60 && lineStr.length > 80) {
    const trimStart = Math.min(ci - 39, lineStr.length - 79);
    lineStr = '…' + lineStr.substring(trimStart);
    ci -= trimStart - 1;
  }
  if (lineStr.length > 80) lineStr = lineStr.substring(0, 79) + '…';
  // Include previous line in context if pointing at line start
  if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {
    // Regexp won't match if start is trimmed
    let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);
    if (prev.length > 80) prev = prev.substring(0, 79) + '…\n';
    lineStr = prev + lineStr;
  }
  if (/[^ ]/.test(lineStr)) {
    let count = 1;
    const end = error.linePos[1];
    if (end && end.line === line && end.col > col) {
      count = Math.min(end.col - col, 80 - ci);
    }
    const pointer = ' '.repeat(ci) + '^'.repeat(count);
    error.message += `:\n\n${lineStr}\n${pointer}\n`;
  }
};
exports.YAMLError = YAMLError;
exports.YAMLParseError = YAMLParseError;
exports.YAMLWarning = YAMLWarning;
exports.prettifyError = prettifyError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJZQU1MRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibmFtZSIsInBvcyIsImNvZGUiLCJtZXNzYWdlIiwiWUFNTFBhcnNlRXJyb3IiLCJZQU1MV2FybmluZyIsInByZXR0aWZ5RXJyb3IiLCJzcmMiLCJsYyIsImVycm9yIiwibGluZVBvcyIsIm1hcCIsImxpbmUiLCJjb2wiLCJjaSIsImxpbmVTdHIiLCJzdWJzdHJpbmciLCJsaW5lU3RhcnRzIiwicmVwbGFjZSIsImxlbmd0aCIsInRyaW1TdGFydCIsIk1hdGgiLCJtaW4iLCJ0ZXN0IiwicHJldiIsImNvdW50IiwiZW5kIiwicG9pbnRlciIsInJlcGVhdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJlcnJvcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jbGFzcyBZQU1MRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobmFtZSwgcG9zLCBjb2RlLCBtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIHRoaXMucG9zID0gcG9zO1xuICAgIH1cbn1cbmNsYXNzIFlBTUxQYXJzZUVycm9yIGV4dGVuZHMgWUFNTEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcihwb3MsIGNvZGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIoJ1lBTUxQYXJzZUVycm9yJywgcG9zLCBjb2RlLCBtZXNzYWdlKTtcbiAgICB9XG59XG5jbGFzcyBZQU1MV2FybmluZyBleHRlbmRzIFlBTUxFcnJvciB7XG4gICAgY29uc3RydWN0b3IocG9zLCBjb2RlLCBtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKCdZQU1MV2FybmluZycsIHBvcywgY29kZSwgbWVzc2FnZSk7XG4gICAgfVxufVxuY29uc3QgcHJldHRpZnlFcnJvciA9IChzcmMsIGxjKSA9PiAoZXJyb3IpID0+IHtcbiAgICBpZiAoZXJyb3IucG9zWzBdID09PSAtMSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGVycm9yLmxpbmVQb3MgPSBlcnJvci5wb3MubWFwKHBvcyA9PiBsYy5saW5lUG9zKHBvcykpO1xuICAgIGNvbnN0IHsgbGluZSwgY29sIH0gPSBlcnJvci5saW5lUG9zWzBdO1xuICAgIGVycm9yLm1lc3NhZ2UgKz0gYCBhdCBsaW5lICR7bGluZX0sIGNvbHVtbiAke2NvbH1gO1xuICAgIGxldCBjaSA9IGNvbCAtIDE7XG4gICAgbGV0IGxpbmVTdHIgPSBzcmNcbiAgICAgICAgLnN1YnN0cmluZyhsYy5saW5lU3RhcnRzW2xpbmUgLSAxXSwgbGMubGluZVN0YXJ0c1tsaW5lXSlcbiAgICAgICAgLnJlcGxhY2UoL1tcXG5cXHJdKyQvLCAnJyk7XG4gICAgLy8gVHJpbSB0byBtYXggODAgY2hhcnMsIGtlZXBpbmcgY29sIHBvc2l0aW9uIG5lYXIgdGhlIG1pZGRsZVxuICAgIGlmIChjaSA+PSA2MCAmJiBsaW5lU3RyLmxlbmd0aCA+IDgwKSB7XG4gICAgICAgIGNvbnN0IHRyaW1TdGFydCA9IE1hdGgubWluKGNpIC0gMzksIGxpbmVTdHIubGVuZ3RoIC0gNzkpO1xuICAgICAgICBsaW5lU3RyID0gJ+KApicgKyBsaW5lU3RyLnN1YnN0cmluZyh0cmltU3RhcnQpO1xuICAgICAgICBjaSAtPSB0cmltU3RhcnQgLSAxO1xuICAgIH1cbiAgICBpZiAobGluZVN0ci5sZW5ndGggPiA4MClcbiAgICAgICAgbGluZVN0ciA9IGxpbmVTdHIuc3Vic3RyaW5nKDAsIDc5KSArICfigKYnO1xuICAgIC8vIEluY2x1ZGUgcHJldmlvdXMgbGluZSBpbiBjb250ZXh0IGlmIHBvaW50aW5nIGF0IGxpbmUgc3RhcnRcbiAgICBpZiAobGluZSA+IDEgJiYgL14gKiQvLnRlc3QobGluZVN0ci5zdWJzdHJpbmcoMCwgY2kpKSkge1xuICAgICAgICAvLyBSZWdleHAgd29uJ3QgbWF0Y2ggaWYgc3RhcnQgaXMgdHJpbW1lZFxuICAgICAgICBsZXQgcHJldiA9IHNyYy5zdWJzdHJpbmcobGMubGluZVN0YXJ0c1tsaW5lIC0gMl0sIGxjLmxpbmVTdGFydHNbbGluZSAtIDFdKTtcbiAgICAgICAgaWYgKHByZXYubGVuZ3RoID4gODApXG4gICAgICAgICAgICBwcmV2ID0gcHJldi5zdWJzdHJpbmcoMCwgNzkpICsgJ+KAplxcbic7XG4gICAgICAgIGxpbmVTdHIgPSBwcmV2ICsgbGluZVN0cjtcbiAgICB9XG4gICAgaWYgKC9bXiBdLy50ZXN0KGxpbmVTdHIpKSB7XG4gICAgICAgIGxldCBjb3VudCA9IDE7XG4gICAgICAgIGNvbnN0IGVuZCA9IGVycm9yLmxpbmVQb3NbMV07XG4gICAgICAgIGlmIChlbmQgJiYgZW5kLmxpbmUgPT09IGxpbmUgJiYgZW5kLmNvbCA+IGNvbCkge1xuICAgICAgICAgICAgY291bnQgPSBNYXRoLm1pbihlbmQuY29sIC0gY29sLCA4MCAtIGNpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwb2ludGVyID0gJyAnLnJlcGVhdChjaSkgKyAnXicucmVwZWF0KGNvdW50KTtcbiAgICAgICAgZXJyb3IubWVzc2FnZSArPSBgOlxcblxcbiR7bGluZVN0cn1cXG4ke3BvaW50ZXJ9XFxuYDtcbiAgICB9XG59O1xuXG5leHBvcnRzLllBTUxFcnJvciA9IFlBTUxFcnJvcjtcbmV4cG9ydHMuWUFNTFBhcnNlRXJyb3IgPSBZQU1MUGFyc2VFcnJvcjtcbmV4cG9ydHMuWUFNTFdhcm5pbmcgPSBZQU1MV2FybmluZztcbmV4cG9ydHMucHJldHRpZnlFcnJvciA9IHByZXR0aWZ5RXJyb3I7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosTUFBTUEsU0FBUyxTQUFTQyxLQUFLLENBQUM7RUFDMUJDLFdBQVdBLENBQUNDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtJQUNsQyxLQUFLLEVBQUU7SUFDUCxJQUFJLENBQUNILElB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