6d356d1ac31b7d254deab26bf18d0cd6
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByTitle = exports.queryAllByTitle = exports.getByTitle = exports.getAllByTitle = exports.findByTitle = exports.findAllByTitle = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
const isSvgTitle = node => {
  var _node$parentElement;
  return node.tagName.toLowerCase() === 'title' && ((_node$parentElement = node.parentElement) == null ? void 0 : _node$parentElement.tagName.toLowerCase()) === 'svg';
};
const queryAllByTitle = (container, text, {
  exact = true,
  collapseWhitespace,
  trim,
  normalizer
} = {}) => {
  (0, _helpers.checkContainerType)(container);
  const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
  const matchNormalizer = (0, _allUtils.makeNormalizer)({
    collapseWhitespace,
    trim,
    normalizer
  });
  return Array.from(container.querySelectorAll('[title], svg > title')).filter(node => matcher(node.getAttribute('title'), node, text, matchNormalizer) || isSvgTitle(node) && matcher((0, _allUtils.getNodeText)(node), node, text, matchNormalizer));
};
const getMultipleError = (c, title) => `Found multiple elements with the title: ${title}.`;
const getMissingError = (c, title) => `Unable to find an element with the title: ${title}.`;
const queryAllByTitleWithSuggestions = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByTitle, queryAllByTitle.name, 'queryAll');
exports.queryAllByTitle = queryAllByTitleWithSuggestions;
const [queryByTitle, getAllByTitle, getByTitle, findAllByTitle, findByTitle] = (0, _allUtils.buildQueries)(queryAllByTitle, getMultipleError, getMissingError);
exports.findByTitle = findByTitle;
exports.findAllByTitle = findAllByTitle;
exports.getByTitle = getByTitle;
exports.getAllByTitle = getAllByTitle;
exports.queryByTitle = queryByTitle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXJ5QnlUaXRsZSIsInF1ZXJ5QWxsQnlUaXRsZSIsImdldEJ5VGl0bGUiLCJnZXRBbGxCeVRpdGxlIiwiZmluZEJ5VGl0bGUiLCJmaW5kQWxsQnlUaXRsZSIsIl9xdWVyeUhlbHBlcnMiLCJyZXF1aXJlIiwiX2hlbHBlcnMiLCJfYWxsVXRpbHMiLCJpc1N2Z1RpdGxlIiwibm9kZSIsIl9ub2RlJHBhcmVudEVsZW1lbnQiLCJ0YWdOYW1lIiwidG9Mb3dlckNhc2UiLCJwYXJlbnRFbGVtZW50IiwiY29udGFpbmVyIiwidGV4dCIsImV4YWN0IiwiY29sbGFwc2VXaGl0ZXNwYWNlIiwidHJpbSIsIm5vcm1hbGl6ZXIiLCJjaGVja0NvbnRhaW5lclR5cGUiLCJtYXRjaGVyIiwibWF0Y2hlcyIsImZ1enp5TWF0Y2hlcyIsIm1hdGNoTm9ybWFsaXplciIsIm1ha2VOb3JtYWxpemVyIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsImZpbHRlciIsImdldEF0dHJpYnV0ZSIsImdldE5vZGVUZXh0IiwiZ2V0TXVsdGlwbGVFcnJvciIsImMiLCJ0aXRsZSIsImdldE1pc3NpbmdFcnJvciIsInF1ZXJ5QWxsQnlUaXRsZVdpdGhTdWdnZXN0aW9ucyIsIndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24iLCJuYW1lIiwiYnVpbGRRdWVyaWVzIl0sInNvdXJjZXMiOlsidGl0bGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlUaXRsZSA9IGV4cG9ydHMucXVlcnlBbGxCeVRpdGxlID0gZXhwb3J0cy5nZXRCeVRpdGxlID0gZXhwb3J0cy5nZXRBbGxCeVRpdGxlID0gZXhwb3J0cy5maW5kQnlUaXRsZSA9IGV4cG9ydHMuZmluZEFsbEJ5VGl0bGUgPSB2b2lkIDA7XG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX2FsbFV0aWxzID0gcmVxdWlyZShcIi4vYWxsLXV0aWxzXCIpO1xuY29uc3QgaXNTdmdUaXRsZSA9IG5vZGUgPT4ge1xuICB2YXIgX25vZGUkcGFyZW50RWxlbWVudDtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAndGl0bGUnICYmICgoX25vZGUkcGFyZW50RWxlbWVudCA9IG5vZGUucGFyZW50RWxlbWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9ub2RlJHBhcmVudEVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSA9PT0gJ3N2Zyc7XG59O1xuY29uc3QgcXVlcnlBbGxCeVRpdGxlID0gKGNvbnRhaW5lciwgdGV4dCwge1xuICBleGFjdCA9IHRydWUsXG4gIGNvbGxhcHNlV2hpdGVzcGFjZSxcbiAgdHJpbSxcbiAgbm9ybWFsaXplclxufSA9IHt9KSA9PiB7XG4gICgwLCBfaGVscGVycy5jaGVja0NvbnRhaW5lclR5cGUpKGNvbnRhaW5lcik7XG4gIGNvbnN0IG1hdGNoZXIgPSBleGFjdCA/IF9hbGxVdGlscy5tYXRjaGVzIDogX2FsbFV0aWxzLmZ1enp5TWF0Y2hlcztcbiAgY29uc3QgbWF0Y2hOb3JtYWxpemVyID0gKDAsIF9hbGxVdGlscy5tYWtlTm9ybWFsaXplcikoe1xuICAgIGNvbGxhcHNlV2hpdGVzcGFjZSxcbiAgICB0cmltLFxuICAgIG5vcm1hbGl6ZXJcbiAgfSk7XG4gIHJldHVybiBBcnJheS5mcm9tKGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdbdGl0bGVdLCBzdmcgPiB0aXRsZScpKS5maWx0ZXIobm9kZSA9PiBtYXRjaGVyKG5vZGUuZ2V0QXR0cmlidXRlKCd0aXRsZScpLCBub2RlLCB0ZXh0LCBtYXRjaE5vcm1hbGl6ZXIpIHx8IGlzU3ZnVGl0bGUobm9kZSkgJiYgbWF0Y2hlcigoMCwgX2FsbFV0aWxzLmdldE5vZGVUZXh0KShub2RlKSwgbm9kZSwgdGV4dCwgbWF0Y2hOb3JtYWxpemVyKSk7XG59O1xuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9IChjLCB0aXRsZSkgPT4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGhlIHRpdGxlOiAke3RpdGxlfS5gO1xuY29uc3QgZ2V0TWlzc2luZ0Vycm9yID0gKGMsIHRpdGxlKSA9PiBgVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCB3aXRoIHRoZSB0aXRsZTogJHt0aXRsZX0uYDtcbmNvbnN0IHF1ZXJ5QWxsQnlUaXRsZVdpdGhTdWdnZXN0aW9ucyA9ICgwLCBfcXVlcnlIZWxwZXJzLndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKHF1ZXJ5QWxsQnlUaXRsZSwgcXVlcnlBbGxCeVRpdGxlLm5hbWUsICdxdWVyeUFsbCcpO1xuZXhwb3J0cy5xdWVyeUFsbEJ5VGl0bGUgPSBxdWVyeUFsbEJ5VGl0bGVXaXRoU3VnZ2VzdGlvbnM7XG5jb25zdCBbcXVlcnlCeVRpdGxlLCBnZXRBbGxCeVRpdGxlLCBnZXRCeVRpdGxlLCBmaW5kQWxsQnlUaXRsZSwgZmluZEJ5VGl0bGVdID0gKDAsIF9hbGxVdGlscy5idWlsZFF1ZXJpZXMpKHF1ZXJ5QWxsQnlUaXRsZSwgZ2V0TXVsdGlwbGVFcnJvciwgZ2V0TWlzc2luZ0Vycm9yKTtcbmV4cG9ydHMuZmluZEJ5VGl0bGUgPSBmaW5kQnlUaXRsZTtcbmV4cG9ydHMuZmluZEFsbEJ5VGl0bGUgPSBmaW5kQWxsQnlUaXRsZTtcbmV4cG9ydHMuZ2V0QnlUaXRsZSA9IGdldEJ5VGl0bGU7XG5leHBvcnRzLmdldEFsbEJ5VGl0bGUgPSBnZXRBbGxCeVRpdGxlO1xuZXhwb3J0cy5xdWVyeUJ5VGl0bGUgPSBxdWVyeUJ5VGl0bGU7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMs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