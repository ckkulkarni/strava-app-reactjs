d554c3fb1b8fca461a077b3c27a6000e
'use strict';

var stringifyNumber = require('../../stringify/stringifyNumber.js');

/** Internal types handle bigint as number, because TS can't figure it out. */
function parseSexagesimal(str, asBigInt) {
  const sign = str[0];
  const parts = sign === '-' || sign === '+' ? str.substring(1) : str;
  const num = n => asBigInt ? BigInt(n) : Number(n);
  const res = parts.replace(/_/g, '').split(':').reduce((res, p) => res * num(60) + num(p), num(0));
  return sign === '-' ? num(-1) * res : res;
}
/**
 * hhhh:mm:ss.sss
 *
 * Internal types handle bigint as number, because TS can't figure it out.
 */
function stringifySexagesimal(node) {
  let {
    value
  } = node;
  let num = n => n;
  if (typeof value === 'bigint') num = n => BigInt(n);else if (isNaN(value) || !isFinite(value)) return stringifyNumber.stringifyNumber(node);
  let sign = '';
  if (value < 0) {
    sign = '-';
    value *= num(-1);
  }
  const _60 = num(60);
  const parts = [value % _60]; // seconds, including ms
  if (value < 60) {
    parts.unshift(0); // at least one : is required
  } else {
    value = (value - parts[0]) / _60;
    parts.unshift(value % _60); // minutes
    if (value >= 60) {
      value = (value - parts[0]) / _60;
      parts.unshift(value); // hours
    }
  }

  return sign + parts.map(n => n < 10 ? '0' + String(n) : String(n)).join(':').replace(/000000\d*$/, '') // % 60 may introduce error
  ;
}

const intTime = {
  identify: value => typeof value === 'bigint' || Number.isInteger(value),
  default: true,
  tag: 'tag:yaml.org,2002:int',
  format: 'TIME',
  test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,
  resolve: (str, _onError, {
    intAsBigInt
  }) => parseSexagesimal(str, intAsBigInt),
  stringify: stringifySexagesimal
};
const floatTime = {
  identify: value => typeof value === 'number',
  default: true,
  tag: 'tag:yaml.org,2002:float',
  format: 'TIME',
  test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,
  resolve: str => parseSexagesimal(str, false),
  stringify: stringifySexagesimal
};
const timestamp = {
  identify: value => value instanceof Date,
  default: true,
  tag: 'tag:yaml.org,2002:timestamp',
  // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part
  // may be omitted altogether, resulting in a date format. In such a case, the time part is
  // assumed to be 00:00:00Z (start of day, UTC).
  test: RegExp('^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})' +
  // YYYY-Mm-Dd
  '(?:' +
  // time is optional
  '(?:t|T|[ \\t]+)' +
  // t | T | whitespace
  '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)' +
  // Hh:Mm:Ss(.ss)?
  '(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?' +
  // Z | +5 | -03:30
  ')?$'),
  resolve(str) {
    const match = str.match(timestamp.test);
    if (!match) throw new Error('!!timestamp expects a date, starting with yyyy-mm-dd');
    const [, year, month, day, hour, minute, second] = match.map(Number);
    const millisec = match[7] ? Number((match[7] + '00').substr(1, 3)) : 0;
    let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);
    const tz = match[8];
    if (tz && tz !== 'Z') {
      let d = parseSexagesimal(tz, false);
      if (Math.abs(d) < 30) d *= 60;
      date -= 60000 * d;
    }
    return new Date(date);
  },
  stringify: ({
    value
  }) => value.toISOString().replace(/((T00:00)?:00)?\.000Z$/, '')
};
exports.floatTime = floatTime;
exports.intTime = intTime;
exports.timestamp = timestamp;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdHJpbmdpZnlOdW1iZXIiLCJyZXF1aXJlIiwicGFyc2VTZXhhZ2VzaW1hbCIsInN0ciIsImFzQmlnSW50Iiwic2lnbiIsInBhcnRzIiwic3Vic3RyaW5nIiwibnVtIiwibiIsIkJpZ0ludCIsIk51bWJlciIsInJlcyIsInJlcGxhY2UiLCJzcGxpdCIsInJlZHVjZSIsInAiLCJzdHJpbmdpZnlTZXhhZ2VzaW1hbCIsIm5vZGUiLCJ2YWx1ZSIsImlzTmFOIiwiaXNGaW5pdGUiLCJfNjAiLCJ1bnNoaWZ0IiwibWFwIiwiU3RyaW5nIiwiam9pbiIsImludFRpbWUiLCJpZGVudGlmeSIsImlzSW50ZWdlciIsImRlZmF1bHQiLCJ0YWciLCJmb3JtYXQiLCJ0ZXN0IiwicmVzb2x2ZSIsIl9vbkVycm9yIiwiaW50QXNCaWdJbnQiLCJzdHJpbmdpZnkiLCJmbG9hdFRpbWUiLCJ0aW1lc3RhbXAiLCJEYXRlIiwiUmVnRXhwIiwibWF0Y2giLCJFcnJvciIsInllYXIiLCJtb250aCIsImRheSIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJtaWxsaXNlYyIsInN1YnN0ciIsImRhdGUiLCJVVEMiLCJ0eiIsImQiLCJNYXRoIiwiYWJzIiwidG9JU09TdHJpbmciLCJleHBvcnRzIl0sInNvdXJjZXMiOlsidGltZXN0YW1wLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeU51bWJlciA9IHJlcXVpcmUoJy4uLy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlOdW1iZXIuanMnKTtcblxuLyoqIEludGVybmFsIHR5cGVzIGhhbmRsZSBiaWdpbnQgYXMgbnVtYmVyLCBiZWNhdXNlIFRTIGNhbid0IGZpZ3VyZSBpdCBvdXQuICovXG5mdW5jdGlvbiBwYXJzZVNleGFnZXNpbWFsKHN0ciwgYXNCaWdJbnQpIHtcbiAgICBjb25zdCBzaWduID0gc3RyWzBdO1xuICAgIGNvbnN0IHBhcnRzID0gc2lnbiA9PT0gJy0nIHx8IHNpZ24gPT09ICcrJyA/IHN0ci5zdWJzdHJpbmcoMSkgOiBzdHI7XG4gICAgY29uc3QgbnVtID0gKG4pID0+IGFzQmlnSW50ID8gQmlnSW50KG4pIDogTnVtYmVyKG4pO1xuICAgIGNvbnN0IHJlcyA9IHBhcnRzXG4gICAgICAgIC5yZXBsYWNlKC9fL2csICcnKVxuICAgICAgICAuc3BsaXQoJzonKVxuICAgICAgICAucmVkdWNlKChyZXMsIHApID0+IHJlcyAqIG51bSg2MCkgKyBudW0ocCksIG51bSgwKSk7XG4gICAgcmV0dXJuIChzaWduID09PSAnLScgPyBudW0oLTEpICogcmVzIDogcmVzKTtcbn1cbi8qKlxuICogaGhoaDptbTpzcy5zc3NcbiAqXG4gKiBJbnRlcm5hbCB0eXBlcyBoYW5kbGUgYmlnaW50IGFzIG51bWJlciwgYmVjYXVzZSBUUyBjYW4ndCBmaWd1cmUgaXQgb3V0LlxuICovXG5mdW5jdGlvbiBzdHJpbmdpZnlTZXhhZ2VzaW1hbChub2RlKSB7XG4gICAgbGV0IHsgdmFsdWUgfSA9IG5vZGU7XG4gICAgbGV0IG51bSA9IChuKSA9PiBuO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnKVxuICAgICAgICBudW0gPSBuID0+IEJpZ0ludChuKTtcbiAgICBlbHNlIGlmIChpc05hTih2YWx1ZSkgfHwgIWlzRmluaXRlKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeU51bWJlci5zdHJpbmdpZnlOdW1iZXIobm9kZSk7XG4gICAgbGV0IHNpZ24gPSAnJztcbiAgICBpZiAodmFsdWUgPCAwKSB7XG4gICAgICAgIHNpZ24gPSAnLSc7XG4gICAgICAgIHZhbHVlICo9IG51bSgtMSk7XG4gICAgfVxuICAgIGNvbnN0IF82MCA9IG51bSg2MCk7XG4gICAgY29uc3QgcGFydHMgPSBbdmFsdWUgJSBfNjBdOyAvLyBzZWNvbmRzLCBpbmNsdWRpbmcgbXNcbiAgICBpZiAodmFsdWUgPCA2MCkge1xuICAgICAgICBwYXJ0cy51bnNoaWZ0KDApOyAvLyBhdCBsZWFzdCBvbmUgOiBpcyByZXF1aXJlZFxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSAodmFsdWUgLSBwYXJ0c1swXSkgLyBfNjA7XG4gICAgICAgIHBhcnRzLnVuc2hpZnQodmFsdWUgJSBfNjApOyAvLyBtaW51dGVzXG4gICAgICAgIGlmICh2YWx1ZSA+PSA2MCkge1xuICAgICAgICAgICAgdmFsdWUgPSAodmFsdWUgLSBwYXJ0c1swXSkgLyBfNjA7XG4gICAgICAgICAgICBwYXJ0cy51bnNoaWZ0KHZhbHVlKTsgLy8gaG91cnNcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKHNpZ24gK1xuICAgICAgICBwYXJ0c1xuICAgICAgICAgICAgLm1hcChuID0+IChuIDwgMTAgPyAnMCcgKyBTdHJpbmcobikgOiBTdHJpbmcobikpKVxuICAgICAgICAgICAgLmpvaW4oJzonKVxuICAgICAgICAgICAgLnJlcGxhY2UoLzAwMDAwMFxcZCokLywgJycpIC8vICUgNjAgbWF5IGludHJvZHVjZSBlcnJvclxuICAgICk7XG59XG5jb25zdCBpbnRUaW1lID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnIHx8IE51bWJlci5pc0ludGVnZXIodmFsdWUpLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6aW50JyxcbiAgICBmb3JtYXQ6ICdUSU1FJyxcbiAgICB0ZXN0OiAvXlstK10/WzAtOV1bMC05X10qKD86OlswLTVdP1swLTldKSskLyxcbiAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgeyBpbnRBc0JpZ0ludCB9KSA9PiBwYXJzZVNleGFnZXNpbWFsKHN0ciwgaW50QXNCaWdJbnQpLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5U2V4YWdlc2ltYWxcbn07XG5jb25zdCBmbG9hdFRpbWUgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcsXG4gICAgZm9ybWF0OiAnVElNRScsXG4gICAgdGVzdDogL15bLStdP1swLTldWzAtOV9dKig/OjpbMC01XT9bMC05XSkrXFwuWzAtOV9dKiQvLFxuICAgIHJlc29sdmU6IHN0ciA9PiBwYXJzZVNleGFnZXNpbWFsKHN0ciwgZmFsc2UpLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5U2V4YWdlc2ltYWxcbn07XG5jb25zdCB0aW1lc3RhbXAgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHZhbHVlIGluc3RhbmNlb2YgRGF0ZSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOnRpbWVzdGFtcCcsXG4gICAgLy8gSWYgdGhlIHRpbWUgem9uZSBpcyBvbWl0dGVkLCB0aGUgdGltZXN0YW1wIGlzIGFzc3VtZWQgdG8gYmUgc3BlY2lmaWVkIGluIFVUQy4gVGhlIHRpbWUgcGFydFxuICAgIC8vIG1heSBiZSBvbWl0dGVkIGFsdG9nZXRoZXIsIHJlc3VsdGluZyBpbiBhIGRhdGUgZm9ybWF0LiBJbiBzdWNoIGEgY2FzZSwgdGhlIHRpbWUgcGFydCBpc1xuICAgIC8vIGFzc3VtZWQgdG8gYmUgMDA6MDA6MDBaIChzdGFydCBvZiBkYXksIFVUQykuXG4gICAgdGVzdDogUmVnRXhwKCdeKFswLTldezR9KS0oWzAtOV17MSwyfSktKFswLTldezEsMn0pJyArIC8vIFlZWVktTW0tRGRcbiAgICAgICAgJyg/OicgKyAvLyB0aW1lIGlzIG9wdGlvbmFsXG4gICAgICAgICcoPzp0fFR8WyBcXFxcdF0rKScgKyAvLyB0IHwgVCB8IHdoaXRlc3BhY2VcbiAgICAgICAgJyhbMC05XXsxLDJ9KTooWzAtOV17MSwyfSk6KFswLTldezEsMn0oXFxcXC5bMC05XSspPyknICsgLy8gSGg6TW06U3MoLnNzKT9cbiAgICAgICAgJyg/OlsgXFxcXHRdKihafFstK11bMDEyXT9bMC05XSg/OjpbMC05XXsyfSk/KSk/JyArIC8vIFogfCArNSB8IC0wMzozMFxuICAgICAgICAnKT8kJyksXG4gICAgcmVzb2x2ZShzdHIpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBzdHIubWF0Y2godGltZXN0YW1wLnRlc3QpO1xuICAgICAgICBpZiAoIW1hdGNoKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCchIXRpbWVzdGFtcCBleHBlY3RzIGEgZGF0ZSwgc3RhcnRpbmcgd2l0aCB5eXl5LW1tLWRkJyk7XG4gICAgICAgIGNvbnN0IFssIHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kXSA9IG1hdGNoLm1hcChOdW1iZXIpO1xuICAgICAgICBjb25zdCBtaWxsaXNlYyA9IG1hdGNoWzddID8gTnVtYmVyKChtYXRjaFs3XSArICcwMCcpLnN1YnN0cigxLCAzKSkgOiAwO1xuICAgICAgICBsZXQgZGF0ZSA9IERhdGUuVVRDKHllYXIsIG1vbnRoIC0gMSwgZGF5LCBob3VyIHx8IDAsIG1pbnV0ZSB8fCAwLCBzZWNvbmQgfHwgMCwgbWlsbGlzZWMpO1xuICAgICAgICBjb25zdCB0eiA9IG1hdGNoWzhdO1xuICAgICAgICBpZiAodHogJiYgdHogIT09ICdaJykge1xuICAgICAgICAgICAgbGV0IGQgPSBwYXJzZVNleGFnZXNpbWFsKHR6LCBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoZCkgPCAzMClcbiAgICAgICAgICAgICAgICBkICo9IDYwO1xuICAgICAgICAgICAgZGF0ZSAtPSA2MDAwMCAqIGQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUpO1xuICAgIH0sXG4gICAgc3RyaW5naWZ5OiAoeyB2YWx1ZSB9KSA9PiB2YWx1ZS50b0lTT1N0cmluZygpLnJlcGxhY2UoLygoVDAwOjAwKT86MDApP1xcLjAwMFokLywgJycpXG59O1xuXG5leHBvcnRzLmZsb2F0VGltZSA9IGZsb2F0VGltZTtcbmV4cG9ydHMuaW50VGltZSA9IGludFRpbWU7XG5leHBvcnRzLnRpbWVzdGFtcCA9IHRp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