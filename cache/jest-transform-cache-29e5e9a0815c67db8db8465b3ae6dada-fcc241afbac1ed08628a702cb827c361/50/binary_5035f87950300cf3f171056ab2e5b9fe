4334131f8c4551a75ad0cbfc0d6e0009
'use strict';

var Scalar = require('../../nodes/Scalar.js');
var stringifyString = require('../../stringify/stringifyString.js');
const binary = {
  identify: value => value instanceof Uint8Array,
  default: false,
  tag: 'tag:yaml.org,2002:binary',
  /**
   * Returns a Buffer in node and an Uint8Array in browsers
   *
   * To use the resulting buffer as an image, you'll want to do something like:
   *
   *   const blob = new Blob([buffer], { type: 'image/jpeg' })
   *   document.querySelector('#photo').src = URL.createObjectURL(blob)
   */
  resolve(src, onError) {
    if (typeof Buffer === 'function') {
      return Buffer.from(src, 'base64');
    } else if (typeof atob === 'function') {
      // On IE 11, atob() can't handle newlines
      const str = atob(src.replace(/[\n\r]/g, ''));
      const buffer = new Uint8Array(str.length);
      for (let i = 0; i < str.length; ++i) buffer[i] = str.charCodeAt(i);
      return buffer;
    } else {
      onError('This environment does not support reading binary tags; either Buffer or atob is required');
      return src;
    }
  },
  stringify({
    comment,
    type,
    value
  }, ctx, onComment, onChompKeep) {
    const buf = value; // checked earlier by binary.identify()
    let str;
    if (typeof Buffer === 'function') {
      str = buf instanceof Buffer ? buf.toString('base64') : Buffer.from(buf.buffer).toString('base64');
    } else if (typeof btoa === 'function') {
      let s = '';
      for (let i = 0; i < buf.length; ++i) s += String.fromCharCode(buf[i]);
      str = btoa(s);
    } else {
      throw new Error('This environment does not support writing binary tags; either Buffer or btoa is required');
    }
    if (!type) type = Scalar.Scalar.BLOCK_LITERAL;
    if (type !== Scalar.Scalar.QUOTE_DOUBLE) {
      const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);
      const n = Math.ceil(str.length / lineWidth);
      const lines = new Array(n);
      for (let i = 0, o = 0; i < n; ++i, o += lineWidth) {
        lines[i] = str.substr(o, lineWidth);
      }
      str = lines.join(type === Scalar.Scalar.BLOCK_LITERAL ? '\n' : ' ');
    }
    return stringifyString.stringifyString({
      comment,
      type,
      value: str
    }, ctx, onComment, onChompKeep);
  }
};
exports.binary = binary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTY2FsYXIiLCJyZXF1aXJlIiwic3RyaW5naWZ5U3RyaW5nIiwiYmluYXJ5IiwiaWRlbnRpZnkiLCJ2YWx1ZSIsIlVpbnQ4QXJyYXkiLCJkZWZhdWx0IiwidGFnIiwicmVzb2x2ZSIsInNyYyIsIm9uRXJyb3IiLCJCdWZmZXIiLCJmcm9tIiwiYXRvYiIsInN0ciIsInJlcGxhY2UiLCJidWZmZXIiLCJsZW5ndGgiLCJpIiwiY2hhckNvZGVBdCIsInN0cmluZ2lmeSIsImNvbW1lbnQiLCJ0eXBlIiwiY3R4Iiwib25Db21tZW50Iiwib25DaG9tcEtlZXAiLCJidWYiLCJ0b1N0cmluZyIsImJ0b2EiLCJzIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiRXJyb3IiLCJCTE9DS19MSVRFUkFMIiwiUVVPVEVfRE9VQkxFIiwibGluZVdpZHRoIiwiTWF0aCIsIm1heCIsIm9wdGlvbnMiLCJpbmRlbnQiLCJtaW5Db250ZW50V2lkdGgiLCJuIiwiY2VpbCIsImxpbmVzIiwiQXJyYXkiLCJvIiwic3Vic3RyIiwiam9pbiIsImV4cG9ydHMiXSwic291cmNlcyI6WyJiaW5hcnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgU2NhbGFyID0gcmVxdWlyZSgnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJyk7XG52YXIgc3RyaW5naWZ5U3RyaW5nID0gcmVxdWlyZSgnLi4vLi4vc3RyaW5naWZ5L3N0cmluZ2lmeVN0cmluZy5qcycpO1xuXG5jb25zdCBiaW5hcnkgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpiaW5hcnknLFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBCdWZmZXIgaW4gbm9kZSBhbmQgYW4gVWludDhBcnJheSBpbiBicm93c2Vyc1xuICAgICAqXG4gICAgICogVG8gdXNlIHRoZSByZXN1bHRpbmcgYnVmZmVyIGFzIGFuIGltYWdlLCB5b3UnbGwgd2FudCB0byBkbyBzb21ldGhpbmcgbGlrZTpcbiAgICAgKlxuICAgICAqICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtidWZmZXJdLCB7IHR5cGU6ICdpbWFnZS9qcGVnJyB9KVxuICAgICAqICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Bob3RvJykuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKVxuICAgICAqL1xuICAgIHJlc29sdmUoc3JjLCBvbkVycm9yKSB7XG4gICAgICAgIGlmICh0eXBlb2YgQnVmZmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oc3JjLCAnYmFzZTY0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGF0b2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIC8vIE9uIElFIDExLCBhdG9iKCkgY2FuJ3QgaGFuZGxlIG5ld2xpbmVzXG4gICAgICAgICAgICBjb25zdCBzdHIgPSBhdG9iKHNyYy5yZXBsYWNlKC9bXFxuXFxyXS9nLCAnJykpO1xuICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoc3RyLmxlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBidWZmZXJbaV0gPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvbkVycm9yKCdUaGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgcmVhZGluZyBiaW5hcnkgdGFnczsgZWl0aGVyIEJ1ZmZlciBvciBhdG9iIGlzIHJlcXVpcmVkJyk7XG4gICAgICAgICAgICByZXR1cm4gc3JjO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBzdHJpbmdpZnkoeyBjb21tZW50LCB0eXBlLCB2YWx1ZSB9LCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICAgICAgY29uc3QgYnVmID0gdmFsdWU7IC8vIGNoZWNrZWQgZWFybGllciBieSBiaW5hcnkuaWRlbnRpZnkoKVxuICAgICAgICBsZXQgc3RyO1xuICAgICAgICBpZiAodHlwZW9mIEJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3RyID1cbiAgICAgICAgICAgICAgICBidWYgaW5zdGFuY2VvZiBCdWZmZXJcbiAgICAgICAgICAgICAgICAgICAgPyBidWYudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAgICAgICAgICAgICAgICAgIDogQnVmZmVyLmZyb20oYnVmLmJ1ZmZlcikudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBsZXQgcyA9ICcnO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSk7XG4gICAgICAgICAgICBzdHIgPSBidG9hKHMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgd3JpdGluZyBiaW5hcnkgdGFnczsgZWl0aGVyIEJ1ZmZlciBvciBidG9hIGlzIHJlcXVpcmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0eXBlKVxuICAgICAgICAgICAgdHlwZSA9IFNjYWxhci5TY2FsYXIuQkxPQ0tfTElURVJBTDtcbiAgICAgICAgaWYgKHR5cGUgIT09IFNjYWxhci5TY2FsYXIuUVVPVEVfRE9VQkxFKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lV2lkdGggPSBNYXRoLm1heChjdHgub3B0aW9ucy5saW5lV2lkdGggLSBjdHguaW5kZW50Lmxlbmd0aCwgY3R4Lm9wdGlvbnMubWluQ29udGVudFdpZHRoKTtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBNYXRoLmNlaWwoc3RyLmxlbmd0aCAvIGxpbmVXaWR0aCk7XG4gICAgICAgICAgICBjb25zdCBsaW5lcyA9IG5ldyBBcnJheShuKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBvID0gMDsgaSA8IG47ICsraSwgbyArPSBsaW5lV2lkdGgpIHtcbiAgICAgICAgICAgICAgICBsaW5lc1tpXSA9IHN0ci5zdWJzdHIobywgbGluZVdpZHRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0ciA9IGxpbmVzLmpvaW4odHlwZSA9PT0gU2NhbGFyLlNjYWxhci5CTE9DS19MSVRFUkFMID8gJ1xcbicgOiAnICcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnlTdHJpbmcuc3RyaW5naWZ5U3RyaW5nKHsgY29tbWVudCwgdHlwZSwgdmFsdWU6IHN0ciB9LCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgIH1cbn07XG5cbmV4cG9ydHMuYmluYXJ5ID0gYmluYXJ5O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLE1BQU0sR0FBR0MsT0FBTyxDQUFDLHVCQUF1QixDQUFDO0FBQzdDLElBQUlDLGVBQWUsR0FBR0QsT0FBTyxDQUFDLG9DQUFvQyxDQUFDO0FBRW5FLE1BQU1FLE1BQU0sR0FBRztFQUNYQyxRQUFRLEVBQUVDLEtBQUssSUFBSUEsS0FBSyxZQUFZQyxVQUFVO0VBQzlDQyxPQUFPLEVBQUUsS0FBSztFQUNkQyxHQUFHLEVBQUUsMEJBQTBCO0VBQy9CO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDSUMsT0FBT0EsQ0FBQ0MsR0FBRyxFQUFFQyxPQUFPLEVBQUU7SUFDbEIsSUFBSSxPQUFPQyxNQUFNLEtBQUssVUFBVSxFQUFFO01BQzlCLE9BQU9BLE1BQU0s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