fc756fa054dc302eedf5e883a99318e6
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveAccessibleDescription = toHaveAccessibleDescription;
var _domAccessibilityApi = require("dom-accessibility-api");
var _utils = require("./utils");
function toHaveAccessibleDescription(htmlElement, expectedAccessibleDescription) {
  (0, _utils.checkHtmlElement)(htmlElement, toHaveAccessibleDescription, this);
  const actualAccessibleDescription = (0, _domAccessibilityApi.computeAccessibleDescription)(htmlElement);
  const missingExpectedValue = arguments.length === 1;
  let pass = false;
  if (missingExpectedValue) {
    // When called without an expected value we only want to validate that the element has an
    // accessible description, whatever it may be.
    pass = actualAccessibleDescription !== '';
  } else {
    pass = expectedAccessibleDescription instanceof RegExp ? expectedAccessibleDescription.test(actualAccessibleDescription) : this.equals(actualAccessibleDescription, expectedAccessibleDescription);
  }
  return {
    pass,
    message: () => {
      const to = this.isNot ? 'not to' : 'to';
      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.${toHaveAccessibleDescription.name}`, 'element', ''), `Expected element ${to} have accessible description`, expectedAccessibleDescription, 'Received', actualAccessibleDescription);
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvSGF2ZUFjY2Vzc2libGVEZXNjcmlwdGlvbiIsIl9kb21BY2Nlc3NpYmlsaXR5QXBpIiwicmVxdWlyZSIsIl91dGlscyIsImh0bWxFbGVtZW50IiwiZXhwZWN0ZWRBY2Nlc3NpYmxlRGVzY3JpcHRpb24iLCJjaGVja0h0bWxFbGVtZW50IiwiYWN0dWFsQWNjZXNzaWJsZURlc2NyaXB0aW9uIiwiY29tcHV0ZUFjY2Vzc2libGVEZXNjcmlwdGlvbiIsIm1pc3NpbmdFeHBlY3RlZFZhbHVlIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicGFzcyIsIlJlZ0V4cCIsInRlc3QiLCJlcXVhbHMiLCJtZXNzYWdlIiwidG8iLCJpc05vdCIsImdldE1lc3NhZ2UiLCJ1dGlscyIsIm1hdGNoZXJIaW50IiwibmFtZSJdLCJzb3VyY2VzIjpbInRvLWhhdmUtYWNjZXNzaWJsZS1kZXNjcmlwdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudG9IYXZlQWNjZXNzaWJsZURlc2NyaXB0aW9uID0gdG9IYXZlQWNjZXNzaWJsZURlc2NyaXB0aW9uO1xuXG52YXIgX2RvbUFjY2Vzc2liaWxpdHlBcGkgPSByZXF1aXJlKFwiZG9tLWFjY2Vzc2liaWxpdHktYXBpXCIpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbmZ1bmN0aW9uIHRvSGF2ZUFjY2Vzc2libGVEZXNjcmlwdGlvbihodG1sRWxlbWVudCwgZXhwZWN0ZWRBY2Nlc3NpYmxlRGVzY3JpcHRpb24pIHtcbiAgKDAsIF91dGlscy5jaGVja0h0bWxFbGVtZW50KShodG1sRWxlbWVudCwgdG9IYXZlQWNjZXNzaWJsZURlc2NyaXB0aW9uLCB0aGlzKTtcbiAgY29uc3QgYWN0dWFsQWNjZXNzaWJsZURlc2NyaXB0aW9uID0gKDAsIF9kb21BY2Nlc3NpYmlsaXR5QXBpLmNvbXB1dGVBY2Nlc3NpYmxlRGVzY3JpcHRpb24pKGh0bWxFbGVtZW50KTtcbiAgY29uc3QgbWlzc2luZ0V4cGVjdGVkVmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID09PSAxO1xuICBsZXQgcGFzcyA9IGZhbHNlO1xuXG4gIGlmIChtaXNzaW5nRXhwZWN0ZWRWYWx1ZSkge1xuICAgIC8vIFdoZW4gY2FsbGVkIHdpdGhvdXQgYW4gZXhwZWN0ZWQgdmFsdWUgd2Ugb25seSB3YW50IHRvIHZhbGlkYXRlIHRoYXQgdGhlIGVsZW1lbnQgaGFzIGFuXG4gICAgLy8gYWNjZXNzaWJsZSBkZXNjcmlwdGlvbiwgd2hhdGV2ZXIgaXQgbWF5IGJlLlxuICAgIHBhc3MgPSBhY3R1YWxBY2Nlc3NpYmxlRGVzY3JpcHRpb24gIT09ICcnO1xuICB9IGVsc2Uge1xuICAgIHBhc3MgPSBleHBlY3RlZEFjY2Vzc2libGVEZXNjcmlwdGlvbiBpbnN0YW5jZW9mIFJlZ0V4cCA/IGV4cGVjdGVkQWNjZXNzaWJsZURlc2NyaXB0aW9uLnRlc3QoYWN0dWFsQWNjZXNzaWJsZURlc2NyaXB0aW9uKSA6IHRoaXMuZXF1YWxzKGFjdHVhbEFjY2Vzc2libGVEZXNjcmlwdGlvbiwgZXhwZWN0ZWRBY2Nlc3NpYmxlRGVzY3JpcHRpb24pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXNzLFxuICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgIGNvbnN0IHRvID0gdGhpcy5pc05vdCA/ICdub3QgdG8nIDogJ3RvJztcbiAgICAgIHJldHVybiAoMCwgX3V0aWxzLmdldE1lc3NhZ2UpKHRoaXMsIHRoaXMudXRpbHMubWF0Y2hlckhpbnQoYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS4ke3RvSGF2ZUFjY2Vzc2libGVEZXNjcmlwdGlvbi5uYW1lfWAsICdlbGVtZW50JywgJycpLCBgRXhwZWN0ZWQgZWxlbWVudCAke3RvfSBoYXZlIGFjY2Vzc2libGUgZGVzY3JpcHRpb25gLCBleHBlY3RlZEFjY2Vzc2libGVEZXNjcmlwdGlvbiwgJ1JlY2VpdmVkJywgYWN0dWFsQWNjZXNzaWJsZURlc2NyaXB0aW9uKTtcbiAgICB9XG4gIH07XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsMkJBQTJCLEdBQUdBLDJCQUEyQjtBQUVqRSxJQUFJQyxvQkFBb0IsR0FBR0MsT0FBTyxDQUFDLHVCQUF1QixDQUFDO0FBRTNELElBQUlDLE1BQU0sR0FBR0QsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUUvQixTQUFTRiwyQkFBMkJBLENBQUNJLFdBQVcsRUFBRUMsNkJBQTZCLEVBQUU7RUFDL0UsQ0FBQyxDQUFDLEVBQUVGLE1BQU0sQ0FBQ0csZ0JBQWdCLEVBQUVGLFdBQVcsRUFBRUosMkJBQTJCLEVBQUUsSUFBSSxDQUFDO0VBQzVFLE1BQU1PLDJCQUEyQixHQUFHLENBQUMsQ0FBQyxFQUFFTixvQkFBb0IsQ0FBQ08sNEJBQTRCLEVBQUVKLFdBQVcsQ0FBQztFQUN2RyxNQUFNSyxvQkFBb0IsR0FBR0MsU0FBUyxDQUFDQyxNQUFNLEtBQUssQ0FBQztFQUNuRCxJQUFJQyxJQUFJLEdBQUcsS0FBSztFQUVoQixJQUFJSCxvQkFBb0IsRUFBRTtJQUN4QjtJQUNBO0lBQ0FHLElBQUksR0FBR0wsMkJBQTJCLEtBQUssRUFBRTtFQUMzQyxDQUFDLE1BQU07SUFDTEssSUFBSSxHQUFHUCw2QkFBNkIsWUFBWVEsTUFBTSxHQUFHUiw2QkFBNkIsQ0FBQ1MsSUFBSSxDQUFDUCwyQkFBMkIsQ0FBQyxHQUFHLElBQUksQ0FBQ1EsTUFBTSxDQUFDUiwyQkFBMkIsRUFBRUYsNkJBQTZCLENBQUM7RUFDcE07RUFFQSxPQUFPO0lBQ0xPLElBQUk7SUFDSkksT0FBTyxFQUFFQSxDQUFBLEtBQU07TUFDYixNQUFNQyxFQUFFLEdBQUcsSUFBSSxDQUFDQyxLQUFLLEdBQUcsUUFBUSxHQUFHLElBQUk7TUFDdkMsT0FBTyxDQUFDLENBQUMsRUFBRWYsTUFBTSxDQUFDZ0IsVUFBVSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsV0FBVyxDQUFFLEdBQUUsSUFBSSxDQUFDSCxLQUFLLEdBQUcsTUFBTSxHQUFHLEVBQUcsSUFBR2xCLDJCQUEyQixDQUFDc0IsSUFBSyxFQUFDLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxFQUFHLG9CQUFtQkwsRUFBRyw4QkFBNkIsRUFBRVosNkJBQTZCLEVBQUUsVUFBVSxFQUFFRSwyQkFBMkIsQ0FBQztJQUM3UTtFQUNGLENBQUM7QUFDSCJ9