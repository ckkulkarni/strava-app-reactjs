36ce97935a6261fcaeb8adfa5a361d68
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
class DataTable {
  constructor(sourceTable) {
    if (sourceTable instanceof Array) {
      this.rawTable = sourceTable;
    } else {
      this.rawTable = sourceTable.rows.map(row => row.cells.map(cell => cell.value));
    }
  }
  hashes() {
    const copy = this.raw();
    const keys = copy[0];
    const valuesArray = copy.slice(1);
    return valuesArray.map(values => {
      const rowObject = {};
      keys.forEach((key, index) => rowObject[key] = values[index]);
      return rowObject;
    });
  }
  raw() {
    return this.rawTable.slice(0);
  }
  rows() {
    const copy = this.raw();
    copy.shift();
    return copy;
  }
  rowsHash() {
    const rows = this.raw();
    const everyRowHasTwoColumns = rows.every(row => row.length === 2);
    if (!everyRowHasTwoColumns) {
      throw new Error('rowsHash can only be called on a data table where all rows have exactly two columns');
    }
    const result = {};
    rows.forEach(x => result[x[0]] = x[1]);
    return result;
  }
  transpose() {
    const transposed = this.rawTable[0].map((x, i) => this.rawTable.map(y => y[i]));
    return new DataTable(transposed);
  }
}
exports.default = DataTable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEYXRhVGFibGUiLCJjb25zdHJ1Y3RvciIsInNvdXJjZVRhYmxlIiwiQXJyYXkiLCJyYXdUYWJsZSIsInJvd3MiLCJtYXAiLCJyb3ciLCJjZWxscyIsImNlbGwiLCJ2YWx1ZSIsImhhc2hlcyIsImNvcHkiLCJyYXciLCJrZXlzIiwidmFsdWVzQXJyYXkiLCJzbGljZSIsInZhbHVlcyIsInJvd09iamVjdCIsImZvckVhY2giLCJrZXkiLCJpbmRleCIsInNoaWZ0Iiwicm93c0hhc2giLCJldmVyeVJvd0hhc1R3b0NvbHVtbnMiLCJldmVyeSIsImxlbmd0aCIsIkVycm9yIiwicmVzdWx0IiwieCIsInRyYW5zcG9zZSIsInRyYW5zcG9zZWQiLCJpIiwieSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGVscy9kYXRhX3RhYmxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG1lc3NhZ2VzIGZyb20gJ0BjdWN1bWJlci9tZXNzYWdlcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0YVRhYmxlIHtcbiAgcHJpdmF0ZSByZWFkb25seSByYXdUYWJsZTogc3RyaW5nW11bXVxuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZVRhYmxlOiBtZXNzYWdlcy5QaWNrbGVUYWJsZSB8IHN0cmluZ1tdW10pIHtcbiAgICBpZiAoc291cmNlVGFibGUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgdGhpcy5yYXdUYWJsZSA9IHNvdXJjZVRhYmxlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmF3VGFibGUgPSBzb3VyY2VUYWJsZS5yb3dzLm1hcCgocm93KSA9PlxuICAgICAgICByb3cuY2VsbHMubWFwKChjZWxsKSA9PiBjZWxsLnZhbHVlKVxuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGhhc2hlcygpOiBhbnlbXSB7XG4gICAgY29uc3QgY29weSA9IHRoaXMucmF3KClcbiAgICBjb25zdCBrZXlzID0gY29weVswXVxuICAgIGNvbnN0IHZhbHVlc0FycmF5ID0gY29weS5zbGljZSgxKVxuICAgIHJldHVybiB2YWx1ZXNBcnJheS5tYXAoKHZhbHVlcykgPT4ge1xuICAgICAgY29uc3Qgcm93T2JqZWN0OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge31cbiAgICAgIGtleXMuZm9yRWFjaCgoa2V5LCBpbmRleCkgPT4gKHJvd09iamVjdFtrZXldID0gdmFsdWVzW2luZGV4XSkpXG4gICAgICByZXR1cm4gcm93T2JqZWN0XG4gICAgfSlcbiAgfVxuXG4gIHJhdygpOiBzdHJpbmdbXVtdIHtcbiAgICByZXR1cm4gdGhpcy5yYXdUYWJsZS5zbGljZSgwKVxuICB9XG5cbiAgcm93cygpOiBzdHJpbmdbXVtdIHtcbiAgICBjb25zdCBjb3B5ID0gdGhpcy5yYXcoKVxuICAgIGNvcHkuc2hpZnQoKVxuICAgIHJldHVybiBjb3B5XG4gIH1cblxuICByb3dzSGFzaCgpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHtcbiAgICBjb25zdCByb3dzID0gdGhpcy5yYXcoKVxuICAgIGNvbnN0IGV2ZXJ5Um93SGFzVHdvQ29sdW1ucyA9IHJvd3MuZXZlcnkoKHJvdykgPT4gcm93Lmxlbmd0aCA9PT0gMilcbiAgICBpZiAoIWV2ZXJ5Um93SGFzVHdvQ29sdW1ucykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAncm93c0hhc2ggY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGEgZGF0YSB0YWJsZSB3aGVyZSBhbGwgcm93cyBoYXZlIGV4YWN0bHkgdHdvIGNvbHVtbnMnXG4gICAgICApXG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9XG4gICAgcm93cy5mb3JFYWNoKCh4KSA9PiAocmVzdWx0W3hbMF1dID0geFsxXSkpXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgdHJhbnNwb3NlKCk6IERhdGFUYWJsZSB7XG4gICAgY29uc3QgdHJhbnNwb3NlZCA9IHRoaXMucmF3VGFibGVbMF0ubWFwKCh4LCBpKSA9PlxuICAgICAgdGhpcy5yYXdUYWJsZS5tYXAoKHkpID0+IHlbaV0pXG4gICAgKVxuICAgIHJldHVybiBuZXcgRGF0YVRhYmxlKHRyYW5zcG9zZWQpXG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxNQUFxQkEsU0FBUztFQUc1QkMsWUFBWUMsV0FBOEM7SUFDeEQsSUFBSUEsV0FBVyxZQUFZQyxLQUFLLEVBQUU7TUFDaEMsSUFBSSxDQUFDQyxRQUFRLEdBQUdGLFdBQVc7S0FDNUIsTUFBTTtNQUNMLElBQUksQ0FBQ0UsUUFBUSxHQUFHRixXQUFXLENBQUNHLElBQUksQ0FBQ0MsR0FBRyxDQUFFQyxHQUFHLElBQ3ZDQSxHQUFHLENBQUNDLEtBQUssQ0FBQ0YsR0FBRyxDQUFFRyxJQUFJLElBQUtBLElBQUksQ0FBQ0MsS0FBSyxDQUFDLENBQ3BDOztFQUVMO0VBRUFDLE1BQU1BLENBQUE7SUFDSixNQUFNQyxJQUFJLEdBQUcsSUFBSSxDQUFDQyxHQUFHLEVBQUU7SUFDdkIsTUFBTUMsSUFBSSxHQUFHRixJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3BCLE1BQU1HLFdBQVcsR0FBR0gsSUFBSSxDQUFDSSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLE9BQU9ELFdBQVcsQ0FBQ1QsR0FBRyxDQUFFVyxNQUFNLElBQUk7TUFDaEMsTUFBTUMsU0FBUyxHQUEyQixFQUFFO01BQzVDSixJQUFJLENBQUNLLE9BQU8sQ0FBQyxDQUFDQyxHQUFHLEVBQUVDLEtBQUssS0FBTUgsU0FBUyxDQUFDRSxHQUFHLENBQUMsR0FBR0gsTUFBTSxDQUFDSSxLQUFLLENBQUUsQ0FBQztNQUM5RCxPQUFPSCxTQUFTO0lBQ2xCLENBQUMsQ0FBQztFQUNKO0VBRUFMLEdBQUdBLENBQUE7SUFDRCxPQUFPLElBQUksQ0FBQ1QsUUFBUSxDQUFDWSxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQy9CO0VBRUFYLElBQUlBLENBQUE7SUFDRixNQUFNTyxJQUFJLEdBQUcsSUFBSSxDQUFDQyxHQUFHLEVBQUU7SUFDdkJELElBQUksQ0FBQ1UsS0FBSyxFQUFFO0lBQ1osT0FBT1YsSUFBSTtFQUNiO0VBRUFXLFFBQVFBLENBQUE7SUFDTixNQUFNbEIsSUFBSSxHQUFHLElBQUksQ0FBQ1EsR0FBRyxFQUFFO0lBQ3ZCLE1BQU1XLHFCQUFxQixHQUFHbkIsSUFBSSxDQUFDb0IsS0FBSyxDQUFFbEIsR0FBRyxJQUFLQSxHQUFHLENBQUNtQixNQUFNLEtBQUssQ0FBQyxDQUFDO0lBQ25FLElBQUksQ0FBQ0YscUJBQXFCLEVBQUU7TUFDMUIsTUFBTSxJQUFJRyxLQUFLLENBQ2IscUZBQXFGLENBQ3RGOztJQUVILE1BQU1DLE1BQU0sR0FBMkIsRUFBRTtJQUN6Q3ZCLElBQUksQ0FBQ2MsT0FBTyxDQUFFVSxDQUFDLElBQU1ELE1BQU0sQ0FBQ0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUdBLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FBQztJQUMxQyxPQUFPRCxNQUFNO0VBQ2Y7RUFFQUUsU0FBU0EsQ0FBQTtJQUNQLE1BQU1DLFVBQVUsR0FBRyxJQUFJLENBQUMzQixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUNFLEdBQUcsQ0FBQyxDQUFDdUIsQ0FBQyxFQUFFRyxDQUFDLEtBQzNDLElBQUksQ0FBQzVCLFFBQVEsQ0FBQ0UsR0FBRyxDQUFFMkIsQ0FBQyxJQUFLQSxDQUFDLENBQUNELENBQUMsQ0FBQyxDQUFDLENBQy9CO0lBQ0QsT0FBTyxJQUFJaEMsU0FBUyxDQUFDK0IsVUFBVSxDQUFDO0VBQ2xDOztBQXBERkcsT0FBQSxDQUFBQyxPQUFBLEdBQUFuQyxTQUFBIn0=