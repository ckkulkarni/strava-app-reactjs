{"version":3,"names":["_1","__importDefault","require","helpers_1","messages","__importStar","gherkin_document_parser_1","value_checker_1","step_arguments_1","duration_helpers_1","getGherkinStepMap","getGherkinScenarioMap","GherkinDocumentParser","getScenarioDescription","getPickleStepMap","getStepKeyword","PickleParser","JsonFormatter","default","constructor","options","eventBroadcaster","on","envelope","doesHaveValue","testRunFinished","onTestRunFinished","convertNameToId","obj","name","replace","toLowerCase","formatDataTable","dataTable","rows","map","row","cells","x","value","formatDocString","docString","gherkinStep","content","line","location","formatStepArgument","stepArgument","doesNotHaveValue","parseStepArgument","groupedTestCaseAttempts","eventDataCollector","getTestCaseAttempts","forEach","testCaseAttempt","willBeRetried","uri","pickle","push","features","Object","keys","group","gherkinDocument","gherkinStepMap","gherkinScenarioMap","gherkinExampleRuleMap","getGherkinExampleRuleMap","gherkinScenarioLocationMap","getGherkinScenarioLocationMap","elements","pickleStepMap","isBeforeHook","steps","testCase","testSteps","testStep","pickleStepId","getStepData","testStepAttachments","stepAttachments","id","testStepResult","stepResults","getScenarioData","feature","getFeatureData","log","JSON","stringify","description","keyword","tags","getFeatureTags","formatScenarioId","astNodeIds","length","getScenarioTags","type","parts","rule","part","join","data","pickleStep","arguments","argument","text","hidden","stepDefinitionIds","stepDefinition","supportCodeLibrary","stepDefinitions","find","s","match","formatLocation","message","status","result","TestStepResultStatus","duration","durationToNanoseconds","FAILED","error_message","embeddings","attachment","body","mime_type","mediaType","tagData","scenario","getScenarioTag","byAstNodeId","tag","astNodeId","flatten","acc","val","concat","examples","e","reduce","_a","exports","documentation"],"sources":["../../src/formatter/json_formatter.ts"],"sourcesContent":["import Formatter, { IFormatterOptions } from './'\nimport { formatLocation, GherkinDocumentParser, PickleParser } from './helpers'\nimport * as messages from '@cucumber/messages'\nimport {\n  getGherkinExampleRuleMap,\n  getGherkinScenarioLocationMap,\n} from './helpers/gherkin_document_parser'\nimport { ITestCaseAttempt } from './helpers/event_data_collector'\nimport { doesHaveValue, doesNotHaveValue } from '../value_checker'\nimport { parseStepArgument } from '../step_arguments'\nimport { durationToNanoseconds } from './helpers/duration_helpers'\n\nconst { getGherkinStepMap, getGherkinScenarioMap } = GherkinDocumentParser\n\nconst { getScenarioDescription, getPickleStepMap, getStepKeyword } =\n  PickleParser\n\nexport interface IJsonFeature {\n  description: string\n  elements: IJsonScenario[]\n  id: string\n  keyword: string\n  line: number\n  name: string\n  tags: IJsonTag[]\n  uri: string\n}\n\nexport interface IJsonScenario {\n  description: string\n  id: string\n  keyword: string\n  line: number\n  name: string\n  steps: IJsonStep[]\n  tags: IJsonTag[]\n  type: string\n}\n\nexport interface IJsonStep {\n  arguments?: any // TODO\n  embeddings?: any // TODO\n  hidden?: boolean\n  keyword?: string // TODO, not optional\n  line?: number\n  match?: any // TODO\n  name?: string\n  result?: any // TODO\n}\n\nexport interface IJsonTag {\n  name: string\n  line: number\n}\n\ninterface IBuildJsonFeatureOptions {\n  feature: messages.Feature\n  elements: IJsonScenario[]\n  uri: string\n}\n\ninterface IBuildJsonScenarioOptions {\n  feature: messages.Feature\n  gherkinScenarioMap: Record<string, messages.Scenario>\n  gherkinExampleRuleMap: Record<string, messages.Rule>\n  gherkinScenarioLocationMap: Record<string, messages.Location>\n  pickle: messages.Pickle\n  steps: IJsonStep[]\n}\n\ninterface IBuildJsonStepOptions {\n  isBeforeHook: boolean\n  gherkinStepMap: Record<string, messages.Step>\n  pickleStepMap: Record<string, messages.PickleStep>\n  testStep: messages.TestStep\n  testStepAttachments: messages.Attachment[]\n  testStepResult: messages.TestStepResult\n}\n\ninterface UriToTestCaseAttemptsMap {\n  [uri: string]: ITestCaseAttempt[]\n}\n\nexport default class JsonFormatter extends Formatter {\n  public static readonly documentation: string =\n    'Prints the feature as JSON. The JSON format is in maintenance mode. Please consider using the message formatter with the standalone json-formatter (https://github.com/cucumber/cucumber/tree/master/json-formatter).'\n\n  constructor(options: IFormatterOptions) {\n    super(options)\n    options.eventBroadcaster.on('envelope', (envelope: messages.Envelope) => {\n      if (doesHaveValue(envelope.testRunFinished)) {\n        this.onTestRunFinished()\n      }\n    })\n  }\n\n  convertNameToId(obj: messages.Feature | messages.Pickle): string {\n    return obj.name.replace(/ /g, '-').toLowerCase()\n  }\n\n  formatDataTable(dataTable: messages.PickleTable): any {\n    return {\n      rows: dataTable.rows.map((row) => ({\n        cells: row.cells.map((x) => x.value),\n      })),\n    }\n  }\n\n  formatDocString(\n    docString: messages.PickleDocString,\n    gherkinStep: messages.Step\n  ): any {\n    return {\n      content: docString.content,\n      line: gherkinStep.docString.location.line,\n    }\n  }\n\n  formatStepArgument(\n    stepArgument: messages.PickleStepArgument,\n    gherkinStep: messages.Step\n  ): any {\n    if (doesNotHaveValue(stepArgument)) {\n      return []\n    }\n    return [\n      parseStepArgument<any>(stepArgument, {\n        dataTable: (dataTable) => this.formatDataTable(dataTable),\n        docString: (docString) => this.formatDocString(docString, gherkinStep),\n      }),\n    ]\n  }\n\n  onTestRunFinished(): void {\n    const groupedTestCaseAttempts: UriToTestCaseAttemptsMap = {}\n    this.eventDataCollector\n      .getTestCaseAttempts()\n      .forEach((testCaseAttempt: ITestCaseAttempt) => {\n        if (!testCaseAttempt.willBeRetried) {\n          const uri = testCaseAttempt.pickle.uri\n          if (doesNotHaveValue(groupedTestCaseAttempts[uri])) {\n            groupedTestCaseAttempts[uri] = []\n          }\n          groupedTestCaseAttempts[uri].push(testCaseAttempt)\n        }\n      })\n    const features = Object.keys(groupedTestCaseAttempts).map((uri) => {\n      const group = groupedTestCaseAttempts[uri]\n      const { gherkinDocument } = group[0]\n      const gherkinStepMap = getGherkinStepMap(gherkinDocument)\n      const gherkinScenarioMap = getGherkinScenarioMap(gherkinDocument)\n      const gherkinExampleRuleMap = getGherkinExampleRuleMap(gherkinDocument)\n      const gherkinScenarioLocationMap =\n        getGherkinScenarioLocationMap(gherkinDocument)\n      const elements = group.map((testCaseAttempt: ITestCaseAttempt) => {\n        const { pickle } = testCaseAttempt\n        const pickleStepMap = getPickleStepMap(pickle)\n        let isBeforeHook = true\n        const steps = testCaseAttempt.testCase.testSteps.map((testStep) => {\n          isBeforeHook = isBeforeHook && !doesHaveValue(testStep.pickleStepId)\n          return this.getStepData({\n            isBeforeHook,\n            gherkinStepMap,\n            pickleStepMap,\n            testStep,\n            testStepAttachments: testCaseAttempt.stepAttachments[testStep.id],\n            testStepResult: testCaseAttempt.stepResults[testStep.id],\n          })\n        })\n        return this.getScenarioData({\n          feature: gherkinDocument.feature,\n          gherkinScenarioLocationMap,\n          gherkinExampleRuleMap,\n          gherkinScenarioMap,\n          pickle,\n          steps,\n        })\n      })\n      return this.getFeatureData({\n        feature: gherkinDocument.feature,\n        elements,\n        uri,\n      })\n    })\n    this.log(JSON.stringify(features, null, 2))\n  }\n\n  getFeatureData({\n    feature,\n    elements,\n    uri,\n  }: IBuildJsonFeatureOptions): IJsonFeature {\n    return {\n      description: feature.description,\n      elements,\n      id: this.convertNameToId(feature),\n      line: feature.location.line,\n      keyword: feature.keyword,\n      name: feature.name,\n      tags: this.getFeatureTags(feature),\n      uri,\n    }\n  }\n\n  getScenarioData({\n    feature,\n    gherkinScenarioLocationMap,\n    gherkinExampleRuleMap,\n    gherkinScenarioMap,\n    pickle,\n    steps,\n  }: IBuildJsonScenarioOptions): IJsonScenario {\n    const description = getScenarioDescription({\n      pickle,\n      gherkinScenarioMap,\n    })\n    return {\n      description,\n      id: this.formatScenarioId({ feature, pickle, gherkinExampleRuleMap }),\n      keyword: gherkinScenarioMap[pickle.astNodeIds[0]].keyword,\n      line: gherkinScenarioLocationMap[\n        pickle.astNodeIds[pickle.astNodeIds.length - 1]\n      ].line,\n      name: pickle.name,\n      steps,\n      tags: this.getScenarioTags({ feature, pickle, gherkinScenarioMap }),\n      type: 'scenario',\n    }\n  }\n\n  private formatScenarioId({\n    feature,\n    pickle,\n    gherkinExampleRuleMap,\n  }: {\n    feature: messages.Feature\n    pickle: messages.Pickle\n    gherkinExampleRuleMap: Record<string, messages.Rule>\n  }): string {\n    let parts: any[]\n    const rule = gherkinExampleRuleMap[pickle.astNodeIds[0]]\n    if (doesHaveValue(rule)) {\n      parts = [feature, rule, pickle]\n    } else {\n      parts = [feature, pickle]\n    }\n    return parts.map((part) => this.convertNameToId(part)).join(';')\n  }\n\n  getStepData({\n    isBeforeHook,\n    gherkinStepMap,\n    pickleStepMap,\n    testStep,\n    testStepAttachments,\n    testStepResult,\n  }: IBuildJsonStepOptions): IJsonStep {\n    const data: IJsonStep = {}\n    if (doesHaveValue(testStep.pickleStepId)) {\n      const pickleStep = pickleStepMap[testStep.pickleStepId]\n      data.arguments = this.formatStepArgument(\n        pickleStep.argument,\n        gherkinStepMap[pickleStep.astNodeIds[0]]\n      )\n      data.keyword = getStepKeyword({ pickleStep, gherkinStepMap })\n      data.line = gherkinStepMap[pickleStep.astNodeIds[0]].location.line\n      data.name = pickleStep.text\n    } else {\n      data.keyword = isBeforeHook ? 'Before' : 'After'\n      data.hidden = true\n    }\n    if (\n      doesHaveValue(testStep.stepDefinitionIds) &&\n      testStep.stepDefinitionIds.length === 1\n    ) {\n      const stepDefinition = this.supportCodeLibrary.stepDefinitions.find(\n        (s) => s.id === testStep.stepDefinitionIds[0]\n      )\n      data.match = { location: formatLocation(stepDefinition) }\n    }\n    const { message, status } = testStepResult\n    data.result = {\n      status: messages.TestStepResultStatus[status].toLowerCase(),\n    }\n    if (doesHaveValue(testStepResult.duration)) {\n      data.result.duration = durationToNanoseconds(testStepResult.duration)\n    }\n    if (\n      status === messages.TestStepResultStatus.FAILED &&\n      doesHaveValue(message)\n    ) {\n      data.result.error_message = message\n    }\n    if (testStepAttachments?.length > 0) {\n      data.embeddings = testStepAttachments.map((attachment) => ({\n        data: attachment.body,\n        mime_type: attachment.mediaType,\n      }))\n    }\n    return data\n  }\n\n  getFeatureTags(feature: messages.Feature): IJsonTag[] {\n    return feature.tags.map((tagData) => ({\n      name: tagData.name,\n      line: tagData.location.line,\n    }))\n  }\n\n  getScenarioTags({\n    feature,\n    pickle,\n    gherkinScenarioMap,\n  }: {\n    feature: messages.Feature\n    pickle: messages.Pickle\n    gherkinScenarioMap: Record<string, messages.Scenario>\n  }): IJsonTag[] {\n    const scenario = gherkinScenarioMap[pickle.astNodeIds[0]]\n\n    return pickle.tags.map(\n      (tagData: messages.PickleTag): IJsonTag =>\n        this.getScenarioTag(tagData, feature, scenario)\n    )\n  }\n\n  private getScenarioTag(\n    tagData: messages.PickleTag,\n    feature: messages.Feature,\n    scenario: messages.Scenario\n  ): IJsonTag {\n    const byAstNodeId = (tag: messages.Tag): boolean =>\n      tag.id === tagData.astNodeId\n    const flatten = (\n      acc: messages.Tag[],\n      val: messages.Tag[]\n    ): messages.Tag[] => acc.concat(val)\n\n    const tag =\n      feature.tags.find(byAstNodeId) ||\n      scenario.tags.find(byAstNodeId) ||\n      scenario.examples\n        .map((e) => e.tags)\n        .reduce(flatten, [])\n        .find(byAstNodeId)\n\n    return {\n      name: tagData.name,\n      line: tag?.location?.line,\n    }\n  }\n}\n"],"mappings":"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"}