9574404c9ae08d819fb1aaa18a9b3ff3
"use strict";

const debug = require('./debug');
const utils = require('./utils');
const tableLayout = require('./layout-manager');
class Table extends Array {
  constructor(opts) {
    super();
    const options = utils.mergeOptions(opts);
    Object.defineProperty(this, 'options', {
      value: options,
      enumerable: options.debug
    });
    if (options.debug) {
      switch (typeof options.debug) {
        case 'boolean':
          debug.setDebugLevel(debug.WARN);
          break;
        case 'number':
          debug.setDebugLevel(options.debug);
          break;
        case 'string':
          debug.setDebugLevel(parseInt(options.debug, 10));
          break;
        default:
          debug.setDebugLevel(debug.WARN);
          debug.warn(`Debug option is expected to be boolean, number, or string. Received a ${typeof options.debug}`);
      }
      Object.defineProperty(this, 'messages', {
        get() {
          return debug.debugMessages();
        }
      });
    }
  }
  toString() {
    let array = this;
    let headersPresent = this.options.head && this.options.head.length;
    if (headersPresent) {
      array = [this.options.head];
      if (this.length) {
        array.push.apply(array, this);
      }
    } else {
      this.options.style.head = [];
    }
    let cells = tableLayout.makeTableLayout(array);
    cells.forEach(function (row) {
      row.forEach(function (cell) {
        cell.mergeTableOptions(this.options, cells);
      }, this);
    }, this);
    tableLayout.computeWidths(this.options.colWidths, cells);
    tableLayout.computeHeights(this.options.rowHeights, cells);
    cells.forEach(function (row) {
      row.forEach(function (cell) {
        cell.init(this.options);
      }, this);
    }, this);
    let result = [];
    for (let rowIndex = 0; rowIndex < cells.length; rowIndex++) {
      let row = cells[rowIndex];
      let heightOfRow = this.options.rowHeights[rowIndex];
      if (rowIndex === 0 || !this.options.style.compact || rowIndex == 1 && headersPresent) {
        doDraw(row, 'top', result);
      }
      for (let lineNum = 0; lineNum < heightOfRow; lineNum++) {
        doDraw(row, lineNum, result);
      }
      if (rowIndex + 1 == cells.length) {
        doDraw(row, 'bottom', result);
      }
    }
    return result.join('\n');
  }
  get width() {
    let str = this.toString().split('\n');
    return str[0].length;
  }
}
Table.reset = () => debug.reset();
function doDraw(row, lineNum, result) {
  let line = [];
  row.forEach(function (cell) {
    line.push(cell.draw(lineNum));
  });
  let str = line.join('');
  if (str.length) result.push(str);
}
module.exports = Table;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWJ1ZyIsInJlcXVpcmUiLCJ1dGlscyIsInRhYmxlTGF5b3V0IiwiVGFibGUiLCJBcnJheSIsImNvbnN0cnVjdG9yIiwib3B0cyIsIm9wdGlvbnMiLCJtZXJnZU9wdGlvbnMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiZW51bWVyYWJsZSIsInNldERlYnVnTGV2ZWwiLCJXQVJOIiwicGFyc2VJbnQiLCJ3YXJuIiwiZ2V0IiwiZGVidWdNZXNzYWdlcyIsInRvU3RyaW5nIiwiYXJyYXkiLCJoZWFkZXJzUHJlc2VudCIsImhlYWQiLCJsZW5ndGgiLCJwdXNoIiwiYXBwbHkiLCJzdHlsZSIsImNlbGxzIiwibWFrZVRhYmxlTGF5b3V0IiwiZm9yRWFjaCIsInJvdyIsImNlbGwiLCJtZXJnZVRhYmxlT3B0aW9ucyIsImNvbXB1dGVXaWR0aHMiLCJjb2xXaWR0aHMiLCJjb21wdXRlSGVpZ2h0cyIsInJvd0hlaWdodHMiLCJpbml0IiwicmVzdWx0Iiwicm93SW5kZXgiLCJoZWlnaHRPZlJvdyIsImNvbXBhY3QiLCJkb0RyYXciLCJsaW5lTnVtIiwiam9pbiIsIndpZHRoIiwic3RyIiwic3BsaXQiLCJyZXNldCIsImxpbmUiLCJkcmF3IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInRhYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGRlYnVnID0gcmVxdWlyZSgnLi9kZWJ1ZycpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5jb25zdCB0YWJsZUxheW91dCA9IHJlcXVpcmUoJy4vbGF5b3V0LW1hbmFnZXInKTtcblxuY2xhc3MgVGFibGUgZXh0ZW5kcyBBcnJheSB7XG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHV0aWxzLm1lcmdlT3B0aW9ucyhvcHRzKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ29wdGlvbnMnLCB7XG4gICAgICB2YWx1ZTogb3B0aW9ucyxcbiAgICAgIGVudW1lcmFibGU6IG9wdGlvbnMuZGVidWcsXG4gICAgfSk7XG5cbiAgICBpZiAob3B0aW9ucy5kZWJ1Zykge1xuICAgICAgc3dpdGNoICh0eXBlb2Ygb3B0aW9ucy5kZWJ1Zykge1xuICAgICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgICBkZWJ1Zy5zZXREZWJ1Z0xldmVsKGRlYnVnLldBUk4pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgIGRlYnVnLnNldERlYnVnTGV2ZWwob3B0aW9ucy5kZWJ1Zyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgZGVidWcuc2V0RGVidWdMZXZlbChwYXJzZUludChvcHRpb25zLmRlYnVnLCAxMCkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGRlYnVnLnNldERlYnVnTGV2ZWwoZGVidWcuV0FSTik7XG4gICAgICAgICAgZGVidWcud2FybihgRGVidWcgb3B0aW9uIGlzIGV4cGVjdGVkIHRvIGJlIGJvb2xlYW4sIG51bWJlciwgb3Igc3RyaW5nLiBSZWNlaXZlZCBhICR7dHlwZW9mIG9wdGlvbnMuZGVidWd9YCk7XG4gICAgICB9XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ21lc3NhZ2VzJywge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIGRlYnVnLmRlYnVnTWVzc2FnZXMoKTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCBhcnJheSA9IHRoaXM7XG4gICAgbGV0IGhlYWRlcnNQcmVzZW50ID0gdGhpcy5vcHRpb25zLmhlYWQgJiYgdGhpcy5vcHRpb25zLmhlYWQubGVuZ3RoO1xuICAgIGlmIChoZWFkZXJzUHJlc2VudCkge1xuICAgICAgYXJyYXkgPSBbdGhpcy5vcHRpb25zLmhlYWRdO1xuICAgICAgaWYgKHRoaXMubGVuZ3RoKSB7XG4gICAgICAgIGFycmF5LnB1c2guYXBwbHkoYXJyYXksIHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wdGlvbnMuc3R5bGUuaGVhZCA9IFtdO1xuICAgIH1cblxuICAgIGxldCBjZWxscyA9IHRhYmxlTGF5b3V0Lm1ha2VUYWJsZUxheW91dChhcnJheSk7XG5cbiAgICBjZWxscy5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgIHJvdy5mb3JFYWNoKGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgICAgIGNlbGwubWVyZ2VUYWJsZU9wdGlvbnModGhpcy5vcHRpb25zLCBjZWxscyk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9LCB0aGlzKTtcblxuICAgIHRhYmxlTGF5b3V0LmNvbXB1dGVXaWR0aHModGhpcy5vcHRpb25zLmNvbFdpZHRocywgY2VsbHMpO1xuICAgIHRhYmxlTGF5b3V0LmNvbXB1dGVIZWlnaHRzKHRoaXMub3B0aW9ucy5yb3dIZWlnaHRzLCBjZWxscyk7XG5cbiAgICBjZWxscy5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgIHJvdy5mb3JFYWNoKGZ1bmN0aW9uIChjZWxsKSB7XG4gICAgICAgIGNlbGwuaW5pdCh0aGlzLm9wdGlvbnMpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfSwgdGhpcyk7XG5cbiAgICBsZXQgcmVzdWx0ID0gW107XG5cbiAgICBmb3IgKGxldCByb3dJbmRleCA9IDA7IHJvd0luZGV4IDwgY2VsbHMubGVuZ3RoOyByb3dJbmRleCsrKSB7XG4gICAgICBsZXQgcm93ID0gY2VsbHNbcm93SW5kZXhdO1xuICAgICAgbGV0IGhlaWdodE9mUm93ID0gdGhpcy5vcHRpb25zLnJvd0hlaWdodHNbcm93SW5kZXhdO1xuXG4gICAgICBpZiAocm93SW5kZXggPT09IDAgfHwgIXRoaXMub3B0aW9ucy5zdHlsZS5jb21wYWN0IHx8IChyb3dJbmRleCA9PSAxICYmIGhlYWRlcnNQcmVzZW50KSkge1xuICAgICAgICBkb0RyYXcocm93LCAndG9wJywgcmVzdWx0KTtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgbGluZU51bSA9IDA7IGxpbmVOdW0gPCBoZWlnaHRPZlJvdzsgbGluZU51bSsrKSB7XG4gICAgICAgIGRvRHJhdyhyb3csIGxpbmVOdW0sIHJlc3VsdCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyb3dJbmRleCArIDEgPT0gY2VsbHMubGVuZ3RoKSB7XG4gICAgICAgIGRvRHJhdyhyb3csICdib3R0b20nLCByZXN1bHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQuam9pbignXFxuJyk7XG4gIH1cblxuICBnZXQgd2lkdGgoKSB7XG4gICAgbGV0IHN0ciA9IHRoaXMudG9TdHJpbmcoKS5zcGxpdCgnXFxuJyk7XG4gICAgcmV0dXJuIHN0clswXS5sZW5ndGg7XG4gIH1cbn1cblxuVGFibGUucmVzZXQgPSAoKSA9PiBkZWJ1Zy5yZXNldCgpO1xuXG5mdW5jdGlvbiBkb0RyYXcocm93LCBsaW5lTnVtLCByZXN1bHQpIHtcbiAgbGV0IGxpbmUgPSBbXTtcbiAgcm93LmZvckVhY2goZnVuY3Rpb24gKGNlbGwpIHtcbiAgICBsaW5lLnB1c2goY2VsbC5kcmF3KGxpbmVOdW0pKTtcbiAgfSk7XG4gIGxldCBzdHIgPSBsaW5lLmpvaW4oJycpO1xuICBpZiAoc3RyLmxlbmd0aCkgcmVzdWx0LnB1c2goc3RyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUYWJsZTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDaEMsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQ2hDLE1BQU1FLFdBQVcsR0FBR0YsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBRS9DLE1BQU1HLEtBQUssU0FBU0MsS0FBSyxDQUFDO0VBQ3hCQyxXQUFXQSxDQUFDQyxJ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