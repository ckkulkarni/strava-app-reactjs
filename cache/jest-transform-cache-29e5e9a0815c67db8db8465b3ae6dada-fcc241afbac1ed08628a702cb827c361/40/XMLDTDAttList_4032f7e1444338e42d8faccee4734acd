9169d4a71fe3544c54a98a10cdf4198c
"use strict";

// Generated by CoffeeScript 2.4.1
(function () {
  var NodeType, XMLDTDAttList, XMLNode;
  XMLNode = require('./XMLNode');
  NodeType = require('./NodeType');

  // Represents an attribute list
  module.exports = XMLDTDAttList = class XMLDTDAttList extends XMLNode {
    // Initializes a new instance of `XMLDTDAttList`

    // `parent` the parent `XMLDocType` element
    // `elementName` the name of the element containing this attribute
    // `attributeName` attribute name
    // `attributeType` type of the attribute
    // `defaultValueType` default value type (either #REQUIRED, #IMPLIED,
    //                    #FIXED or #DEFAULT)
    // `defaultValue` default value of the attribute
    //                (only used for #FIXED or #DEFAULT)
    constructor(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      super(parent);
      if (elementName == null) {
        throw new Error("Missing DTD element name. " + this.debugInfo());
      }
      if (attributeName == null) {
        throw new Error("Missing DTD attribute name. " + this.debugInfo(elementName));
      }
      if (!attributeType) {
        throw new Error("Missing DTD attribute type. " + this.debugInfo(elementName));
      }
      if (!defaultValueType) {
        throw new Error("Missing DTD attribute default. " + this.debugInfo(elementName));
      }
      if (defaultValueType.indexOf('#') !== 0) {
        defaultValueType = '#' + defaultValueType;
      }
      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
        throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. " + this.debugInfo(elementName));
      }
      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
        throw new Error("Default value only applies to #FIXED or #DEFAULT. " + this.debugInfo(elementName));
      }
      this.elementName = this.stringify.name(elementName);
      this.type = NodeType.AttributeDeclaration;
      this.attributeName = this.stringify.name(attributeName);
      this.attributeType = this.stringify.dtdAttType(attributeType);
      if (defaultValue) {
        this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
      }
      this.defaultValueType = defaultValueType;
    }

    // Converts the XML fragment to string

    // `options.pretty` pretty prints the result
    // `options.indent` indentation for pretty print
    // `options.offset` how many indentations to add to every line for pretty print
    // `options.newline` newline sequence for pretty print
    toString(options) {
      return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));
    }
  };
}).call(void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlVHlwZSIsIlhNTERUREF0dExpc3QiLCJYTUxOb2RlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb25zdHJ1Y3RvciIsInBhcmVudCIsImVsZW1lbnROYW1lIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZVR5cGUiLCJkZWZhdWx0VmFsdWVUeXBlIiwiZGVmYXVsdFZhbHVlIiwiRXJyb3IiLCJkZWJ1Z0luZm8iLCJpbmRleE9mIiwibWF0Y2giLCJzdHJpbmdpZnkiLCJuYW1lIiwidHlwZSIsIkF0dHJpYnV0ZURlY2xhcmF0aW9uIiwiZHRkQXR0VHlwZSIsImR0ZEF0dERlZmF1bHQiLCJ0b1N0cmluZyIsIm9wdGlvbnMiLCJ3cml0ZXIiLCJkdGRBdHRMaXN0IiwiZmlsdGVyT3B0aW9ucyIsImNhbGwiXSwic291cmNlcyI6WyJYTUxEVERBdHRMaXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMi40LjFcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxEVERBdHRMaXN0LCBYTUxOb2RlO1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICAvLyBSZXByZXNlbnRzIGFuIGF0dHJpYnV0ZSBsaXN0XG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRFREQXR0TGlzdCA9IGNsYXNzIFhNTERUREF0dExpc3QgZXh0ZW5kcyBYTUxOb2RlIHtcbiAgICAvLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiBgWE1MRFREQXR0TGlzdGBcblxuICAgIC8vIGBwYXJlbnRgIHRoZSBwYXJlbnQgYFhNTERvY1R5cGVgIGVsZW1lbnRcbiAgICAvLyBgZWxlbWVudE5hbWVgIHRoZSBuYW1lIG9mIHRoZSBlbGVtZW50IGNvbnRhaW5pbmcgdGhpcyBhdHRyaWJ1dGVcbiAgICAvLyBgYXR0cmlidXRlTmFtZWAgYXR0cmlidXRlIG5hbWVcbiAgICAvLyBgYXR0cmlidXRlVHlwZWAgdHlwZSBvZiB0aGUgYXR0cmlidXRlXG4gICAgLy8gYGRlZmF1bHRWYWx1ZVR5cGVgIGRlZmF1bHQgdmFsdWUgdHlwZSAoZWl0aGVyICNSRVFVSVJFRCwgI0lNUExJRUQsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICNGSVhFRCBvciAjREVGQVVMVClcbiAgICAvLyBgZGVmYXVsdFZhbHVlYCBkZWZhdWx0IHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGVcbiAgICAvLyAgICAgICAgICAgICAgICAob25seSB1c2VkIGZvciAjRklYRUQgb3IgI0RFRkFVTFQpXG4gICAgY29uc3RydWN0b3IocGFyZW50LCBlbGVtZW50TmFtZSwgYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlVHlwZSwgZGVmYXVsdFZhbHVlVHlwZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICBzdXBlcihwYXJlbnQpO1xuICAgICAgaWYgKGVsZW1lbnROYW1lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBEVEQgZWxlbWVudCBuYW1lLiBcIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuICAgICAgaWYgKGF0dHJpYnV0ZU5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBhdHRyaWJ1dGUgbmFtZS4gXCIgKyB0aGlzLmRlYnVnSW5mbyhlbGVtZW50TmFtZSkpO1xuICAgICAgfVxuICAgICAgaWYgKCFhdHRyaWJ1dGVUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIGF0dHJpYnV0ZSB0eXBlLiBcIiArIHRoaXMuZGVidWdJbmZvKGVsZW1lbnROYW1lKSk7XG4gICAgICB9XG4gICAgICBpZiAoIWRlZmF1bHRWYWx1ZVR5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBEVEQgYXR0cmlidXRlIGRlZmF1bHQuIFwiICsgdGhpcy5kZWJ1Z0luZm8oZWxlbWVudE5hbWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZhdWx0VmFsdWVUeXBlLmluZGV4T2YoJyMnKSAhPT0gMCkge1xuICAgICAgICBkZWZhdWx0VmFsdWVUeXBlID0gJyMnICsgZGVmYXVsdFZhbHVlVHlwZTtcbiAgICAgIH1cbiAgICAgIGlmICghZGVmYXVsdFZhbHVlVHlwZS5tYXRjaCgvXigjUkVRVUlSRUR8I0lNUExJRUR8I0ZJWEVEfCNERUZBVUxUKSQvKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGRlZmF1bHQgdmFsdWUgdHlwZTsgZXhwZWN0ZWQ6ICNSRVFVSVJFRCwgI0lNUExJRUQsICNGSVhFRCBvciAjREVGQVVMVC4gXCIgKyB0aGlzLmRlYnVnSW5mbyhlbGVtZW50TmFtZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGRlZmF1bHRWYWx1ZSAmJiAhZGVmYXVsdFZhbHVlVHlwZS5tYXRjaCgvXigjRklYRUR8I0RFRkFVTFQpJC8pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRlZmF1bHQgdmFsdWUgb25seSBhcHBsaWVzIHRvICNGSVhFRCBvciAjREVGQVVMVC4gXCIgKyB0aGlzLmRlYnVnSW5mbyhlbGVtZW50TmFtZSkpO1xuICAgICAgfVxuICAgICAgdGhpcy5lbGVtZW50TmFtZSA9IHRoaXMuc3RyaW5naWZ5Lm5hbWUoZWxlbWVudE5hbWUpO1xuICAgICAgdGhpcy50eXBlID0gTm9kZVR5cGUuQXR0cmlidXRlRGVjbGFyYXRpb247XG4gICAgICB0aGlzLmF0dHJpYnV0ZU5hbWUgPSB0aGlzLnN0cmluZ2lmeS5uYW1lKGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgdGhpcy5hdHRyaWJ1dGVUeXBlID0gdGhpcy5zdHJpbmdpZnkuZHRkQXR0VHlwZShhdHRyaWJ1dGVUeXBlKTtcbiAgICAgIGlmIChkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5kdGRBdHREZWZhdWx0KGRlZmF1bHRWYWx1ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLmRlZmF1bHRWYWx1ZVR5cGUgPSBkZWZhdWx0VmFsdWVUeXBlO1xuICAgIH1cblxuICAgIC8vIENvbnZlcnRzIHRoZSBYTUwgZnJhZ21lbnQgdG8gc3RyaW5nXG5cbiAgICAvLyBgb3B0aW9ucy5wcmV0dHlgIHByZXR0eSBwcmludHMgdGhlIHJlc3VsdFxuICAgIC8vIGBvcHRpb25zLmluZGVudGAgaW5kZW50YXRpb24gZm9yIHByZXR0eSBwcmludFxuICAgIC8vIGBvcHRpb25zLm9mZnNldGAgaG93IG1hbnkgaW5kZW50YXRpb25zIHRvIGFkZCB0byBldmVyeSBsaW5lIGZvciBwcmV0dHkgcHJpbnRcbiAgICAvLyBgb3B0aW9ucy5uZXdsaW5lYCBuZXdsaW5lIHNlcXVlbmNlIGZvciBwcmV0dHkgcHJpbnRcbiAgICB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5kdGRBdHRMaXN0KHRoaXMsIHRoaXMub3B0aW9ucy53cml0ZXIuZmlsdGVyT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfVxuXG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSxDQUFDLFlBQVc7RUFDVixJQUFJQSxRQUFRLEVBQUVDLGFBQWEsRUFBRUMsT0FBTztFQUVwQ0EsT0FBTyxHQUFHQyxPQUFPLENBQUMsV0FBVyxDQUFDO0VBRTlCSCxRQUFRLEdBQUdHLE9BQU8sQ0FBQyxZQUFZLENBQUM7O0VBRWhDO0VBQ0FDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHSixhQUFhLEdBQUcsTUFBTUEsYUFBYSxTQUFTQyxPQUFPLENBQUM7SUFDbkU7O0lBRUE7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBSSxXQUFXQSxDQUFDQyxNQUFNLEVBQUVDLFdBQVcsRUFBRUMsYUFBYSxFQUFFQyxhQUFhLEVBQUVDLGdCQUFnQixFQUFFQyxZQUFZLEVBQUU7TUFDN0YsS0FBSyxDQUFDTCxNQUFNLENBQUM7TUFDYixJQUFJQyxXQUFXLElBQUksSUFBSSxFQUFFO1FBQ3ZCLE1BQU0sSUFBSUssS0FBSyxDQUFDLDRCQUE0QixHQUFHLElBQUksQ0FBQ0MsU0FBUyxFQUFFLENBQUM7TUFDbEU7TUFDQSxJQUFJTCxhQUFhLElBQUksSUFBSSxFQUFFO1FBQ3pCLE1BQU0sSUFBSUksS0FBSyxDQUFDLDhCQUE4QixHQUFHLElBQUksQ0FBQ0MsU0FBUyxDQUFDTixXQUFXLENBQUMsQ0FBQztNQUMvRTtNQUNBLElBQUksQ0FBQ0UsYUFBYSxFQUFFO1FBQ2xCLE1BQU0sSUFBSUcsS0FBSyxDQUFDLDhCQUE4QixHQUFHLElBQUksQ0FBQ0MsU0FBUyxDQUFDTixXQUFXLENBQUMsQ0FBQztNQUMvRTtNQUNBLElBQUksQ0FBQ0csZ0JBQWdCLEVBQUU7UUFDckIsTUFBTSxJQUFJRSxLQUFLLENBQUMsaUNBQWlDLEdBQUcsSUFBSSxDQUFDQyxTQUFTLENBQUNOLFdBQVcsQ0FBQyxDQUFDO01BQ2xGO01BQ0EsSUFBSUcsZ0JBQWdCLENBQUNJLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDdkNKLGdCQUFnQixHQUFHLEdBQUcsR0FBR0EsZ0JBQWdCO01BQzNDO01BQ0EsSUFBSSxDQUFDQSxnQkFBZ0IsQ0FBQ0ssS0FBSyxDQUFDLHdDQUF3QyxDQUFDLEVBQUU7UUFDckUsTUFBTSxJQUFJSCxLQUFLLENBQUMsaUZBQWlGLEdBQUcsSUFBSSxDQUFDQyxTQUFTLENBQUNOLFdBQVcsQ0FBQyxDQUFDO01BQ2xJO01BQ0EsSUFBSUksWUFBWSxJQUFJLENBQUNELGdCQUFnQixDQUFDSyxLQUFLLENBQUMscUJBQXFCLENBQUMsRUFBRTtRQUNsRSxNQUFNLElBQUlILEtBQUssQ0FBQyxvREFBb0QsR0FBRyxJQUFJLENBQUNDLFNBQVMsQ0FBQ04sV0FBVyxDQUFDLENBQUM7TUFDckc7TUFDQSxJQUFJLENBQUNBLFdBQVcsR0FBRyxJQUFJLENBQUNTLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDVixXQUFXLENBQUM7TUFDbkQsSUFBSSxDQUFDVyxJQUFJLEdBQUduQixRQUFRLENBQUNvQixvQkFBb0I7TUFDekMsSUFBSSxDQUFDWCxhQUFhLEdBQUcsSUFBSSxDQUFDUSxTQUFTLENBQUNDLElBQUksQ0FBQ1QsYUFBYSxDQUFDO01BQ3ZELElBQUksQ0FBQ0MsYUFBYSxHQUFHLElBQUksQ0FBQ08sU0FBUyxDQUFDSSxVQUFVLENBQUNYLGFBQWEsQ0FBQztNQUM3RCxJQUFJRSxZQUFZLEVBQUU7UUFDaEIsSUFBSSxDQUFDQSxZQUFZLEdBQUcsSUFBSSxDQUFDSyxTQUFTLENBQUNLLGFBQWEsQ0FBQ1YsWUFBWSxDQUFDO01BQ2hFO01BQ0EsSUFBSSxDQUFDRCxnQkFBZ0IsR0FBR0EsZ0JBQWdCO0lBQzFDOztJQUVBOztJQUVBO0lBQ0E7SUFDQTtJQUNBO0lBQ0FZLFFBQVFBLENBQUNDLE9BQU8sRUFBRTtNQUNoQixPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLENBQUNDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDRixPQUFPLENBQUNDLE1BQU0sQ0FBQ0UsYUFBYSxDQUFDSCxPQUFPLENBQUMsQ0FBQztJQUN6RjtFQUVGLENBQUM7QUFFSCxDQUFDLEVBQUVJLElBQUksUUFBTSJ9