6c25f1da4ed24850504f2035c3244edf
"use strict";

// Generated by CoffeeScript 2.4.1
(function () {
  var XMLDOMConfiguration, XMLDOMErrorHandler, XMLDOMStringList;
  XMLDOMErrorHandler = require('./XMLDOMErrorHandler');
  XMLDOMStringList = require('./XMLDOMStringList');

  // Implements the DOMConfiguration interface
  module.exports = XMLDOMConfiguration = function () {
    class XMLDOMConfiguration {
      constructor() {
        var clonedSelf;
        this.defaultParams = {
          "canonical-form": false,
          "cdata-sections": false,
          "comments": false,
          "datatype-normalization": false,
          "element-content-whitespace": true,
          "entities": true,
          "error-handler": new XMLDOMErrorHandler(),
          "infoset": true,
          "validate-if-schema": false,
          "namespaces": true,
          "namespace-declarations": true,
          "normalize-characters": false,
          "schema-location": '',
          "schema-type": '',
          "split-cdata-sections": true,
          "validate": false,
          "well-formed": true
        };
        this.params = clonedSelf = Object.create(this.defaultParams);
      }

      // Gets the value of a parameter.

      // `name` name of the parameter
      getParameter(name) {
        if (this.params.hasOwnProperty(name)) {
          return this.params[name];
        } else {
          return null;
        }
      }

      // Checks if setting a parameter to a specific value is supported.

      // `name` name of the parameter
      // `value` parameter value
      canSetParameter(name, value) {
        return true;
      }

      // Sets the value of a parameter.

      // `name` name of the parameter
      // `value` new value or null if the user wishes to unset the parameter
      setParameter(name, value) {
        if (value != null) {
          return this.params[name] = value;
        } else {
          return delete this.params[name];
        }
      }
    }
    ;

    // Returns the list of parameter names
    Object.defineProperty(XMLDOMConfiguration.prototype, 'parameterNames', {
      get: function () {
        return new XMLDOMStringList(Object.keys(this.defaultParams));
      }
    });
    return XMLDOMConfiguration;
  }.call(this);
}).call(void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJYTUxET01Db25maWd1cmF0aW9uIiwiWE1MRE9NRXJyb3JIYW5kbGVyIiwiWE1MRE9NU3RyaW5nTGlzdCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29uc3RydWN0b3IiLCJjbG9uZWRTZWxmIiwiZGVmYXVsdFBhcmFtcyIsInBhcmFtcyIsIk9iamVjdCIsImNyZWF0ZSIsImdldFBhcmFtZXRlciIsIm5hbWUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhblNldFBhcmFtZXRlciIsInZhbHVlIiwic2V0UGFyYW1ldGVyIiwiZGVmaW5lUHJvcGVydHkiLCJwcm90b3R5cGUiLCJnZXQiLCJrZXlzIiwiY2FsbCJdLCJzb3VyY2VzIjpbIlhNTERPTUNvbmZpZ3VyYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAyLjQuMVxuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MRE9NQ29uZmlndXJhdGlvbiwgWE1MRE9NRXJyb3JIYW5kbGVyLCBYTUxET01TdHJpbmdMaXN0O1xuXG4gIFhNTERPTUVycm9ySGFuZGxlciA9IHJlcXVpcmUoJy4vWE1MRE9NRXJyb3JIYW5kbGVyJyk7XG5cbiAgWE1MRE9NU3RyaW5nTGlzdCA9IHJlcXVpcmUoJy4vWE1MRE9NU3RyaW5nTGlzdCcpO1xuXG4gIC8vIEltcGxlbWVudHMgdGhlIERPTUNvbmZpZ3VyYXRpb24gaW50ZXJmYWNlXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MRE9NQ29uZmlndXJhdGlvbiA9IChmdW5jdGlvbigpIHtcbiAgICBjbGFzcyBYTUxET01Db25maWd1cmF0aW9uIHtcbiAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB2YXIgY2xvbmVkU2VsZjtcbiAgICAgICAgdGhpcy5kZWZhdWx0UGFyYW1zID0ge1xuICAgICAgICAgIFwiY2Fub25pY2FsLWZvcm1cIjogZmFsc2UsXG4gICAgICAgICAgXCJjZGF0YS1zZWN0aW9uc1wiOiBmYWxzZSxcbiAgICAgICAgICBcImNvbW1lbnRzXCI6IGZhbHNlLFxuICAgICAgICAgIFwiZGF0YXR5cGUtbm9ybWFsaXphdGlvblwiOiBmYWxzZSxcbiAgICAgICAgICBcImVsZW1lbnQtY29udGVudC13aGl0ZXNwYWNlXCI6IHRydWUsXG4gICAgICAgICAgXCJlbnRpdGllc1wiOiB0cnVlLFxuICAgICAgICAgIFwiZXJyb3ItaGFuZGxlclwiOiBuZXcgWE1MRE9NRXJyb3JIYW5kbGVyKCksXG4gICAgICAgICAgXCJpbmZvc2V0XCI6IHRydWUsXG4gICAgICAgICAgXCJ2YWxpZGF0ZS1pZi1zY2hlbWFcIjogZmFsc2UsXG4gICAgICAgICAgXCJuYW1lc3BhY2VzXCI6IHRydWUsXG4gICAgICAgICAgXCJuYW1lc3BhY2UtZGVjbGFyYXRpb25zXCI6IHRydWUsXG4gICAgICAgICAgXCJub3JtYWxpemUtY2hhcmFjdGVyc1wiOiBmYWxzZSxcbiAgICAgICAgICBcInNjaGVtYS1sb2NhdGlvblwiOiAnJyxcbiAgICAgICAgICBcInNjaGVtYS10eXBlXCI6ICcnLFxuICAgICAgICAgIFwic3BsaXQtY2RhdGEtc2VjdGlvbnNcIjogdHJ1ZSxcbiAgICAgICAgICBcInZhbGlkYXRlXCI6IGZhbHNlLFxuICAgICAgICAgIFwid2VsbC1mb3JtZWRcIjogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnBhcmFtcyA9IGNsb25lZFNlbGYgPSBPYmplY3QuY3JlYXRlKHRoaXMuZGVmYXVsdFBhcmFtcyk7XG4gICAgICB9XG5cbiAgICAgIC8vIEdldHMgdGhlIHZhbHVlIG9mIGEgcGFyYW1ldGVyLlxuXG4gICAgICAvLyBgbmFtZWAgbmFtZSBvZiB0aGUgcGFyYW1ldGVyXG4gICAgICBnZXRQYXJhbWV0ZXIobmFtZSkge1xuICAgICAgICBpZiAodGhpcy5wYXJhbXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJhbXNbbmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2tzIGlmIHNldHRpbmcgYSBwYXJhbWV0ZXIgdG8gYSBzcGVjaWZpYyB2YWx1ZSBpcyBzdXBwb3J0ZWQuXG5cbiAgICAgIC8vIGBuYW1lYCBuYW1lIG9mIHRoZSBwYXJhbWV0ZXJcbiAgICAgIC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHZhbHVlXG4gICAgICBjYW5TZXRQYXJhbWV0ZXIobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIFNldHMgdGhlIHZhbHVlIG9mIGEgcGFyYW1ldGVyLlxuXG4gICAgICAvLyBgbmFtZWAgbmFtZSBvZiB0aGUgcGFyYW1ldGVyXG4gICAgICAvLyBgdmFsdWVgIG5ldyB2YWx1ZSBvciBudWxsIGlmIHRoZSB1c2VyIHdpc2hlcyB0byB1bnNldCB0aGUgcGFyYW1ldGVyXG4gICAgICBzZXRQYXJhbWV0ZXIobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJhbXNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZGVsZXRlIHRoaXMucGFyYW1zW25hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9O1xuXG4gICAgLy8gUmV0dXJucyB0aGUgbGlzdCBvZiBwYXJhbWV0ZXIgbmFtZXNcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoWE1MRE9NQ29uZmlndXJhdGlvbi5wcm90b3R5cGUsICdwYXJhbWV0ZXJOYW1lcycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgWE1MRE9NU3RyaW5nTGlzdChPYmplY3Qua2V5cyh0aGlzLmRlZmF1bHRQYXJhbXMpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBYTUxET01Db25maWd1cmF0aW9uO1xuXG4gIH0pLmNhbGwo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