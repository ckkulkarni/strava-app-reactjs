{"version":3,"names":["value_checker_1","require","assembleTestCases","eventBroadcaster","newId","pickles","supportCodeLibrary","result","pickle","id","pickleId","testCaseId","fromBeforeHooks","makeBeforeHookSteps","fromStepDefinitions","makeSteps","fromAfterHooks","makeAfterHookSteps","testCase","testSteps","emit","exports","afterTestCaseHookDefinitions","slice","reverse","filter","hookDefinition","appliesToTestCase","map","hookId","beforeTestCaseHookDefinitions","steps","pickleStep","stepDefinitions","stepDefinition","matchesStepName","text","pickleStepId","stepDefinitionIds","stepMatchArgumentsLists","expression","match","stepMatchArguments","arg","group","mapArgumentGroup","parameterTypeName","parameterType","name","start","value","children","doesHaveValue","child","undefined"],"sources":["../../src/runtime/assemble_test_cases.ts"],"sourcesContent":["import { EventEmitter } from 'events'\nimport * as messages from '@cucumber/messages'\nimport { IdGenerator } from '@cucumber/messages'\nimport { ISupportCodeLibrary } from '../support_code_library_builder/types'\nimport { Group } from '@cucumber/cucumber-expressions'\nimport { doesHaveValue } from '../value_checker'\n\nexport declare type IAssembledTestCases = Record<string, messages.TestCase>\n\nexport interface IAssembleTestCasesOptions {\n  eventBroadcaster: EventEmitter\n  newId: IdGenerator.NewId\n  pickles: messages.Pickle[]\n  supportCodeLibrary: ISupportCodeLibrary\n}\n\nexport async function assembleTestCases({\n  eventBroadcaster,\n  newId,\n  pickles,\n  supportCodeLibrary,\n}: IAssembleTestCasesOptions): Promise<IAssembledTestCases> {\n  const result: IAssembledTestCases = {}\n  for (const pickle of pickles) {\n    const { id: pickleId } = pickle\n    const testCaseId = newId()\n    const fromBeforeHooks: messages.TestStep[] = makeBeforeHookSteps({\n      supportCodeLibrary,\n      pickle,\n      newId,\n    })\n    const fromStepDefinitions: messages.TestStep[] = makeSteps({\n      pickle,\n      supportCodeLibrary,\n      newId,\n    })\n    const fromAfterHooks: messages.TestStep[] = makeAfterHookSteps({\n      supportCodeLibrary,\n      pickle,\n      newId,\n    })\n    const testCase: messages.TestCase = {\n      pickleId,\n      id: testCaseId,\n      testSteps: [\n        ...fromBeforeHooks,\n        ...fromStepDefinitions,\n        ...fromAfterHooks,\n      ],\n    }\n    eventBroadcaster.emit('envelope', { testCase })\n    result[pickleId] = testCase\n  }\n  return result\n}\n\nfunction makeAfterHookSteps({\n  supportCodeLibrary,\n  pickle,\n  newId,\n}: {\n  supportCodeLibrary: ISupportCodeLibrary\n  pickle: messages.Pickle\n  newId: IdGenerator.NewId\n}): messages.TestStep[] {\n  return supportCodeLibrary.afterTestCaseHookDefinitions\n    .slice(0)\n    .reverse()\n    .filter((hookDefinition) => hookDefinition.appliesToTestCase(pickle))\n    .map((hookDefinition) => ({\n      id: newId(),\n      hookId: hookDefinition.id,\n    }))\n}\n\nfunction makeBeforeHookSteps({\n  supportCodeLibrary,\n  pickle,\n  newId,\n}: {\n  supportCodeLibrary: ISupportCodeLibrary\n  pickle: messages.Pickle\n  newId: IdGenerator.NewId\n}): messages.TestStep[] {\n  return supportCodeLibrary.beforeTestCaseHookDefinitions\n    .filter((hookDefinition) => hookDefinition.appliesToTestCase(pickle))\n    .map((hookDefinition) => ({\n      id: newId(),\n      hookId: hookDefinition.id,\n    }))\n}\n\nfunction makeSteps({\n  pickle,\n  supportCodeLibrary,\n  newId,\n}: {\n  pickle: messages.Pickle\n  supportCodeLibrary: ISupportCodeLibrary\n  newId: () => string\n}): messages.TestStep[] {\n  return pickle.steps.map((pickleStep) => {\n    const stepDefinitions = supportCodeLibrary.stepDefinitions.filter(\n      (stepDefinition) => stepDefinition.matchesStepName(pickleStep.text)\n    )\n    return {\n      id: newId(),\n      pickleStepId: pickleStep.id,\n      stepDefinitionIds: stepDefinitions.map(\n        (stepDefinition) => stepDefinition.id\n      ),\n      stepMatchArgumentsLists: stepDefinitions.map((stepDefinition) => {\n        const result = stepDefinition.expression.match(pickleStep.text)\n        return {\n          stepMatchArguments: result.map((arg) => {\n            return {\n              group: mapArgumentGroup(arg.group),\n              parameterTypeName: arg.parameterType.name,\n            }\n          }),\n        }\n      }),\n    }\n  })\n}\n\nfunction mapArgumentGroup(group: Group): messages.Group {\n  return {\n    start: group.start,\n    value: group.value,\n    children: doesHaveValue(group.children)\n      ? group.children.map((child) => mapArgumentGroup(child))\n      : undefined,\n  }\n}\n"],"mappings":"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"}