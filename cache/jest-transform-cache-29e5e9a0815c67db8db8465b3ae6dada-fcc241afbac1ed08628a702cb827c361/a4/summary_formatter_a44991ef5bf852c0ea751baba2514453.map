{"version":3,"names":["helpers_1","require","_1","__importDefault","value_checker_1","issue_helpers_1","time_1","SummaryFormatter","default","constructor","options","testRunStartedTimestamp","eventBroadcaster","on","envelope","doesHaveValue","testRunStarted","timestamp","testRunFinished","testRunFinishedTimestamp","logSummary","durationBetweenTimestamps","testRunDuration","failures","warnings","testCaseAttempts","eventDataCollector","getTestCaseAttempts","forEach","testCaseAttempt","isFailure","worstTestStepResult","willBeRetried","push","isWarning","undefinedParameterTypes","length","log","formatUndefinedParameterTypes","logIssues","issues","title","formatSummary","colorFns","index","formatIssue","number","snippetBuilder","supportCodeLibrary","printAttachments","exports","documentation"],"sources":["../../src/formatter/summary_formatter.ts"],"sourcesContent":["import { formatIssue, formatSummary, isFailure, isWarning } from './helpers'\nimport Formatter, { IFormatterOptions } from './'\nimport { doesHaveValue } from '../value_checker'\nimport * as messages from '@cucumber/messages'\nimport { ITestCaseAttempt } from './helpers/event_data_collector'\nimport { formatUndefinedParameterTypes } from './helpers/issue_helpers'\nimport { durationBetweenTimestamps } from '../time'\n\ninterface ILogIssuesRequest {\n  issues: ITestCaseAttempt[]\n  title: string\n}\n\nexport default class SummaryFormatter extends Formatter {\n  public static readonly documentation: string =\n    'Summary output of feature and scenarios'\n\n  constructor(options: IFormatterOptions) {\n    super(options)\n    let testRunStartedTimestamp: messages.Timestamp\n    options.eventBroadcaster.on('envelope', (envelope: messages.Envelope) => {\n      if (doesHaveValue(envelope.testRunStarted)) {\n        testRunStartedTimestamp = envelope.testRunStarted.timestamp\n      }\n      if (doesHaveValue(envelope.testRunFinished)) {\n        const testRunFinishedTimestamp = envelope.testRunFinished.timestamp\n        this.logSummary(\n          durationBetweenTimestamps(\n            testRunStartedTimestamp,\n            testRunFinishedTimestamp\n          )\n        )\n      }\n    })\n  }\n\n  logSummary(testRunDuration: messages.Duration): void {\n    const failures: ITestCaseAttempt[] = []\n    const warnings: ITestCaseAttempt[] = []\n    const testCaseAttempts = this.eventDataCollector.getTestCaseAttempts()\n    testCaseAttempts.forEach((testCaseAttempt) => {\n      if (\n        isFailure(\n          testCaseAttempt.worstTestStepResult,\n          testCaseAttempt.willBeRetried\n        )\n      ) {\n        failures.push(testCaseAttempt)\n      } else if (\n        isWarning(\n          testCaseAttempt.worstTestStepResult,\n          testCaseAttempt.willBeRetried\n        )\n      ) {\n        warnings.push(testCaseAttempt)\n      }\n    })\n    if (this.eventDataCollector.undefinedParameterTypes.length > 0) {\n      this.log(\n        formatUndefinedParameterTypes(\n          this.eventDataCollector.undefinedParameterTypes\n        )\n      )\n    }\n    if (failures.length > 0) {\n      this.logIssues({ issues: failures, title: 'Failures' })\n    }\n    if (warnings.length > 0) {\n      this.logIssues({ issues: warnings, title: 'Warnings' })\n    }\n    this.log(\n      formatSummary({\n        colorFns: this.colorFns,\n        testCaseAttempts,\n        testRunDuration,\n      })\n    )\n  }\n\n  logIssues({ issues, title }: ILogIssuesRequest): void {\n    this.log(`${title}:\\n\\n`)\n    issues.forEach((testCaseAttempt, index) => {\n      this.log(\n        formatIssue({\n          colorFns: this.colorFns,\n          number: index + 1,\n          snippetBuilder: this.snippetBuilder,\n          supportCodeLibrary: this.supportCodeLibrary,\n          testCaseAttempt,\n          printAttachments: this.printAttachments,\n        })\n      )\n    })\n  }\n}\n"],"mappings":"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"}