e84eaaa0c3f0b1a97ddd8745d17b62bb
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveErrorMessage = toHaveErrorMessage;
var _utils = require("./utils");

// See aria-errormessage spec https://www.w3.org/TR/wai-aria-1.2/#aria-errormessage
function toHaveErrorMessage(htmlElement, checkWith) {
  (0, _utils.checkHtmlElement)(htmlElement, toHaveErrorMessage, this);
  if (!htmlElement.hasAttribute('aria-invalid') || htmlElement.getAttribute('aria-invalid') === 'false') {
    const not = this.isNot ? '.not' : '';
    return {
      pass: false,
      message: () => {
        return (0, _utils.getMessage)(this, this.utils.matcherHint(`${not}.toHaveErrorMessage`, 'element', ''), `Expected the element to have invalid state indicated by`, 'aria-invalid="true"', 'Received', htmlElement.hasAttribute('aria-invalid') ? `aria-invalid="${htmlElement.getAttribute('aria-invalid')}"` : this.utils.printReceived(''));
      }
    };
  }
  const expectsErrorMessage = checkWith !== undefined;
  const errormessageIDRaw = htmlElement.getAttribute('aria-errormessage') || '';
  const errormessageIDs = errormessageIDRaw.split(/\s+/).filter(Boolean);
  let errormessage = '';
  if (errormessageIDs.length > 0) {
    const document = htmlElement.ownerDocument;
    const errormessageEls = errormessageIDs.map(errormessageID => document.getElementById(errormessageID)).filter(Boolean);
    errormessage = (0, _utils.normalize)(errormessageEls.map(el => el.textContent).join(' '));
  }
  return {
    pass: expectsErrorMessage ? checkWith instanceof RegExp ? checkWith.test(errormessage) : this.equals(errormessage, checkWith) : Boolean(errormessage),
    message: () => {
      const to = this.isNot ? 'not to' : 'to';
      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveErrorMessage`, 'element', ''), `Expected the element ${to} have error message`, this.utils.printExpected(checkWith), 'Received', this.utils.printReceived(errormessage));
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvSGF2ZUVycm9yTWVzc2FnZSIsIl91dGlscyIsInJlcXVpcmUiLCJodG1sRWxlbWVudCIsImNoZWNrV2l0aCIsImNoZWNrSHRtbEVsZW1lbnQiLCJoYXNBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJub3QiLCJpc05vdCIsInBhc3MiLCJtZXNzYWdlIiwiZ2V0TWVzc2FnZSIsInV0aWxzIiwibWF0Y2hlckhpbnQiLCJwcmludFJlY2VpdmVkIiwiZXhwZWN0c0Vycm9yTWVzc2FnZSIsInVuZGVmaW5lZCIsImVycm9ybWVzc2FnZUlEUmF3IiwiZXJyb3JtZXNzYWdlSURzIiwic3BsaXQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiZXJyb3JtZXNzYWdlIiwibGVuZ3RoIiwiZG9jdW1lbnQiLCJvd25lckRvY3VtZW50IiwiZXJyb3JtZXNzYWdlRWxzIiwibWFwIiwiZXJyb3JtZXNzYWdlSUQiLCJnZXRFbGVtZW50QnlJZCIsIm5vcm1hbGl6ZSIsImVsIiwidGV4dENvbnRlbnQiLCJqb2luIiwiUmVnRXhwIiwidGVzdCIsImVxdWFscyIsInRvIiwicHJpbnRFeHBlY3RlZCJdLCJzb3VyY2VzIjpbInRvLWhhdmUtZXJyb3JtZXNzYWdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy50b0hhdmVFcnJvck1lc3NhZ2UgPSB0b0hhdmVFcnJvck1lc3NhZ2U7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxuLy8gU2VlIGFyaWEtZXJyb3JtZXNzYWdlIHNwZWMgaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMi8jYXJpYS1lcnJvcm1lc3NhZ2VcbmZ1bmN0aW9uIHRvSGF2ZUVycm9yTWVzc2FnZShodG1sRWxlbWVudCwgY2hlY2tXaXRoKSB7XG4gICgwLCBfdXRpbHMuY2hlY2tIdG1sRWxlbWVudCkoaHRtbEVsZW1lbnQsIHRvSGF2ZUVycm9yTWVzc2FnZSwgdGhpcyk7XG5cbiAgaWYgKCFodG1sRWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2FyaWEtaW52YWxpZCcpIHx8IGh0bWxFbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1pbnZhbGlkJykgPT09ICdmYWxzZScpIHtcbiAgICBjb25zdCBub3QgPSB0aGlzLmlzTm90ID8gJy5ub3QnIDogJyc7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhc3M6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgICByZXR1cm4gKDAsIF91dGlscy5nZXRNZXNzYWdlKSh0aGlzLCB0aGlzLnV0aWxzLm1hdGNoZXJIaW50KGAke25vdH0udG9IYXZlRXJyb3JNZXNzYWdlYCwgJ2VsZW1lbnQnLCAnJyksIGBFeHBlY3RlZCB0aGUgZWxlbWVudCB0byBoYXZlIGludmFsaWQgc3RhdGUgaW5kaWNhdGVkIGJ5YCwgJ2FyaWEtaW52YWxpZD1cInRydWVcIicsICdSZWNlaXZlZCcsIGh0bWxFbGVtZW50Lmhhc0F0dHJpYnV0ZSgnYXJpYS1pbnZhbGlkJykgPyBgYXJpYS1pbnZhbGlkPVwiJHtodG1sRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtaW52YWxpZCcpfVwiYCA6IHRoaXMudXRpbHMucHJpbnRSZWNlaXZlZCgnJykpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBjb25zdCBleHBlY3RzRXJyb3JNZXNzYWdlID0gY2hlY2tXaXRoICE9PSB1bmRlZmluZWQ7XG4gIGNvbnN0IGVycm9ybWVzc2FnZUlEUmF3ID0gaHRtbEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWVycm9ybWVzc2FnZScpIHx8ICcnO1xuICBjb25zdCBlcnJvcm1lc3NhZ2VJRHMgPSBlcnJvcm1lc3NhZ2VJRFJhdy5zcGxpdCgvXFxzKy8pLmZpbHRlcihCb29sZWFuKTtcbiAgbGV0IGVycm9ybWVzc2FnZSA9ICcnO1xuXG4gIGlmIChlcnJvcm1lc3NhZ2VJRHMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGRvY3VtZW50ID0gaHRtbEVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgICBjb25zdCBlcnJvcm1lc3NhZ2VFbHMgPSBlcnJvcm1lc3NhZ2VJRHMubWFwKGVycm9ybWVzc2FnZUlEID0+IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVycm9ybWVzc2FnZUlEKSkuZmlsdGVyKEJvb2xlYW4pO1xuICAgIGVycm9ybWVzc2FnZSA9ICgwLCBfdXRpbHMubm9ybWFsaXplKShlcnJvcm1lc3NhZ2VFbHMubWFwKGVsID0+IGVsLnRleHRDb250ZW50KS5qb2luKCcgJykpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXNzOiBleHBlY3RzRXJyb3JNZXNzYWdlID8gY2hlY2tXaXRoIGluc3RhbmNlb2YgUmVnRXhwID8gY2hlY2tXaXRoLnRlc3QoZXJyb3JtZXNzYWdlKSA6IHRoaXMuZXF1YWxzKGVycm9ybWVzc2FnZSwgY2hlY2tXaXRoKSA6IEJvb2xlYW4oZXJyb3JtZXNzYWdlKSxcbiAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICBjb25zdCB0byA9IHRoaXMuaXNOb3QgPyAnbm90IHRvJyA6ICd0byc7XG4gICAgICByZXR1cm4gKDAsIF91dGlscy5nZXRNZXNzYWdlKSh0aGlzLCB0aGlzLnV0aWxzLm1hdGNoZXJIaW50KGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9IYXZlRXJyb3JNZXNzYWdlYCwgJ2VsZW1lbnQnLCAnJyksIGBFeHBlY3RlZCB0aGUgZWxlbWVudCAke3RvfSBoYXZlIGVycm9yIG1lc3NhZ2VgLCB0aGlzLnV0aWxzLnByaW50RXhwZWN0ZWQoY2hlY2tXaXRoKSwgJ1JlY2VpdmVkJywgdGhpcy51dGlscy5wcmludFJlY2VpdmVkKGVycm9ybWVzc2FnZSkpO1xuICAgIH1cbiAgfTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1B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