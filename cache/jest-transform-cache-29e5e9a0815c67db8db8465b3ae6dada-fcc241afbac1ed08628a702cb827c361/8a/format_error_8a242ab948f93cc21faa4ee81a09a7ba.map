{"version":3,"names":["assertion_error_formatter_1","require","error_stack_parser_1","__importDefault","filter_stack_trace_1","formatError","error","filterStackTraces","filteredStack","filterStackTrace","default","parse","map","f","source","join","_a","message","format","colorFns","errorStack","stack","exception","type","name","exports"],"sources":["../../src/runtime/format_error.ts"],"sourcesContent":["import { TestStepResult } from '@cucumber/messages'\nimport { format } from 'assertion-error-formatter'\nimport errorStackParser from 'error-stack-parser'\nimport { filterStackTrace } from '../filter_stack_trace'\n\nexport function formatError(\n  error: Error,\n  filterStackTraces: boolean\n): Pick<TestStepResult, 'message' | 'exception'> {\n  let filteredStack: string\n  if (filterStackTraces) {\n    try {\n      filteredStack = filterStackTrace(errorStackParser.parse(error))\n        .map((f) => f.source)\n        .join('\\n')\n    } catch {\n      // if we weren't able to parse and filter, we'll settle for the original\n    }\n  }\n  const message = format(error, {\n    colorFns: {\n      errorStack: (stack: string) =>\n        filteredStack ? `\\n${filteredStack}` : stack,\n    },\n  })\n  return {\n    message,\n    exception: {\n      type: error.name || 'Error',\n      message: typeof error === 'string' ? error : error.message,\n    },\n  }\n}\n"],"mappings":";;;;;;;;;;;AACA,MAAAA,2BAAA,GAAAC,OAAA;AACA,MAAAC,oBAAA,GAAAC,eAAA,CAAAF,OAAA;AACA,MAAAG,oBAAA,GAAAH,OAAA;AAEA,SAAgBI,WAAWA,CACzBC,KAAY,EACZC,iBAA0B;EAE1B,IAAIC,aAAqB;EACzB,IAAID,iBAAiB,EAAE;IACrB,IAAI;MACFC,aAAa,GAAG,IAAAJ,oBAAA,CAAAK,gBAAgB,EAACP,oBAAA,CAAAQ,OAAgB,CAACC,KAAK,CAACL,KAAK,CAAC,CAAC,CAC5DM,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,MAAM,CAAC,CACpBC,IAAI,CAAC,IAAI,CAAC;KACd,CAAC,OAAAC,EAAA,EAAM;MACN;IAAA;;EAGJ,MAAMC,OAAO,GAAG,IAAAjB,2BAAA,CAAAkB,MAAM,EAACZ,KAAK,EAAE;IAC5Ba,QAAQ,EAAE;MACRC,UAAU,EAAGC,KAAa,IACxBb,aAAa,GAAG,KAAKA,aAAa,EAAE,GAAGa;;GAE5C,CAAC;EACF,OAAO;IACLJ,OAAO;IACPK,SAAS,EAAE;MACTC,IAAI,EAAEjB,KAAK,CAACkB,IAAI,IAAI,OAAO;MAC3BP,OAAO,EAAE,OAAOX,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGA,KAAK,CAACW;;GAEtD;AACH;AA3BAQ,OAAA,CAAApB,WAAA,GAAAA,WAAA"}