545929bfc5f1804ac3c4b3faa6743b12
'use strict';

var YAMLSeq = require('../../nodes/YAMLSeq.js');
var toJS = require('../../nodes/toJS.js');
var Node = require('../../nodes/Node.js');
var YAMLMap = require('../../nodes/YAMLMap.js');
var pairs = require('./pairs.js');
class YAMLOMap extends YAMLSeq.YAMLSeq {
  constructor() {
    super();
    this.add = YAMLMap.YAMLMap.prototype.add.bind(this);
    this.delete = YAMLMap.YAMLMap.prototype.delete.bind(this);
    this.get = YAMLMap.YAMLMap.prototype.get.bind(this);
    this.has = YAMLMap.YAMLMap.prototype.has.bind(this);
    this.set = YAMLMap.YAMLMap.prototype.set.bind(this);
    this.tag = YAMLOMap.tag;
  }
  /**
   * If `ctx` is given, the return type is actually `Map<unknown, unknown>`,
   * but TypeScript won't allow widening the signature of a child method.
   */
  toJSON(_, ctx) {
    if (!ctx) return super.toJSON(_);
    const map = new Map();
    if (ctx?.onCreate) ctx.onCreate(map);
    for (const pair of this.items) {
      let key, value;
      if (Node.isPair(pair)) {
        key = toJS.toJS(pair.key, '', ctx);
        value = toJS.toJS(pair.value, key, ctx);
      } else {
        key = toJS.toJS(pair, '', ctx);
      }
      if (map.has(key)) throw new Error('Ordered maps must not include duplicate keys');
      map.set(key, value);
    }
    return map;
  }
}
YAMLOMap.tag = 'tag:yaml.org,2002:omap';
const omap = {
  collection: 'seq',
  identify: value => value instanceof Map,
  nodeClass: YAMLOMap,
  default: false,
  tag: 'tag:yaml.org,2002:omap',
  resolve(seq, onError) {
    const pairs$1 = pairs.resolvePairs(seq, onError);
    const seenKeys = [];
    for (const {
      key
    } of pairs$1.items) {
      if (Node.isScalar(key)) {
        if (seenKeys.includes(key.value)) {
          onError(`Ordered maps must not include duplicate keys: ${key.value}`);
        } else {
          seenKeys.push(key.value);
        }
      }
    }
    return Object.assign(new YAMLOMap(), pairs$1);
  },
  createNode(schema, iterable, ctx) {
    const pairs$1 = pairs.createPairs(schema, iterable, ctx);
    const omap = new YAMLOMap();
    omap.items = pairs$1.items;
    return omap;
  }
};
exports.YAMLOMap = YAMLOMap;
exports.omap = omap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJZQU1MU2VxIiwicmVxdWlyZSIsInRvSlMiLCJOb2RlIiwiWUFNTE1hcCIsInBhaXJzIiwiWUFNTE9NYXAiLCJjb25zdHJ1Y3RvciIsImFkZCIsInByb3RvdHlwZSIsImJpbmQiLCJkZWxldGUiLCJnZXQiLCJoYXMiLCJzZXQiLCJ0YWciLCJ0b0pTT04iLCJfIiwiY3R4IiwibWFwIiwiTWFwIiwib25DcmVhdGUiLCJwYWlyIiwiaXRlbXMiLCJrZXkiLCJ2YWx1ZSIsImlzUGFpciIsIkVycm9yIiwib21hcCIsImNvbGxlY3Rpb24iLCJpZGVudGlmeSIsIm5vZGVDbGFzcyIsImRlZmF1bHQiLCJyZXNvbHZlIiwic2VxIiwib25FcnJvciIsInBhaXJzJDEiLCJyZXNvbHZlUGFpcnMiLCJzZWVuS2V5cyIsImlzU2NhbGFyIiwiaW5jbHVkZXMiLCJwdXNoIiwiT2JqZWN0IiwiYXNzaWduIiwiY3JlYXRlTm9kZSIsInNjaGVtYSIsIml0ZXJhYmxlIiwiY3JlYXRlUGFpcnMiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsib21hcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBZQU1MU2VxID0gcmVxdWlyZSgnLi4vLi4vbm9kZXMvWUFNTFNlcS5qcycpO1xudmFyIHRvSlMgPSByZXF1aXJlKCcuLi8uLi9ub2Rlcy90b0pTLmpzJyk7XG52YXIgTm9kZSA9IHJlcXVpcmUoJy4uLy4uL25vZGVzL05vZGUuanMnKTtcbnZhciBZQU1MTWFwID0gcmVxdWlyZSgnLi4vLi4vbm9kZXMvWUFNTE1hcC5qcycpO1xudmFyIHBhaXJzID0gcmVxdWlyZSgnLi9wYWlycy5qcycpO1xuXG5jbGFzcyBZQU1MT01hcCBleHRlbmRzIFlBTUxTZXEuWUFNTFNlcSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYWRkID0gWUFNTE1hcC5ZQU1MTWFwLnByb3RvdHlwZS5hZGQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5kZWxldGUgPSBZQU1MTWFwLllBTUxNYXAucHJvdG90eXBlLmRlbGV0ZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmdldCA9IFlBTUxNYXAuWUFNTE1hcC5wcm90b3R5cGUuZ2V0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFzID0gWUFNTE1hcC5ZQU1MTWFwLnByb3RvdHlwZS5oYXMuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zZXQgPSBZQU1MTWFwLllBTUxNYXAucHJvdG90eXBlLnNldC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnRhZyA9IFlBTUxPTWFwLnRhZztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgYGN0eGAgaXMgZ2l2ZW4sIHRoZSByZXR1cm4gdHlwZSBpcyBhY3R1YWxseSBgTWFwPHVua25vd24sIHVua25vd24+YCxcbiAgICAgKiBidXQgVHlwZVNjcmlwdCB3b24ndCBhbGxvdyB3aWRlbmluZyB0aGUgc2lnbmF0dXJlIG9mIGEgY2hpbGQgbWV0aG9kLlxuICAgICAqL1xuICAgIHRvSlNPTihfLCBjdHgpIHtcbiAgICAgICAgaWYgKCFjdHgpXG4gICAgICAgICAgICByZXR1cm4gc3VwZXIudG9KU09OKF8pO1xuICAgICAgICBjb25zdCBtYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIGlmIChjdHg/Lm9uQ3JlYXRlKVxuICAgICAgICAgICAgY3R4Lm9uQ3JlYXRlKG1hcCk7XG4gICAgICAgIGZvciAoY29uc3QgcGFpciBvZiB0aGlzLml0ZW1zKSB7XG4gICAgICAgICAgICBsZXQga2V5LCB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChOb2RlLmlzUGFpcihwYWlyKSkge1xuICAgICAgICAgICAgICAgIGtleSA9IHRvSlMudG9KUyhwYWlyLmtleSwgJycsIGN0eCk7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0b0pTLnRvSlMocGFpci52YWx1ZSwga2V5LCBjdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAga2V5ID0gdG9KUy50b0pTKHBhaXIsICcnLCBjdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hcC5oYXMoa2V5KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09yZGVyZWQgbWFwcyBtdXN0IG5vdCBpbmNsdWRlIGR1cGxpY2F0ZSBrZXlzJyk7XG4gICAgICAgICAgICBtYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgfVxufVxuWUFNTE9NYXAudGFnID0gJ3RhZzp5YW1sLm9yZywyMDAyOm9tYXAnO1xuY29uc3Qgb21hcCA9IHtcbiAgICBjb2xsZWN0aW9uOiAnc2VxJyxcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdmFsdWUgaW5zdGFuY2VvZiBNYXAsXG4gICAgbm9kZUNsYXNzOiBZQU1MT01hcCxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpvbWFwJyxcbiAgICByZXNvbHZlKHNlcSwgb25FcnJvcikge1xuICAgICAgICBjb25zdCBwYWlycyQxID0gcGFpcnMucmVzb2x2ZVBhaXJzKHNlcSwgb25FcnJvcik7XG4gICAgICAgIGNvbnN0IHNlZW5LZXlzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgeyBrZXkgfSBvZiBwYWlycyQxLml0ZW1zKSB7XG4gICAgICAgICAgICBpZiAoTm9kZS5pc1NjYWxhcihrZXkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlZW5LZXlzLmluY2x1ZGVzKGtleS52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihgT3JkZXJlZCBtYXBzIG11c3Qgbm90IGluY2x1ZGUgZHVwbGljYXRlIGtleXM6ICR7a2V5LnZhbHVlfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VlbktleXMucHVzaChrZXkudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgWUFNTE9NYXAoKSwgcGFpcnMkMSk7XG4gICAgfSxcbiAgICBjcmVhdGVOb2RlKHNjaGVtYSwgaXRlcmFibGUsIGN0eCkge1xuICAgICAgICBjb25zdCBwYWlycyQxID0gcGFpcnMuY3JlYXRlUGFpcnMoc2NoZW1hLCBpdGVyYWJsZSwgY3R4KTtcbiAgICAgICAgY29uc3Qgb21hcCA9IG5ldyBZQU1MT01hcCgpO1xuICAgICAgICBvbWFwLml0ZW1zID0gcGFpcnMkMS5pdGVtcztcbiAgICAgICAgcmV0dXJuIG9tYXA7XG4gICAgfVxufTtcblxuZXhwb3J0cy5ZQU1MT01hcCA9IFlBTUxPTWFwO1xuZXhwb3J0cy5vbWFwID0gb21hcDtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztBQUMvQyxJQUFJQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztBQUN6QyxJQUFJRSxJQUFJLEdBQUdGLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztBQUN6QyxJQUFJRyxPQUFPLEdBQUdILE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztBQUMvQyxJQUFJSSxLQUFLLEdBQUdKLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFFakMsTUFBTUssUUFBUSxTQUFTTixPQUFPLENBQUNBLE9BQU8sQ0FBQztFQUNuQ08sV0FBV0EsQ0FBQSxFQUFHO0lBQ1YsS0FBSyxFQUFFO0lBQ1AsSUFBSSxDQUFDQyxHQUFHLEdBQUdKLE9BQU8sQ0FBQ0EsT0FBTyxDQUFDSyxTQUFTLENBQUNELEdBQUcsQ0FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuRCxJQUFJLENBQUNDLE1BQU0sR0FBR1AsT0FBTyxDQUFDQSxPQUFPLENBQUNLLFNBQVMsQ0FBQ0UsTUFBTSxDQUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3pELElBQUksQ0FBQ0Us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