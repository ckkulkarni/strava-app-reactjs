{"version":3,"names":["TransformOperationExecutor_1","require","enums_1","default_options_constant_1","ClassTransformer","instanceToPlain","object","options","executor","TransformOperationExecutor","TransformationType","CLASS_TO_PLAIN","defaultOptions","transform","undefined","classToPlainFromExist","plainObject","plainToInstance","cls","plain","PLAIN_TO_CLASS","plainToClassFromExist","clsObject","instanceToInstance","CLASS_TO_CLASS","classToClassFromExist","fromObject","serialize","JSON","stringify","deserialize","json","jsonObject","parse","deserializeArray","exports"],"sources":["../../src/ClassTransformer.ts"],"sourcesContent":["import { ClassTransformOptions } from './interfaces';\nimport { TransformOperationExecutor } from './TransformOperationExecutor';\nimport { TransformationType } from './enums';\nimport { ClassConstructor } from './interfaces';\nimport { defaultOptions } from './constants/default-options.constant';\n\nexport class ClassTransformer {\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Converts class (constructor) object to plain (literal) object. Also works with arrays.\n   */\n  instanceToPlain<T extends Record<string, any>>(object: T, options?: ClassTransformOptions): Record<string, any>;\n  instanceToPlain<T extends Record<string, any>>(object: T[], options?: ClassTransformOptions): Record<string, any>[];\n  instanceToPlain<T extends Record<string, any>>(\n    object: T | T[],\n    options?: ClassTransformOptions\n  ): Record<string, any> | Record<string, any>[] {\n    const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_PLAIN, {\n      ...defaultOptions,\n      ...options,\n    });\n    return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n  }\n\n  /**\n   * Converts class (constructor) object to plain (literal) object.\n   * Uses given plain object as source object (it means fills given plain object with data from class object).\n   * Also works with arrays.\n   */\n  classToPlainFromExist<T extends Record<string, any>, P>(\n    object: T,\n    plainObject: P,\n    options?: ClassTransformOptions\n  ): T;\n  classToPlainFromExist<T extends Record<string, any>, P>(\n    object: T,\n    plainObjects: P[],\n    options?: ClassTransformOptions\n  ): T[];\n  classToPlainFromExist<T extends Record<string, any>, P>(\n    object: T,\n    plainObject: P | P[],\n    options?: ClassTransformOptions\n  ): T | T[] {\n    const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_PLAIN, {\n      ...defaultOptions,\n      ...options,\n    });\n    return executor.transform(plainObject, object, undefined, undefined, undefined, undefined);\n  }\n\n  /**\n   * Converts plain (literal) object to class (constructor) object. Also works with arrays.\n   */\n  plainToInstance<T extends Record<string, any>, V extends Array<any>>(\n    cls: ClassConstructor<T>,\n    plain: V,\n    options?: ClassTransformOptions\n  ): T[];\n  plainToInstance<T extends Record<string, any>, V>(\n    cls: ClassConstructor<T>,\n    plain: V,\n    options?: ClassTransformOptions\n  ): T;\n  plainToInstance<T extends Record<string, any>, V>(\n    cls: ClassConstructor<T>,\n    plain: V | V[],\n    options?: ClassTransformOptions\n  ): T | T[] {\n    const executor = new TransformOperationExecutor(TransformationType.PLAIN_TO_CLASS, {\n      ...defaultOptions,\n      ...options,\n    });\n    return executor.transform(undefined, plain, cls, undefined, undefined, undefined);\n  }\n\n  /**\n   * Converts plain (literal) object to class (constructor) object.\n   * Uses given object as source object (it means fills given object with data from plain object).\n   * Also works with arrays.\n   */\n  plainToClassFromExist<T extends Record<string, any>, V extends Array<any>>(\n    clsObject: T,\n    plain: V,\n    options?: ClassTransformOptions\n  ): T;\n  plainToClassFromExist<T extends Record<string, any>, V>(clsObject: T, plain: V, options?: ClassTransformOptions): T[];\n  plainToClassFromExist<T extends Record<string, any>, V>(\n    clsObject: T,\n    plain: V | V[],\n    options?: ClassTransformOptions\n  ): T | T[] {\n    const executor = new TransformOperationExecutor(TransformationType.PLAIN_TO_CLASS, {\n      ...defaultOptions,\n      ...options,\n    });\n    return executor.transform(clsObject, plain, undefined, undefined, undefined, undefined);\n  }\n\n  /**\n   * Converts class (constructor) object to new class (constructor) object. Also works with arrays.\n   */\n  instanceToInstance<T>(object: T, options?: ClassTransformOptions): T;\n  instanceToInstance<T>(object: T[], options?: ClassTransformOptions): T[];\n  instanceToInstance<T>(object: T | T[], options?: ClassTransformOptions): T | T[] {\n    const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_CLASS, {\n      ...defaultOptions,\n      ...options,\n    });\n    return executor.transform(undefined, object, undefined, undefined, undefined, undefined);\n  }\n\n  /**\n   * Converts class (constructor) object to plain (literal) object.\n   * Uses given plain object as source object (it means fills given plain object with data from class object).\n   * Also works with arrays.\n   */\n  classToClassFromExist<T>(object: T, fromObject: T, options?: ClassTransformOptions): T;\n  classToClassFromExist<T>(object: T, fromObjects: T[], options?: ClassTransformOptions): T[];\n  classToClassFromExist<T>(object: T, fromObject: T | T[], options?: ClassTransformOptions): T | T[] {\n    const executor = new TransformOperationExecutor(TransformationType.CLASS_TO_CLASS, {\n      ...defaultOptions,\n      ...options,\n    });\n    return executor.transform(fromObject, object, undefined, undefined, undefined, undefined);\n  }\n\n  /**\n   * Serializes given object to a JSON string.\n   */\n  serialize<T>(object: T, options?: ClassTransformOptions): string;\n  serialize<T>(object: T[], options?: ClassTransformOptions): string;\n  serialize<T>(object: T | T[], options?: ClassTransformOptions): string {\n    return JSON.stringify(this.instanceToPlain(object, options));\n  }\n\n  /**\n   * Deserializes given JSON string to a object of the given class.\n   */\n  deserialize<T>(cls: ClassConstructor<T>, json: string, options?: ClassTransformOptions): T {\n    const jsonObject: T = JSON.parse(json);\n    return this.plainToInstance(cls, jsonObject, options);\n  }\n\n  /**\n   * Deserializes given JSON string to an array of objects of the given class.\n   */\n  deserializeArray<T>(cls: ClassConstructor<T>, json: string, options?: ClassTransformOptions): T[] {\n    const jsonObject: any[] = JSON.parse(json);\n    return this.plainToInstance(cls, jsonObject, options);\n  }\n}\n"],"mappings":"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"}