9ad9c5846ca804dcc2b791f935bd4ff5
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.publishPlugin = void 0;
const http_stream_1 = __importDefault(require("./http_stream"));
const stream_1 = require("stream");
const supports_color_1 = require("supports-color");
const has_ansi_1 = __importDefault(require("has-ansi"));
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const DEFAULT_CUCUMBER_PUBLISH_URL = 'https://messages.cucumber.io/api/reports';
const publishPlugin = async ({
  on,
  logger,
  configuration,
  environment
}) => {
  if (!configuration.formats.publish) {
    return undefined;
  }
  const {
    url = DEFAULT_CUCUMBER_PUBLISH_URL,
    token
  } = configuration.formats.publish;
  const headers = {};
  if (token !== undefined) {
    headers.Authorization = `Bearer ${token}`;
  }
  const stream = new http_stream_1.default(url, 'GET', headers);
  const readerStream = new stream_1.Writable({
    objectMode: true,
    write: function (responseBody, encoding, writeCallback) {
      environment.stderr.write(sanitisePublishOutput(responseBody, environment.stderr) + '\n');
      writeCallback();
    }
  });
  stream.pipe(readerStream);
  stream.on('error', error => logger.error(error.message));
  on('message', value => stream.write(JSON.stringify(value) + '\n'));
  return () => stream.end();
};
exports.publishPlugin = publishPlugin;
/*
This is because the Cucumber Reports service returns a pre-formatted console message
including ANSI escapes, so if our stderr stream doesn't support those we need to
strip them back out. Ideally we should get structured data from the service and
compose the console message on this end.
 */
function sanitisePublishOutput(raw, stderr) {
  if (!(0, supports_color_1.supportsColor)(stderr) && (0, has_ansi_1.default)(raw)) {
    return (0, strip_ansi_1.default)(raw);
  }
  return raw;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJodHRwX3N0cmVhbV8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInN0cmVhbV8xIiwic3VwcG9ydHNfY29sb3JfMSIsImhhc19hbnNpXzEiLCJzdHJpcF9hbnNpXzEiLCJERUZBVUxUX0NVQ1VNQkVSX1BVQkxJU0hfVVJMIiwicHVibGlzaFBsdWdpbiIsIm9uIiwibG9nZ2VyIiwiY29uZmlndXJhdGlvbiIsImVudmlyb25tZW50IiwiZm9ybWF0cyIsInB1Ymxpc2giLCJ1bmRlZmluZWQiLCJ1cmwiLCJ0b2tlbiIsImhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwic3RyZWFtIiwiZGVmYXVsdCIsInJlYWRlclN0cmVhbSIsIldyaXRhYmxlIiwib2JqZWN0TW9kZSIsIndyaXRlIiwicmVzcG9uc2VCb2R5IiwiZW5jb2RpbmciLCJ3cml0ZUNhbGxiYWNrIiwic3RkZXJyIiwic2FuaXRpc2VQdWJsaXNoT3V0cHV0IiwicGlwZSIsImVycm9yIiwibWVzc2FnZSIsInZhbHVlIiwiSlNPTiIsInN0cmluZ2lmeSIsImVuZCIsImV4cG9ydHMiLCJyYXciLCJzdXBwb3J0c0NvbG9yIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3B1Ymxpc2gvcHVibGlzaF9wbHVnaW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnLi4vcGx1Z2luJ1xuaW1wb3J0IEh0dHBTdHJlYW0gZnJvbSAnLi9odHRwX3N0cmVhbSdcbmltcG9ydCB7IFdyaXRhYmxlIH0gZnJvbSAnc3RyZWFtJ1xuaW1wb3J0IHsgc3VwcG9ydHNDb2xvciB9IGZyb20gJ3N1cHBvcnRzLWNvbG9yJ1xuaW1wb3J0IGhhc0Fuc2kgZnJvbSAnaGFzLWFuc2knXG5pbXBvcnQgc3RyaXBBbnNpIGZyb20gJ3N0cmlwLWFuc2knXG5cbmNvbnN0IERFRkFVTFRfQ1VDVU1CRVJfUFVCTElTSF9VUkwgPSAnaHR0cHM6Ly9tZXNzYWdlcy5jdWN1bWJlci5pby9hcGkvcmVwb3J0cydcblxuZXhwb3J0IGNvbnN0IHB1Ymxpc2hQbHVnaW46IFBsdWdpbiA9IGFzeW5jICh7XG4gIG9uLFxuICBsb2dnZXIsXG4gIGNvbmZpZ3VyYXRpb24sXG4gIGVudmlyb25tZW50LFxufSkgPT4ge1xuICBpZiAoIWNvbmZpZ3VyYXRpb24uZm9ybWF0cy5wdWJsaXNoKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIGNvbnN0IHsgdXJsID0gREVGQVVMVF9DVUNVTUJFUl9QVUJMSVNIX1VSTCwgdG9rZW4gfSA9XG4gICAgY29uZmlndXJhdGlvbi5mb3JtYXRzLnB1Ymxpc2hcbiAgY29uc3QgaGVhZGVyczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9XG4gIGlmICh0b2tlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaGVhZGVycy5BdXRob3JpemF0aW9uID0gYEJlYXJlciAke3Rva2VufWBcbiAgfVxuICBjb25zdCBzdHJlYW0gPSBuZXcgSHR0cFN0cmVhbSh1cmwsICdHRVQnLCBoZWFkZXJzKVxuICBjb25zdCByZWFkZXJTdHJlYW0gPSBuZXcgV3JpdGFibGUoe1xuICAgIG9iamVjdE1vZGU6IHRydWUsXG4gICAgd3JpdGU6IGZ1bmN0aW9uIChyZXNwb25zZUJvZHk6IHN0cmluZywgZW5jb2RpbmcsIHdyaXRlQ2FsbGJhY2spIHtcbiAgICAgIGVudmlyb25tZW50LnN0ZGVyci53cml0ZShcbiAgICAgICAgc2FuaXRpc2VQdWJsaXNoT3V0cHV0KHJlc3BvbnNlQm9keSwgZW52aXJvbm1lbnQuc3RkZXJyKSArICdcXG4nXG4gICAgICApXG4gICAgICB3cml0ZUNhbGxiYWNrKClcbiAgICB9LFxuICB9KVxuICBzdHJlYW0ucGlwZShyZWFkZXJTdHJlYW0pXG4gIHN0cmVhbS5vbignZXJyb3InLCAoZXJyb3I6IEVycm9yKSA9PiBsb2dnZXIuZXJyb3IoZXJyb3IubWVzc2FnZSkpXG4gIG9uKCdtZXNzYWdlJywgKHZhbHVlKSA9PiBzdHJlYW0ud3JpdGUoSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ1xcbicpKVxuICByZXR1cm4gKCkgPT4gc3RyZWFtLmVuZCgpXG59XG4vKlxuVGhpcyBpcyBiZWNhdXNlIHRoZSBDdWN1bWJlciBSZXBvcnRzIHNlcnZpY2UgcmV0dXJucyBhIHByZS1mb3JtYXR0ZWQgY29uc29sZSBtZXNzYWdlXG5pbmNsdWRpbmcgQU5TSSBlc2NhcGVzLCBzbyBpZiBvdXIgc3RkZXJyIHN0cmVhbSBkb2Vzbid0IHN1cHBvcnQgdGhvc2Ugd2UgbmVlZCB0b1xuc3RyaXAgdGhlbSBiYWNrIG91dC4gSWRlYWxseSB3ZSBzaG91bGQgZ2V0IHN0cnVjdHVyZWQgZGF0YSBmcm9tIHRoZSBzZXJ2aWNlIGFuZFxuY29tcG9zZSB0aGUgY29uc29sZSBtZXNzYWdlIG9uIHRoaXMgZW5kLlxuICovXG5mdW5jdGlvbiBzYW5pdGlzZVB1Ymxpc2hPdXRwdXQocmF3OiBzdHJpbmcsIHN0ZGVycjogV3JpdGFibGUpIHtcbiAgaWYgKCFzdXBwb3J0c0NvbG9yKHN0ZGVycikgJiYgaGFzQW5zaShyYXcpKSB7XG4gICAgcmV0dXJuIHN0cmlwQW5zaShyYXcpXG4gIH1cbiAgcmV0dXJuIHJhd1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUNBLE1BQUFBLGFBQUEsR0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FBQ0EsTUFBQUMsUUFBQSxHQUFBRCxPQUFBO0FBQ0EsTUFBQUUsZ0JBQUEsR0FBQUYsT0FBQTtBQUNBLE1BQUFHLFVBQUEsR0FBQUosZUFBQSxDQUFBQyxPQUFBO0FBQ0EsTUFBQUksWUFBQSxHQUFBTCxlQUFBLENBQUFDLE9BQUE7QUFFQSxNQUFNSyw0QkFBNEIsR0FBRywwQ0FBMEM7QUFFeEUsTUFBTUMsYUFBYSxHQUFXLE1BQUFBLENBQU87RUFDMUNDLEVBQUU7RUFDRkMsTUFBTTtFQUNOQyxhQUFhO0VBQ2JDO0FBQVcsQ0FDWixLQUFJO0VBQ0gsSUFBSSxDQUFDRCxhQUFhLENBQUNFLE9BQU8sQ0FBQ0MsT0FBTyxFQUFFO0lBQ2xDLE9BQU9DLFNBQVM7O0VBRWxCLE1BQU07SUFBRUMsR0FBRyxHQUFHVCw0QkFBNEI7SUFBRVU7RUFBSyxDQUFFLEdBQ2pETixhQUFhLENBQUNFLE9BQU8sQ0FBQ0MsT0FBTztFQUMvQixNQUFNSSxPQUFPLEdBQThCLEVBQUU7RUFDN0MsSUFBSUQsS0FBSyxLQUFLRixTQUFTLEVBQUU7SUFDdkJHLE9BQU8sQ0FBQ0MsYUFBYSxHQUFHLFVBQVVGLEtBQUssRUFBRTs7RUFFM0MsTUFBTUcsTUFBTSxHQUFHLElBQUlwQixhQUFBLENBQUFxQixPQUFVLENBQUNMLEdBQUcsRUFBRSxLQUFLLEVBQUVFLE9BQU8sQ0FBQztFQUNsRCxNQUFNSSxZQUFZLEdBQUcsSUFBSW5CLFFBQUEsQ0FBQW9CLFFBQVEsQ0FBQztJQUNoQ0MsVUFBVSxFQUFFLElBQUk7SUFDaEJDLEtBQUssRUFBRSxTQUFBQSxDQUFVQyxZQUFvQixFQUFFQyxRQUFRLEVBQUVDLGFBQWE7TUFDNURoQixXQUFXLENBQUNpQixNQUFNLENBQUNKLEtBQUssQ0FDdEJLLHFCQUFxQixDQUFDSixZQUFZLEVBQUVkLFdBQVcsQ0FBQ2lCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FDL0Q7TUFDREQsYUFBYSxFQUFFO0lBQ2pCO0dBQ0QsQ0FBQztFQUNGUixNQUFNLENBQUNXLElBQUksQ0FBQ1QsWUFBWSxDQUFDO0VBQ3pCRixNQUFNLENBQUNYLEVBQUUsQ0FBQyxPQUFPLEVBQUd1QixLQUFZLElBQUt0QixNQUFNLENBQUNzQixLQUFLLENBQUNBLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLENBQUM7RUFDakV4QixFQUFFLENBQUMsU0FBUyxFQUFHeUIsS0FBSyxJQUFLZCxNQUFNLENBQUNLLEtBQUssQ0FBQ1UsSUFBSSxDQUFDQyxTQUFTLENBQUNGLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0VBQ3BFLE9BQU8sTUFBTWQsTUFBTSxDQUFDaUIsR0FBRyxFQUFFO0FBQzNCLENBQUM7QUE3QllDLE9BQUEsQ0FBQTlCLGFBQWEsR0FBQUEsYUFBQTtBQThCMUI7Ozs7OztBQU1BLFNBQVNzQixxQkFBcUJBLENBQUNTLEdBQVcsRUFBRVYsTUFBZ0I7RUFDMUQsSUFBSSxDQUFDLElBQUF6QixnQkFBQSxDQUFBb0MsYUFBYSxFQUFDWCxNQUFNLENBQUMsSUFBSSxJQUFBeEIsVUFBQSxDQUFBZ0IsT0FBTyxFQUFDa0IsR0FBRyxDQUFDLEVBQUU7SUFDMUMsT0FBTyxJQUFBakMsWUFBQSxDQUFBZSxPQUFTLEVBQUNrQixHQUFHLENBQUM7O0VBRXZCLE9BQU9BLEdBQUc7QUFDWiJ9