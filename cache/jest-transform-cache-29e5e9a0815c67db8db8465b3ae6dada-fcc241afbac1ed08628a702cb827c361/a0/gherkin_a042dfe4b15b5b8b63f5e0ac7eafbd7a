adf05e6040a77c94a9a699aac415a8f1
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFilteredPicklesAndErrors = void 0;
const gherkin_streams_1 = require("@cucumber/gherkin-streams");
const gherkin_utils_1 = require("@cucumber/gherkin-utils");
const pickle_filter_1 = __importDefault(require("../pickle_filter"));
const helpers_1 = require("../cli/helpers");
async function getFilteredPicklesAndErrors({
  newId,
  cwd,
  logger,
  unexpandedFeaturePaths,
  featurePaths,
  coordinates,
  onEnvelope
}) {
  const gherkinQuery = new gherkin_utils_1.Query();
  const parseErrors = [];
  await gherkinFromPaths(featurePaths, {
    newId,
    relativeTo: cwd,
    defaultDialect: coordinates.defaultDialect
  }, envelope => {
    gherkinQuery.update(envelope);
    if (envelope.parseError) {
      parseErrors.push(envelope.parseError);
    }
    onEnvelope === null || onEnvelope === void 0 ? void 0 : onEnvelope(envelope);
  });
  const pickleFilter = new pickle_filter_1.default({
    cwd,
    featurePaths: unexpandedFeaturePaths,
    names: coordinates.names,
    tagExpression: coordinates.tagExpression
  });
  const filteredPickles = gherkinQuery.getPickles().filter(pickle => {
    const gherkinDocument = gherkinQuery.getGherkinDocuments().find(doc => doc.uri === pickle.uri);
    return pickleFilter.matches({
      gherkinDocument,
      pickle
    });
  }).map(pickle => {
    const gherkinDocument = gherkinQuery.getGherkinDocuments().find(doc => doc.uri === pickle.uri);
    const location = gherkinQuery.getLocation(pickle.astNodeIds[pickle.astNodeIds.length - 1]);
    return {
      gherkinDocument,
      location,
      pickle
    };
  });
  (0, helpers_1.orderPickles)(filteredPickles, coordinates.order, logger);
  return {
    filteredPickles,
    parseErrors
  };
}
exports.getFilteredPicklesAndErrors = getFilteredPicklesAndErrors;
async function gherkinFromPaths(paths, options, onEnvelope) {
  return new Promise((resolve, reject) => {
    const gherkinMessageStream = gherkin_streams_1.GherkinStreams.fromPaths(paths, options);
    gherkinMessageStream.on('data', onEnvelope);
    gherkinMessageStream.on('end', resolve);
    gherkinMessageStream.on('error', reject);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnaGVya2luX3N0cmVhbXNfMSIsInJlcXVpcmUiLCJnaGVya2luX3V0aWxzXzEiLCJwaWNrbGVfZmlsdGVyXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJoZWxwZXJzXzEiLCJnZXRGaWx0ZXJlZFBpY2tsZXNBbmRFcnJvcnMiLCJuZXdJZCIsImN3ZCIsImxvZ2dlciIsInVuZXhwYW5kZWRGZWF0dXJlUGF0aHMiLCJmZWF0dXJlUGF0aHMiLCJjb29yZGluYXRlcyIsIm9uRW52ZWxvcGUiLCJnaGVya2luUXVlcnkiLCJRdWVyeSIsInBhcnNlRXJyb3JzIiwiZ2hlcmtpbkZyb21QYXRocyIsInJlbGF0aXZlVG8iLCJkZWZhdWx0RGlhbGVjdCIsImVudmVsb3BlIiwidXBkYXRlIiwicGFyc2VFcnJvciIsInB1c2giLCJwaWNrbGVGaWx0ZXIiLCJkZWZhdWx0IiwibmFtZXMiLCJ0YWdFeHByZXNzaW9uIiwiZmlsdGVyZWRQaWNrbGVzIiwiZ2V0UGlja2xlcyIsImZpbHRlciIsInBpY2tsZSIsImdoZXJraW5Eb2N1bWVudCIsImdldEdoZXJraW5Eb2N1bWVudHMiLCJmaW5kIiwiZG9jIiwidXJpIiwibWF0Y2hlcyIsIm1hcCIsImxvY2F0aW9uIiwiZ2V0TG9jYXRpb24iLCJhc3ROb2RlSWRzIiwibGVuZ3RoIiwib3JkZXJQaWNrbGVzIiwib3JkZXIiLCJleHBvcnRzIiwicGF0aHMiLCJvcHRpb25zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJnaGVya2luTWVzc2FnZVN0cmVhbSIsIkdoZXJraW5TdHJlYW1zIiwiZnJvbVBhdGhzIiwib24iXSwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBpL2doZXJraW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgR2hlcmtpblN0cmVhbXMsXG4gIElHaGVya2luU3RyZWFtT3B0aW9ucyxcbn0gZnJvbSAnQGN1Y3VtYmVyL2doZXJraW4tc3RyZWFtcydcbmltcG9ydCB7XG4gIEVudmVsb3BlLFxuICBHaGVya2luRG9jdW1lbnQsXG4gIElkR2VuZXJhdG9yLFxuICBMb2NhdGlvbixcbiAgUGFyc2VFcnJvcixcbiAgUGlja2xlLFxufSBmcm9tICdAY3VjdW1iZXIvbWVzc2FnZXMnXG5pbXBvcnQgeyBRdWVyeSBhcyBHaGVya2luUXVlcnkgfSBmcm9tICdAY3VjdW1iZXIvZ2hlcmtpbi11dGlscydcbmltcG9ydCBQaWNrbGVGaWx0ZXIgZnJvbSAnLi4vcGlja2xlX2ZpbHRlcidcbmltcG9ydCB7IG9yZGVyUGlja2xlcyB9IGZyb20gJy4uL2NsaS9oZWxwZXJzJ1xuaW1wb3J0IHsgSVNvdXJjZXNDb29yZGluYXRlcyB9IGZyb20gJy4vdHlwZXMnXG5pbXBvcnQgeyBJTG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2VyJ1xuXG5pbnRlcmZhY2UgUGlja2xlV2l0aERvY3VtZW50IHtcbiAgZ2hlcmtpbkRvY3VtZW50OiBHaGVya2luRG9jdW1lbnRcbiAgbG9jYXRpb246IExvY2F0aW9uXG4gIHBpY2tsZTogUGlja2xlXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRGaWx0ZXJlZFBpY2tsZXNBbmRFcnJvcnMoe1xuICBuZXdJZCxcbiAgY3dkLFxuICBsb2dnZXIsXG4gIHVuZXhwYW5kZWRGZWF0dXJlUGF0aHMsXG4gIGZlYXR1cmVQYXRocyxcbiAgY29vcmRpbmF0ZXMsXG4gIG9uRW52ZWxvcGUsXG59OiB7XG4gIG5ld0lkOiBJZEdlbmVyYXRvci5OZXdJZFxuICBjd2Q6IHN0cmluZ1xuICBsb2dnZXI6IElMb2dnZXJcbiAgdW5leHBhbmRlZEZlYXR1cmVQYXRoczogc3RyaW5nW11cbiAgZmVhdHVyZVBhdGhzOiBzdHJpbmdbXVxuICBjb29yZGluYXRlczogSVNvdXJjZXNDb29yZGluYXRlc1xuICBvbkVudmVsb3BlPzogKGVudmVsb3BlOiBFbnZlbG9wZSkgPT4gdm9pZFxufSk6IFByb21pc2U8e1xuICBmaWx0ZXJlZFBpY2tsZXM6IFBpY2tsZVdpdGhEb2N1bWVudFtdXG4gIHBhcnNlRXJyb3JzOiBQYXJzZUVycm9yW11cbn0+IHtcbiAgY29uc3QgZ2hlcmtpblF1ZXJ5ID0gbmV3IEdoZXJraW5RdWVyeSgpXG4gIGNvbnN0IHBhcnNlRXJyb3JzOiBQYXJzZUVycm9yW10gPSBbXVxuICBhd2FpdCBnaGVya2luRnJvbVBhdGhzKFxuICAgIGZlYXR1cmVQYXRocyxcbiAgICB7XG4gICAgICBuZXdJZCxcbiAgICAgIHJlbGF0aXZlVG86IGN3ZCxcbiAgICAgIGRlZmF1bHREaWFsZWN0OiBjb29yZGluYXRlcy5kZWZhdWx0RGlhbGVjdCxcbiAgICB9LFxuICAgIChlbnZlbG9wZSkgPT4ge1xuICAgICAgZ2hlcmtpblF1ZXJ5LnVwZGF0ZShlbnZlbG9wZSlcbiAgICAgIGlmIChlbnZlbG9wZS5wYXJzZUVycm9yKSB7XG4gICAgICAgIHBhcnNlRXJyb3JzLnB1c2goZW52ZWxvcGUucGFyc2VFcnJvcilcbiAgICAgIH1cbiAgICAgIG9uRW52ZWxvcGU/LihlbnZlbG9wZSlcbiAgICB9XG4gIClcbiAgY29uc3QgcGlja2xlRmlsdGVyID0gbmV3IFBpY2tsZUZpbHRlcih7XG4gICAgY3dkLFxuICAgIGZlYXR1cmVQYXRoczogdW5leHBhbmRlZEZlYXR1cmVQYXRocyxcbiAgICBuYW1lczogY29vcmRpbmF0ZXMubmFtZXMsXG4gICAgdGFnRXhwcmVzc2lvbjogY29vcmRpbmF0ZXMudGFnRXhwcmVzc2lvbixcbiAgfSlcbiAgY29uc3QgZmlsdGVyZWRQaWNrbGVzOiBQaWNrbGVXaXRoRG9jdW1lbnRbXSA9IGdoZXJraW5RdWVyeVxuICAgIC5nZXRQaWNrbGVzKClcbiAgICAuZmlsdGVyKChwaWNrbGUpID0+IHtcbiAgICAgIGNvbnN0IGdoZXJraW5Eb2N1bWVudCA9IGdoZXJraW5RdWVyeVxuICAgICAgICAuZ2V0R2hlcmtpbkRvY3VtZW50cygpXG4gICAgICAgIC5maW5kKChkb2MpID0+IGRvYy51cmkgPT09IHBpY2tsZS51cmkpXG4gICAgICByZXR1cm4gcGlja2xlRmlsdGVyLm1hdGNoZXMoeyBnaGVya2luRG9jdW1lbnQsIHBpY2tsZSB9KVxuICAgIH0pXG4gICAgLm1hcCgocGlja2xlKSA9PiB7XG4gICAgICBjb25zdCBnaGVya2luRG9jdW1lbnQgPSBnaGVya2luUXVlcnlcbiAgICAgICAgLmdldEdoZXJraW5Eb2N1bWVudHMoKVxuICAgICAgICAuZmluZCgoZG9jKSA9PiBkb2MudXJpID09PSBwaWNrbGUudXJpKVxuICAgICAgY29uc3QgbG9jYXRpb24gPSBnaGVya2luUXVlcnkuZ2V0TG9jYXRpb24oXG4gICAgICAgIHBpY2tsZS5hc3ROb2RlSWRzW3BpY2tsZS5hc3ROb2RlSWRzLmxlbmd0aCAtIDFdXG4gICAgICApXG4gICAgICByZXR1cm4ge1xuICAgICAgICBnaGVya2luRG9jdW1lbnQsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBwaWNrbGUsXG4gICAgICB9XG4gICAgfSlcbiAgb3JkZXJQaWNrbGVzKGZpbHRlcmVkUGlja2xlcywgY29vcmRpbmF0ZXMub3JkZXIsIGxvZ2dlcilcbiAgcmV0dXJuIHtcbiAgICBmaWx0ZXJlZFBpY2tsZXMsXG4gICAgcGFyc2VFcnJvcnMsXG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2hlcmtpbkZyb21QYXRocyhcbiAgcGF0aHM6IHN0cmluZ1tdLFxuICBvcHRpb25zOiBJR2hlcmtpblN0cmVhbU9wdGlvbnMsXG4gIG9uRW52ZWxvcGU6IChlbnZlbG9wZTogRW52ZWxvcGUpID0+IHZvaWRcbik6IFByb21pc2U8dm9pZD4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGdoZXJraW5NZXNzYWdlU3RyZWFtID0gR2hlcmtpblN0cmVhbXMuZnJvbVBhdGhzKHBhdGhzLCBvcHRpb25zKVxuICAgIGdoZXJraW5NZXNzYWdlU3RyZWFtLm9uKCdkYXRhJywgb25FbnZlbG9wZSlcbiAgICBnaGVya2luTWVzc2FnZVN0cmVhbS5vbignZW5kJywgcmVzb2x2ZSlcbiAgICBnaGVya2luTWVzc2FnZVN0cmVhbS5vbignZXJy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