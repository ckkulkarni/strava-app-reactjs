f14f51a45f291f5d44d29b0299cb5fb2
'use strict';

var stringifyNumber = require('../../stringify/stringifyNumber.js');
const intIdentify = value => typeof value === 'bigint' || Number.isInteger(value);
const intResolve = (str, offset, radix, {
  intAsBigInt
}) => intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix);
function intStringify(node, radix, prefix) {
  const {
    value
  } = node;
  if (intIdentify(value) && value >= 0) return prefix + value.toString(radix);
  return stringifyNumber.stringifyNumber(node);
}
const intOct = {
  identify: value => intIdentify(value) && value >= 0,
  default: true,
  tag: 'tag:yaml.org,2002:int',
  format: 'OCT',
  test: /^0o[0-7]+$/,
  resolve: (str, _onError, opt) => intResolve(str, 2, 8, opt),
  stringify: node => intStringify(node, 8, '0o')
};
const int = {
  identify: intIdentify,
  default: true,
  tag: 'tag:yaml.org,2002:int',
  test: /^[-+]?[0-9]+$/,
  resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),
  stringify: stringifyNumber.stringifyNumber
};
const intHex = {
  identify: value => intIdentify(value) && value >= 0,
  default: true,
  tag: 'tag:yaml.org,2002:int',
  format: 'HEX',
  test: /^0x[0-9a-fA-F]+$/,
  resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),
  stringify: node => intStringify(node, 16, '0x')
};
exports.int = int;
exports.intHex = intHex;
exports.intOct = intOct;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdHJpbmdpZnlOdW1iZXIiLCJyZXF1aXJlIiwiaW50SWRlbnRpZnkiLCJ2YWx1ZSIsIk51bWJlciIsImlzSW50ZWdlciIsImludFJlc29sdmUiLCJzdHIiLCJvZmZzZXQiLCJyYWRpeCIsImludEFzQmlnSW50IiwiQmlnSW50IiwicGFyc2VJbnQiLCJzdWJzdHJpbmciLCJpbnRTdHJpbmdpZnkiLCJub2RlIiwicHJlZml4IiwidG9TdHJpbmciLCJpbnRPY3QiLCJpZGVudGlmeSIsImRlZmF1bHQiLCJ0YWciLCJmb3JtYXQiLCJ0ZXN0IiwicmVzb2x2ZSIsIl9vbkVycm9yIiwib3B0Iiwic3RyaW5naWZ5IiwiaW50IiwiaW50SGV4IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImludC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBzdHJpbmdpZnlOdW1iZXIgPSByZXF1aXJlKCcuLi8uLi9zdHJpbmdpZnkvc3RyaW5naWZ5TnVtYmVyLmpzJyk7XG5cbmNvbnN0IGludElkZW50aWZ5ID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnIHx8IE51bWJlci5pc0ludGVnZXIodmFsdWUpO1xuY29uc3QgaW50UmVzb2x2ZSA9IChzdHIsIG9mZnNldCwgcmFkaXgsIHsgaW50QXNCaWdJbnQgfSkgPT4gKGludEFzQmlnSW50ID8gQmlnSW50KHN0cikgOiBwYXJzZUludChzdHIuc3Vic3RyaW5nKG9mZnNldCksIHJhZGl4KSk7XG5mdW5jdGlvbiBpbnRTdHJpbmdpZnkobm9kZSwgcmFkaXgsIHByZWZpeCkge1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IG5vZGU7XG4gICAgaWYgKGludElkZW50aWZ5KHZhbHVlKSAmJiB2YWx1ZSA+PSAwKVxuICAgICAgICByZXR1cm4gcHJlZml4ICsgdmFsdWUudG9TdHJpbmcocmFkaXgpO1xuICAgIHJldHVybiBzdHJpbmdpZnlOdW1iZXIuc3RyaW5naWZ5TnVtYmVyKG5vZGUpO1xufVxuY29uc3QgaW50T2N0ID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiBpbnRJZGVudGlmeSh2YWx1ZSkgJiYgdmFsdWUgPj0gMCxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgZm9ybWF0OiAnT0NUJyxcbiAgICB0ZXN0OiAvXjBvWzAtN10rJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIG9wdCkgPT4gaW50UmVzb2x2ZShzdHIsIDIsIDgsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBub2RlID0+IGludFN0cmluZ2lmeShub2RlLCA4LCAnMG8nKVxufTtcbmNvbnN0IGludCA9IHtcbiAgICBpZGVudGlmeTogaW50SWRlbnRpZnksXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLFxuICAgIHRlc3Q6IC9eWy0rXT9bMC05XSskLyxcbiAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgb3B0KSA9PiBpbnRSZXNvbHZlKHN0ciwgMCwgMTAsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlOdW1iZXIuc3RyaW5naWZ5TnVtYmVyXG59O1xuY29uc3QgaW50SGV4ID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiBpbnRJZGVudGlmeSh2YWx1ZSkgJiYgdmFsdWUgPj0gMCxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgZm9ybWF0OiAnSEVYJyxcbiAgICB0ZXN0OiAvXjB4WzAtOWEtZkEtRl0rJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIG9wdCkgPT4gaW50UmVzb2x2ZShzdHIsIDIsIDE2LCBvcHQpLFxuICAgIHN0cmluZ2lmeTogbm9kZSA9PiBpbnRTdHJpbmdpZnkobm9kZSwgMTYsICcweCcpXG59O1xuXG5leHBvcnRzLmludCA9IGludDtcbmV4cG9ydHMuaW50SGV4ID0gaW50SGV4O1xuZXhw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