{"version":3,"names":["_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","Object","TypeError","_toArray","from","_toConsumableArray","arr2","currentTransitionMap","minimize","dfa","table","getTransitionTable","allStates","keys","alphabet","getAlphabet","accepting","getAcceptingStateNumbers","nonAccepting","Set","forEach","state","Number","isAccepting","has","add","all","filter","set","size","current","previous","_loop","newTransitionMap","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_set","handledStates","_set2","first","rest","slice","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","restSets","_iterator4","_step4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","handledState","areEquivalent","return","assign","newSets","map","concat","sameRow","remaped","Map","idx","minimizedTable","minimizedAcceptingStates","updateAcceptingStates","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","entries","_step2","_ref","_ref2","_idx","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","symbol","originalTransition","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_iterator7","_step7","originalState","get","setTransitionTable","setAcceptingStateNumbers","r1","r2","s1","s2","sort","join","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_iterator8","_step8","goToSameSet","originalTransitionS1","originalTransitionS2","module","exports"],"sources":["dfa-minimizer.js"],"sourcesContent":["/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n'use strict';\n\n// DFA minization.\n\n/**\n * Map from state to current set it goes.\n */\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar currentTransitionMap = null;\n\n/**\n * Takes a DFA, and returns a minimized version of it\n * compressing some states to groups (using standard, 0-, 1-,\n * 2-, ... N-equivalence algorithm).\n */\nfunction minimize(dfa) {\n  var table = dfa.getTransitionTable();\n  var allStates = Object.keys(table);\n  var alphabet = dfa.getAlphabet();\n  var accepting = dfa.getAcceptingStateNumbers();\n\n  currentTransitionMap = {};\n\n  var nonAccepting = new Set();\n\n  allStates.forEach(function (state) {\n    state = Number(state);\n    var isAccepting = accepting.has(state);\n\n    if (isAccepting) {\n      currentTransitionMap[state] = accepting;\n    } else {\n      nonAccepting.add(state);\n      currentTransitionMap[state] = nonAccepting;\n    }\n  });\n\n  // ---------------------------------------------------------------------------\n  // Step 1: build equivalent sets.\n\n  // All [1..N] equivalent sets.\n  var all = [\n  // 0-equivalent sets.\n  [nonAccepting, accepting].filter(function (set) {\n    return set.size > 0;\n  })];\n\n  var current = void 0;\n  var previous = void 0;\n\n  // Top of the stack is the current list of sets to analyze.\n  current = all[all.length - 1];\n\n  // Previous set (to check whether we need to stop).\n  previous = all[all.length - 2];\n\n  // Until we'll not have the same N and N-1 equivalent rows.\n\n  var _loop = function _loop() {\n    var newTransitionMap = {};\n\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = current[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var _set = _step3.value;\n\n        // Handled states for this set.\n        var handledStates = {};\n\n        var _set2 = _toArray(_set),\n            first = _set2[0],\n            rest = _set2.slice(1);\n\n        handledStates[first] = new Set([first]);\n\n        // Have to compare each from the rest states with\n        // the already handled states, and see if they are equivalent.\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          restSets: for (var _iterator4 = rest[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var state = _step4.value;\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n\n            try {\n              for (var _iterator5 = Object.keys(handledStates)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                var handledState = _step5.value;\n\n                // This and some previously handled state are equivalent --\n                // just append this state to the same set.\n                if (areEquivalent(state, handledState, table, alphabet)) {\n                  handledStates[handledState].add(state);\n                  handledStates[state] = handledStates[handledState];\n                  continue restSets;\n                }\n              }\n              // Else, this state is not equivalent to any of the\n              // handled states -- allocate a new set for it.\n            } catch (err) {\n              _didIteratorError5 = true;\n              _iteratorError5 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                  _iterator5.return();\n                }\n              } finally {\n                if (_didIteratorError5) {\n                  throw _iteratorError5;\n                }\n              }\n            }\n\n            handledStates[state] = new Set([state]);\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n\n        // Add these handled states to all states map.\n\n\n        Object.assign(newTransitionMap, handledStates);\n      }\n\n      // Update current transition map for the handled row.\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n\n    currentTransitionMap = newTransitionMap;\n\n    var newSets = new Set(Object.keys(newTransitionMap).map(function (state) {\n      return newTransitionMap[state];\n    }));\n\n    all.push([].concat(_toConsumableArray(newSets)));\n\n    // Top of the stack is the current.\n    current = all[all.length - 1];\n\n    // Previous set.\n    previous = all[all.length - 2];\n  };\n\n  while (!sameRow(current, previous)) {\n    _loop();\n  }\n\n  // ---------------------------------------------------------------------------\n  // Step 2: build minimized table from the equivalent sets.\n\n  // Remap state numbers from sets to index-based.\n  var remaped = new Map();\n  var idx = 1;\n  current.forEach(function (set) {\n    return remaped.set(set, idx++);\n  });\n\n  // Build the minimized table from the calculated equivalent sets.\n  var minimizedTable = {};\n\n  var minimizedAcceptingStates = new Set();\n\n  var updateAcceptingStates = function updateAcceptingStates(set, idx) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = set[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var state = _step.value;\n\n        if (accepting.has(state)) {\n          minimizedAcceptingStates.add(idx);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  };\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = remaped.entries()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var _ref = _step2.value;\n\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      var set = _ref2[0];\n      var _idx = _ref2[1];\n\n      minimizedTable[_idx] = {};\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = alphabet[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var symbol = _step6.value;\n\n          updateAcceptingStates(set, _idx);\n\n          // Determine original transition for this symbol from the set.\n          var originalTransition = void 0;\n          var _iteratorNormalCompletion7 = true;\n          var _didIteratorError7 = false;\n          var _iteratorError7 = undefined;\n\n          try {\n            for (var _iterator7 = set[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n              var originalState = _step7.value;\n\n              originalTransition = table[originalState][symbol];\n              if (originalTransition) {\n                break;\n              }\n            }\n          } catch (err) {\n            _didIteratorError7 = true;\n            _iteratorError7 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                _iterator7.return();\n              }\n            } finally {\n              if (_didIteratorError7) {\n                throw _iteratorError7;\n              }\n            }\n          }\n\n          if (originalTransition) {\n            minimizedTable[_idx][symbol] = remaped.get(currentTransitionMap[originalTransition]);\n          }\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n    }\n\n    // Update the table, and accepting states on the original DFA.\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  dfa.setTransitionTable(minimizedTable);\n  dfa.setAcceptingStateNumbers(minimizedAcceptingStates);\n\n  return dfa;\n}\n\nfunction sameRow(r1, r2) {\n  if (!r2) {\n    return false;\n  }\n\n  if (r1.length !== r2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < r1.length; i++) {\n    var s1 = r1[i];\n    var s2 = r2[i];\n\n    if (s1.size !== s2.size) {\n      return false;\n    }\n\n    if ([].concat(_toConsumableArray(s1)).sort().join(',') !== [].concat(_toConsumableArray(s2)).sort().join(',')) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Checks whether two states are N-equivalent, i.e. whether they go\n * to the same set on a symbol.\n */\nfunction areEquivalent(s1, s2, table, alphabet) {\n  var _iteratorNormalCompletion8 = true;\n  var _didIteratorError8 = false;\n  var _iteratorError8 = undefined;\n\n  try {\n    for (var _iterator8 = alphabet[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n      var symbol = _step8.value;\n\n      if (!goToSameSet(s1, s2, table, symbol)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _didIteratorError8 = true;\n    _iteratorError8 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion8 && _iterator8.return) {\n        _iterator8.return();\n      }\n    } finally {\n      if (_didIteratorError8) {\n        throw _iteratorError8;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Checks whether states go to the same set.\n */\nfunction goToSameSet(s1, s2, table, symbol) {\n  if (!currentTransitionMap[s1] || !currentTransitionMap[s2]) {\n    return false;\n  }\n\n  var originalTransitionS1 = table[s1][symbol];\n  var originalTransitionS2 = table[s2][symbol];\n\n  // If no actual transition on this symbol, treat it as positive.\n  if (!originalTransitionS1 && !originalTransitionS2) {\n    return true;\n  }\n\n  // Otherwise, check if they are in the same sets.\n  return currentTransitionMap[s1].has(originalTransitionS1) && currentTransitionMap[s2].has(originalTransitionS2);\n}\n\nmodule.exports = {\n  minimize: minimize\n};"],"mappings":"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"}