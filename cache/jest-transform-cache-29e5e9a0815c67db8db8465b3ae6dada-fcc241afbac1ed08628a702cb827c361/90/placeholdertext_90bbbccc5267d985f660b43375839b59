1a6db949c503e26ce9dbd07b435a21aa
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByPlaceholderText = exports.queryAllByPlaceholderText = exports.getByPlaceholderText = exports.getAllByPlaceholderText = exports.findByPlaceholderText = exports.findAllByPlaceholderText = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
const queryAllByPlaceholderText = (...args) => {
  (0, _helpers.checkContainerType)(args[0]);
  return (0, _allUtils.queryAllByAttribute)('placeholder', ...args);
};
const getMultipleError = (c, text) => `Found multiple elements with the placeholder text of: ${text}`;
const getMissingError = (c, text) => `Unable to find an element with the placeholder text of: ${text}`;
const queryAllByPlaceholderTextWithSuggestions = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByPlaceholderText, queryAllByPlaceholderText.name, 'queryAll');
exports.queryAllByPlaceholderText = queryAllByPlaceholderTextWithSuggestions;
const [queryByPlaceholderText, getAllByPlaceholderText, getByPlaceholderText, findAllByPlaceholderText, findByPlaceholderText] = (0, _allUtils.buildQueries)(queryAllByPlaceholderText, getMultipleError, getMissingError);
exports.findByPlaceholderText = findByPlaceholderText;
exports.findAllByPlaceholderText = findAllByPlaceholderText;
exports.getByPlaceholderText = getByPlaceholderText;
exports.getAllByPlaceholderText = getAllByPlaceholderText;
exports.queryByPlaceholderText = queryByPlaceholderText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXJ5QnlQbGFjZWhvbGRlclRleHQiLCJxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0IiwiZ2V0QnlQbGFjZWhvbGRlclRleHQiLCJnZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCIsImZpbmRCeVBsYWNlaG9sZGVyVGV4dCIsImZpbmRBbGxCeVBsYWNlaG9sZGVyVGV4dCIsIl9xdWVyeUhlbHBlcnMiLCJyZXF1aXJlIiwiX2hlbHBlcnMiLCJfYWxsVXRpbHMiLCJhcmdzIiwiY2hlY2tDb250YWluZXJUeXBlIiwicXVlcnlBbGxCeUF0dHJpYnV0ZSIsImdldE11bHRpcGxlRXJyb3IiLCJjIiwidGV4dCIsImdldE1pc3NpbmdFcnJvciIsInF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHRXaXRoU3VnZ2VzdGlvbnMiLCJ3cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uIiwibmFtZSIsImJ1aWxkUXVlcmllcyJdLCJzb3VyY2VzIjpbInBsYWNlaG9sZGVyLXRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlQbGFjZWhvbGRlclRleHQgPSBleHBvcnRzLnF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQgPSBleHBvcnRzLmdldEJ5UGxhY2Vob2xkZXJUZXh0ID0gZXhwb3J0cy5nZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCA9IGV4cG9ydHMuZmluZEJ5UGxhY2Vob2xkZXJUZXh0ID0gZXhwb3J0cy5maW5kQWxsQnlQbGFjZWhvbGRlclRleHQgPSB2b2lkIDA7XG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX2FsbFV0aWxzID0gcmVxdWlyZShcIi4vYWxsLXV0aWxzXCIpO1xuY29uc3QgcXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dCA9ICguLi5hcmdzKSA9PiB7XG4gICgwLCBfaGVscGVycy5jaGVja0NvbnRhaW5lclR5cGUpKGFyZ3NbMF0pO1xuICByZXR1cm4gKDAsIF9hbGxVdGlscy5xdWVyeUFsbEJ5QXR0cmlidXRlKSgncGxhY2Vob2xkZXInLCAuLi5hcmdzKTtcbn07XG5jb25zdCBnZXRNdWx0aXBsZUVycm9yID0gKGMsIHRleHQpID0+IGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIHRoZSBwbGFjZWhvbGRlciB0ZXh0IG9mOiAke3RleHR9YDtcbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9IChjLCB0ZXh0KSA9PiBgVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCB3aXRoIHRoZSBwbGFjZWhvbGRlciB0ZXh0IG9mOiAke3RleHR9YDtcbmNvbnN0IHF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHRXaXRoU3VnZ2VzdGlvbnMgPSAoMCwgX3F1ZXJ5SGVscGVycy53cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uKShxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0LCBxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0Lm5hbWUsICdxdWVyeUFsbCcpO1xuZXhwb3J0cy5xdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0ID0gcXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dFdpdGhTdWdnZXN0aW9ucztcbmNvbnN0IFtxdWVyeUJ5UGxhY2Vob2xkZXJUZXh0LCBnZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCwgZ2V0QnlQbGFjZWhvbGRlclRleHQsIGZpbmRBbGxCeVBsYWNlaG9sZGVyVGV4dCwgZmluZEJ5UGxhY2Vob2xkZXJUZXh0XSA9ICgwLCBfYWxsVXRpbHMuYnVpbGRRdWVyaWVzKShxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0LCBnZXRNdWx0aXBsZUVycm9yLCBnZXRNaXNzaW5nRXJyb3IpO1xuZXhwb3J0cy5maW5kQnlQbGFjZWhvbGRlclRleHQgPSBmaW5kQnlQbGFjZWhvbGRlclRleHQ7XG5leHBvcnRzLmZpbmRBbGxCeVBsYWNlaG9sZGVyVGV4dCA9IGZpbmRBbGxCeVBsYWNlaG9sZGVyVGV4dDtcbmV4cG9ydHMuZ2V0QnlQbGFjZWhvbGRlclRleHQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dDtcbmV4cG9ydHMuZ2V0QWxsQnlQbGFjZWhvbGRlclRleHQgPSBnZXRBbGxCeVBsYWNlaG9sZGVyVGV4dDtcbmV4cG9ydHMucXVlcnlCeVBsYWNlaG9sZGVyVGV4dCA9IHF1ZXJ5QnlQbGFjZWhvbGRlclRleHQ7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0Usc0JBQXNCLEdBQUdGLE9BQU8sQ0FBQ0cseUJBQXlCLEdBQUdILE9BQU8sQ0FBQ0ksb0JBQW9CLEdBQUdKLE9BQU8sQ0FBQ0ssdUJBQXVCLEdBQUdMLE9BQU8sQ0FBQ00scUJBQXFCLEdBQUdOLE9BQU8sQ0FBQ08sd0JBQXdCLEdBQUcsS0FBSyxDQUFDO0FBQy9NLElBQUlDLGFBQWEsR0FBR0MsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQy9DLElBQUlDLFFBQVEsR0FBR0QsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUNwQyxJQUFJRSxTQUFTLEdBQUdGLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFDdEMsTUFBTU4seUJBQXlCLEdBQUdBLENBQUMsR0FBR1MsSUFBSSxLQUFLO0VBQzdDLENBQUMsQ0FBQyxFQUFFRixRQUFRLENBQUNHLGtCQUFrQixFQUFFRCxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDekMsT0FBTyxDQUFDLENBQUMsRUFBRUQsU0FBUyxDQUFDRyxtQkFBbUIsRUFBRSxhQUFhLEVBQUUsR0FBR0YsSUFBSSxDQUFDO0FBQ25FLENBQUM7QUFDRCxNQUFNRyxnQkFBZ0IsR0FBR0EsQ0FBQ0MsQ0FBQyxFQUFFQyxJQUFJLEtBQU0seURBQXdEQSxJQUFLLEVBQUM7QUFDckcsTUFBTUMsZUFBZSxHQUFHQSxDQUFDRixDQUFDLEVBQUVDLElBQUksS0FBTSwyREFBMERBLElBQUssRUFBQztBQUN0RyxNQUFNRSx3Q0FBd0MsR0FBRyxDQUFDLENBQUMsRUFBRVgsYUFBYSxDQUFDWSw0QkFBNEIsRUFBRWpCLHlCQUF5QixFQUFFQSx5QkFBeUIsQ0FBQ2tCLElBQUksRUFBRSxVQUFVLENBQUM7QUFDdktyQixPQUFPLENBQUNHLHlCQUF5QixHQUFHZ0Isd0NBQXdDO0FBQzVFLE1BQU0sQ0FBQ2pCLHNCQUFzQixFQUFFRyx1QkFBdUIsRUFBRUQsb0JBQW9CLEVBQUVHLHdCQUF3QixFQUFFRCxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFSyxTQUFTLENBQUNXLFlBQVksRUFBRW5CLHlCQUF5QixFQUFFWSxnQkFBZ0IsRUFBRUcsZUFBZSxDQUFDO0FBQzFObEIsT0FBTyxDQUFDTSxxQkFBcUIsR0FBR0EscUJBQXFCO0FBQ3JETixPQUFPLENBQUNPLHdCQUF3QixHQUFHQSx3QkFBd0I7QUFDM0RQLE9BQU8sQ0FBQ0ksb0JBQW9CLEdBQUdBLG9CQUFvQjtBQUNuREosT0FBTyxDQUFDSyx1QkFBdUIsR0FBR0EsdUJBQXVCO0FBQ3pETCxPQUFPLENBQUNFLHNCQUFzQixHQUFHQSxzQkFBc0IifQ==