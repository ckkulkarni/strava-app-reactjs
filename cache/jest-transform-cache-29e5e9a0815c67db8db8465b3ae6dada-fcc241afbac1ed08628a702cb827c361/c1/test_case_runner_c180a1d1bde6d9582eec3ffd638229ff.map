{"version":3,"names":["helpers_1","require","attachment_manager_1","__importDefault","step_runner_1","messages","__importStar","messages_1","value_checker_1","TestCaseRunner","constructor","eventBroadcaster","stopwatch","gherkinDocument","newId","pickle","testCase","retries","skip","filterStackTraces","supportCodeLibrary","worldParameters","attachmentManager","default","data","media","doesNotHaveValue","currentTestStepId","Error","attachment","body","contentEncoding","encoding","mediaType","contentType","testCaseStartedId","currentTestCaseStartedId","testStepId","emit","maxAttempts","resetTestProgressData","world","World","attach","create","bind","log","parameters","testStepResults","getBeforeStepHookDefinitions","beforeTestStepHookDefinitions","filter","hookDefinition","appliesToTestCase","getAfterStepHookDefinitions","afterTestStepHookDefinitions","slice","reverse","getWorstStepResult","length","status","TestStepResultStatus","SKIPPED","PASSED","duration","TimeConversion","millisecondsToDuration","getWorstTestStepResult","invokeStep","step","stepDefinition","hookParameter","run","defaultTimeout","isSkippingSteps","shouldSkipHook","isBeforeHook","aroundTestStep","runStepFn","testStepStarted","timestamp","testStepResult","push","testStepFinished","attempt","moreAttemptsRemaining","willBeRetried","runAttempt","testCaseStarted","testCaseId","id","didWeRunStepsYet","testStep","testSteps","doesHaveValue","hookId","result","FAILED","runHook","findHookDefinition","pickleStep","steps","find","pickleStepId","runStep","testCaseFinished","runStepHooks","stepHooks","stepResult","stepHooksResult","stepHookDefinition","stepDefinitions","stepDefinitionIds","map","stepDefinitionId","findStepDefinition","UNDEFINED","message","getAmbiguousStepException","AMBIGUOUS","stepResults","afterStepHookResults","concat","finalStepResult","finalDuration","addDurations","exports","beforeTestCaseHookDefinitions","afterTestCaseHookDefinitions","definition"],"sources":["../../src/runtime/test_case_runner.ts"],"sourcesContent":["import { getAmbiguousStepException } from './helpers'\nimport AttachmentManager from './attachment_manager'\nimport StepRunner from './step_runner'\nimport * as messages from '@cucumber/messages'\nimport { getWorstTestStepResult, IdGenerator } from '@cucumber/messages'\nimport { EventEmitter } from 'events'\nimport {\n  ISupportCodeLibrary,\n  ITestCaseHookParameter,\n  ITestStepHookParameter,\n} from '../support_code_library_builder/types'\nimport TestCaseHookDefinition from '../models/test_case_hook_definition'\nimport TestStepHookDefinition from '../models/test_step_hook_definition'\nimport { IDefinition } from '../models/definition'\nimport { doesHaveValue, doesNotHaveValue } from '../value_checker'\nimport { IStopwatch } from './stopwatch'\nimport StepDefinition from '../models/step_definition'\n\nexport interface INewTestCaseRunnerOptions {\n  eventBroadcaster: EventEmitter\n  stopwatch: IStopwatch\n  gherkinDocument: messages.GherkinDocument\n  newId: IdGenerator.NewId\n  pickle: messages.Pickle\n  testCase: messages.TestCase\n  retries: number\n  skip: boolean\n  filterStackTraces: boolean\n  supportCodeLibrary: ISupportCodeLibrary\n  worldParameters: any\n}\n\nexport default class TestCaseRunner {\n  private readonly attachmentManager: AttachmentManager\n  private currentTestCaseStartedId: string\n  private currentTestStepId: string\n  private readonly eventBroadcaster: EventEmitter\n  private readonly stopwatch: IStopwatch\n  private readonly gherkinDocument: messages.GherkinDocument\n  private readonly newId: IdGenerator.NewId\n  private readonly pickle: messages.Pickle\n  private readonly testCase: messages.TestCase\n  private readonly maxAttempts: number\n  private readonly skip: boolean\n  private readonly filterStackTraces: boolean\n  private readonly supportCodeLibrary: ISupportCodeLibrary\n  private testStepResults: messages.TestStepResult[]\n  private world: any\n  private readonly worldParameters: any\n\n  constructor({\n    eventBroadcaster,\n    stopwatch,\n    gherkinDocument,\n    newId,\n    pickle,\n    testCase,\n    retries = 0,\n    skip,\n    filterStackTraces,\n    supportCodeLibrary,\n    worldParameters,\n  }: INewTestCaseRunnerOptions) {\n    this.attachmentManager = new AttachmentManager(({ data, media }) => {\n      if (doesNotHaveValue(this.currentTestStepId)) {\n        throw new Error(\n          'Cannot attach when a step/hook is not running. Ensure your step/hook waits for the attach to finish.'\n        )\n      }\n      const attachment: messages.Envelope = {\n        attachment: {\n          body: data,\n          contentEncoding: media.encoding,\n          mediaType: media.contentType,\n          testCaseStartedId: this.currentTestCaseStartedId,\n          testStepId: this.currentTestStepId,\n        },\n      }\n      this.eventBroadcaster.emit('envelope', attachment)\n    })\n    this.eventBroadcaster = eventBroadcaster\n    this.stopwatch = stopwatch\n    this.gherkinDocument = gherkinDocument\n    this.maxAttempts = 1 + (skip ? 0 : retries)\n    this.newId = newId\n    this.pickle = pickle\n    this.testCase = testCase\n    this.skip = skip\n    this.filterStackTraces = filterStackTraces\n    this.supportCodeLibrary = supportCodeLibrary\n    this.worldParameters = worldParameters\n    this.resetTestProgressData()\n  }\n\n  resetTestProgressData(): void {\n    this.world = new this.supportCodeLibrary.World({\n      attach: this.attachmentManager.create.bind(this.attachmentManager),\n      log: this.attachmentManager.log.bind(this.attachmentManager),\n      parameters: this.worldParameters,\n    })\n    this.testStepResults = []\n  }\n\n  getBeforeStepHookDefinitions(): TestStepHookDefinition[] {\n    return this.supportCodeLibrary.beforeTestStepHookDefinitions.filter(\n      (hookDefinition) => hookDefinition.appliesToTestCase(this.pickle)\n    )\n  }\n\n  getAfterStepHookDefinitions(): TestStepHookDefinition[] {\n    return this.supportCodeLibrary.afterTestStepHookDefinitions\n      .slice(0)\n      .reverse()\n      .filter((hookDefinition) => hookDefinition.appliesToTestCase(this.pickle))\n  }\n\n  getWorstStepResult(): messages.TestStepResult {\n    if (this.testStepResults.length === 0) {\n      return {\n        status: this.skip\n          ? messages.TestStepResultStatus.SKIPPED\n          : messages.TestStepResultStatus.PASSED,\n        duration: messages.TimeConversion.millisecondsToDuration(0),\n      }\n    }\n    return getWorstTestStepResult(this.testStepResults)\n  }\n\n  async invokeStep(\n    step: messages.PickleStep,\n    stepDefinition: IDefinition,\n    hookParameter?: any\n  ): Promise<messages.TestStepResult> {\n    return await StepRunner.run({\n      defaultTimeout: this.supportCodeLibrary.defaultTimeout,\n      filterStackTraces: this.filterStackTraces,\n      hookParameter,\n      step,\n      stepDefinition,\n      world: this.world,\n    })\n  }\n\n  isSkippingSteps(): boolean {\n    return (\n      this.getWorstStepResult().status !== messages.TestStepResultStatus.PASSED\n    )\n  }\n\n  shouldSkipHook(isBeforeHook: boolean): boolean {\n    return this.skip || (this.isSkippingSteps() && isBeforeHook)\n  }\n\n  async aroundTestStep(\n    testStepId: string,\n    runStepFn: () => Promise<messages.TestStepResult>\n  ): Promise<void> {\n    const testStepStarted: messages.Envelope = {\n      testStepStarted: {\n        testCaseStartedId: this.currentTestCaseStartedId,\n        testStepId,\n        timestamp: this.stopwatch.timestamp(),\n      },\n    }\n    this.eventBroadcaster.emit('envelope', testStepStarted)\n    this.currentTestStepId = testStepId\n    const testStepResult = await runStepFn()\n    this.currentTestStepId = null\n    this.testStepResults.push(testStepResult)\n    const testStepFinished: messages.Envelope = {\n      testStepFinished: {\n        testCaseStartedId: this.currentTestCaseStartedId,\n        testStepId,\n        testStepResult,\n        timestamp: this.stopwatch.timestamp(),\n      },\n    }\n    this.eventBroadcaster.emit('envelope', testStepFinished)\n  }\n\n  async run(): Promise<messages.TestStepResultStatus> {\n    for (let attempt = 0; attempt < this.maxAttempts; attempt++) {\n      const moreAttemptsRemaining = attempt + 1 < this.maxAttempts\n\n      const willBeRetried = await this.runAttempt(\n        attempt,\n        moreAttemptsRemaining\n      )\n\n      if (!willBeRetried) {\n        break\n      }\n      this.resetTestProgressData()\n    }\n    return this.getWorstStepResult().status\n  }\n\n  async runAttempt(\n    attempt: number,\n    moreAttemptsRemaining: boolean\n  ): Promise<boolean> {\n    this.currentTestCaseStartedId = this.newId()\n    const testCaseStarted: messages.Envelope = {\n      testCaseStarted: {\n        attempt,\n        testCaseId: this.testCase.id,\n        id: this.currentTestCaseStartedId,\n        timestamp: this.stopwatch.timestamp(),\n      },\n    }\n    this.eventBroadcaster.emit('envelope', testCaseStarted)\n    // used to determine whether a hook is a Before or After\n    let didWeRunStepsYet = false\n    for (const testStep of this.testCase.testSteps) {\n      await this.aroundTestStep(testStep.id, async () => {\n        if (doesHaveValue(testStep.hookId)) {\n          const hookParameter: ITestCaseHookParameter = {\n            gherkinDocument: this.gherkinDocument,\n            pickle: this.pickle,\n            testCaseStartedId: this.currentTestCaseStartedId,\n          }\n          if (didWeRunStepsYet) {\n            hookParameter.result = this.getWorstStepResult()\n            hookParameter.willBeRetried =\n              this.getWorstStepResult().status ===\n                messages.TestStepResultStatus.FAILED && moreAttemptsRemaining\n          }\n          return await this.runHook(\n            findHookDefinition(testStep.hookId, this.supportCodeLibrary),\n            hookParameter,\n            !didWeRunStepsYet\n          )\n        } else {\n          const pickleStep = this.pickle.steps.find(\n            (pickleStep) => pickleStep.id === testStep.pickleStepId\n          )\n          const testStepResult = await this.runStep(pickleStep, testStep)\n          didWeRunStepsYet = true\n          return testStepResult\n        }\n      })\n    }\n\n    const willBeRetried =\n      this.getWorstStepResult().status ===\n        messages.TestStepResultStatus.FAILED && moreAttemptsRemaining\n    const testCaseFinished: messages.Envelope = {\n      testCaseFinished: {\n        testCaseStartedId: this.currentTestCaseStartedId,\n        timestamp: this.stopwatch.timestamp(),\n        willBeRetried,\n      },\n    }\n    this.eventBroadcaster.emit('envelope', testCaseFinished)\n\n    return willBeRetried\n  }\n\n  async runHook(\n    hookDefinition: TestCaseHookDefinition,\n    hookParameter: ITestCaseHookParameter,\n    isBeforeHook: boolean\n  ): Promise<messages.TestStepResult> {\n    if (this.shouldSkipHook(isBeforeHook)) {\n      return {\n        status: messages.TestStepResultStatus.SKIPPED,\n        duration: messages.TimeConversion.millisecondsToDuration(0),\n      }\n    }\n    return await this.invokeStep(null, hookDefinition, hookParameter)\n  }\n\n  async runStepHooks(\n    stepHooks: TestStepHookDefinition[],\n    pickleStep: messages.PickleStep,\n    stepResult?: messages.TestStepResult\n  ): Promise<messages.TestStepResult[]> {\n    const stepHooksResult = []\n    const hookParameter: ITestStepHookParameter = {\n      gherkinDocument: this.gherkinDocument,\n      pickle: this.pickle,\n      pickleStep,\n      testCaseStartedId: this.currentTestCaseStartedId,\n      testStepId: this.currentTestStepId,\n      result: stepResult,\n    }\n    for (const stepHookDefinition of stepHooks) {\n      stepHooksResult.push(\n        await this.invokeStep(null, stepHookDefinition, hookParameter)\n      )\n    }\n    return stepHooksResult\n  }\n\n  async runStep(\n    pickleStep: messages.PickleStep,\n    testStep: messages.TestStep\n  ): Promise<messages.TestStepResult> {\n    const stepDefinitions = testStep.stepDefinitionIds.map(\n      (stepDefinitionId) => {\n        return findStepDefinition(stepDefinitionId, this.supportCodeLibrary)\n      }\n    )\n    if (stepDefinitions.length === 0) {\n      return {\n        status: messages.TestStepResultStatus.UNDEFINED,\n        duration: messages.TimeConversion.millisecondsToDuration(0),\n      }\n    } else if (stepDefinitions.length > 1) {\n      return {\n        message: getAmbiguousStepException(stepDefinitions),\n        status: messages.TestStepResultStatus.AMBIGUOUS,\n        duration: messages.TimeConversion.millisecondsToDuration(0),\n      }\n    } else if (this.isSkippingSteps()) {\n      return {\n        status: messages.TestStepResultStatus.SKIPPED,\n        duration: messages.TimeConversion.millisecondsToDuration(0),\n      }\n    }\n\n    let stepResult\n    let stepResults = await this.runStepHooks(\n      this.getBeforeStepHookDefinitions(),\n      pickleStep\n    )\n    if (\n      getWorstTestStepResult(stepResults).status !==\n      messages.TestStepResultStatus.FAILED\n    ) {\n      stepResult = await this.invokeStep(pickleStep, stepDefinitions[0])\n      stepResults.push(stepResult)\n    }\n    const afterStepHookResults = await this.runStepHooks(\n      this.getAfterStepHookDefinitions(),\n      pickleStep,\n      stepResult\n    )\n    stepResults = stepResults.concat(afterStepHookResults)\n\n    const finalStepResult = getWorstTestStepResult(stepResults)\n    let finalDuration = messages.TimeConversion.millisecondsToDuration(0)\n    for (const result of stepResults) {\n      finalDuration = messages.TimeConversion.addDurations(\n        finalDuration,\n        result.duration\n      )\n    }\n    finalStepResult.duration = finalDuration\n    return finalStepResult\n  }\n}\n\nfunction findHookDefinition(\n  id: string,\n  supportCodeLibrary: ISupportCodeLibrary\n): TestCaseHookDefinition {\n  return [\n    ...supportCodeLibrary.beforeTestCaseHookDefinitions,\n    ...supportCodeLibrary.afterTestCaseHookDefinitions,\n  ].find((definition) => definition.id === id)\n}\n\nfunction findStepDefinition(\n  id: string,\n  supportCodeLibrary: ISupportCodeLibrary\n): StepDefinition {\n  return supportCodeLibrary.stepDefinitions.find(\n    (definition) => definition.id === id\n  )\n}\n"],"mappings":"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"}