3592b580eabb362adf4b861bffa63ac4
'use strict';

var Pair = require('../nodes/Pair.js');
var YAMLMap = require('../nodes/YAMLMap.js');
var resolveProps = require('./resolve-props.js');
var utilContainsNewline = require('./util-contains-newline.js');
var utilFlowIndentCheck = require('./util-flow-indent-check.js');
var utilMapIncludes = require('./util-map-includes.js');
const startColMsg = 'All mapping items must start at the same column';
function resolveBlockMap({
  composeNode,
  composeEmptyNode
}, ctx, bm, onError) {
  const map = new YAMLMap.YAMLMap(ctx.schema);
  if (ctx.atRoot) ctx.atRoot = false;
  let offset = bm.offset;
  let commentEnd = null;
  for (const collItem of bm.items) {
    const {
      start,
      key,
      sep,
      value
    } = collItem;
    // key properties
    const keyProps = resolveProps.resolveProps(start, {
      indicator: 'explicit-key-ind',
      next: key ?? sep?.[0],
      offset,
      onError,
      startOnNewline: true
    });
    const implicitKey = !keyProps.found;
    if (implicitKey) {
      if (key) {
        if (key.type === 'block-seq') onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'A block sequence may not be used as an implicit map key');else if ('indent' in key && key.indent !== bm.indent) onError(offset, 'BAD_INDENT', startColMsg);
      }
      if (!keyProps.anchor && !keyProps.tag && !sep) {
        commentEnd = keyProps.end;
        if (keyProps.comment) {
          if (map.comment) map.comment += '\n' + keyProps.comment;else map.comment = keyProps.comment;
        }
        continue;
      }
      if (keyProps.hasNewlineAfterProp || utilContainsNewline.containsNewline(key)) {
        onError(key ?? start[start.length - 1], 'MULTILINE_IMPLICIT_KEY', 'Implicit keys need to be on a single line');
      }
    } else if (keyProps.found?.indent !== bm.indent) {
      onError(offset, 'BAD_INDENT', startColMsg);
    }
    // key value
    const keyStart = keyProps.end;
    const keyNode = key ? composeNode(ctx, key, keyProps, onError) : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);
    if (ctx.schema.compat) utilFlowIndentCheck.flowIndentCheck(bm.indent, key, onError);
    if (utilMapIncludes.mapIncludes(ctx, map.items, keyNode)) onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');
    // value properties
    const valueProps = resolveProps.resolveProps(sep ?? [], {
      indicator: 'map-value-ind',
      next: value,
      offset: keyNode.range[2],
      onError,
      startOnNewline: !key || key.type === 'block-scalar'
    });
    offset = valueProps.end;
    if (valueProps.found) {
      if (implicitKey) {
        if (value?.type === 'block-map' && !valueProps.hasNewline) onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'Nested mappings are not allowed in compact mappings');
        if (ctx.options.strict && keyProps.start < valueProps.found.offset - 1024) onError(keyNode.range, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit block mapping key');
      }
      // value value
      const valueNode = value ? composeNode(ctx, value, valueProps, onError) : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);
      if (ctx.schema.compat) utilFlowIndentCheck.flowIndentCheck(bm.indent, value, onError);
      offset = valueNode.range[2];
      const pair = new Pair.Pair(keyNode, valueNode);
      if (ctx.options.keepSourceTokens) pair.srcToken = collItem;
      map.items.push(pair);
    } else {
      // key with no value
      if (implicitKey) onError(keyNode.range, 'MISSING_CHAR', 'Implicit map keys need to be followed by map values');
      if (valueProps.comment) {
        if (keyNode.comment) keyNode.comment += '\n' + valueProps.comment;else keyNode.comment = valueProps.comment;
      }
      const pair = new Pair.Pair(keyNode);
      if (ctx.options.keepSourceTokens) pair.srcToken = collItem;
      map.items.push(pair);
    }
  }
  if (commentEnd && commentEnd < offset) onError(commentEnd, 'IMPOSSIBLE', 'Map comment with trailing content');
  map.range = [bm.offset, offset, commentEnd ?? offset];
  return map;
}
exports.resolveBlockMap = resolveBlockMap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYWlyIiwicmVxdWlyZSIsIllBTUxNYXAiLCJyZXNvbHZlUHJvcHMiLCJ1dGlsQ29udGFpbnNOZXdsaW5lIiwidXRpbEZsb3dJbmRlbnRDaGVjayIsInV0aWxNYXBJbmNsdWRlcyIsInN0YXJ0Q29sTXNnIiwicmVzb2x2ZUJsb2NrTWFwIiwiY29tcG9zZU5vZGUiLCJjb21wb3NlRW1wdHlOb2RlIiwiY3R4IiwiYm0iLCJvbkVycm9yIiwibWFwIiwic2NoZW1hIiwiYXRSb290Iiwib2Zmc2V0IiwiY29tbWVudEVuZCIsImNvbGxJdGVtIiwiaXRlbXMiLCJzdGFydCIsImtleSIsInNlcCIsInZhbHVlIiwia2V5UHJvcHMiLCJpbmRpY2F0b3IiLCJuZXh0Iiwic3RhcnRPbk5ld2xpbmUiLCJpbXBsaWNpdEtleSIsImZvdW5kIiwidHlwZSIsImluZGVudCIsImFuY2hvciIsInRhZyIsImVuZCIsImNvbW1lbnQiLCJoYXNOZXdsaW5lQWZ0ZXJQcm9wIiwiY29udGFpbnNOZXdsaW5lIiwibGVuZ3RoIiwia2V5U3RhcnQiLCJrZXlOb2RlIiwiY29tcGF0IiwiZmxvd0luZGVudENoZWNrIiwibWFwSW5jbHVkZXMiLCJ2YWx1ZVByb3BzIiwicmFuZ2UiLCJoYXNOZXdsaW5lIiwib3B0aW9ucyIsInN0cmljdCIsInZhbHVlTm9kZSIsInBhaXIiLCJrZWVwU291cmNlVG9rZW5zIiwic3JjVG9rZW4iLCJwdXNoIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInJlc29sdmUtYmxvY2stbWFwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFBhaXIgPSByZXF1aXJlKCcuLi9ub2Rlcy9QYWlyLmpzJyk7XG52YXIgWUFNTE1hcCA9IHJlcXVpcmUoJy4uL25vZGVzL1lBTUxNYXAuanMnKTtcbnZhciByZXNvbHZlUHJvcHMgPSByZXF1aXJlKCcuL3Jlc29sdmUtcHJvcHMuanMnKTtcbnZhciB1dGlsQ29udGFpbnNOZXdsaW5lID0gcmVxdWlyZSgnLi91dGlsLWNvbnRhaW5zLW5ld2xpbmUuanMnKTtcbnZhciB1dGlsRmxvd0luZGVudENoZWNrID0gcmVxdWlyZSgnLi91dGlsLWZsb3ctaW5kZW50LWNoZWNrLmpzJyk7XG52YXIgdXRpbE1hcEluY2x1ZGVzID0gcmVxdWlyZSgnLi91dGlsLW1hcC1pbmNsdWRlcy5qcycpO1xuXG5jb25zdCBzdGFydENvbE1zZyA9ICdBbGwgbWFwcGluZyBpdGVtcyBtdXN0IHN0YXJ0IGF0IHRoZSBzYW1lIGNvbHVtbic7XG5mdW5jdGlvbiByZXNvbHZlQmxvY2tNYXAoeyBjb21wb3NlTm9kZSwgY29tcG9zZUVtcHR5Tm9kZSB9LCBjdHgsIGJtLCBvbkVycm9yKSB7XG4gICAgY29uc3QgbWFwID0gbmV3IFlBTUxNYXAuWUFNTE1hcChjdHguc2NoZW1hKTtcbiAgICBpZiAoY3R4LmF0Um9vdClcbiAgICAgICAgY3R4LmF0Um9vdCA9IGZhbHNlO1xuICAgIGxldCBvZmZzZXQgPSBibS5vZmZzZXQ7XG4gICAgbGV0IGNvbW1lbnRFbmQgPSBudWxsO1xuICAgIGZvciAoY29uc3QgY29sbEl0ZW0gb2YgYm0uaXRlbXMpIHtcbiAgICAgICAgY29uc3QgeyBzdGFydCwga2V5LCBzZXAsIHZhbHVlIH0gPSBjb2xsSXRlbTtcbiAgICAgICAgLy8ga2V5IHByb3BlcnRpZXNcbiAgICAgICAgY29uc3Qga2V5UHJvcHMgPSByZXNvbHZlUHJvcHMucmVzb2x2ZVByb3BzKHN0YXJ0LCB7XG4gICAgICAgICAgICBpbmRpY2F0b3I6ICdleHBsaWNpdC1rZXktaW5kJyxcbiAgICAgICAgICAgIG5leHQ6IGtleSA/PyBzZXA/LlswXSxcbiAgICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICAgIG9uRXJyb3IsXG4gICAgICAgICAgICBzdGFydE9uTmV3bGluZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgaW1wbGljaXRLZXkgPSAha2V5UHJvcHMuZm91bmQ7XG4gICAgICAgIGlmIChpbXBsaWNpdEtleSkge1xuICAgICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgIGlmIChrZXkudHlwZSA9PT0gJ2Jsb2NrLXNlcScpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3Iob2Zmc2V0LCAnQkxPQ0tfQVNfSU1QTElDSVRfS0VZJywgJ0EgYmxvY2sgc2VxdWVuY2UgbWF5IG5vdCBiZSB1c2VkIGFzIGFuIGltcGxpY2l0IG1hcCBrZXknKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgnaW5kZW50JyBpbiBrZXkgJiYga2V5LmluZGVudCAhPT0gYm0uaW5kZW50KVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKG9mZnNldCwgJ0JBRF9JTkRFTlQnLCBzdGFydENvbE1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWtleVByb3BzLmFuY2hvciAmJiAha2V5UHJvcHMudGFnICYmICFzZXApIHtcbiAgICAgICAgICAgICAgICBjb21tZW50RW5kID0ga2V5UHJvcHMuZW5kO1xuICAgICAgICAgICAgICAgIGlmIChrZXlQcm9wcy5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXAuY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5jb21tZW50ICs9ICdcXG4nICsga2V5UHJvcHMuY29tbWVudDtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwLmNvbW1lbnQgPSBrZXlQcm9wcy5jb21tZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChrZXlQcm9wcy5oYXNOZXdsaW5lQWZ0ZXJQcm9wIHx8IHV0aWxDb250YWluc05ld2xpbmUuY29udGFpbnNOZXdsaW5lKGtleSkpIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKGtleSA/PyBzdGFydFtzdGFydC5sZW5ndGggLSAxXSwgJ01VTFRJTElORV9JTVBMSUNJVF9LRVknLCAnSW1wbGljaXQga2V5cyBuZWVkIHRvIGJlIG9uIGEgc2luZ2xlIGxpbmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXlQcm9wcy5mb3VuZD8uaW5kZW50ICE9PSBibS5pbmRlbnQpIHtcbiAgICAgICAgICAgIG9uRXJyb3Iob2Zmc2V0LCAnQkFEX0lOREVOVCcsIHN0YXJ0Q29sTXNnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBrZXkgdmFsdWVcbiAgICAgICAgY29uc3Qga2V5U3RhcnQgPSBrZXlQcm9wcy5lbmQ7XG4gICAgICAgIGNvbnN0IGtleU5vZGUgPSBrZXlcbiAgICAgICAgICAgID8gY29tcG9zZU5vZGUoY3R4LCBrZXksIGtleVByb3BzLCBvbkVycm9yKVxuICAgICAgICAgICAgOiBjb21wb3NlRW1wdHlOb2RlKGN0eCwga2V5U3RhcnQsIHN0YXJ0LCBudWxsLCBrZXlQcm9wcywgb25FcnJvcik7XG4gICAgICAgIGlmIChjdHguc2NoZW1hLmNvbXBhdClcbiAgICAgICAgICAgIHV0aWxGbG93SW5kZW50Q2hlY2suZmxvd0luZGVudENoZWNrKGJtLmluZGVudCwga2V5LCBvbkVycm9yKTtcbiAgICAgICAgaWYgKHV0aWxNYXBJbmNsdWRlcy5tYXBJbmNsdWRlcyhjdHgsIG1hcC5pdGVtcywga2V5Tm9kZSkpXG4gICAgICAgICAgICBvbkVycm9yKGtleVN0YXJ0LCAnRFVQTElDQVRFX0tFWScsICdNYXAga2V5cyBtdXN0IGJlIHVuaXF1ZScpO1xuICAgICAgICAvLyB2YWx1ZSBwcm9wZXJ0aWVzXG4gICAgICAgIGNvbnN0IHZhbHVlUHJvcHMgPSByZXNvbHZlUHJvcHMucmVzb2x2ZVByb3BzKHNlcCA/PyBbXSwge1xuICAgICAgICAgICAgaW5kaWNhdG9yOiAnbWFwLXZhbHVlLWluZCcsXG4gICAgICAgICAgICBuZXh0OiB2YWx1ZSxcbiAgICAgICAgICAgIG9mZnNldDoga2V5Tm9kZS5yYW5nZVsyXSxcbiAgICAgICAgICAgIG9uRXJyb3IsXG4gICAgICAgICAgICBzdGFydE9uTmV3bGluZTogIWtleSB8fCBrZXkudHlwZSA9PT0gJ2Jsb2NrLXNjYWxhcidcbiAgICAgICAgfSk7XG4gICAgICAgIG9mZnNldCA9IHZhbHVlUHJvcHMuZW5kO1xuICAgICAgICBpZiAodmFsdWVQcm9wcy5mb3VuZCkge1xuICAgICAgICAgICAgaWYgKGltcGxpY2l0S2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlPy50eXBlID09PSAnYmxvY2stbWFwJyAmJiAhdmFsdWVQcm9wcy5oYXNOZXdsaW5lKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKG9mZnNldCwgJ0JMT0NLX0FTX0lNUExJQ0lUX0tFWScsICdOZXN0ZWQgbWFwcGluZ3MgYXJlIG5vdCBhbGxvd2VkIGluIGNvbXBhY3QgbWFwcGluZ3MnKTtcbiAgICAgICAgICAgICAgICBpZiAoY3R4Lm9wdGlvbnMuc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgICAgIGtleVByb3BzLnN0YXJ0IDwgdmFsdWVQcm9wcy5mb3VuZC5vZmZzZXQgLSAxMDI0KVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGtleU5vZGUucmFuZ2UsICdLRVlfT1ZFUl8xMDI0X0NIQVJTJywgJ1RoZSA6IGluZGljYXRvciBtdXN0IGJlIGF0IG1vc3QgMTAyNCBjaGFycyBhZnRlciB0aGUgc3RhcnQgb2YgYW4gaW1wbGljaXQgYmxvY2sgbWFwcGluZyBrZXknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZhbHVlIHZhbHVlXG4gICAgICAgICAgICBjb25zdCB2YWx1ZU5vZGUgPSB2YWx1ZVxuICAgICAgICAgICAgICAgID8gY29tcG9zZU5vZGUoY3R4LCB2YWx1ZSwgdmFsdWVQcm9wcywgb25FcnJvcilcbiAgICAgICAgICAgICAgICA6IGNvbXBvc2VFbXB0eU5vZGUoY3R4LCBvZmZzZXQsIHNlcCwgbnVsbCwgdmFsdWVQcm9wcywgb25FcnJvcik7XG4gICAgICAgICAgICBpZiAoY3R4LnNjaGVtYS5jb21wYXQpXG4gICAgICAgICAgICAgICAgdXRpbEZsb3dJbmRlbnRDaGVjay5mbG93SW5kZW50Q2hlY2soYm0uaW5kZW50LCB2YWx1ZSwgb25FcnJvcik7XG4gICAgICAgICAgICBvZmZzZXQgPSB2YWx1ZU5vZGUucmFuZ2VbMl07XG4gICAgICAgICAgICBjb25zdCBwYWlyID0gbmV3IFBhaXIuUGFpcihrZXlOb2RlLCB2YWx1ZU5vZGUpO1xuICAgICAgICAgICAgaWYgKGN0eC5vcHRpb25zLmtlZXBTb3VyY2VUb2tlbnMpXG4gICAgICAgICAgICAgICAgcGFpci5zcmNUb2tlbiA9IGNvbGxJdGVtO1xuICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2gocGFpcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBrZXkgd2l0aCBubyB2YWx1ZVxuICAgICAgICAgICAgaWYgKGltcGxpY2l0S2V5KVxuICAgICAgICAgICAgICAgIG9uRXJyb3Ioa2V5Tm9kZS5yYW5nZSwgJ01JU1NJTkdfQ0hBUicsICdJbXBsaWNpdCBtYXAga2V5cyBuZWVkIHRvIGJlIGZvbGxvd2VkIGJ5IG1hcCB2YWx1ZXMnKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZVByb3BzLmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5Tm9kZS5jb21tZW50KVxuICAgICAgICAgICAgICAgICAgICBrZXlOb2RlLmNvbW1lbnQgKz0gJ1xcbicgKyB2YWx1ZVByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBrZXlOb2RlLmNvbW1lbnQgPSB2YWx1ZVByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwYWlyID0gbmV3IFBhaXIuUGFpcihrZXlOb2RlKTtcbiAgICAgICAgICAgIGlmIChjdHgub3B0aW9ucy5rZWVwU291cmNlVG9rZW5zKVxuICAgICAgICAgICAgICAgIHBhaXIuc3JjVG9rZW4gPSBjb2xsSXRlbTtcbiAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHBhaXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChjb21tZW50RW5kICYmIGNvbW1lbnRFbmQgPCBvZmZzZXQpXG4gICAgICAgIG9uRXJyb3IoY29tbWVudEVuZCwgJ0lNUE9TU0lCTEUnLCAnTWFwIGNvbW1lbnQgd2l0aCB0cmFpbGluZyBjb250ZW50Jyk7XG4gICAgbWFwLnJhbmdlID0gW2JtLm9mZnNldCwgb2Zmc2V0LCBjb21tZW50RW5kID8/IG9mZnNldF07XG4gICAgcmV0dXJuIG1hcDtcbn1cblxuZXhwb3J0cy5yZXNvbHZlQmxvY2tNYXAgPSByZXNvbHZlQmxvY2tNYXA7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsa0JBQWtCLENBQUM7QUFDdEMsSUFBSUMsT0FBTyxHQUFHRCxPQUFPLENBQUMscUJBQXFCLENBQUM7QUFDNUMsSUFBSUUsWUFBWSxHQUFHRixPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFDaEQsSUFBSUcsbUJBQW1CLEdBQUdILE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQztBQUMvRCxJQUFJSSxtQkFBbUIsR0FBR0osT0FBTyxDQUFDLDZCQUE2QixDQUFDO0FBQ2hFLElBQUlLLGVBQWUsR0FBR0wsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0FBRXZELE1BQU1NLFdBQVcsR0FBRyxpREFBaUQ7QUFDckUsU0FBU0MsZUFBZUEsQ0FBQztFQUFFQyxXQUFXO0VBQUVDO0FBQWlCLENBQUMsRUFBRUMsR0FBRyxFQUFFQyxFQUFFLEVBQUVDLE9BQU8sRUFBRTtFQUMxRSxNQUFNQyxHQUFHLEdBQUcsSUFBSVosT0FBTyxDQUFDQSxPQUFPLENBQUNTLEdBQUcsQ0FBQ0ksTUFBTSxDQUFDO0VBQzNDLElBQUlKLEdBQUcsQ0FBQ0ssTUFBTSxFQUNWTCxHQUFHLENBQUNLLE1BQU0sR0FBRyxLQUFLO0VBQ3RCLElBQUlDLE1BQU0sR0FBR0wsRUFBRSxDQUFDSyxNQUFNO0VB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