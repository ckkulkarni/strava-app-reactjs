0ef9d8b2417d0156d7349a92871a20a6
/**
 * The MIT License (MIT)
 * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>
 */

'use strict';

var UPPER_A_CP = 'A'.codePointAt(0);
var UPPER_Z_CP = 'Z'.codePointAt(0);
var LOWER_A_CP = 'a'.codePointAt(0);
var LOWER_Z_CP = 'z'.codePointAt(0);
var DIGIT_0_CP = '0'.codePointAt(0);
var DIGIT_9_CP = '9'.codePointAt(0);

/**
 * A regexp-tree plugin to transform coded chars into simple chars.
 *
 * \u0061 -> a
 */
module.exports = {
  Char: function Char(path) {
    var node = path.node,
      parent = path.parent;
    if (isNaN(node.codePoint) || node.kind === 'simple') {
      return;
    }
    if (parent.type === 'ClassRange') {
      if (!isSimpleRange(parent)) {
        return;
      }
    }
    if (!isPrintableASCIIChar(node.codePoint)) {
      return;
    }
    var symbol = String.fromCodePoint(node.codePoint);
    var newChar = {
      type: 'Char',
      kind: 'simple',
      value: symbol,
      symbol: symbol,
      codePoint: node.codePoint
    };
    if (needsEscape(symbol, parent.type)) {
      newChar.escaped = true;
    }
    path.replace(newChar);
  }
};

/**
 * Checks if a range is included either in 0-9, a-z or A-Z
 * @param classRange
 * @returns {boolean}
 */
function isSimpleRange(classRange) {
  var from = classRange.from,
    to = classRange.to;
  return from.codePoint >= DIGIT_0_CP && from.codePoint <= DIGIT_9_CP && to.codePoint >= DIGIT_0_CP && to.codePoint <= DIGIT_9_CP || from.codePoint >= UPPER_A_CP && from.codePoint <= UPPER_Z_CP && to.codePoint >= UPPER_A_CP && to.codePoint <= UPPER_Z_CP || from.codePoint >= LOWER_A_CP && from.codePoint <= LOWER_Z_CP && to.codePoint >= LOWER_A_CP && to.codePoint <= LOWER_Z_CP;
}

/**
 * Checks if a code point in the range of printable ASCII chars
 * (DEL char excluded)
 * @param codePoint
 * @returns {boolean}
 */
function isPrintableASCIIChar(codePoint) {
  return codePoint >= 0x20 && codePoint <= 0x7e;
}
function needsEscape(symbol, parentType) {
  if (parentType === 'ClassRange' || parentType === 'CharacterClass') {
    return /[\]\\^-]/.test(symbol);
  }
  return /[*[()+?^$./\\|{}]/.test(symbol);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVUFBFUl9BX0NQIiwiY29kZVBvaW50QXQiLCJVUFBFUl9aX0NQIiwiTE9XRVJfQV9DUCIsIkxPV0VSX1pfQ1AiLCJESUdJVF8wX0NQIiwiRElHSVRfOV9DUCIsIm1vZHVsZSIsImV4cG9ydHMiLCJDaGFyIiwicGF0aCIsIm5vZGUiLCJwYXJlbnQiLCJpc05hTiIsImNvZGVQb2ludCIsImtpbmQiLCJ0eXBlIiwiaXNTaW1wbGVSYW5nZSIsImlzUHJpbnRhYmxlQVNDSUlDaGFyIiwic3ltYm9sIiwiU3RyaW5nIiwiZnJvbUNvZGVQb2ludCIsIm5ld0NoYXIiLCJ2YWx1ZSIsIm5lZWRzRXNjYXBlIiwiZXNjYXBlZCIsInJlcGxhY2UiLCJjbGFzc1JhbmdlIiwiZnJvbSIsInRvIiwicGFyZW50VHlwZSIsInRlc3QiXSwic291cmNlcyI6WyJjaGFyLWNvZGUtdG8tc2ltcGxlLWNoYXItdHJhbnNmb3JtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCBEbWl0cnkgU29zaG5pa292IDxkbWl0cnkuc29zaG5pa292QGdtYWlsLmNvbT5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVUFBFUl9BX0NQID0gJ0EnLmNvZGVQb2ludEF0KDApO1xudmFyIFVQUEVSX1pfQ1AgPSAnWicuY29kZVBvaW50QXQoMCk7XG52YXIgTE9XRVJfQV9DUCA9ICdhJy5jb2RlUG9pbnRBdCgwKTtcbnZhciBMT1dFUl9aX0NQID0gJ3onLmNvZGVQb2ludEF0KDApO1xudmFyIERJR0lUXzBfQ1AgPSAnMCcuY29kZVBvaW50QXQoMCk7XG52YXIgRElHSVRfOV9DUCA9ICc5Jy5jb2RlUG9pbnRBdCgwKTtcblxuLyoqXG4gKiBBIHJlZ2V4cC10cmVlIHBsdWdpbiB0byB0cmFuc2Zvcm0gY29kZWQgY2hhcnMgaW50byBzaW1wbGUgY2hhcnMuXG4gKlxuICogXFx1MDA2MSAtPiBhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICBDaGFyOiBmdW5jdGlvbiBDaGFyKHBhdGgpIHtcbiAgICB2YXIgbm9kZSA9IHBhdGgubm9kZSxcbiAgICAgICAgcGFyZW50ID0gcGF0aC5wYXJlbnQ7XG5cbiAgICBpZiAoaXNOYU4obm9kZS5jb2RlUG9pbnQpIHx8IG5vZGUua2luZCA9PT0gJ3NpbXBsZScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocGFyZW50LnR5cGUgPT09ICdDbGFzc1JhbmdlJykge1xuICAgICAgaWYgKCFpc1NpbXBsZVJhbmdlKHBhcmVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghaXNQcmludGFibGVBU0NJSUNoYXIobm9kZS5jb2RlUG9pbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHN5bWJvbCA9IFN0cmluZy5mcm9tQ29kZVBvaW50KG5vZGUuY29kZVBvaW50KTtcbiAgICB2YXIgbmV3Q2hhciA9IHtcbiAgICAgIHR5cGU6ICdDaGFyJyxcbiAgICAgIGtpbmQ6ICdzaW1wbGUnLFxuICAgICAgdmFsdWU6IHN5bWJvbCxcbiAgICAgIHN5bWJvbDogc3ltYm9sLFxuICAgICAgY29kZVBvaW50OiBub2RlLmNvZGVQb2ludFxuICAgIH07XG4gICAgaWYgKG5lZWRzRXNjYXBlKHN5bWJvbCwgcGFyZW50LnR5cGUpKSB7XG4gICAgICBuZXdDaGFyLmVzY2FwZWQgPSB0cnVlO1xuICAgIH1cbiAgICBwYXRoLnJlcGxhY2UobmV3Q2hhcik7XG4gIH1cbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgcmFuZ2UgaXMgaW5jbHVkZWQgZWl0aGVyIGluIDAtOSwgYS16IG9yIEEtWlxuICogQHBhcmFtIGNsYXNzUmFuZ2VcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1NpbXBsZVJhbmdlKGNsYXNzUmFuZ2UpIHtcbiAgdmFyIGZyb20gPSBjbGFzc1JhbmdlLmZyb20sXG4gICAgICB0byA9IGNsYXNzUmFuZ2UudG87XG5cbiAgcmV0dXJuIGZyb20uY29kZVBvaW50ID49IERJR0lUXzBfQ1AgJiYgZnJvbS5jb2RlUG9pbnQgPD0gRElHSVRfOV9DUCAmJiB0by5jb2RlUG9pbnQgPj0gRElHSVRfMF9DUCAmJiB0by5jb2RlUG9pbnQgPD0gRElHSVRfOV9DUCB8fCBmcm9tLmNvZGVQb2ludCA+PSBVUFBFUl9BX0NQICYmIGZyb20uY29kZVBvaW50IDw9IFVQUEVSX1pfQ1AgJiYgdG8uY29kZVBvaW50ID49IFVQUEVSX0FfQ1AgJiYgdG8uY29kZVBvaW50IDw9IFVQUEVSX1pfQ1AgfHwgZnJvbS5jb2RlUG9pbnQgPj0gTE9XRVJfQV9DUCAmJiBmcm9tLmNvZGVQb2ludCA8PSBMT1dFUl9aX0NQICYmIHRvLmNvZGVQb2ludCA+PSBMT1dFUl9BX0NQICYmIHRvLmNvZGVQb2ludCA8PSBMT1dFUl9aX0NQO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGNvZGUgcG9pbnQgaW4gdGhlIHJhbmdlIG9mIHByaW50YWJsZSBBU0NJSSBjaGFyc1xuICogKERFTCBjaGFyIGV4Y2x1ZGVkKVxuICogQHBhcmFtIGNvZGVQb2ludFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzUHJpbnRhYmxlQVNDSUlDaGFyKGNvZGVQb2ludCkge1xuICByZXR1cm4gY29kZVBvaW50ID49IDB4MjAgJiYgY29kZVBvaW50IDw9IDB4N2U7XG59XG5cbmZ1bmN0aW9uIG5lZWRzRXNjYXBlKHN5bWJvbCwgcGFyZW50VHlwZSkge1xuICBpZiAocGFyZW50VHlwZSA9PT0gJ0NsYXNzUmFuZ2UnIHx8IHBhcmVudFR5cGUgPT09ICdDaGFyYWN0ZXJDbGFzcycpIHtcbiAgICByZXR1cm4gKC9bXFxdXFxcXF4tXS8udGVzdChzeW1ib2wpXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoL1sqWygpKz9eJC4vXFxcXHx7fV0vLnRlc3Qoc3ltYm9sKVxuICApO1xufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFD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