{"version":3,"names":["storage_1","require","Exclude","options","object","propertyName","defaultMetadataStorage","addExcludeMetadata","target","Function","constructor","exports"],"sources":["../../../src/decorators/exclude.decorator.ts"],"sourcesContent":["import { defaultMetadataStorage } from '../storage';\nimport { ExcludeOptions } from '../interfaces';\n\n/**\n * Marks the given class or property as excluded. By default the property is excluded in both\n * constructorToPlain and plainToConstructor transformations. It can be limited to only one direction\n * via using the `toPlainOnly` or `toClassOnly` option.\n *\n * Can be applied to class definitions and properties.\n */\nexport function Exclude(options: ExcludeOptions = {}): PropertyDecorator & ClassDecorator {\n  /**\n   * NOTE: The `propertyName` property must be marked as optional because\n   * this decorator used both as a class and a property decorator and the\n   * Typescript compiler will freak out if we make it mandatory as a class\n   * decorator only receives one parameter.\n   */\n  return function (object: any, propertyName?: string | Symbol): void {\n    defaultMetadataStorage.addExcludeMetadata({\n      target: object instanceof Function ? object : object.constructor,\n      propertyName: propertyName as string,\n      options,\n    });\n  };\n}\n"],"mappings":";;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AAGA;;;;;;;AAOA,SAAgBC,OAAOA,CAACC,OAAA,GAA0B,EAAE;EAClD;;;;;;EAMA,OAAO,UAAUC,MAAW,EAAEC,YAA8B;IAC1DL,SAAA,CAAAM,sBAAsB,CAACC,kBAAkB,CAAC;MACxCC,MAAM,EAAEJ,MAAM,YAAYK,QAAQ,GAAGL,MAAM,GAAGA,MAAM,CAACM,WAAW;MAChEL,YAAY,EAAEA,YAAsB;MACpCF;KACD,CAAC;EACJ,CAAC;AACH;AAdAQ,OAAA,CAAAT,OAAA,GAAAA,OAAA"}