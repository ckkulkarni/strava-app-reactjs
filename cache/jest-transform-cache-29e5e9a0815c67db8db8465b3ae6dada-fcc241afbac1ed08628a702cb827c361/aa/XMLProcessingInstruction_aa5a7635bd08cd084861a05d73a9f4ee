3c2cd1d8893deee688c3f5c48132f98b
"use strict";

// Generated by CoffeeScript 2.4.1
(function () {
  var NodeType, XMLCharacterData, XMLProcessingInstruction;
  NodeType = require('./NodeType');
  XMLCharacterData = require('./XMLCharacterData');

  // Represents a processing instruction
  module.exports = XMLProcessingInstruction = class XMLProcessingInstruction extends XMLCharacterData {
    // Initializes a new instance of `XMLProcessingInstruction`

    // `parent` the parent node
    // `target` instruction target
    // `value` instruction value
    constructor(parent, target, value) {
      super(parent);
      if (target == null) {
        throw new Error("Missing instruction target. " + this.debugInfo());
      }
      this.type = NodeType.ProcessingInstruction;
      this.target = this.stringify.insTarget(target);
      this.name = this.target;
      if (value) {
        this.value = this.stringify.insValue(value);
      }
    }

    // Creates and returns a deep clone of `this`
    clone() {
      return Object.create(this);
    }

    // Converts the XML fragment to string

    // `options.pretty` pretty prints the result
    // `options.indent` indentation for pretty print
    // `options.offset` how many indentations to add to every line for pretty print
    // `options.newline` newline sequence for pretty print
    toString(options) {
      return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));
    }
    isEqualNode(node) {
      if (!super.isEqualNode(node)) {
        return false;
      }
      if (node.target !== this.target) {
        return false;
      }
      return true;
    }
  };
}).call(void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlVHlwZSIsIlhNTENoYXJhY3RlckRhdGEiLCJYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImNvbnN0cnVjdG9yIiwicGFyZW50IiwidGFyZ2V0IiwidmFsdWUiLCJFcnJvciIsImRlYnVnSW5mbyIsInR5cGUiLCJQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCJzdHJpbmdpZnkiLCJpbnNUYXJnZXQiLCJuYW1lIiwiaW5zVmFsdWUiLCJjbG9uZSIsIk9iamVjdCIsImNyZWF0ZSIsInRvU3RyaW5nIiwib3B0aW9ucyIsIndyaXRlciIsInByb2Nlc3NpbmdJbnN0cnVjdGlvbiIsImZpbHRlck9wdGlvbnMiLCJpc0VxdWFsTm9kZSIsIm5vZGUiLCJjYWxsIl0sInNvdXJjZXMiOlsiWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMi40LjFcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxDaGFyYWN0ZXJEYXRhLCBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb247XG5cbiAgTm9kZVR5cGUgPSByZXF1aXJlKCcuL05vZGVUeXBlJyk7XG5cbiAgWE1MQ2hhcmFjdGVyRGF0YSA9IHJlcXVpcmUoJy4vWE1MQ2hhcmFjdGVyRGF0YScpO1xuXG4gIC8vIFJlcHJlc2VudHMgYSBwcm9jZXNzaW5nIGluc3RydWN0aW9uXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gY2xhc3MgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uIGV4dGVuZHMgWE1MQ2hhcmFjdGVyRGF0YSB7XG4gICAgLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbmBcblxuICAgIC8vIGBwYXJlbnRgIHRoZSBwYXJlbnQgbm9kZVxuICAgIC8vIGB0YXJnZXRgIGluc3RydWN0aW9uIHRhcmdldFxuICAgIC8vIGB2YWx1ZWAgaW5zdHJ1Y3Rpb24gdmFsdWVcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQsIHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIHN1cGVyKHBhcmVudCk7XG4gICAgICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBpbnN0cnVjdGlvbiB0YXJnZXQuIFwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb247XG4gICAgICB0aGlzLnRhcmdldCA9IHRoaXMuc3RyaW5naWZ5Lmluc1RhcmdldCh0YXJnZXQpO1xuICAgICAgdGhpcy5uYW1lID0gdGhpcy50YXJnZXQ7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5Lmluc1ZhbHVlKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDcmVhdGVzIGFuZCByZXR1cm5zIGEgZGVlcCBjbG9uZSBvZiBgdGhpc2BcbiAgICBjbG9uZSgpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH1cblxuICAgIC8vIENvbnZlcnRzIHRoZSBYTUwgZnJhZ21lbnQgdG8gc3RyaW5nXG5cbiAgICAvLyBgb3B0aW9ucy5wcmV0dHlgIHByZXR0eSBwcmludHMgdGhlIHJlc3VsdFxuICAgIC8vIGBvcHRpb25zLmluZGVudGAgaW5kZW50YXRpb24gZm9yIHByZXR0eSBwcmludFxuICAgIC8vIGBvcHRpb25zLm9mZnNldGAgaG93IG1hbnkgaW5kZW50YXRpb25zIHRvIGFkZCB0byBldmVyeSBsaW5lIGZvciBwcmV0dHkgcHJpbnRcbiAgICAvLyBgb3B0aW9ucy5uZXdsaW5lYCBuZXdsaW5lIHNlcXVlbmNlIGZvciBwcmV0dHkgcHJpbnRcbiAgICB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5wcm9jZXNzaW5nSW5zdHJ1Y3Rpb24odGhpcywgdGhpcy5vcHRpb25zLndyaXRlci5maWx0ZXJPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9XG5cbiAgICBpc0VxdWFsTm9kZShub2RlKSB7XG4gICAgICBpZiAoIXN1cGVyLmlzRXF1YWxOb2RlKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLnRhcmdldCAhPT0gdGhpcy50YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSxDQUFDLFlBQVc7RUFDVixJQUFJQSxRQUFRLEVBQUVDLGdCQUFnQixFQUFFQyx3QkFBd0I7RUFFeERGLFFBQVEsR0FBR0csT0FBTyxDQUFDLFlBQVksQ0FBQztFQUVoQ0YsZ0JBQWdCLEdBQUdFLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQzs7RUFFaEQ7RUFDQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUdILHdCQUF3QixHQUFHLE1BQU1BLHdCQUF3QixTQUFTRCxnQkFBZ0IsQ0FBQztJQUNsRzs7SUFFQTtJQUNBO0lBQ0E7SUFDQUssV0FBV0EsQ0FBQ0MsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLEtBQUssRUFBRTtNQUNqQyxLQUFLLENBQUNGLE1BQU0sQ0FBQztNQUNiLElBQUlDLE1BQU0sSUFBSSxJQUFJLEVBQUU7UUFDbEIsTUFBTSxJQUFJRSxLQUFLLENBQUMsOEJBQThCLEdBQUcsSUFBSSxDQUFDQyxTQUFTLEVBQUUsQ0FBQztNQUNwRTtNQUNBLElBQUksQ0FBQ0MsSUFBSSxHQUFHWixRQUFRLENBQUNhLHFCQUFxQjtNQUMxQyxJQUFJLENBQUNMLE1BQU0sR0FBRyxJQUFJLENBQUNNLFNBQVMsQ0FBQ0MsU0FBUyxDQUFDUCxNQUFNLENBQUM7TUFDOUMsSUFBSSxDQUFDUSxJQUFJLEdBQUcsSUFBSSxDQUFDUixNQUFNO01BQ3ZCLElBQUlDLEtBQUssRUFBRTtRQUNULElBQUksQ0FBQ0EsS0FBSyxHQUFHLElBQUksQ0FBQ0ssU0FBUyxDQUFDRyxRQUFRLENBQUNSLEtBQUssQ0FBQztNQUM3QztJQUNGOztJQUVBO0lBQ0FTLEtBQUtBLENBQUEsRUFBRztNQUNOLE9BQU9DLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLElBQUksQ0FBQztJQUM1Qjs7SUFFQTs7SUFFQTtJQUNBO0lBQ0E7SUFDQTtJQUNBQyxRQUFRQSxDQUFDQyxPQUFPLEVBQUU7TUFDaEIsT0FBTyxJQUFJLENBQUNBLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDRixPQUFPLENBQUNDLE1BQU0sQ0FBQ0UsYUFBYSxDQUFDSCxPQUFPLENBQUMsQ0FBQztJQUNwRztJQUVBSSxXQUFXQSxDQUFDQyxJQUFJLEVBQUU7TUFDaEIsSUFBSSxDQUFDLEtBQUssQ0FBQ0QsV0FBVyxDQUFDQyxJQUFJLENBQUMsRUFBRTtRQUM1QixPQUFPLEtBQUs7TUFDZDtNQUNBLElBQUlBLElBQUksQ0FBQ25CLE1BQU0sS0FBSyxJQUFJLENBQUNBLE1BQU0sRUFBRTtRQUMvQixPQUFPLEtBQUs7TUFDZDtNQUNBLE9BQU8sSUFBSTtJQUNiO0VBRUYsQ0FBQztBQUVILENBQUMsRUFBRW9CLElBQUksUUFBTSJ9