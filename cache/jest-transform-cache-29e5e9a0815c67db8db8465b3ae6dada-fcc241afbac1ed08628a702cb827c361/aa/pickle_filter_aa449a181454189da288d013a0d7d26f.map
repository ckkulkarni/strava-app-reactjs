{"version":3,"names":["path_1","__importDefault","require","tag_expressions_1","gherkin_document_parser_1","value_checker_1","FEATURE_LINENUM_REGEXP","PickleFilter","constructor","cwd","featurePaths","names","tagExpression","lineFilter","PickleLineFilter","nameFilter","PickleNameFilter","tagFilter","PickleTagFilter","matches","gherkinDocument","pickle","matchesAnyLine","matchesAnyName","matchesAllTagExpressions","exports","default","featureUriToLinesMapping","getFeatureUriToLinesMapping","mapping","forEach","featurePath","match","exec","doesHaveValue","uri","isAbsolute","relative","normalize","linesExpression","doesNotHaveValue","slice","split","line","push","parseInt","linesToMatch","gherkinScenarioLocationMap","getGherkinScenarioLocationMap","pickleLines","Set","astNodeIds","map","sourceId","linesIntersection","filter","x","has","length","some","name","tagExpressionNode","evaluate","tags"],"sources":["../src/pickle_filter.ts"],"sourcesContent":["import path from 'path'\nimport parse from '@cucumber/tag-expressions'\nimport { getGherkinScenarioLocationMap } from './formatter/helpers/gherkin_document_parser'\nimport { doesHaveValue, doesNotHaveValue } from './value_checker'\nimport * as messages from '@cucumber/messages'\nimport IGherkinDocument = messages.GherkinDocument\nimport IPickle = messages.Pickle\n\nconst FEATURE_LINENUM_REGEXP = /^(.*?)((?::[\\d]+)+)?$/\n\nexport interface IPickleFilterOptions {\n  cwd: string\n  featurePaths?: string[]\n  names?: string[]\n  tagExpression?: string\n}\n\nexport interface IMatchesAnyLineRequest {\n  gherkinDocument: messages.GherkinDocument\n  pickle: messages.Pickle\n}\n\nexport default class PickleFilter {\n  private readonly lineFilter: PickleLineFilter\n  private readonly nameFilter: PickleNameFilter\n  private readonly tagFilter: PickleTagFilter\n\n  constructor({\n    cwd,\n    featurePaths,\n    names,\n    tagExpression,\n  }: IPickleFilterOptions) {\n    this.lineFilter = new PickleLineFilter(cwd, featurePaths)\n    this.nameFilter = new PickleNameFilter(names)\n    this.tagFilter = new PickleTagFilter(tagExpression)\n  }\n\n  matches({\n    gherkinDocument,\n    pickle,\n  }: {\n    gherkinDocument: IGherkinDocument\n    pickle: IPickle\n  }): boolean {\n    return (\n      this.lineFilter.matchesAnyLine({ gherkinDocument, pickle }) &&\n      this.nameFilter.matchesAnyName(pickle) &&\n      this.tagFilter.matchesAllTagExpressions(pickle)\n    )\n  }\n}\n\nexport class PickleLineFilter {\n  private readonly featureUriToLinesMapping: Record<string, number[]>\n\n  constructor(cwd: string, featurePaths: string[] = []) {\n    this.featureUriToLinesMapping = this.getFeatureUriToLinesMapping({\n      cwd,\n      featurePaths,\n    })\n  }\n\n  getFeatureUriToLinesMapping({\n    cwd,\n    featurePaths,\n  }: {\n    cwd: string\n    featurePaths: string[]\n  }): Record<string, number[]> {\n    const mapping: Record<string, number[]> = {}\n    featurePaths.forEach((featurePath) => {\n      const match = FEATURE_LINENUM_REGEXP.exec(featurePath)\n      if (doesHaveValue(match)) {\n        let uri = match[1]\n        if (path.isAbsolute(uri)) {\n          uri = path.relative(cwd, uri)\n        } else {\n          uri = path.normalize(uri)\n        }\n        const linesExpression = match[2]\n        if (doesHaveValue(linesExpression)) {\n          if (doesNotHaveValue(mapping[uri])) {\n            mapping[uri] = []\n          }\n          linesExpression\n            .slice(1)\n            .split(':')\n            .forEach((line) => {\n              mapping[uri].push(parseInt(line))\n            })\n        }\n      }\n    })\n    return mapping\n  }\n\n  matchesAnyLine({ gherkinDocument, pickle }: IMatchesAnyLineRequest): boolean {\n    const uri = path.normalize(pickle.uri)\n    const linesToMatch = this.featureUriToLinesMapping[uri]\n    if (doesHaveValue(linesToMatch)) {\n      const gherkinScenarioLocationMap =\n        getGherkinScenarioLocationMap(gherkinDocument)\n      const pickleLines = new Set(\n        pickle.astNodeIds.map(\n          (sourceId) => gherkinScenarioLocationMap[sourceId].line\n        )\n      )\n      const linesIntersection = linesToMatch.filter((x) => pickleLines.has(x))\n      return linesIntersection.length > 0\n    }\n    return true\n  }\n}\n\nexport class PickleNameFilter {\n  private readonly names: string[]\n\n  constructor(names: string[] = []) {\n    this.names = names\n  }\n\n  matchesAnyName(pickle: messages.Pickle): boolean {\n    if (this.names.length === 0) {\n      return true\n    }\n    return this.names.some((name) => pickle.name.match(name))\n  }\n}\n\nexport class PickleTagFilter {\n  private readonly tagExpressionNode: any // cucumber-tag-expressions does not export interface\n\n  constructor(tagExpression: string) {\n    if (doesHaveValue(tagExpression) && tagExpression !== '') {\n      this.tagExpressionNode = parse(tagExpression)\n    }\n  }\n\n  matchesAllTagExpressions(pickle: messages.Pickle): boolean {\n    if (doesNotHaveValue(this.tagExpressionNode)) {\n      return true\n    }\n    return this.tagExpressionNode.evaluate(pickle.tags.map((x) => x.name))\n  }\n}\n"],"mappings":";;;;;;;;;;;AAAA,MAAAA,MAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,iBAAA,GAAAF,eAAA,CAAAC,OAAA;AACA,MAAAE,yBAAA,GAAAF,OAAA;AACA,MAAAG,eAAA,GAAAH,OAAA;AAKA,MAAMI,sBAAsB,GAAG,uBAAuB;AActD,MAAqBC,YAAY;EAK/BC,YAAY;IACVC,GAAG;IACHC,YAAY;IACZC,KAAK;IACLC;EAAa,CACQ;IACrB,IAAI,CAACC,UAAU,GAAG,IAAIC,gBAAgB,CAACL,GAAG,EAAEC,YAAY,CAAC;IACzD,IAAI,CAACK,UAAU,GAAG,IAAIC,gBAAgB,CAACL,KAAK,CAAC;IAC7C,IAAI,CAACM,SAAS,GAAG,IAAIC,eAAe,CAACN,aAAa,CAAC;EACrD;EAEAO,OAAOA,CAAC;IACNC,eAAe;IACfC;EAAM,CAIP;IACC,OACE,IAAI,CAACR,UAAU,CAACS,cAAc,CAAC;MAAEF,eAAe;MAAEC;IAAM,CAAE,CAAC,IAC3D,IAAI,CAACN,UAAU,CAACQ,cAAc,CAACF,MAAM,CAAC,IACtC,IAAI,CAACJ,SAAS,CAACO,wBAAwB,CAACH,MAAM,CAAC;EAEnD;;AA5BFI,OAAA,CAAAC,OAAA,GAAAnB,YAAA;AA+BA,MAAaO,gBAAgB;EAG3BN,YAAYC,GAAW,EAAEC,YAAA,GAAyB,EAAE;IAClD,IAAI,CAACiB,wBAAwB,GAAG,IAAI,CAACC,2BAA2B,CAAC;MAC/DnB,GAAG;MACHC;KACD,CAAC;EACJ;EAEAkB,2BAA2BA,CAAC;IAC1BnB,GAAG;IACHC;EAAY,CAIb;IACC,MAAMmB,OAAO,GAA6B,EAAE;IAC5CnB,YAAY,CAACoB,OAAO,CAAEC,WAAW,IAAI;MACnC,MAAMC,KAAK,GAAG1B,sBAAsB,CAAC2B,IAAI,CAACF,WAAW,CAAC;MACtD,IAAI,IAAA1B,eAAA,CAAA6B,aAAa,EAACF,KAAK,CAAC,EAAE;QACxB,IAAIG,GAAG,GAAGH,KAAK,CAAC,CAAC,CAAC;QAClB,IAAIhC,MAAA,CAAA0B,OAAI,CAACU,UAAU,CAACD,GAAG,CAAC,EAAE;UACxBA,GAAG,GAAGnC,MAAA,CAAA0B,OAAI,CAACW,QAAQ,CAAC5B,GAAG,EAAE0B,GAAG,CAAC;SAC9B,MAAM;UACLA,GAAG,GAAGnC,MAAA,CAAA0B,OAAI,CAACY,SAAS,CAACH,GAAG,CAAC;;QAE3B,MAAMI,eAAe,GAAGP,KAAK,CAAC,CAAC,CAAC;QAChC,IAAI,IAAA3B,eAAA,CAAA6B,aAAa,EAACK,eAAe,CAAC,EAAE;UAClC,IAAI,IAAAlC,eAAA,CAAAmC,gBAAgB,EAACX,OAAO,CAACM,GAAG,CAAC,CAAC,EAAE;YAClCN,OAAO,CAACM,GAAG,CAAC,GAAG,EAAE;;UAEnBI,eAAe,CACZE,KAAK,CAAC,CAAC,CAAC,CACRC,KAAK,CAAC,GAAG,CAAC,CACVZ,OAAO,CAAEa,IAAI,IAAI;YAChBd,OAAO,CAACM,GAAG,CAAC,CAACS,IAAI,CAACC,QAAQ,CAACF,IAAI,CAAC,CAAC;UACnC,CAAC,CAAC;;;IAGV,CAAC,CAAC;IACF,OAAOd,OAAO;EAChB;EAEAP,cAAcA,CAAC;IAAEF,eAAe;IAAEC;EAAM,CAA0B;IAChE,MAAMc,GAAG,GAAGnC,MAAA,CAAA0B,OAAI,CAACY,SAAS,CAACjB,MAAM,CAACc,GAAG,CAAC;IACtC,MAAMW,YAAY,GAAG,IAAI,CAACnB,wBAAwB,CAACQ,GAAG,CAAC;IACvD,IAAI,IAAA9B,eAAA,CAAA6B,aAAa,EAACY,YAAY,CAAC,EAAE;MAC/B,MAAMC,0BAA0B,GAC9B,IAAA3C,yBAAA,CAAA4C,6BAA6B,EAAC5B,eAAe,CAAC;MAChD,MAAM6B,WAAW,GAAG,IAAIC,GAAG,CACzB7B,MAAM,CAAC8B,UAAU,CAACC,GAAG,CAClBC,QAAQ,IAAKN,0BAA0B,CAACM,QAAQ,CAAC,CAACV,IAAI,CACxD,CACF;MACD,MAAMW,iBAAiB,GAAGR,YAAY,CAACS,MAAM,CAAEC,CAAC,IAAKP,WAAW,CAACQ,GAAG,CAACD,CAAC,CAAC,CAAC;MACxE,OAAOF,iBAAiB,CAACI,MAAM,GAAG,CAAC;;IAErC,OAAO,IAAI;EACb;;AA3DFjC,OAAA,CAAAX,gBAAA,GAAAA,gBAAA;AA8DA,MAAaE,gBAAgB;EAG3BR,YAAYG,KAAA,GAAkB,EAAE;IAC9B,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EAEAY,cAAcA,CAACF,MAAuB;IACpC,IAAI,IAAI,CAACV,KAAK,CAAC+C,MAAM,KAAK,CAAC,EAAE;MAC3B,OAAO,IAAI;;IAEb,OAAO,IAAI,CAAC/C,KAAK,CAACgD,IAAI,CAAEC,IAAI,IAAKvC,MAAM,CAACuC,IAAI,CAAC5B,KAAK,CAAC4B,IAAI,CAAC,CAAC;EAC3D;;AAZFnC,OAAA,CAAAT,gBAAA,GAAAA,gBAAA;AAeA,MAAaE,eAAe;EAG1BV,YAAYI,aAAqB;IAC/B,IAAI,IAAAP,eAAA,CAAA6B,aAAa,EAACtB,aAAa,CAAC,IAAIA,aAAa,KAAK,EAAE,EAAE;MACxD,IAAI,CAACiD,iBAAiB,GAAG,IAAA1D,iBAAA,CAAAuB,OAAK,EAACd,aAAa,CAAC;;EAEjD;EAEAY,wBAAwBA,CAACH,MAAuB;IAC9C,IAAI,IAAAhB,eAAA,CAAAmC,gBAAgB,EAAC,IAAI,CAACqB,iBAAiB,CAAC,EAAE;MAC5C,OAAO,IAAI;;IAEb,OAAO,IAAI,CAACA,iBAAiB,CAACC,QAAQ,CAACzC,MAAM,CAAC0C,IAAI,CAACX,GAAG,CAAEI,CAAC,IAAKA,CAAC,CAACI,IAAI,CAAC,CAAC;EACxE;;AAdFnC,OAAA,CAAAP,eAAA,GAAAA,eAAA"}