d0dc1b06cc3d38961ee27082ebbb13be
'use strict';

var cstScalar = require('./cst-scalar.js');
var cstStringify = require('./cst-stringify.js');
var cstVisit = require('./cst-visit.js');

/** The byte order mark */
const BOM = '\u{FEFF}';
/** Start of doc-mode */
const DOCUMENT = '\x02'; // C0: Start of Text
/** Unexpected end of flow-mode */
const FLOW_END = '\x18'; // C0: Cancel
/** Next token is a scalar value */
const SCALAR = '\x1f'; // C0: Unit Separator
/** @returns `true` if `token` is a flow or block collection */
const isCollection = token => !!token && 'items' in token;
/** @returns `true` if `token` is a flow or block scalar; not an alias */
const isScalar = token => !!token && (token.type === 'scalar' || token.type === 'single-quoted-scalar' || token.type === 'double-quoted-scalar' || token.type === 'block-scalar');
/* istanbul ignore next */
/** Get a printable representation of a lexer token */
function prettyToken(token) {
  switch (token) {
    case BOM:
      return '<BOM>';
    case DOCUMENT:
      return '<DOC>';
    case FLOW_END:
      return '<FLOW_END>';
    case SCALAR:
      return '<SCALAR>';
    default:
      return JSON.stringify(token);
  }
}
/** Identify the type of a lexer token. May return `null` for unknown tokens. */
function tokenType(source) {
  switch (source) {
    case BOM:
      return 'byte-order-mark';
    case DOCUMENT:
      return 'doc-mode';
    case FLOW_END:
      return 'flow-error-end';
    case SCALAR:
      return 'scalar';
    case '---':
      return 'doc-start';
    case '...':
      return 'doc-end';
    case '':
    case '\n':
    case '\r\n':
      return 'newline';
    case '-':
      return 'seq-item-ind';
    case '?':
      return 'explicit-key-ind';
    case ':':
      return 'map-value-ind';
    case '{':
      return 'flow-map-start';
    case '}':
      return 'flow-map-end';
    case '[':
      return 'flow-seq-start';
    case ']':
      return 'flow-seq-end';
    case ',':
      return 'comma';
  }
  switch (source[0]) {
    case ' ':
    case '\t':
      return 'space';
    case '#':
      return 'comment';
    case '%':
      return 'directive-line';
    case '*':
      return 'alias';
    case '&':
      return 'anchor';
    case '!':
      return 'tag';
    case "'":
      return 'single-quoted-scalar';
    case '"':
      return 'double-quoted-scalar';
    case '|':
    case '>':
      return 'block-scalar-header';
  }
  return null;
}
exports.createScalarToken = cstScalar.createScalarToken;
exports.resolveAsScalar = cstScalar.resolveAsScalar;
exports.setScalarValue = cstScalar.setScalarValue;
exports.stringify = cstStringify.stringify;
exports.visit = cstVisit.visit;
exports.BOM = BOM;
exports.DOCUMENT = DOCUMENT;
exports.FLOW_END = FLOW_END;
exports.SCALAR = SCALAR;
exports.isCollection = isCollection;
exports.isScalar = isScalar;
exports.prettyToken = prettyToken;
exports.tokenType = tokenType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjc3RTY2FsYXIiLCJyZXF1aXJlIiwiY3N0U3RyaW5naWZ5IiwiY3N0VmlzaXQiLCJCT00iLCJET0NVTUVOVCIsIkZMT1dfRU5EIiwiU0NBTEFSIiwiaXNDb2xsZWN0aW9uIiwidG9rZW4iLCJpc1NjYWxhciIsInR5cGUiLCJwcmV0dHlUb2tlbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b2tlblR5cGUiLCJzb3VyY2UiLCJleHBvcnRzIiwiY3JlYXRlU2NhbGFyVG9rZW4iLCJyZXNvbHZlQXNTY2FsYXIiLCJzZXRTY2FsYXJWYWx1ZSIsInZpc2l0Il0sInNvdXJjZXMiOlsiY3N0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGNzdFNjYWxhciA9IHJlcXVpcmUoJy4vY3N0LXNjYWxhci5qcycpO1xudmFyIGNzdFN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vY3N0LXN0cmluZ2lmeS5qcycpO1xudmFyIGNzdFZpc2l0ID0gcmVxdWlyZSgnLi9jc3QtdmlzaXQuanMnKTtcblxuLyoqIFRoZSBieXRlIG9yZGVyIG1hcmsgKi9cbmNvbnN0IEJPTSA9ICdcXHV7RkVGRn0nO1xuLyoqIFN0YXJ0IG9mIGRvYy1tb2RlICovXG5jb25zdCBET0NVTUVOVCA9ICdcXHgwMic7IC8vIEMwOiBTdGFydCBvZiBUZXh0XG4vKiogVW5leHBlY3RlZCBlbmQgb2YgZmxvdy1tb2RlICovXG5jb25zdCBGTE9XX0VORCA9ICdcXHgxOCc7IC8vIEMwOiBDYW5jZWxcbi8qKiBOZXh0IHRva2VuIGlzIGEgc2NhbGFyIHZhbHVlICovXG5jb25zdCBTQ0FMQVIgPSAnXFx4MWYnOyAvLyBDMDogVW5pdCBTZXBhcmF0b3Jcbi8qKiBAcmV0dXJucyBgdHJ1ZWAgaWYgYHRva2VuYCBpcyBhIGZsb3cgb3IgYmxvY2sgY29sbGVjdGlvbiAqL1xuY29uc3QgaXNDb2xsZWN0aW9uID0gKHRva2VuKSA9PiAhIXRva2VuICYmICdpdGVtcycgaW4gdG9rZW47XG4vKiogQHJldHVybnMgYHRydWVgIGlmIGB0b2tlbmAgaXMgYSBmbG93IG9yIGJsb2NrIHNjYWxhcjsgbm90IGFuIGFsaWFzICovXG5jb25zdCBpc1NjYWxhciA9ICh0b2tlbikgPT4gISF0b2tlbiAmJlxuICAgICh0b2tlbi50eXBlID09PSAnc2NhbGFyJyB8fFxuICAgICAgICB0b2tlbi50eXBlID09PSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInIHx8XG4gICAgICAgIHRva2VuLnR5cGUgPT09ICdkb3VibGUtcXVvdGVkLXNjYWxhcicgfHxcbiAgICAgICAgdG9rZW4udHlwZSA9PT0gJ2Jsb2NrLXNjYWxhcicpO1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbi8qKiBHZXQgYSBwcmludGFibGUgcmVwcmVzZW50YXRpb24gb2YgYSBsZXhlciB0b2tlbiAqL1xuZnVuY3Rpb24gcHJldHR5VG9rZW4odG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgQk9NOlxuICAgICAgICAgICAgcmV0dXJuICc8Qk9NPic7XG4gICAgICAgIGNhc2UgRE9DVU1FTlQ6XG4gICAgICAgICAgICByZXR1cm4gJzxET0M+JztcbiAgICAgICAgY2FzZSBGTE9XX0VORDpcbiAgICAgICAgICAgIHJldHVybiAnPEZMT1dfRU5EPic7XG4gICAgICAgIGNhc2UgU0NBTEFSOlxuICAgICAgICAgICAgcmV0dXJuICc8U0NBTEFSPic7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodG9rZW4pO1xuICAgIH1cbn1cbi8qKiBJZGVudGlmeSB0aGUgdHlwZSBvZiBhIGxleGVyIHRva2VuLiBNYXkgcmV0dXJuIGBudWxsYCBmb3IgdW5rbm93biB0b2tlbnMuICovXG5mdW5jdGlvbiB0b2tlblR5cGUoc291cmNlKSB7XG4gICAgc3dpdGNoIChzb3VyY2UpIHtcbiAgICAgICAgY2FzZSBCT006XG4gICAgICAgICAgICByZXR1cm4gJ2J5dGUtb3JkZXItbWFyayc7XG4gICAgICAgIGNhc2UgRE9DVU1FTlQ6XG4gICAgICAgICAgICByZXR1cm4gJ2RvYy1tb2RlJztcbiAgICAgICAgY2FzZSBGTE9XX0VORDpcbiAgICAgICAgICAgIHJldHVybiAnZmxvdy1lcnJvci1lbmQnO1xuICAgICAgICBjYXNlIFNDQUxBUjpcbiAgICAgICAgICAgIHJldHVybiAnc2NhbGFyJztcbiAgICAgICAgY2FzZSAnLS0tJzpcbiAgICAgICAgICAgIHJldHVybiAnZG9jLXN0YXJ0JztcbiAgICAgICAgY2FzZSAnLi4uJzpcbiAgICAgICAgICAgIHJldHVybiAnZG9jLWVuZCc7XG4gICAgICAgIGNhc2UgJyc6XG4gICAgICAgIGNhc2UgJ1xcbic6XG4gICAgICAgIGNhc2UgJ1xcclxcbic6XG4gICAgICAgICAgICByZXR1cm4gJ25ld2xpbmUnO1xuICAgICAgICBjYXNlICctJzpcbiAgICAgICAgICAgIHJldHVybiAnc2VxLWl0ZW0taW5kJztcbiAgICAgICAgY2FzZSAnPyc6XG4gICAgICAgICAgICByZXR1cm4gJ2V4cGxpY2l0LWtleS1pbmQnO1xuICAgICAgICBjYXNlICc6JzpcbiAgICAgICAgICAgIHJldHVybiAnbWFwLXZhbHVlLWluZCc7XG4gICAgICAgIGNhc2UgJ3snOlxuICAgICAgICAgICAgcmV0dXJuICdmbG93LW1hcC1zdGFydCc7XG4gICAgICAgIGNhc2UgJ30nOlxuICAgICAgICAgICAgcmV0dXJuICdmbG93LW1hcC1lbmQnO1xuICAgICAgICBjYXNlICdbJzpcbiAgICAgICAgICAgIHJldHVybiAnZmxvdy1zZXEtc3RhcnQnO1xuICAgICAgICBjYXNlICddJzpcbiAgICAgICAgICAgIHJldHVybiAnZmxvdy1zZXEtZW5kJztcbiAgICAgICAgY2FzZSAnLCc6XG4gICAgICAgICAgICByZXR1cm4gJ2NvbW1hJztcbiAgICB9XG4gICAgc3dpdGNoIChzb3VyY2VbMF0pIHtcbiAgICAgICAgY2FzZSAnICc6XG4gICAgICAgIGNhc2UgJ1xcdCc6XG4gICAgICAgICAgICByZXR1cm4gJ3NwYWNlJztcbiAgICAgICAgY2FzZSAnIyc6XG4gICAgICAgICAgICByZXR1cm4gJ2NvbW1lbnQnO1xuICAgICAgICBjYXNlICclJzpcbiAgICAgICAgICAgIHJldHVybiAnZGlyZWN0aXZlLWxpbmUnO1xuICAgICAgICBjYXNlICcqJzpcbiAgICAgICAgICAgIHJldHVybiAnYWxpYXMnO1xuICAgICAgICBjYXNlICcmJzpcbiAgICAgICAgICAgIHJldHVybiAnYW5jaG9yJztcbiAgICAgICAgY2FzZSAnISc6XG4gICAgICAgICAgICByZXR1cm4gJ3RhZyc7XG4gICAgICAgIGNhc2UgXCInXCI6XG4gICAgICAgICAgICByZXR1cm4gJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJztcbiAgICAgICAgY2FzZSAnXCInOlxuICAgICAgICAgICAgcmV0dXJuICdkb3VibGUtcXVvdGVkLXNjYWxhcic7XG4gICAgICAgIGNhc2UgJ3wnOlxuICAgICAgICBjYXNlICc+JzpcbiAgICAgICAgICAgIHJldHVybiAnYmxvY2stc2NhbGFyLWhlYWRlcic7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5leHBvcnRzLmNyZWF0ZVNjYWxhclRva2VuID0gY3N0U2NhbGFyLmNyZWF0ZVNjYWxhclRva2VuO1xuZXhwb3J0cy5yZXNvbHZlQXNTY2FsYXIgPSBjc3RTY2FsYXIucmVzb2x2ZUFzU2NhbGFyO1xuZXhwb3J0cy5zZXRTY2FsYXJWYWx1ZSA9IGNzdFNjYWxhci5zZXRTY2FsYXJWYWx1ZTtcbmV4cG9ydHMuc3RyaW5naWZ5ID0gY3N0U3RyaW5naWZ5LnN0cmluZ2lmeTtcbmV4cG9ydHMudmlzaXQgPSBjc3RWaXNpdC52aXNpdDtcbmV4cG9ydHMuQk9NID0gQk9NO1xuZXhwb3J0cy5ET0NVTUVOVCA9IERPQ1VNRU5UO1xuZXhwb3J0cy5GTE9XX0VORCA9IEZMT1dfRU5EO1xuZXhwb3J0cy5TQ0FMQVIgPSBTQ0FMQVI7XG5leHBvcnRzLmlzQ29sbGVjdGlvbiA9IGlzQ29sbGVjdGlvbjtcbmV4cG9ydHMuaXNTY2FsYXIgPSBpc1NjYWxhcjtcbmV4cG9ydHMucHJldHR5VG9rZW4gPSBwcmV0dHlUb2tlbjtcbmV4cG9ydHMudG9rZW5UeXBlID0gdG9rZW5UeXBlO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLFNBQVMsR0FBR0MsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBQzFDLElBQUlDLFlBQVksR0FBR0QsT0FBTyxDQUFDLG9CQUFvQixDQUFDO0FBQ2hELElBQUlFLFFBQVEsR0FBR0YsT0FBTyxDQUFDLGdCQUFnQixDQUFDOztBQUV4QztBQUNBLE1BQU1HLEdBQUcsR0FBRyxVQUFVO0FBQ3RCO0FBQ0EsTUFBTUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxDQUFDO0FBQ3pCO0FBQ0EsTUFBTUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxDQUFDO0FBQ3pCO0FBQ0EsTUFBTUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZCO0FBQ0EsTUFBTUMsWUFBWSxHQUFJQyxLQUFLLElBQUssQ0FBQyxDQUFDQSxLQUFLLElBQUksT0FBTyxJQUFJQSxLQUFLO0FBQzNEO0FBQ0EsTUFBTUMsUUFBUSxHQUFJRCxLQUFLLElBQUssQ0FBQyxDQUFDQSxLQUFLLEtBQzlCQSxLQUFLLENBQUNFLElBQUksS0FBSyxRQUFRLElBQ3BCRixLQUFLLENBQUNFLElBQUksS0FBSyxzQkFBc0IsSUFDckNGLEtBQUssQ0FBQ0UsSUFBSSxLQUFLLHNCQUFzQixJQUNyQ0YsS0FBSyxDQUFDRSxJQUFJLEtBQUssY0FBYyxDQUFDO0FBQ3RDO0FBQ0E7QUFDQSxTQUFTQyxXQUFXQSxDQUFDSCxLQUFLLEVBQUU7RUFDeEIsUUFBUUEsS0FBSztJQUNULEtBQUtMLEdBQUc7TUFDSixPQUFPLE9BQU87SUFDbEIsS0FBS0MsUUFBUTtNQUNULE9BQU8sT0FBTztJQUNsQixLQUFLQyxRQUFRO01BQ1QsT0FBTyxZQUFZO0lBQ3ZCLEtBQUtDLE1BQU07TUFDUCxPQUFPLFVBQVU7SUFDckI7TUFDSSxPQUFPTSxJQUFJLENBQUNDLFNBQVMsQ0FBQ0wsS0FBSyxDQUFDO0VBQUM7QUFFekM7QUFDQTtBQUNBLFNBQVNNLFNBQVNBLENBQUNDLE1BQU0sRUFBRTtFQUN2QixRQUFRQSxNQUFNO0lBQ1YsS0FBS1osR0FBRztNQUNKLE9BQU8saUJBQWlCO0lBQzVCLEtBQUtDLFFBQVE7TUFDVCxPQUFPLFVBQVU7SUFDckIsS0FBS0MsUUFBUTtNQUNULE9BQU8sZ0JBQWdCO0lBQzNCLEtBQUtDLE1BQU07TUFDUCxPQUFPLFFBQVE7SUFDbkIsS0FBSyxLQUFLO01BQ04sT0FBTyxXQUFXO0lBQ3RCLEtBQUssS0FBSztNQUNOLE9BQU8sU0FBUztJQUNwQixLQUFLLEVBQUU7SUFDUCxLQUFLLElBQUk7SUFDVCxLQUFLLE1BQU07TUFDUCxPQUFPLFNBQVM7SUFDcEIsS0FBSyxHQUFHO01BQ0osT0FBTyxjQUFjO0lBQ3pCLEtBQUssR0FBRztNQUNKLE9BQU8sa0JBQWtCO0lBQzdCLEtBQUssR0FBRztNQUNKLE9BQU8sZUFBZTtJQUMxQixLQUFLLEdBQUc7TUFDSixPQUFPLGdCQUFnQjtJQUMzQixLQUFLLEdBQUc7TUFDSixPQUFPLGNBQWM7SUFDekIsS0FBSyxHQUFHO01BQ0osT0FBTyxnQkFBZ0I7SUFDM0IsS0FBSyxHQUFHO01BQ0osT0FBTyxjQUFjO0lBQ3pCLEtBQUssR0FBRztNQUNKLE9BQU8sT0FBTztFQUFDO0VBRXZCLFFBQVFTLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDYixLQUFLLEdBQUc7SUFDUixLQUFLLElBQUk7TUFDTCxPQUFPLE9BQU87SUFDbEIsS0FBSyxHQUFHO01BQ0osT0FBTyxTQUFTO0lBQ3BCLEtBQUssR0FBRztNQUNKLE9BQU8sZ0JBQWdCO0lBQzNCLEtBQUssR0FBRztNQUNKLE9BQU8sT0FBTztJQUNsQixLQUFLLEdBQUc7TUFDSixPQUFPLFFBQVE7SUFDbkIsS0FBSyxHQUFHO01BQ0osT0FBTyxLQUFLO0lBQ2hCLEtBQUssR0FBRztNQUNKLE9BQU8sc0JBQXNCO0lBQ2pDLEtBQUssR0FBRztNQUNKLE9BQU8sc0JBQXNCO0lBQ2pDLEtBQUssR0FBRztJQUNSLEtBQUssR0FBRztNQUNKLE9BQU8scUJBQXFCO0VBQUM7RUFFckMsT0FBTyxJQUFJO0FBQ2Y7QUFFQUMsT0FBTyxDQUFDQyxpQkFBaUIsR0FBR2xCLFNBQVMsQ0FBQ2tCLGlCQUFpQjtBQUN2REQsT0FBTyxDQUFDRSxlQUFlLEdBQUduQixTQUFTLENBQUNtQixlQUFlO0FBQ25ERixPQUFPLENBQUNHLGNBQWMsR0FBR3BCLFNBQVMsQ0FBQ29CLGNBQWM7QUFDakRILE9BQU8sQ0FBQ0gsU0FBUyxHQUFHWixZQUFZLENBQUNZLFNBQVM7QUFDMUNHLE9BQU8sQ0FBQ0ksS0FBSyxHQUFHbEIsUUFBUSxDQUFDa0IsS0FBSztBQUM5QkosT0FBTyxDQUFDYixHQUFHLEdBQUdBLEdBQUc7QUFDakJhLE9BQU8sQ0FBQ1osUUFBUSxHQUFHQSxRQUFRO0FBQzNCWSxPQUFPLENBQUNYLFFBQVEsR0FBR0EsUUFBUTtBQUMzQlcsT0FBTyxDQUFDVixNQUFNLEdBQUdBLE1BQU07QUFDdkJVLE9BQU8sQ0FBQ1QsWUFBWSxHQUFHQSxZQUFZO0FBQ25DUyxPQUFPLENBQUNQLFFBQVEsR0FBR0EsUUFBUTtBQUMzQk8sT0FBTyxDQUFDTCxXQUFXLEdBQUdBLFdBQVc7QUFDakNLLE9BQU8sQ0FBQ0YsU0FBUyxHQUFHQSxTQUFTIn0=