{"version":3,"names":["EventEmitter","require","childProcess","path","fs","process","Argument","humanReadableArgName","CommanderError","Help","Option","splitOptionFlags","DualOptions","suggestSimilar","Command","constructor","name","commands","options","parent","_allowUnknownOption","_allowExcessArguments","_args","args","rawArgs","processedArgs","_scriptPath","_name","_optionValues","_optionValueSources","_storeOptionsAsProperties","_actionHandler","_executableHandler","_executableFile","_executableDir","_defaultCommandName","_exitCallback","_aliases","_combineFlagAndOptionalValue","_description","_summary","_argsDescription","undefined","_enablePositionalOptions","_passThroughOptions","_lifeCycleHooks","_showHelpAfterError","_showSuggestionAfterError","_outputConfiguration","writeOut","str","stdout","write","writeErr","stderr","getOutHelpWidth","isTTY","columns","getErrHelpWidth","outputError","_hidden","_hasHelpOption","_helpFlags","_helpDescription","_helpShortFlag","_helpLongFlag","_addImplicitHelpCommand","_helpCommandName","_helpCommandnameAndArgs","_helpCommandDescription","_helpConfiguration","copyInheritedSettings","sourceCommand","command","nameAndArgs","actionOptsOrExecDesc","execOpts","desc","opts","match","cmd","createCommand","description","isDefault","noHelp","hidden","executableFile","arguments","push","createHelp","Object","assign","configureHelp","configuration","configureOutput","showHelpAfterError","displayHelp","showSuggestionAfterError","displaySuggestion","addCommand","Error","createArgument","argument","fn","defaultValue","default","argParser","addArgument","names","split","forEach","detail","previousArgument","slice","variadic","required","parseArg","addHelpCommand","enableOrNameAndArgs","_hasImplicitHelpCommand","length","_findCommand","hook","event","listener","allowedValues","includes","join","exitOverride","err","code","_exit","exitCode","message","exit","action","expectedArgsCount","actionArgs","apply","createOption","flags","addOption","option","oname","attributeName","negate","positiveLongFlag","long","replace","_findOption","setOptionValueWithSource","handleOptionValue","val","invalidValueMessage","valueSource","presetArg","oldValue","getOptionValue","error","_concatValue","isBoolean","optional","on","envVar","_optionEx","config","makeOptionMandatory","mandatory","RegExp","regex","def","m","exec","requiredOption","combineFlagAndOptionalValue","combine","allowUnknownOption","allowUnknown","allowExcessArguments","allowExcess","enablePositionalOptions","positional","passThroughOptions","passThrough","storeOptionsAsProperties","storeAsProperties","key","setOptionValue","value","source","getOptionValueSource","getOptionValueSourceWithGlobals","getCommandAndParents","_prepareUserArgs","argv","parseOptions","Array","isArray","versions","electron","from","userArgs","defaultApp","nameFromFilename","parse","_parseCommand","parseAsync","_executeSubCommand","subcommand","launchWithNode","sourceExt","findFile","baseDir","baseName","localBin","resolve","existsSync","extname","foundExt","find","ext","_checkForMissingMandatoryOptions","_checkForConflictingOptions","executableDir","resolvedScriptPath","realpathSync","dirname","localFile","legacyName","basename","proc","platform","unshift","incrementNodeInspectorPort","execArgv","concat","spawn","stdio","execPath","killed","signals","signal","kill","exitCallback","bind","executableDirMessage","executableMissing","wrappedError","nestedError","runningCommand","_dispatchSubcommand","commandName","operands","unknown","subCommand","help","hookResult","_chainOrCallSubCommandHook","_chainOrCall","_checkNumberOfArguments","arg","i","missingArgument","_excessArguments","_processArguments","myParseArg","previous","parsedValue","declaredArg","index","reduce","processed","v","promise","then","_chainOrCallHooks","result","hooks","reverse","filter","hookedCommand","callback","hookDetail","parsed","_parseOptionsEnv","_parseOptionsImplied","outputHelpIfRequested","checkForUnknownOptions","unknownOption","commandEvent","actionResult","emit","listenerCount","unknownCommand","is","anOption","missingMandatoryOptionValue","_checkForConflictingLocalOptions","definedNonDefaultOptions","optionKey","optionsWithConflicting","conflictsWith","conflictingAndDefined","defined","_conflictingOption","dest","maybeOption","activeVariadicOption","shift","optionMissingArgument","test","indexOf","len","_versionOptionName","_version","optsWithGlobals","combinedOptions","errorOptions","outputHelp","env","dualHelper","hasCustomOptionValue","implied","valueFromOption","keys","impliedKey","conflictingOption","findBestOptionFromValue","optionValue","negativeOption","target","positiveOption","getErrorMessage","bestOption","flag","suggestion","startsWith","candidateFlags","moreFlags","visibleOptions","map","receivedArgs","expected","s","forSubcommand","unknownName","candidateNames","visibleCommands","alias","version","versionOption","argsDescription","summary","aliases","usage","_usage","filename","helpInformation","contextOptions","helper","helpWidth","formatHelp","_getHelpContext","context","deprecatedCallback","Buffer","isBuffer","helpOption","helpFlags","shortFlag","longFlag","addHelpText","position","text","helpEvent","helpStr","debugOption","debugHost","debugPort","parseInt","startCommand","exports"],"sources":["command.js"],"sourcesContent":["const EventEmitter = require('events').EventEmitter;\nconst childProcess = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\nconst process = require('process');\n\nconst { Argument, humanReadableArgName } = require('./argument.js');\nconst { CommanderError } = require('./error.js');\nconst { Help } = require('./help.js');\nconst { Option, splitOptionFlags, DualOptions } = require('./option.js');\nconst { suggestSimilar } = require('./suggestSimilar');\n\n// @ts-check\n\nclass Command extends EventEmitter {\n  /**\n   * Initialize a new `Command`.\n   *\n   * @param {string} [name]\n   */\n\n  constructor(name) {\n    super();\n    /** @type {Command[]} */\n    this.commands = [];\n    /** @type {Option[]} */\n    this.options = [];\n    this.parent = null;\n    this._allowUnknownOption = false;\n    this._allowExcessArguments = true;\n    /** @type {Argument[]} */\n    this._args = [];\n    /** @type {string[]} */\n    this.args = []; // cli args with options removed\n    this.rawArgs = [];\n    this.processedArgs = []; // like .args but after custom processing and collecting variadic\n    this._scriptPath = null;\n    this._name = name || '';\n    this._optionValues = {};\n    this._optionValueSources = {}; // default, env, cli etc\n    this._storeOptionsAsProperties = false;\n    this._actionHandler = null;\n    this._executableHandler = false;\n    this._executableFile = null; // custom name for executable\n    this._executableDir = null; // custom search directory for subcommands\n    this._defaultCommandName = null;\n    this._exitCallback = null;\n    this._aliases = [];\n    this._combineFlagAndOptionalValue = true;\n    this._description = '';\n    this._summary = '';\n    this._argsDescription = undefined; // legacy\n    this._enablePositionalOptions = false;\n    this._passThroughOptions = false;\n    this._lifeCycleHooks = {}; // a hash of arrays\n    /** @type {boolean | string} */\n    this._showHelpAfterError = false;\n    this._showSuggestionAfterError = true;\n\n    // see .configureOutput() for docs\n    this._outputConfiguration = {\n      writeOut: (str) => process.stdout.write(str),\n      writeErr: (str) => process.stderr.write(str),\n      getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : undefined,\n      getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : undefined,\n      outputError: (str, write) => write(str)\n    };\n\n    this._hidden = false;\n    this._hasHelpOption = true;\n    this._helpFlags = '-h, --help';\n    this._helpDescription = 'display help for command';\n    this._helpShortFlag = '-h';\n    this._helpLongFlag = '--help';\n    this._addImplicitHelpCommand = undefined; // Deliberately undefined, not decided whether true or false\n    this._helpCommandName = 'help';\n    this._helpCommandnameAndArgs = 'help [command]';\n    this._helpCommandDescription = 'display help for command';\n    this._helpConfiguration = {};\n  }\n\n  /**\n   * Copy settings that are useful to have in common across root command and subcommands.\n   *\n   * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)\n   *\n   * @param {Command} sourceCommand\n   * @return {Command} `this` command for chaining\n   */\n  copyInheritedSettings(sourceCommand) {\n    this._outputConfiguration = sourceCommand._outputConfiguration;\n    this._hasHelpOption = sourceCommand._hasHelpOption;\n    this._helpFlags = sourceCommand._helpFlags;\n    this._helpDescription = sourceCommand._helpDescription;\n    this._helpShortFlag = sourceCommand._helpShortFlag;\n    this._helpLongFlag = sourceCommand._helpLongFlag;\n    this._helpCommandName = sourceCommand._helpCommandName;\n    this._helpCommandnameAndArgs = sourceCommand._helpCommandnameAndArgs;\n    this._helpCommandDescription = sourceCommand._helpCommandDescription;\n    this._helpConfiguration = sourceCommand._helpConfiguration;\n    this._exitCallback = sourceCommand._exitCallback;\n    this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;\n    this._combineFlagAndOptionalValue = sourceCommand._combineFlagAndOptionalValue;\n    this._allowExcessArguments = sourceCommand._allowExcessArguments;\n    this._enablePositionalOptions = sourceCommand._enablePositionalOptions;\n    this._showHelpAfterError = sourceCommand._showHelpAfterError;\n    this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;\n\n    return this;\n  }\n\n  /**\n   * Define a command.\n   *\n   * There are two styles of command: pay attention to where to put the description.\n   *\n   * @example\n   * // Command implemented using action handler (description is supplied separately to `.command`)\n   * program\n   *   .command('clone <source> [destination]')\n   *   .description('clone a repository into a newly created directory')\n   *   .action((source, destination) => {\n   *     console.log('clone command called');\n   *   });\n   *\n   * // Command implemented using separate executable file (description is second parameter to `.command`)\n   * program\n   *   .command('start <service>', 'start named service')\n   *   .command('stop [service]', 'stop named service, or all if no name supplied');\n   *\n   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\n   * @param {Object|string} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\n   * @param {Object} [execOpts] - configuration options (for executable)\n   * @return {Command} returns new command for action handler, or `this` for executable command\n   */\n\n  command(nameAndArgs, actionOptsOrExecDesc, execOpts) {\n    let desc = actionOptsOrExecDesc;\n    let opts = execOpts;\n    if (typeof desc === 'object' && desc !== null) {\n      opts = desc;\n      desc = null;\n    }\n    opts = opts || {};\n    const [, name, args] = nameAndArgs.match(/([^ ]+) *(.*)/);\n\n    const cmd = this.createCommand(name);\n    if (desc) {\n      cmd.description(desc);\n      cmd._executableHandler = true;\n    }\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden\n    cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor\n    if (args) cmd.arguments(args);\n    this.commands.push(cmd);\n    cmd.parent = this;\n    cmd.copyInheritedSettings(this);\n\n    if (desc) return this;\n    return cmd;\n  }\n\n  /**\n   * Factory routine to create a new unattached command.\n   *\n   * See .command() for creating an attached subcommand, which uses this routine to\n   * create the command. You can override createCommand to customise subcommands.\n   *\n   * @param {string} [name]\n   * @return {Command} new command\n   */\n\n  createCommand(name) {\n    return new Command(name);\n  }\n\n  /**\n   * You can customise the help with a subclass of Help by overriding createHelp,\n   * or by overriding Help properties using configureHelp().\n   *\n   * @return {Help}\n   */\n\n  createHelp() {\n    return Object.assign(new Help(), this.configureHelp());\n  }\n\n  /**\n   * You can customise the help by overriding Help properties using configureHelp(),\n   * or with a subclass of Help by overriding createHelp().\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureHelp(configuration) {\n    if (configuration === undefined) return this._helpConfiguration;\n\n    this._helpConfiguration = configuration;\n    return this;\n  }\n\n  /**\n   * The default output goes to stdout and stderr. You can customise this for special\n   * applications. You can also customise the display of errors by overriding outputError.\n   *\n   * The configuration properties are all functions:\n   *\n   *     // functions to change where being written, stdout and stderr\n   *     writeOut(str)\n   *     writeErr(str)\n   *     // matching functions to specify width for wrapping help\n   *     getOutHelpWidth()\n   *     getErrHelpWidth()\n   *     // functions based on what is being written out\n   *     outputError(str, write) // used for displaying errors, and not used for displaying help\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureOutput(configuration) {\n    if (configuration === undefined) return this._outputConfiguration;\n\n    Object.assign(this._outputConfiguration, configuration);\n    return this;\n  }\n\n  /**\n   * Display the help or a custom message after an error occurs.\n   *\n   * @param {boolean|string} [displayHelp]\n   * @return {Command} `this` command for chaining\n   */\n  showHelpAfterError(displayHelp = true) {\n    if (typeof displayHelp !== 'string') displayHelp = !!displayHelp;\n    this._showHelpAfterError = displayHelp;\n    return this;\n  }\n\n  /**\n   * Display suggestion of similar commands for unknown commands, or options for unknown options.\n   *\n   * @param {boolean} [displaySuggestion]\n   * @return {Command} `this` command for chaining\n   */\n  showSuggestionAfterError(displaySuggestion = true) {\n    this._showSuggestionAfterError = !!displaySuggestion;\n    return this;\n  }\n\n  /**\n   * Add a prepared subcommand.\n   *\n   * See .command() for creating an attached subcommand which inherits settings from its parent.\n   *\n   * @param {Command} cmd - new subcommand\n   * @param {Object} [opts] - configuration options\n   * @return {Command} `this` command for chaining\n   */\n\n  addCommand(cmd, opts) {\n    if (!cmd._name) {\n      throw new Error(`Command passed to .addCommand() must have a name\n- specify the name in Command constructor or using .name()`);\n    }\n\n    opts = opts || {};\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation\n\n    this.commands.push(cmd);\n    cmd.parent = this;\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached argument.\n   *\n   * See .argument() for creating an attached argument, which uses this routine to\n   * create the argument. You can override createArgument to return a custom argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @return {Argument} new argument\n   */\n\n  createArgument(name, description) {\n    return new Argument(name, description);\n  }\n\n  /**\n   * Define argument syntax for command.\n   *\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @example\n   * program.argument('<input-file>');\n   * program.argument('[output-file]');\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @param {Function|*} [fn] - custom argument processing function\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n  argument(name, description, fn, defaultValue) {\n    const argument = this.createArgument(name, description);\n    if (typeof fn === 'function') {\n      argument.default(defaultValue).argParser(fn);\n    } else {\n      argument.default(fn);\n    }\n    this.addArgument(argument);\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding multiple at once (without descriptions).\n   *\n   * See also .argument().\n   *\n   * @example\n   * program.arguments('<cmd> [env]');\n   *\n   * @param {string} names\n   * @return {Command} `this` command for chaining\n   */\n\n  arguments(names) {\n    names.split(/ +/).forEach((detail) => {\n      this.argument(detail);\n    });\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding a prepared argument.\n   *\n   * @param {Argument} argument\n   * @return {Command} `this` command for chaining\n   */\n  addArgument(argument) {\n    const previousArgument = this._args.slice(-1)[0];\n    if (previousArgument && previousArgument.variadic) {\n      throw new Error(`only the last argument can be variadic '${previousArgument.name()}'`);\n    }\n    if (argument.required && argument.defaultValue !== undefined && argument.parseArg === undefined) {\n      throw new Error(`a default value for a required argument is never used: '${argument.name()}'`);\n    }\n    this._args.push(argument);\n    return this;\n  }\n\n  /**\n   * Override default decision whether to add implicit help command.\n   *\n   *    addHelpCommand() // force on\n   *    addHelpCommand(false); // force off\n   *    addHelpCommand('help [cmd]', 'display help for [cmd]'); // force on with custom details\n   *\n   * @return {Command} `this` command for chaining\n   */\n\n  addHelpCommand(enableOrNameAndArgs, description) {\n    if (enableOrNameAndArgs === false) {\n      this._addImplicitHelpCommand = false;\n    } else {\n      this._addImplicitHelpCommand = true;\n      if (typeof enableOrNameAndArgs === 'string') {\n        this._helpCommandName = enableOrNameAndArgs.split(' ')[0];\n        this._helpCommandnameAndArgs = enableOrNameAndArgs;\n      }\n      this._helpCommandDescription = description || this._helpCommandDescription;\n    }\n    return this;\n  }\n\n  /**\n   * @return {boolean}\n   * @api private\n   */\n\n  _hasImplicitHelpCommand() {\n    if (this._addImplicitHelpCommand === undefined) {\n      return this.commands.length && !this._actionHandler && !this._findCommand('help');\n    }\n    return this._addImplicitHelpCommand;\n  }\n\n  /**\n   * Add hook for life cycle event.\n   *\n   * @param {string} event\n   * @param {Function} listener\n   * @return {Command} `this` command for chaining\n   */\n\n  hook(event, listener) {\n    const allowedValues = ['preSubcommand', 'preAction', 'postAction'];\n    if (!allowedValues.includes(event)) {\n      throw new Error(`Unexpected value for event passed to hook : '${event}'.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    if (this._lifeCycleHooks[event]) {\n      this._lifeCycleHooks[event].push(listener);\n    } else {\n      this._lifeCycleHooks[event] = [listener];\n    }\n    return this;\n  }\n\n  /**\n   * Register callback to use as replacement for calling process.exit.\n   *\n   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\n   * @return {Command} `this` command for chaining\n   */\n\n  exitOverride(fn) {\n    if (fn) {\n      this._exitCallback = fn;\n    } else {\n      this._exitCallback = (err) => {\n        if (err.code !== 'commander.executeSubCommandAsync') {\n          throw err;\n        } else {\n          // Async callback from spawn events, not useful to throw.\n        }\n      };\n    }\n    return this;\n  }\n\n  /**\n   * Call process.exit, and _exitCallback if defined.\n   *\n   * @param {number} exitCode exit code for using with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @return never\n   * @api private\n   */\n\n  _exit(exitCode, code, message) {\n    if (this._exitCallback) {\n      this._exitCallback(new CommanderError(exitCode, code, message));\n      // Expecting this line is not reached.\n    }\n    process.exit(exitCode);\n  }\n\n  /**\n   * Register callback `fn` for the command.\n   *\n   * @example\n   * program\n   *   .command('serve')\n   *   .description('start service')\n   *   .action(function() {\n   *      // do work here\n   *   });\n   *\n   * @param {Function} fn\n   * @return {Command} `this` command for chaining\n   */\n\n  action(fn) {\n    const listener = (args) => {\n      // The .action callback takes an extra parameter which is the command or options.\n      const expectedArgsCount = this._args.length;\n      const actionArgs = args.slice(0, expectedArgsCount);\n      if (this._storeOptionsAsProperties) {\n        actionArgs[expectedArgsCount] = this; // backwards compatible \"options\"\n      } else {\n        actionArgs[expectedArgsCount] = this.opts();\n      }\n      actionArgs.push(this);\n\n      return fn.apply(this, actionArgs);\n    };\n    this._actionHandler = listener;\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached option.\n   *\n   * See .option() for creating an attached option, which uses this routine to\n   * create the option. You can override createOption to return a custom option.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @return {Option} new option\n   */\n\n  createOption(flags, description) {\n    return new Option(flags, description);\n  }\n\n  /**\n   * Add an option.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addOption(option) {\n    const oname = option.name();\n    const name = option.attributeName();\n\n    // store default value\n    if (option.negate) {\n      // --no-foo is special and defaults foo to true, unless a --foo option is already defined\n      const positiveLongFlag = option.long.replace(/^--no-/, '--');\n      if (!this._findOption(positiveLongFlag)) {\n        this.setOptionValueWithSource(name, option.defaultValue === undefined ? true : option.defaultValue, 'default');\n      }\n    } else if (option.defaultValue !== undefined) {\n      this.setOptionValueWithSource(name, option.defaultValue, 'default');\n    }\n\n    // register the option\n    this.options.push(option);\n\n    // handler for cli and env supplied values\n    const handleOptionValue = (val, invalidValueMessage, valueSource) => {\n      // val is null for optional option used without an optional-argument.\n      // val is undefined for boolean and negated option.\n      if (val == null && option.presetArg !== undefined) {\n        val = option.presetArg;\n      }\n\n      // custom processing\n      const oldValue = this.getOptionValue(name);\n      if (val !== null && option.parseArg) {\n        try {\n          val = option.parseArg(val, oldValue);\n        } catch (err) {\n          if (err.code === 'commander.invalidArgument') {\n            const message = `${invalidValueMessage} ${err.message}`;\n            this.error(message, { exitCode: err.exitCode, code: err.code });\n          }\n          throw err;\n        }\n      } else if (val !== null && option.variadic) {\n        val = option._concatValue(val, oldValue);\n      }\n\n      // Fill-in appropriate missing values. Long winded but easy to follow.\n      if (val == null) {\n        if (option.negate) {\n          val = false;\n        } else if (option.isBoolean() || option.optional) {\n          val = true;\n        } else {\n          val = ''; // not normal, parseArg might have failed or be a mock function for testing\n        }\n      }\n      this.setOptionValueWithSource(name, val, valueSource);\n    };\n\n    this.on('option:' + oname, (val) => {\n      const invalidValueMessage = `error: option '${option.flags}' argument '${val}' is invalid.`;\n      handleOptionValue(val, invalidValueMessage, 'cli');\n    });\n\n    if (option.envVar) {\n      this.on('optionEnv:' + oname, (val) => {\n        const invalidValueMessage = `error: option '${option.flags}' value '${val}' from env '${option.envVar}' is invalid.`;\n        handleOptionValue(val, invalidValueMessage, 'env');\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Internal implementation shared by .option() and .requiredOption()\n   *\n   * @api private\n   */\n  _optionEx(config, flags, description, fn, defaultValue) {\n    if (typeof flags === 'object' && flags instanceof Option) {\n      throw new Error('To add an Option object use addOption() instead of option() or requiredOption()');\n    }\n    const option = this.createOption(flags, description);\n    option.makeOptionMandatory(!!config.mandatory);\n    if (typeof fn === 'function') {\n      option.default(defaultValue).argParser(fn);\n    } else if (fn instanceof RegExp) {\n      // deprecated\n      const regex = fn;\n      fn = (val, def) => {\n        const m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n      option.default(defaultValue).argParser(fn);\n    } else {\n      option.default(fn);\n    }\n\n    return this.addOption(option);\n  }\n\n  /**\n   * Define option with `flags`, `description` and optional\n   * coercion `fn`.\n   *\n   * The `flags` string contains the short and/or long flags,\n   * separated by comma, a pipe or space. The following are all valid\n   * all will output this way when `--help` is used.\n   *\n   *     \"-p, --pepper\"\n   *     \"-p|--pepper\"\n   *     \"-p --pepper\"\n   *\n   * @example\n   * // simple boolean defaulting to undefined\n   * program.option('-p, --pepper', 'add pepper');\n   *\n   * program.pepper\n   * // => undefined\n   *\n   * --pepper\n   * program.pepper\n   * // => true\n   *\n   * // simple boolean defaulting to true (unless non-negated option is also defined)\n   * program.option('-C, --no-cheese', 'remove cheese');\n   *\n   * program.cheese\n   * // => true\n   *\n   * --no-cheese\n   * program.cheese\n   * // => false\n   *\n   * // required argument\n   * program.option('-C, --chdir <path>', 'change the working directory');\n   *\n   * --chdir /tmp\n   * program.chdir\n   * // => \"/tmp\"\n   *\n   * // optional argument\n   * program.option('-c, --cheese [type]', 'add cheese [marble]');\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {Function|*} [fn] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  option(flags, description, fn, defaultValue) {\n    return this._optionEx({}, flags, description, fn, defaultValue);\n  }\n\n  /**\n  * Add a required option which must have a value after parsing. This usually means\n  * the option must be specified on the command line. (Otherwise the same as .option().)\n  *\n  * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.\n  *\n  * @param {string} flags\n  * @param {string} [description]\n  * @param {Function|*} [fn] - custom option processing function or default value\n  * @param {*} [defaultValue]\n  * @return {Command} `this` command for chaining\n  */\n\n  requiredOption(flags, description, fn, defaultValue) {\n    return this._optionEx({ mandatory: true }, flags, description, fn, defaultValue);\n  }\n\n  /**\n   * Alter parsing of short flags with optional values.\n   *\n   * @example\n   * // for `.option('-f,--flag [value]'):\n   * program.combineFlagAndOptionalValue(true);  // `-f80` is treated like `--flag=80`, this is the default behaviour\n   * program.combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`\n   *\n   * @param {Boolean} [combine=true] - if `true` or omitted, an optional value can be specified directly after the flag.\n   */\n  combineFlagAndOptionalValue(combine = true) {\n    this._combineFlagAndOptionalValue = !!combine;\n    return this;\n  }\n\n  /**\n   * Allow unknown options on the command line.\n   *\n   * @param {Boolean} [allowUnknown=true] - if `true` or omitted, no error will be thrown\n   * for unknown options.\n   */\n  allowUnknownOption(allowUnknown = true) {\n    this._allowUnknownOption = !!allowUnknown;\n    return this;\n  }\n\n  /**\n   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.\n   *\n   * @param {Boolean} [allowExcess=true] - if `true` or omitted, no error will be thrown\n   * for excess arguments.\n   */\n  allowExcessArguments(allowExcess = true) {\n    this._allowExcessArguments = !!allowExcess;\n    return this;\n  }\n\n  /**\n   * Enable positional options. Positional means global options are specified before subcommands which lets\n   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.\n   * The default behaviour is non-positional and global options may appear anywhere on the command line.\n   *\n   * @param {Boolean} [positional=true]\n   */\n  enablePositionalOptions(positional = true) {\n    this._enablePositionalOptions = !!positional;\n    return this;\n  }\n\n  /**\n   * Pass through options that come after command-arguments rather than treat them as command-options,\n   * so actual command-options come before command-arguments. Turning this on for a subcommand requires\n   * positional options to have been enabled on the program (parent commands).\n   * The default behaviour is non-positional and options may appear before or after command-arguments.\n   *\n   * @param {Boolean} [passThrough=true]\n   * for unknown options.\n   */\n  passThroughOptions(passThrough = true) {\n    this._passThroughOptions = !!passThrough;\n    if (!!this.parent && passThrough && !this.parent._enablePositionalOptions) {\n      throw new Error('passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)');\n    }\n    return this;\n  }\n\n  /**\n    * Whether to store option values as properties on command object,\n    * or store separately (specify false). In both cases the option values can be accessed using .opts().\n    *\n    * @param {boolean} [storeAsProperties=true]\n    * @return {Command} `this` command for chaining\n    */\n\n  storeOptionsAsProperties(storeAsProperties = true) {\n    this._storeOptionsAsProperties = !!storeAsProperties;\n    if (this.options.length) {\n      throw new Error('call .storeOptionsAsProperties() before adding options');\n    }\n    return this;\n  }\n\n  /**\n   * Retrieve option value.\n   *\n   * @param {string} key\n   * @return {Object} value\n   */\n\n  getOptionValue(key) {\n    if (this._storeOptionsAsProperties) {\n      return this[key];\n    }\n    return this._optionValues[key];\n  }\n\n  /**\n   * Store option value.\n   *\n   * @param {string} key\n   * @param {Object} value\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValue(key, value) {\n    return this.setOptionValueWithSource(key, value, undefined);\n  }\n\n  /**\n    * Store option value and where the value came from.\n    *\n    * @param {string} key\n    * @param {Object} value\n    * @param {string} source - expected values are default/config/env/cli/implied\n    * @return {Command} `this` command for chaining\n    */\n\n  setOptionValueWithSource(key, value, source) {\n    if (this._storeOptionsAsProperties) {\n      this[key] = value;\n    } else {\n      this._optionValues[key] = value;\n    }\n    this._optionValueSources[key] = source;\n    return this;\n  }\n\n  /**\n    * Get source of option value.\n    * Expected values are default | config | env | cli | implied\n    *\n    * @param {string} key\n    * @return {string}\n    */\n\n  getOptionValueSource(key) {\n    return this._optionValueSources[key];\n  }\n\n  /**\n    * Get source of option value. See also .optsWithGlobals().\n    * Expected values are default | config | env | cli | implied\n    *\n    * @param {string} key\n    * @return {string}\n    */\n\n  getOptionValueSourceWithGlobals(key) {\n    // global overwrites local, like optsWithGlobals\n    let source;\n    getCommandAndParents(this).forEach((cmd) => {\n      if (cmd.getOptionValueSource(key) !== undefined) {\n        source = cmd.getOptionValueSource(key);\n      }\n    });\n    return source;\n  }\n\n  /**\n   * Get user arguments from implied or explicit arguments.\n   * Side-effects: set _scriptPath if args included script. Used for default program name, and subcommand searches.\n   *\n   * @api private\n   */\n\n  _prepareUserArgs(argv, parseOptions) {\n    if (argv !== undefined && !Array.isArray(argv)) {\n      throw new Error('first parameter to parse must be array or undefined');\n    }\n    parseOptions = parseOptions || {};\n\n    // Default to using process.argv\n    if (argv === undefined) {\n      argv = process.argv;\n      // @ts-ignore: unknown property\n      if (process.versions && process.versions.electron) {\n        parseOptions.from = 'electron';\n      }\n    }\n    this.rawArgs = argv.slice();\n\n    // make it a little easier for callers by supporting various argv conventions\n    let userArgs;\n    switch (parseOptions.from) {\n      case undefined:\n      case 'node':\n        this._scriptPath = argv[1];\n        userArgs = argv.slice(2);\n        break;\n      case 'electron':\n        // @ts-ignore: unknown property\n        if (process.defaultApp) {\n          this._scriptPath = argv[1];\n          userArgs = argv.slice(2);\n        } else {\n          userArgs = argv.slice(1);\n        }\n        break;\n      case 'user':\n        userArgs = argv.slice(0);\n        break;\n      default:\n        throw new Error(`unexpected parse option { from: '${parseOptions.from}' }`);\n    }\n\n    // Find default name for program from arguments.\n    if (!this._name && this._scriptPath) this.nameFromFilename(this._scriptPath);\n    this._name = this._name || 'program';\n\n    return userArgs;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * @example\n   * program.parse(process.argv);\n   * program.parse(); // implicitly use process.argv and auto-detect node vs electron conventions\n   * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv] - optional, defaults to process.argv\n   * @param {Object} [parseOptions] - optionally specify style of options with from: node/user/electron\n   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'\n   * @return {Command} `this` command for chaining\n   */\n\n  parse(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Use parseAsync instead of parse if any of your action handlers are async. Returns a Promise.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * @example\n   * await program.parseAsync(process.argv);\n   * await program.parseAsync(); // implicitly use process.argv and auto-detect node vs electron conventions\n   * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv]\n   * @param {Object} [parseOptions]\n   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'\n   * @return {Promise}\n   */\n\n  async parseAsync(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    await this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Execute a sub-command executable.\n   *\n   * @api private\n   */\n\n  _executeSubCommand(subcommand, args) {\n    args = args.slice();\n    let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.\n    const sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];\n\n    function findFile(baseDir, baseName) {\n      // Look for specified file\n      const localBin = path.resolve(baseDir, baseName);\n      if (fs.existsSync(localBin)) return localBin;\n\n      // Stop looking if candidate already has an expected extension.\n      if (sourceExt.includes(path.extname(baseName))) return undefined;\n\n      // Try all the extensions.\n      const foundExt = sourceExt.find(ext => fs.existsSync(`${localBin}${ext}`));\n      if (foundExt) return `${localBin}${foundExt}`;\n\n      return undefined;\n    }\n\n    // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // executableFile and executableDir might be full path, or just a name\n    let executableFile = subcommand._executableFile || `${this._name}-${subcommand._name}`;\n    let executableDir = this._executableDir || '';\n    if (this._scriptPath) {\n      let resolvedScriptPath; // resolve possible symlink for installed npm binary\n      try {\n        resolvedScriptPath = fs.realpathSync(this._scriptPath);\n      } catch (err) {\n        resolvedScriptPath = this._scriptPath;\n      }\n      executableDir = path.resolve(path.dirname(resolvedScriptPath), executableDir);\n    }\n\n    // Look for a local file in preference to a command in PATH.\n    if (executableDir) {\n      let localFile = findFile(executableDir, executableFile);\n\n      // Legacy search using prefix of script name instead of command name\n      if (!localFile && !subcommand._executableFile && this._scriptPath) {\n        const legacyName = path.basename(this._scriptPath, path.extname(this._scriptPath));\n        if (legacyName !== this._name) {\n          localFile = findFile(executableDir, `${legacyName}-${subcommand._name}`);\n        }\n      }\n      executableFile = localFile || executableFile;\n    }\n\n    launchWithNode = sourceExt.includes(path.extname(executableFile));\n\n    let proc;\n    if (process.platform !== 'win32') {\n      if (launchWithNode) {\n        args.unshift(executableFile);\n        // add executable arguments to spawn\n        args = incrementNodeInspectorPort(process.execArgv).concat(args);\n\n        proc = childProcess.spawn(process.argv[0], args, { stdio: 'inherit' });\n      } else {\n        proc = childProcess.spawn(executableFile, args, { stdio: 'inherit' });\n      }\n    } else {\n      args.unshift(executableFile);\n      // add executable arguments to spawn\n      args = incrementNodeInspectorPort(process.execArgv).concat(args);\n      proc = childProcess.spawn(process.execPath, args, { stdio: 'inherit' });\n    }\n\n    if (!proc.killed) { // testing mainly to avoid leak warnings during unit tests with mocked spawn\n      const signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n      signals.forEach((signal) => {\n        // @ts-ignore\n        process.on(signal, () => {\n          if (proc.killed === false && proc.exitCode === null) {\n            proc.kill(signal);\n          }\n        });\n      });\n    }\n\n    // By default terminate process when spawned process terminates.\n    // Suppressing the exit if exitCallback defined is a bit messy and of limited use, but does allow process to stay running!\n    const exitCallback = this._exitCallback;\n    if (!exitCallback) {\n      proc.on('close', process.exit.bind(process));\n    } else {\n      proc.on('close', () => {\n        exitCallback(new CommanderError(process.exitCode || 0, 'commander.executeSubCommandAsync', '(close)'));\n      });\n    }\n    proc.on('error', (err) => {\n      // @ts-ignore\n      if (err.code === 'ENOENT') {\n        const executableDirMessage = executableDir\n          ? `searched for local subcommand relative to directory '${executableDir}'`\n          : 'no directory for search for local subcommand, use .executableDir() to supply a custom directory';\n        const executableMissing = `'${executableFile}' does not exist\n - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name or path\n - ${executableDirMessage}`;\n        throw new Error(executableMissing);\n      // @ts-ignore\n      } else if (err.code === 'EACCES') {\n        throw new Error(`'${executableFile}' not executable`);\n      }\n      if (!exitCallback) {\n        process.exit(1);\n      } else {\n        const wrappedError = new CommanderError(1, 'commander.executeSubCommandAsync', '(error)');\n        wrappedError.nestedError = err;\n        exitCallback(wrappedError);\n      }\n    });\n\n    // Store the reference to the child process\n    this.runningCommand = proc;\n  }\n\n  /**\n   * @api private\n   */\n\n  _dispatchSubcommand(commandName, operands, unknown) {\n    const subCommand = this._findCommand(commandName);\n    if (!subCommand) this.help({ error: true });\n\n    let hookResult;\n    hookResult = this._chainOrCallSubCommandHook(hookResult, subCommand, 'preSubcommand');\n    hookResult = this._chainOrCall(hookResult, () => {\n      if (subCommand._executableHandler) {\n        this._executeSubCommand(subCommand, operands.concat(unknown));\n      } else {\n        return subCommand._parseCommand(operands, unknown);\n      }\n    });\n    return hookResult;\n  }\n\n  /**\n   * Check this.args against expected this._args.\n   *\n   * @api private\n   */\n\n  _checkNumberOfArguments() {\n    // too few\n    this._args.forEach((arg, i) => {\n      if (arg.required && this.args[i] == null) {\n        this.missingArgument(arg.name());\n      }\n    });\n    // too many\n    if (this._args.length > 0 && this._args[this._args.length - 1].variadic) {\n      return;\n    }\n    if (this.args.length > this._args.length) {\n      this._excessArguments(this.args);\n    }\n  }\n\n  /**\n   * Process this.args using this._args and save as this.processedArgs!\n   *\n   * @api private\n   */\n\n  _processArguments() {\n    const myParseArg = (argument, value, previous) => {\n      // Extra processing for nice error message on parsing failure.\n      let parsedValue = value;\n      if (value !== null && argument.parseArg) {\n        try {\n          parsedValue = argument.parseArg(value, previous);\n        } catch (err) {\n          if (err.code === 'commander.invalidArgument') {\n            const message = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'. ${err.message}`;\n            this.error(message, { exitCode: err.exitCode, code: err.code });\n          }\n          throw err;\n        }\n      }\n      return parsedValue;\n    };\n\n    this._checkNumberOfArguments();\n\n    const processedArgs = [];\n    this._args.forEach((declaredArg, index) => {\n      let value = declaredArg.defaultValue;\n      if (declaredArg.variadic) {\n        // Collect together remaining arguments for passing together as an array.\n        if (index < this.args.length) {\n          value = this.args.slice(index);\n          if (declaredArg.parseArg) {\n            value = value.reduce((processed, v) => {\n              return myParseArg(declaredArg, v, processed);\n            }, declaredArg.defaultValue);\n          }\n        } else if (value === undefined) {\n          value = [];\n        }\n      } else if (index < this.args.length) {\n        value = this.args[index];\n        if (declaredArg.parseArg) {\n          value = myParseArg(declaredArg, value, declaredArg.defaultValue);\n        }\n      }\n      processedArgs[index] = value;\n    });\n    this.processedArgs = processedArgs;\n  }\n\n  /**\n   * Once we have a promise we chain, but call synchronously until then.\n   *\n   * @param {Promise|undefined} promise\n   * @param {Function} fn\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCall(promise, fn) {\n    // thenable\n    if (promise && promise.then && typeof promise.then === 'function') {\n      // already have a promise, chain callback\n      return promise.then(() => fn());\n    }\n    // callback might return a promise\n    return fn();\n  }\n\n  /**\n   *\n   * @param {Promise|undefined} promise\n   * @param {string} event\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCallHooks(promise, event) {\n    let result = promise;\n    const hooks = [];\n    getCommandAndParents(this)\n      .reverse()\n      .filter(cmd => cmd._lifeCycleHooks[event] !== undefined)\n      .forEach(hookedCommand => {\n        hookedCommand._lifeCycleHooks[event].forEach((callback) => {\n          hooks.push({ hookedCommand, callback });\n        });\n      });\n    if (event === 'postAction') {\n      hooks.reverse();\n    }\n\n    hooks.forEach((hookDetail) => {\n      result = this._chainOrCall(result, () => {\n        return hookDetail.callback(hookDetail.hookedCommand, this);\n      });\n    });\n    return result;\n  }\n\n  /**\n   *\n   * @param {Promise|undefined} promise\n   * @param {Command} subCommand\n   * @param {string} event\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCallSubCommandHook(promise, subCommand, event) {\n    let result = promise;\n    if (this._lifeCycleHooks[event] !== undefined) {\n      this._lifeCycleHooks[event].forEach((hook) => {\n        result = this._chainOrCall(result, () => {\n          return hook(this, subCommand);\n        });\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Process arguments in context of this command.\n   * Returns action result, in case it is a promise.\n   *\n   * @api private\n   */\n\n  _parseCommand(operands, unknown) {\n    const parsed = this.parseOptions(unknown);\n    this._parseOptionsEnv(); // after cli, so parseArg not called on both cli and env\n    this._parseOptionsImplied();\n    operands = operands.concat(parsed.operands);\n    unknown = parsed.unknown;\n    this.args = operands.concat(unknown);\n\n    if (operands && this._findCommand(operands[0])) {\n      return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);\n    }\n    if (this._hasImplicitHelpCommand() && operands[0] === this._helpCommandName) {\n      if (operands.length === 1) {\n        this.help();\n      }\n      return this._dispatchSubcommand(operands[1], [], [this._helpLongFlag]);\n    }\n    if (this._defaultCommandName) {\n      outputHelpIfRequested(this, unknown); // Run the help for default command from parent rather than passing to default command\n      return this._dispatchSubcommand(this._defaultCommandName, operands, unknown);\n    }\n    if (this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName) {\n      // probably missing subcommand and no handler, user needs help (and exit)\n      this.help({ error: true });\n    }\n\n    outputHelpIfRequested(this, parsed.unknown);\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // We do not always call this check to avoid masking a \"better\" error, like unknown command.\n    const checkForUnknownOptions = () => {\n      if (parsed.unknown.length > 0) {\n        this.unknownOption(parsed.unknown[0]);\n      }\n    };\n\n    const commandEvent = `command:${this.name()}`;\n    if (this._actionHandler) {\n      checkForUnknownOptions();\n      this._processArguments();\n\n      let actionResult;\n      actionResult = this._chainOrCallHooks(actionResult, 'preAction');\n      actionResult = this._chainOrCall(actionResult, () => this._actionHandler(this.processedArgs));\n      if (this.parent) {\n        actionResult = this._chainOrCall(actionResult, () => {\n          this.parent.emit(commandEvent, operands, unknown); // legacy\n        });\n      }\n      actionResult = this._chainOrCallHooks(actionResult, 'postAction');\n      return actionResult;\n    }\n    if (this.parent && this.parent.listenerCount(commandEvent)) {\n      checkForUnknownOptions();\n      this._processArguments();\n      this.parent.emit(commandEvent, operands, unknown); // legacy\n    } else if (operands.length) {\n      if (this._findCommand('*')) { // legacy default command\n        return this._dispatchSubcommand('*', operands, unknown);\n      }\n      if (this.listenerCount('command:*')) {\n        // skip option check, emit event for possible misspelling suggestion\n        this.emit('command:*', operands, unknown);\n      } else if (this.commands.length) {\n        this.unknownCommand();\n      } else {\n        checkForUnknownOptions();\n        this._processArguments();\n      }\n    } else if (this.commands.length) {\n      checkForUnknownOptions();\n      // This command has subcommands and nothing hooked up at this level, so display help (and exit).\n      this.help({ error: true });\n    } else {\n      checkForUnknownOptions();\n      this._processArguments();\n      // fall through for caller to handle after calling .parse()\n    }\n  }\n\n  /**\n   * Find matching command.\n   *\n   * @api private\n   */\n  _findCommand(name) {\n    if (!name) return undefined;\n    return this.commands.find(cmd => cmd._name === name || cmd._aliases.includes(name));\n  }\n\n  /**\n   * Return an option matching `arg` if any.\n   *\n   * @param {string} arg\n   * @return {Option}\n   * @api private\n   */\n\n  _findOption(arg) {\n    return this.options.find(option => option.is(arg));\n  }\n\n  /**\n   * Display an error message if a mandatory option does not have a value.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @api private\n   */\n\n  _checkForMissingMandatoryOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    for (let cmd = this; cmd; cmd = cmd.parent) {\n      cmd.options.forEach((anOption) => {\n        if (anOption.mandatory && (cmd.getOptionValue(anOption.attributeName()) === undefined)) {\n          cmd.missingMandatoryOptionValue(anOption);\n        }\n      });\n    }\n  }\n\n  /**\n   * Display an error message if conflicting options are used together in this.\n   *\n   * @api private\n   */\n  _checkForConflictingLocalOptions() {\n    const definedNonDefaultOptions = this.options.filter(\n      (option) => {\n        const optionKey = option.attributeName();\n        if (this.getOptionValue(optionKey) === undefined) {\n          return false;\n        }\n        return this.getOptionValueSource(optionKey) !== 'default';\n      }\n    );\n\n    const optionsWithConflicting = definedNonDefaultOptions.filter(\n      (option) => option.conflictsWith.length > 0\n    );\n\n    optionsWithConflicting.forEach((option) => {\n      const conflictingAndDefined = definedNonDefaultOptions.find((defined) =>\n        option.conflictsWith.includes(defined.attributeName())\n      );\n      if (conflictingAndDefined) {\n        this._conflictingOption(option, conflictingAndDefined);\n      }\n    });\n  }\n\n  /**\n   * Display an error message if conflicting options are used together.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @api private\n   */\n  _checkForConflictingOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    for (let cmd = this; cmd; cmd = cmd.parent) {\n      cmd._checkForConflictingLocalOptions();\n    }\n  }\n\n  /**\n   * Parse options from `argv` removing known options,\n   * and return argv split into operands and unknown arguments.\n   *\n   * Examples:\n   *\n   *     argv => operands, unknown\n   *     --known kkk op => [op], []\n   *     op --known kkk => [op], []\n   *     sub --unknown uuu op => [sub], [--unknown uuu op]\n   *     sub -- --unknown uuu op => [sub --unknown uuu op], []\n   *\n   * @param {String[]} argv\n   * @return {{operands: String[], unknown: String[]}}\n   */\n\n  parseOptions(argv) {\n    const operands = []; // operands, not options or values\n    const unknown = []; // first unknown option and remaining unknown args\n    let dest = operands;\n    const args = argv.slice();\n\n    function maybeOption(arg) {\n      return arg.length > 1 && arg[0] === '-';\n    }\n\n    // parse options\n    let activeVariadicOption = null;\n    while (args.length) {\n      const arg = args.shift();\n\n      // literal\n      if (arg === '--') {\n        if (dest === unknown) dest.push(arg);\n        dest.push(...args);\n        break;\n      }\n\n      if (activeVariadicOption && !maybeOption(arg)) {\n        this.emit(`option:${activeVariadicOption.name()}`, arg);\n        continue;\n      }\n      activeVariadicOption = null;\n\n      if (maybeOption(arg)) {\n        const option = this._findOption(arg);\n        // recognised option, call listener to assign value with possible custom processing\n        if (option) {\n          if (option.required) {\n            const value = args.shift();\n            if (value === undefined) this.optionMissingArgument(option);\n            this.emit(`option:${option.name()}`, value);\n          } else if (option.optional) {\n            let value = null;\n            // historical behaviour is optional value is following arg unless an option\n            if (args.length > 0 && !maybeOption(args[0])) {\n              value = args.shift();\n            }\n            this.emit(`option:${option.name()}`, value);\n          } else { // boolean flag\n            this.emit(`option:${option.name()}`);\n          }\n          activeVariadicOption = option.variadic ? option : null;\n          continue;\n        }\n      }\n\n      // Look for combo options following single dash, eat first one if known.\n      if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n        const option = this._findOption(`-${arg[1]}`);\n        if (option) {\n          if (option.required || (option.optional && this._combineFlagAndOptionalValue)) {\n            // option with value following in same argument\n            this.emit(`option:${option.name()}`, arg.slice(2));\n          } else {\n            // boolean option, emit and put back remainder of arg for further processing\n            this.emit(`option:${option.name()}`);\n            args.unshift(`-${arg.slice(2)}`);\n          }\n          continue;\n        }\n      }\n\n      // Look for known long flag with value, like --foo=bar\n      if (/^--[^=]+=/.test(arg)) {\n        const index = arg.indexOf('=');\n        const option = this._findOption(arg.slice(0, index));\n        if (option && (option.required || option.optional)) {\n          this.emit(`option:${option.name()}`, arg.slice(index + 1));\n          continue;\n        }\n      }\n\n      // Not a recognised option by this command.\n      // Might be a command-argument, or subcommand option, or unknown option, or help command or option.\n\n      // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.\n      if (maybeOption(arg)) {\n        dest = unknown;\n      }\n\n      // If using positionalOptions, stop processing our options at subcommand.\n      if ((this._enablePositionalOptions || this._passThroughOptions) && operands.length === 0 && unknown.length === 0) {\n        if (this._findCommand(arg)) {\n          operands.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        } else if (arg === this._helpCommandName && this._hasImplicitHelpCommand()) {\n          operands.push(arg);\n          if (args.length > 0) operands.push(...args);\n          break;\n        } else if (this._defaultCommandName) {\n          unknown.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        }\n      }\n\n      // If using passThroughOptions, stop processing options at first command-argument.\n      if (this._passThroughOptions) {\n        dest.push(arg);\n        if (args.length > 0) dest.push(...args);\n        break;\n      }\n\n      // add arg\n      dest.push(arg);\n    }\n\n    return { operands, unknown };\n  }\n\n  /**\n   * Return an object containing local option values as key-value pairs.\n   *\n   * @return {Object}\n   */\n  opts() {\n    if (this._storeOptionsAsProperties) {\n      // Preserve original behaviour so backwards compatible when still using properties\n      const result = {};\n      const len = this.options.length;\n\n      for (let i = 0; i < len; i++) {\n        const key = this.options[i].attributeName();\n        result[key] = key === this._versionOptionName ? this._version : this[key];\n      }\n      return result;\n    }\n\n    return this._optionValues;\n  }\n\n  /**\n   * Return an object containing merged local and global option values as key-value pairs.\n   *\n   * @return {Object}\n   */\n  optsWithGlobals() {\n    // globals overwrite locals\n    return getCommandAndParents(this).reduce(\n      (combinedOptions, cmd) => Object.assign(combinedOptions, cmd.opts()),\n      {}\n    );\n  }\n\n  /**\n   * Display error message and exit (or call exitOverride).\n   *\n   * @param {string} message\n   * @param {Object} [errorOptions]\n   * @param {string} [errorOptions.code] - an id string representing the error\n   * @param {number} [errorOptions.exitCode] - used with process.exit\n   */\n  error(message, errorOptions) {\n    // output handling\n    this._outputConfiguration.outputError(`${message}\\n`, this._outputConfiguration.writeErr);\n    if (typeof this._showHelpAfterError === 'string') {\n      this._outputConfiguration.writeErr(`${this._showHelpAfterError}\\n`);\n    } else if (this._showHelpAfterError) {\n      this._outputConfiguration.writeErr('\\n');\n      this.outputHelp({ error: true });\n    }\n\n    // exit handling\n    const config = errorOptions || {};\n    const exitCode = config.exitCode || 1;\n    const code = config.code || 'commander.error';\n    this._exit(exitCode, code, message);\n  }\n\n  /**\n   * Apply any option related environment variables, if option does\n   * not have a value from cli or client code.\n   *\n   * @api private\n   */\n  _parseOptionsEnv() {\n    this.options.forEach((option) => {\n      if (option.envVar && option.envVar in process.env) {\n        const optionKey = option.attributeName();\n        // Priority check. Do not overwrite cli or options from unknown source (client-code).\n        if (this.getOptionValue(optionKey) === undefined || ['default', 'config', 'env'].includes(this.getOptionValueSource(optionKey))) {\n          if (option.required || option.optional) { // option can take a value\n            // keep very simple, optional always takes value\n            this.emit(`optionEnv:${option.name()}`, process.env[option.envVar]);\n          } else { // boolean\n            // keep very simple, only care that envVar defined and not the value\n            this.emit(`optionEnv:${option.name()}`);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Apply any implied option values, if option is undefined or default value.\n   *\n   * @api private\n   */\n  _parseOptionsImplied() {\n    const dualHelper = new DualOptions(this.options);\n    const hasCustomOptionValue = (optionKey) => {\n      return this.getOptionValue(optionKey) !== undefined && !['default', 'implied'].includes(this.getOptionValueSource(optionKey));\n    };\n    this.options\n      .filter(option => (option.implied !== undefined) &&\n        hasCustomOptionValue(option.attributeName()) &&\n        dualHelper.valueFromOption(this.getOptionValue(option.attributeName()), option))\n      .forEach((option) => {\n        Object.keys(option.implied)\n          .filter(impliedKey => !hasCustomOptionValue(impliedKey))\n          .forEach(impliedKey => {\n            this.setOptionValueWithSource(impliedKey, option.implied[impliedKey], 'implied');\n          });\n      });\n  }\n\n  /**\n   * Argument `name` is missing.\n   *\n   * @param {string} name\n   * @api private\n   */\n\n  missingArgument(name) {\n    const message = `error: missing required argument '${name}'`;\n    this.error(message, { code: 'commander.missingArgument' });\n  }\n\n  /**\n   * `Option` is missing an argument.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  optionMissingArgument(option) {\n    const message = `error: option '${option.flags}' argument missing`;\n    this.error(message, { code: 'commander.optionMissingArgument' });\n  }\n\n  /**\n   * `Option` does not have a value, and is a mandatory option.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  missingMandatoryOptionValue(option) {\n    const message = `error: required option '${option.flags}' not specified`;\n    this.error(message, { code: 'commander.missingMandatoryOptionValue' });\n  }\n\n  /**\n   * `Option` conflicts with another option.\n   *\n   * @param {Option} option\n   * @param {Option} conflictingOption\n   * @api private\n   */\n  _conflictingOption(option, conflictingOption) {\n    // The calling code does not know whether a negated option is the source of the\n    // value, so do some work to take an educated guess.\n    const findBestOptionFromValue = (option) => {\n      const optionKey = option.attributeName();\n      const optionValue = this.getOptionValue(optionKey);\n      const negativeOption = this.options.find(target => target.negate && optionKey === target.attributeName());\n      const positiveOption = this.options.find(target => !target.negate && optionKey === target.attributeName());\n      if (negativeOption && (\n        (negativeOption.presetArg === undefined && optionValue === false) ||\n        (negativeOption.presetArg !== undefined && optionValue === negativeOption.presetArg)\n      )) {\n        return negativeOption;\n      }\n      return positiveOption || option;\n    };\n\n    const getErrorMessage = (option) => {\n      const bestOption = findBestOptionFromValue(option);\n      const optionKey = bestOption.attributeName();\n      const source = this.getOptionValueSource(optionKey);\n      if (source === 'env') {\n        return `environment variable '${bestOption.envVar}'`;\n      }\n      return `option '${bestOption.flags}'`;\n    };\n\n    const message = `error: ${getErrorMessage(option)} cannot be used with ${getErrorMessage(conflictingOption)}`;\n    this.error(message, { code: 'commander.conflictingOption' });\n  }\n\n  /**\n   * Unknown option `flag`.\n   *\n   * @param {string} flag\n   * @api private\n   */\n\n  unknownOption(flag) {\n    if (this._allowUnknownOption) return;\n    let suggestion = '';\n\n    if (flag.startsWith('--') && this._showSuggestionAfterError) {\n      // Looping to pick up the global options too\n      let candidateFlags = [];\n      let command = this;\n      do {\n        const moreFlags = command.createHelp().visibleOptions(command)\n          .filter(option => option.long)\n          .map(option => option.long);\n        candidateFlags = candidateFlags.concat(moreFlags);\n        command = command.parent;\n      } while (command && !command._enablePositionalOptions);\n      suggestion = suggestSimilar(flag, candidateFlags);\n    }\n\n    const message = `error: unknown option '${flag}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownOption' });\n  }\n\n  /**\n   * Excess arguments, more than expected.\n   *\n   * @param {string[]} receivedArgs\n   * @api private\n   */\n\n  _excessArguments(receivedArgs) {\n    if (this._allowExcessArguments) return;\n\n    const expected = this._args.length;\n    const s = (expected === 1) ? '' : 's';\n    const forSubcommand = this.parent ? ` for '${this.name()}'` : '';\n    const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;\n    this.error(message, { code: 'commander.excessArguments' });\n  }\n\n  /**\n   * Unknown command.\n   *\n   * @api private\n   */\n\n  unknownCommand() {\n    const unknownName = this.args[0];\n    let suggestion = '';\n\n    if (this._showSuggestionAfterError) {\n      const candidateNames = [];\n      this.createHelp().visibleCommands(this).forEach((command) => {\n        candidateNames.push(command.name());\n        // just visible alias\n        if (command.alias()) candidateNames.push(command.alias());\n      });\n      suggestion = suggestSimilar(unknownName, candidateNames);\n    }\n\n    const message = `error: unknown command '${unknownName}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownCommand' });\n  }\n\n  /**\n   * Set the program version to `str`.\n   *\n   * This method auto-registers the \"-V, --version\" flag\n   * which will print the version number when passed.\n   *\n   * You can optionally supply the  flags and description to override the defaults.\n   *\n   * @param {string} str\n   * @param {string} [flags]\n   * @param {string} [description]\n   * @return {this | string} `this` command for chaining, or version string if no arguments\n   */\n\n  version(str, flags, description) {\n    if (str === undefined) return this._version;\n    this._version = str;\n    flags = flags || '-V, --version';\n    description = description || 'output the version number';\n    const versionOption = this.createOption(flags, description);\n    this._versionOptionName = versionOption.attributeName();\n    this.options.push(versionOption);\n    this.on('option:' + versionOption.name(), () => {\n      this._outputConfiguration.writeOut(`${str}\\n`);\n      this._exit(0, 'commander.version', str);\n    });\n    return this;\n  }\n\n  /**\n   * Set the description.\n   *\n   * @param {string} [str]\n   * @param {Object} [argsDescription]\n   * @return {string|Command}\n   */\n  description(str, argsDescription) {\n    if (str === undefined && argsDescription === undefined) return this._description;\n    this._description = str;\n    if (argsDescription) {\n      this._argsDescription = argsDescription;\n    }\n    return this;\n  }\n\n  /**\n   * Set the summary. Used when listed as subcommand of parent.\n   *\n   * @param {string} [str]\n   * @return {string|Command}\n   */\n  summary(str) {\n    if (str === undefined) return this._summary;\n    this._summary = str;\n    return this;\n  }\n\n  /**\n   * Set an alias for the command.\n   *\n   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string} [alias]\n   * @return {string|Command}\n   */\n\n  alias(alias) {\n    if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility\n\n    /** @type {Command} */\n    let command = this;\n    if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler) {\n      // assume adding alias for last added executable subcommand, rather than this\n      command = this.commands[this.commands.length - 1];\n    }\n\n    if (alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\n\n    command._aliases.push(alias);\n    return this;\n  }\n\n  /**\n   * Set aliases for the command.\n   *\n   * Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string[]} [aliases]\n   * @return {string[]|Command}\n   */\n\n  aliases(aliases) {\n    // Getter for the array of aliases is the main reason for having aliases() in addition to alias().\n    if (aliases === undefined) return this._aliases;\n\n    aliases.forEach((alias) => this.alias(alias));\n    return this;\n  }\n\n  /**\n   * Set / get the command usage `str`.\n   *\n   * @param {string} [str]\n   * @return {String|Command}\n   */\n\n  usage(str) {\n    if (str === undefined) {\n      if (this._usage) return this._usage;\n\n      const args = this._args.map((arg) => {\n        return humanReadableArgName(arg);\n      });\n      return [].concat(\n        (this.options.length || this._hasHelpOption ? '[options]' : []),\n        (this.commands.length ? '[command]' : []),\n        (this._args.length ? args : [])\n      ).join(' ');\n    }\n\n    this._usage = str;\n    return this;\n  }\n\n  /**\n   * Get or set the name of the command.\n   *\n   * @param {string} [str]\n   * @return {string|Command}\n   */\n\n  name(str) {\n    if (str === undefined) return this._name;\n    this._name = str;\n    return this;\n  }\n\n  /**\n   * Set the name of the command from script filename, such as process.argv[1],\n   * or require.main.filename, or __filename.\n   *\n   * (Used internally and public although not documented in README.)\n   *\n   * @example\n   * program.nameFromFilename(require.main.filename);\n   *\n   * @param {string} filename\n   * @return {Command}\n   */\n\n  nameFromFilename(filename) {\n    this._name = path.basename(filename, path.extname(filename));\n\n    return this;\n  }\n\n  /**\n   * Get or set the directory for searching for executable subcommands of this command.\n   *\n   * @example\n   * program.executableDir(__dirname);\n   * // or\n   * program.executableDir('subcommands');\n   *\n   * @param {string} [path]\n   * @return {string|Command}\n   */\n\n  executableDir(path) {\n    if (path === undefined) return this._executableDir;\n    this._executableDir = path;\n    return this;\n  }\n\n  /**\n   * Return program help documentation.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout\n   * @return {string}\n   */\n\n  helpInformation(contextOptions) {\n    const helper = this.createHelp();\n    if (helper.helpWidth === undefined) {\n      helper.helpWidth = (contextOptions && contextOptions.error) ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth();\n    }\n    return helper.formatHelp(this, helper);\n  }\n\n  /**\n   * @api private\n   */\n\n  _getHelpContext(contextOptions) {\n    contextOptions = contextOptions || {};\n    const context = { error: !!contextOptions.error };\n    let write;\n    if (context.error) {\n      write = (arg) => this._outputConfiguration.writeErr(arg);\n    } else {\n      write = (arg) => this._outputConfiguration.writeOut(arg);\n    }\n    context.write = contextOptions.write || write;\n    context.command = this;\n    return context;\n  }\n\n  /**\n   * Output help information for this command.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  outputHelp(contextOptions) {\n    let deprecatedCallback;\n    if (typeof contextOptions === 'function') {\n      deprecatedCallback = contextOptions;\n      contextOptions = undefined;\n    }\n    const context = this._getHelpContext(contextOptions);\n\n    getCommandAndParents(this).reverse().forEach(command => command.emit('beforeAllHelp', context));\n    this.emit('beforeHelp', context);\n\n    let helpInformation = this.helpInformation(context);\n    if (deprecatedCallback) {\n      helpInformation = deprecatedCallback(helpInformation);\n      if (typeof helpInformation !== 'string' && !Buffer.isBuffer(helpInformation)) {\n        throw new Error('outputHelp callback must return a string or a Buffer');\n      }\n    }\n    context.write(helpInformation);\n\n    this.emit(this._helpLongFlag); // deprecated\n    this.emit('afterHelp', context);\n    getCommandAndParents(this).forEach(command => command.emit('afterAllHelp', context));\n  }\n\n  /**\n   * You can pass in flags and a description to override the help\n   * flags and help description for your command. Pass in false to\n   * disable the built-in help option.\n   *\n   * @param {string | boolean} [flags]\n   * @param {string} [description]\n   * @return {Command} `this` command for chaining\n   */\n\n  helpOption(flags, description) {\n    if (typeof flags === 'boolean') {\n      this._hasHelpOption = flags;\n      return this;\n    }\n    this._helpFlags = flags || this._helpFlags;\n    this._helpDescription = description || this._helpDescription;\n\n    const helpFlags = splitOptionFlags(this._helpFlags);\n    this._helpShortFlag = helpFlags.shortFlag;\n    this._helpLongFlag = helpFlags.longFlag;\n\n    return this;\n  }\n\n  /**\n   * Output help information and exit.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  help(contextOptions) {\n    this.outputHelp(contextOptions);\n    let exitCode = process.exitCode || 0;\n    if (exitCode === 0 && contextOptions && typeof contextOptions !== 'function' && contextOptions.error) {\n      exitCode = 1;\n    }\n    // message: do not have all displayed text available so only passing placeholder.\n    this._exit(exitCode, 'commander.help', '(outputHelp)');\n  }\n\n  /**\n   * Add additional text to be displayed with the built-in help.\n   *\n   * Position is 'before' or 'after' to affect just this command,\n   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.\n   *\n   * @param {string} position - before or after built-in help\n   * @param {string | Function} text - string to add, or a function returning a string\n   * @return {Command} `this` command for chaining\n   */\n  addHelpText(position, text) {\n    const allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];\n    if (!allowedValues.includes(position)) {\n      throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    const helpEvent = `${position}Help`;\n    this.on(helpEvent, (context) => {\n      let helpStr;\n      if (typeof text === 'function') {\n        helpStr = text({ error: context.error, command: context.command });\n      } else {\n        helpStr = text;\n      }\n      // Ignore falsy value when nothing to output.\n      if (helpStr) {\n        context.write(`${helpStr}\\n`);\n      }\n    });\n    return this;\n  }\n}\n\n/**\n * Output help information if help flags specified\n *\n * @param {Command} cmd - command to output help for\n * @param {Array} args - array of options to search for help flags\n * @api private\n */\n\nfunction outputHelpIfRequested(cmd, args) {\n  const helpOption = cmd._hasHelpOption && args.find(arg => arg === cmd._helpLongFlag || arg === cmd._helpShortFlag);\n  if (helpOption) {\n    cmd.outputHelp();\n    // (Do not have all displayed text available so only passing placeholder.)\n    cmd._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n  }\n}\n\n/**\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\n *\n * @param {string[]} args - array of arguments from node.execArgv\n * @returns {string[]}\n * @api private\n */\n\nfunction incrementNodeInspectorPort(args) {\n  // Testing for these options:\n  //  --inspect[=[host:]port]\n  //  --inspect-brk[=[host:]port]\n  //  --inspect-port=[host:]port\n  return args.map((arg) => {\n    if (!arg.startsWith('--inspect')) {\n      return arg;\n    }\n    let debugOption;\n    let debugHost = '127.0.0.1';\n    let debugPort = '9229';\n    let match;\n    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n      // e.g. --inspect\n      debugOption = match[1];\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {\n      debugOption = match[1];\n      if (/^\\d+$/.test(match[3])) {\n        // e.g. --inspect=1234\n        debugPort = match[3];\n      } else {\n        // e.g. --inspect=localhost\n        debugHost = match[3];\n      }\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null) {\n      // e.g. --inspect=localhost:1234\n      debugOption = match[1];\n      debugHost = match[3];\n      debugPort = match[4];\n    }\n\n    if (debugOption && debugPort !== '0') {\n      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\n    }\n    return arg;\n  });\n}\n\n/**\n * @param {Command} startCommand\n * @returns {Command[]}\n * @api private\n */\n\nfunction getCommandAndParents(startCommand) {\n  const result = [];\n  for (let command = startCommand; command; command = command.parent) {\n    result.push(command);\n  }\n  return result;\n}\n\nexports.Command = Command;\n"],"mappings":"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"}