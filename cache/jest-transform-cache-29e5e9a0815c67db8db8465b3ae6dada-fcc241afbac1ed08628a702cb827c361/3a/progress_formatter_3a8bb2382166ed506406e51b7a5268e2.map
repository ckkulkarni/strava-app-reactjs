{"version":3,"names":["summary_formatter_1","__importDefault","require","value_checker_1","messages","__importStar","STATUS_CHARACTER_MAPPING","Map","TestStepResultStatus","AMBIGUOUS","FAILED","PASSED","PENDING","SKIPPED","UNDEFINED","ProgressFormatter","default","constructor","options","eventBroadcaster","on","envelope","doesHaveValue","testRunFinished","log","testStepFinished","logProgress","testStepResult","status","character","colorFns","forStatus","get","exports","documentation"],"sources":["../../src/formatter/progress_formatter.ts"],"sourcesContent":["import SummaryFormatter from './summary_formatter'\nimport { doesHaveValue } from '../value_checker'\nimport { IFormatterOptions } from './index'\nimport * as messages from '@cucumber/messages'\nimport IEnvelope = messages.Envelope\nimport ITestStepFinished = messages.TestStepFinished\n\nconst STATUS_CHARACTER_MAPPING: Map<messages.TestStepResultStatus, string> =\n  new Map([\n    [messages.TestStepResultStatus.AMBIGUOUS, 'A'],\n    [messages.TestStepResultStatus.FAILED, 'F'],\n    [messages.TestStepResultStatus.PASSED, '.'],\n    [messages.TestStepResultStatus.PENDING, 'P'],\n    [messages.TestStepResultStatus.SKIPPED, '-'],\n    [messages.TestStepResultStatus.UNDEFINED, 'U'],\n  ])\n\nexport default class ProgressFormatter extends SummaryFormatter {\n  public static readonly documentation: string =\n    'Prints one character per scenario.'\n\n  constructor(options: IFormatterOptions) {\n    options.eventBroadcaster.on('envelope', (envelope: IEnvelope) => {\n      if (doesHaveValue(envelope.testRunFinished)) {\n        this.log('\\n\\n')\n      } else if (doesHaveValue(envelope.testStepFinished)) {\n        this.logProgress(envelope.testStepFinished)\n      }\n    })\n    super(options)\n  }\n\n  logProgress({ testStepResult: { status } }: ITestStepFinished): void {\n    const character = this.colorFns.forStatus(status)(\n      STATUS_CHARACTER_MAPPING.get(status)\n    )\n    this.log(character)\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,mBAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,eAAA,GAAAD,OAAA;AAEA,MAAAE,QAAA,GAAAC,YAAA,CAAAH,OAAA;AAIA,MAAMI,wBAAwB,GAC5B,IAAIC,GAAG,CAAC,CACN,CAACH,QAAQ,CAACI,oBAAoB,CAACC,SAAS,EAAE,GAAG,CAAC,EAC9C,CAACL,QAAQ,CAACI,oBAAoB,CAACE,MAAM,EAAE,GAAG,CAAC,EAC3C,CAACN,QAAQ,CAACI,oBAAoB,CAACG,MAAM,EAAE,GAAG,CAAC,EAC3C,CAACP,QAAQ,CAACI,oBAAoB,CAACI,OAAO,EAAE,GAAG,CAAC,EAC5C,CAACR,QAAQ,CAACI,oBAAoB,CAACK,OAAO,EAAE,GAAG,CAAC,EAC5C,CAACT,QAAQ,CAACI,oBAAoB,CAACM,SAAS,EAAE,GAAG,CAAC,CAC/C,CAAC;AAEJ,MAAqBC,iBAAkB,SAAQf,mBAAA,CAAAgB,OAAgB;EAI7DC,YAAYC,OAA0B;IACpCA,OAAO,CAACC,gBAAgB,CAACC,EAAE,CAAC,UAAU,EAAGC,QAAmB,IAAI;MAC9D,IAAI,IAAAlB,eAAA,CAAAmB,aAAa,EAACD,QAAQ,CAACE,eAAe,CAAC,EAAE;QAC3C,IAAI,CAACC,GAAG,CAAC,MAAM,CAAC;OACjB,MAAM,IAAI,IAAArB,eAAA,CAAAmB,aAAa,EAACD,QAAQ,CAACI,gBAAgB,CAAC,EAAE;QACnD,IAAI,CAACC,WAAW,CAACL,QAAQ,CAACI,gBAAgB,CAAC;;IAE/C,CAAC,CAAC;IACF,KAAK,CAACP,OAAO,CAAC;EAChB;EAEAQ,WAAWA,CAAC;IAAEC,cAAc,EAAE;MAAEC;IAAM;EAAE,CAAqB;IAC3D,MAAMC,SAAS,GAAG,IAAI,CAACC,QAAQ,CAACC,SAAS,CAACH,MAAM,CAAC,CAC/CtB,wBAAwB,CAAC0B,GAAG,CAACJ,MAAM,CAAC,CACrC;IACD,IAAI,CAACJ,GAAG,CAACK,SAAS,CAAC;EACrB;;AApBFI,OAAA,CAAAjB,OAAA,GAAAD,iBAAA;AACyBA,iBAAA,CAAAmB,aAAa,GAClC,oCAAoC"}