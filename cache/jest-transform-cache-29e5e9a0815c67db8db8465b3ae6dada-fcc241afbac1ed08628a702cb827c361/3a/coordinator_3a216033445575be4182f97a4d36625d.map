{"version":3,"names":["child_process_1","require","path_1","__importDefault","helpers_1","messages","__importStar","value_checker_1","stopwatch_1","assemble_test_cases_1","runWorkerPath","default","resolve","__dirname","Coordinator","constructor","cwd","logger","eventBroadcaster","eventDataCollector","pickleIds","options","newId","supportCodeLibrary","requireModules","requirePaths","importPaths","numberOfWorkers","stopwatch","create","Array","from","success","workers","inProgressPickles","idleInterventions","parseWorkerMessage","worker","message","ready","state","awakenWorkers","doesHaveValue","jsonEnvelope","envelope","parseEnvelope","emit","testCaseFinished","id","parseTestCaseResult","Error","JSON","stringify","triggeringWorker","Object","values","forEach","giveWork","keys","length","startWorker","total","workerProcess","fork","env","process","CUCUMBER_PARALLEL","CUCUMBER_TOTAL_WORKERS","toString","CUCUMBER_WORKER_ID","stdio","on","exitCode","onWorkerProcessClose","initializeCommand","initialize","filterStacktraces","supportCodeIds","stepDefinitionIds","stepDefinitions","map","s","beforeTestCaseHookDefinitionIds","beforeTestCaseHookDefinitions","h","afterTestCaseHookDefinitionIds","afterTestCaseHookDefinitions","send","every","x","testRunFinished","timestamp","onFinish","worstTestStepResult","getTestCaseAttempt","testCaseStartedId","willBeRetried","shouldCauseFailure","status","start","testRunStarted","assembledTestCases","assembleTestCases","pickles","pickleId","getPickle","Promise","i","warn","nextPicklePlacement","index","placement","placementAt","parallelCanAssign","pickle","force","finalizeCommand","finalize","picklePlacement","nextPickleIndex","splice","testCase","gherkinDocument","getGherkinDocument","uri","retries","retriesForPickle","skip","dryRun","failFast","runCommand","run","elapsed","duration","exports"],"sources":["../../../src/runtime/parallel/coordinator.ts"],"sourcesContent":["import { ChildProcess, fork } from 'child_process'\nimport path from 'path'\nimport { retriesForPickle, shouldCauseFailure } from '../helpers'\nimport * as messages from '@cucumber/messages'\nimport { EventEmitter } from 'events'\nimport { EventDataCollector } from '../../formatter/helpers'\nimport { IRuntime, IRuntimeOptions } from '..'\nimport { ISupportCodeLibrary } from '../../support_code_library_builder/types'\nimport { ICoordinatorReport, IWorkerCommand } from './command_types'\nimport { doesHaveValue } from '../../value_checker'\nimport { IStopwatch, create } from '../stopwatch'\nimport { assembleTestCases, IAssembledTestCases } from '../assemble_test_cases'\nimport { IdGenerator } from '@cucumber/messages'\nimport { ILogger } from '../../logger'\n\nconst runWorkerPath = path.resolve(__dirname, 'run_worker.js')\n\nexport interface INewCoordinatorOptions {\n  cwd: string\n  logger: ILogger\n  eventBroadcaster: EventEmitter\n  eventDataCollector: EventDataCollector\n  options: IRuntimeOptions\n  newId: IdGenerator.NewId\n  pickleIds: string[]\n  supportCodeLibrary: ISupportCodeLibrary\n  requireModules: string[]\n  requirePaths: string[]\n  importPaths: string[]\n  numberOfWorkers: number\n}\n\nconst enum WorkerState {\n  'idle',\n  'closed',\n  'running',\n  'new',\n}\n\ninterface IWorker {\n  state: WorkerState\n  process: ChildProcess\n  id: string\n}\n\ninterface IPicklePlacement {\n  index: number\n  pickle: messages.Pickle\n}\n\nexport default class Coordinator implements IRuntime {\n  private readonly cwd: string\n  private readonly eventBroadcaster: EventEmitter\n  private readonly eventDataCollector: EventDataCollector\n  private readonly stopwatch: IStopwatch\n  private onFinish: (success: boolean) => void\n  private readonly options: IRuntimeOptions\n  private readonly newId: IdGenerator.NewId\n  private readonly pickleIds: string[]\n  private assembledTestCases: IAssembledTestCases\n  private inProgressPickles: Record<string, messages.Pickle>\n  private workers: Record<string, IWorker>\n  private readonly supportCodeLibrary: ISupportCodeLibrary\n  private readonly requireModules: string[]\n  private readonly requirePaths: string[]\n  private readonly importPaths: string[]\n  private readonly numberOfWorkers: number\n  private readonly logger: ILogger\n  private success: boolean\n  private idleInterventions: number\n\n  constructor({\n    cwd,\n    logger,\n    eventBroadcaster,\n    eventDataCollector,\n    pickleIds,\n    options,\n    newId,\n    supportCodeLibrary,\n    requireModules,\n    requirePaths,\n    importPaths,\n    numberOfWorkers,\n  }: INewCoordinatorOptions) {\n    this.cwd = cwd\n    this.logger = logger\n    this.eventBroadcaster = eventBroadcaster\n    this.eventDataCollector = eventDataCollector\n    this.stopwatch = create()\n    this.options = options\n    this.newId = newId\n    this.supportCodeLibrary = supportCodeLibrary\n    this.requireModules = requireModules\n    this.requirePaths = requirePaths\n    this.importPaths = importPaths\n    this.pickleIds = Array.from(pickleIds)\n    this.numberOfWorkers = numberOfWorkers\n    this.success = true\n    this.workers = {}\n    this.inProgressPickles = {}\n    this.idleInterventions = 0\n  }\n\n  parseWorkerMessage(worker: IWorker, message: ICoordinatorReport): void {\n    if (message.ready) {\n      worker.state = WorkerState.idle\n      this.awakenWorkers(worker)\n    } else if (doesHaveValue(message.jsonEnvelope)) {\n      const envelope = messages.parseEnvelope(message.jsonEnvelope)\n      this.eventBroadcaster.emit('envelope', envelope)\n      if (doesHaveValue(envelope.testCaseFinished)) {\n        delete this.inProgressPickles[worker.id]\n        this.parseTestCaseResult(envelope.testCaseFinished)\n      }\n    } else {\n      throw new Error(\n        `Unexpected message from worker: ${JSON.stringify(message)}`\n      )\n    }\n  }\n\n  awakenWorkers(triggeringWorker: IWorker): void {\n    Object.values(this.workers).forEach((worker) => {\n      if (worker.state === WorkerState.idle) {\n        this.giveWork(worker)\n      }\n      return worker.state !== WorkerState.idle\n    })\n\n    if (\n      Object.keys(this.inProgressPickles).length == 0 &&\n      this.pickleIds.length > 0\n    ) {\n      this.giveWork(triggeringWorker, true)\n      this.idleInterventions++\n    }\n  }\n\n  startWorker(id: string, total: number): void {\n    const workerProcess = fork(runWorkerPath, [], {\n      cwd: this.cwd,\n      env: {\n        ...process.env,\n        CUCUMBER_PARALLEL: 'true',\n        CUCUMBER_TOTAL_WORKERS: total.toString(),\n        CUCUMBER_WORKER_ID: id,\n      },\n      stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n    })\n    const worker = { state: WorkerState.new, process: workerProcess, id }\n    this.workers[id] = worker\n    worker.process.on('message', (message: ICoordinatorReport) => {\n      this.parseWorkerMessage(worker, message)\n    })\n    worker.process.on('close', (exitCode) => {\n      worker.state = WorkerState.closed\n      this.onWorkerProcessClose(exitCode)\n    })\n    const initializeCommand: IWorkerCommand = {\n      initialize: {\n        filterStacktraces: this.options.filterStacktraces,\n        requireModules: this.requireModules,\n        requirePaths: this.requirePaths,\n        importPaths: this.importPaths,\n        supportCodeIds: {\n          stepDefinitionIds: this.supportCodeLibrary.stepDefinitions.map(\n            (s) => s.id\n          ),\n          beforeTestCaseHookDefinitionIds:\n            this.supportCodeLibrary.beforeTestCaseHookDefinitions.map(\n              (h) => h.id\n            ),\n          afterTestCaseHookDefinitionIds:\n            this.supportCodeLibrary.afterTestCaseHookDefinitions.map(\n              (h) => h.id\n            ),\n        },\n        options: this.options,\n      },\n    }\n    worker.process.send(initializeCommand)\n  }\n\n  onWorkerProcessClose(exitCode: number): void {\n    const success = exitCode === 0\n    if (!success) {\n      this.success = false\n    }\n\n    if (\n      Object.values(this.workers).every((x) => x.state === WorkerState.closed)\n    ) {\n      const envelope: messages.Envelope = {\n        testRunFinished: {\n          timestamp: this.stopwatch.timestamp(),\n          success,\n        },\n      }\n      this.eventBroadcaster.emit('envelope', envelope)\n      this.onFinish(this.success)\n    }\n  }\n\n  parseTestCaseResult(testCaseFinished: messages.TestCaseFinished): void {\n    const { worstTestStepResult } = this.eventDataCollector.getTestCaseAttempt(\n      testCaseFinished.testCaseStartedId\n    )\n    if (\n      !testCaseFinished.willBeRetried &&\n      shouldCauseFailure(worstTestStepResult.status, this.options)\n    ) {\n      this.success = false\n    }\n  }\n\n  async start(): Promise<boolean> {\n    const envelope: messages.Envelope = {\n      testRunStarted: {\n        timestamp: this.stopwatch.timestamp(),\n      },\n    }\n    this.eventBroadcaster.emit('envelope', envelope)\n    this.stopwatch.start()\n    this.assembledTestCases = await assembleTestCases({\n      eventBroadcaster: this.eventBroadcaster,\n      newId: this.newId,\n      pickles: this.pickleIds.map((pickleId) =>\n        this.eventDataCollector.getPickle(pickleId)\n      ),\n      supportCodeLibrary: this.supportCodeLibrary,\n    })\n    return await new Promise<boolean>((resolve) => {\n      for (let i = 0; i < this.numberOfWorkers; i++) {\n        this.startWorker(i.toString(), this.numberOfWorkers)\n      }\n      this.onFinish = (status) => {\n        if (this.idleInterventions > 0) {\n          this.logger.warn(\n            `WARNING: All workers went idle ${this.idleInterventions} time(s). Consider revising handler passed to setParallelCanAssign.`\n          )\n        }\n\n        resolve(status)\n      }\n    })\n  }\n\n  nextPicklePlacement(): IPicklePlacement {\n    for (let index = 0; index < this.pickleIds.length; index++) {\n      const placement = this.placementAt(index)\n      if (\n        this.supportCodeLibrary.parallelCanAssign(\n          placement.pickle,\n          Object.values(this.inProgressPickles)\n        )\n      ) {\n        return placement\n      }\n    }\n\n    return null\n  }\n\n  placementAt(index: number): IPicklePlacement {\n    return {\n      index,\n      pickle: this.eventDataCollector.getPickle(this.pickleIds[index]),\n    }\n  }\n\n  giveWork(worker: IWorker, force: boolean = false): void {\n    if (this.pickleIds.length < 1) {\n      const finalizeCommand: IWorkerCommand = { finalize: true }\n      worker.state = WorkerState.running\n      worker.process.send(finalizeCommand)\n      return\n    }\n\n    const picklePlacement = force\n      ? this.placementAt(0)\n      : this.nextPicklePlacement()\n\n    if (picklePlacement === null) {\n      return\n    }\n\n    const { index: nextPickleIndex, pickle } = picklePlacement\n\n    this.pickleIds.splice(nextPickleIndex, 1)\n    this.inProgressPickles[worker.id] = pickle\n    const testCase = this.assembledTestCases[pickle.id]\n    const gherkinDocument = this.eventDataCollector.getGherkinDocument(\n      pickle.uri\n    )\n    const retries = retriesForPickle(pickle, this.options)\n    const skip = this.options.dryRun || (this.options.failFast && !this.success)\n    const runCommand: IWorkerCommand = {\n      run: {\n        retries,\n        skip,\n        elapsed: this.stopwatch.duration(),\n        pickle,\n        testCase,\n        gherkinDocument,\n      },\n    }\n    worker.state = WorkerState.running\n    worker.process.send(runCommand)\n  }\n}\n"],"mappings":"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"}