f79fb754cdf47834d9faf7e294132854
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertConfiguration = void 0;
const configuration_1 = require("../configuration");
async function convertConfiguration(flatConfiguration, env) {
  return {
    sources: {
      paths: flatConfiguration.paths,
      defaultDialect: flatConfiguration.language,
      names: flatConfiguration.name,
      tagExpression: flatConfiguration.tags,
      order: flatConfiguration.order
    },
    support: {
      requireModules: flatConfiguration.requireModule,
      requirePaths: flatConfiguration.require,
      importPaths: flatConfiguration.import
    },
    runtime: {
      dryRun: flatConfiguration.dryRun,
      failFast: flatConfiguration.failFast,
      filterStacktraces: !flatConfiguration.backtrace,
      parallel: flatConfiguration.parallel,
      retry: flatConfiguration.retry,
      retryTagFilter: flatConfiguration.retryTagFilter,
      strict: flatConfiguration.strict,
      worldParameters: flatConfiguration.worldParameters
    },
    formats: convertFormats(flatConfiguration, env)
  };
}
exports.convertConfiguration = convertConfiguration;
function convertFormats(flatConfiguration, env) {
  var _a, _b;
  const splitFormats = flatConfiguration.format.map(item => configuration_1.OptionSplitter.split(item));
  return {
    stdout: (_b = (_a = [...splitFormats].reverse().find(([, target]) => !target)) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : 'progress',
    files: splitFormats.filter(([, target]) => !!target).reduce((mapped, [type, target]) => {
      return {
        ...mapped,
        [target]: type
      };
    }, {}),
    publish: makePublishConfig(flatConfiguration, env),
    options: flatConfiguration.formatOptions
  };
}
function makePublishConfig(flatConfiguration, env) {
  const enabled = isPublishing(flatConfiguration, env);
  if (!enabled) {
    return false;
  }
  return {
    url: env.CUCUMBER_PUBLISH_URL,
    token: env.CUCUMBER_PUBLISH_TOKEN
  };
}
function isPublishing(flatConfiguration, env) {
  return flatConfiguration.publish || (0, configuration_1.isTruthyString)(env.CUCUMBER_PUBLISH_ENABLED) || env.CUCUMBER_PUBLISH_TOKEN !== undefined;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25maWd1cmF0aW9uXzEiLCJyZXF1aXJlIiwiY29udmVydENvbmZpZ3VyYXRpb24iLCJmbGF0Q29uZmlndXJhdGlvbiIsImVudiIsInNvdXJjZXMiLCJwYXRocyIsImRlZmF1bHREaWFsZWN0IiwibGFuZ3VhZ2UiLCJuYW1lcyIsIm5hbWUiLCJ0YWdFeHByZXNzaW9uIiwidGFncyIsIm9yZGVyIiwic3VwcG9ydCIsInJlcXVpcmVNb2R1bGVzIiwicmVxdWlyZU1vZHVsZSIsInJlcXVpcmVQYXRocyIsImltcG9ydFBhdGhzIiwiaW1wb3J0IiwicnVudGltZSIsImRyeVJ1biIsImZhaWxGYXN0IiwiZmlsdGVyU3RhY2t0cmFjZXMiLCJiYWNrdHJhY2UiLCJwYXJhbGxlbCIsInJldHJ5IiwicmV0cnlUYWdGaWx0ZXIiLCJzdHJpY3QiLCJ3b3JsZFBhcmFtZXRlcnMiLCJmb3JtYXRzIiwiY29udmVydEZvcm1hdHMiLCJleHBvcnRzIiwic3BsaXRGb3JtYXRzIiwiZm9ybWF0IiwibWFwIiwiaXRlbSIsIk9wdGlvblNwbGl0dGVyIiwic3BsaXQiLCJzdGRvdXQiLCJfYiIsIl9hIiwicmV2ZXJzZSIsImZpbmQiLCJ0YXJnZXQiLCJmaWxlcyIsImZpbHRlciIsInJlZHVjZSIsIm1hcHBlZCIsInR5cGUiLCJwdWJsaXNoIiwibWFrZVB1Ymxpc2hDb25maWciLCJvcHRpb25zIiwiZm9ybWF0T3B0aW9ucyIsImVuYWJsZWQiLCJpc1B1Ymxpc2hpbmciLCJ1cmwiLCJDVUNVTUJFUl9QVUJMSVNIX1VSTCIsInRva2VuIiwiQ1VDVU1CRVJfUFVCTElTSF9UT0tFTiIsImlzVHJ1dGh5U3RyaW5nIiwiQ1VDVU1CRVJfUFVCTElTSF9FTkFCTEVEIiwidW5kZWZpbmVkIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwaS9jb252ZXJ0X2NvbmZpZ3VyYXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSUNvbmZpZ3VyYXRpb24sXG4gIGlzVHJ1dGh5U3RyaW5nLFxuICBPcHRpb25TcGxpdHRlcixcbn0gZnJvbSAnLi4vY29uZmlndXJhdGlvbidcbmltcG9ydCB7IElQdWJsaXNoQ29uZmlnIH0gZnJvbSAnLi4vZm9ybWF0dGVyJ1xuaW1wb3J0IHsgSVJ1bkNvbmZpZ3VyYXRpb24gfSBmcm9tICcuL3R5cGVzJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29udmVydENvbmZpZ3VyYXRpb24oXG4gIGZsYXRDb25maWd1cmF0aW9uOiBJQ29uZmlndXJhdGlvbixcbiAgZW52OiBOb2RlSlMuUHJvY2Vzc0VudlxuKTogUHJvbWlzZTxJUnVuQ29uZmlndXJhdGlvbj4ge1xuICByZXR1cm4ge1xuICAgIHNvdXJjZXM6IHtcbiAgICAgIHBhdGhzOiBmbGF0Q29uZmlndXJhdGlvbi5wYXRocyxcbiAgICAgIGRlZmF1bHREaWFsZWN0OiBmbGF0Q29uZmlndXJhdGlvbi5sYW5ndWFnZSxcbiAgICAgIG5hbWVzOiBmbGF0Q29uZmlndXJhdGlvbi5uYW1lLFxuICAgICAgdGFnRXhwcmVzc2lvbjogZmxhdENvbmZpZ3VyYXRpb24udGFncyxcbiAgICAgIG9yZGVyOiBmbGF0Q29uZmlndXJhdGlvbi5vcmRlcixcbiAgICB9LFxuICAgIHN1cHBvcnQ6IHtcbiAgICAgIHJlcXVpcmVNb2R1bGVzOiBmbGF0Q29uZmlndXJhdGlvbi5yZXF1aXJlTW9kdWxlLFxuICAgICAgcmVxdWlyZVBhdGhzOiBmbGF0Q29uZmlndXJhdGlvbi5yZXF1aXJlLFxuICAgICAgaW1wb3J0UGF0aHM6IGZsYXRDb25maWd1cmF0aW9uLmltcG9ydCxcbiAgICB9LFxuICAgIHJ1bnRpbWU6IHtcbiAgICAgIGRyeVJ1bjogZmxhdENvbmZpZ3VyYXRpb24uZHJ5UnVuLFxuICAgICAgZmFpbEZhc3Q6IGZsYXRDb25maWd1cmF0aW9uLmZhaWxGYXN0LFxuICAgICAgZmlsdGVyU3RhY2t0cmFjZXM6ICFmbGF0Q29uZmlndXJhdGlvbi5iYWNrdHJhY2UsXG4gICAgICBwYXJhbGxlbDogZmxhdENvbmZpZ3VyYXRpb24ucGFyYWxsZWwsXG4gICAgICByZXRyeTogZmxhdENvbmZpZ3VyYXRpb24ucmV0cnksXG4gICAgICByZXRyeVRhZ0ZpbHRlcjogZmxhdENvbmZpZ3VyYXRpb24ucmV0cnlUYWdGaWx0ZXIsXG4gICAgICBzdHJpY3Q6IGZsYXRDb25maWd1cmF0aW9uLnN0cmljdCxcbiAgICAgIHdvcmxkUGFyYW1ldGVyczogZmxhdENvbmZpZ3VyYXRpb24ud29ybGRQYXJhbWV0ZXJzLFxuICAgIH0sXG4gICAgZm9ybWF0czogY29udmVydEZvcm1hdHMoZmxhdENvbmZpZ3VyYXRpb24sIGVudiksXG4gIH1cbn1cblxuZnVuY3Rpb24gY29udmVydEZvcm1hdHMoXG4gIGZsYXRDb25maWd1cmF0aW9uOiBJQ29uZmlndXJhdGlvbixcbiAgZW52OiBOb2RlSlMuUHJvY2Vzc0VudlxuKSB7XG4gIGNvbnN0IHNwbGl0Rm9ybWF0czogc3RyaW5nW11bXSA9IGZsYXRDb25maWd1cmF0aW9uLmZvcm1hdC5tYXAoKGl0ZW0pID0+XG4gICAgT3B0aW9uU3BsaXR0ZXIuc3BsaXQoaXRlbSlcbiAgKVxuICByZXR1cm4ge1xuICAgIHN0ZG91dDpcbiAgICAgIFsuLi5zcGxpdEZvcm1hdHNdLnJldmVyc2UoKS5maW5kKChbLCB0YXJnZXRdKSA9PiAhdGFyZ2V0KT8uWzBdID8/XG4gICAgICAncHJvZ3Jlc3MnLFxuICAgIGZpbGVzOiBzcGxpdEZvcm1hdHNcbiAgICAgIC5maWx0ZXIoKFssIHRhcmdldF0pID0+ICEhdGFyZ2V0KVxuICAgICAgLnJlZHVjZSgobWFwcGVkLCBbdHlwZSwgdGFyZ2V0XSkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLm1hcHBlZCxcbiAgICAgICAgICBbdGFyZ2V0XTogdHlwZSxcbiAgICAgICAgfVxuICAgICAgfSwge30pLFxuICAgIHB1Ymxpc2g6IG1ha2VQdWJsaXNoQ29uZmlnKGZsYXRDb25maWd1cmF0aW9uLCBlbnYpLFxuICAgIG9wdGlvbnM6IGZsYXRDb25maWd1cmF0aW9uLmZvcm1hdE9wdGlvbnMsXG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZVB1Ymxpc2hDb25maWcoXG4gIGZsYXRDb25maWd1cmF0aW9uOiBJQ29uZmlndXJhdGlvbixcbiAgZW52OiBOb2RlSlMuUHJvY2Vzc0VudlxuKTogSVB1Ymxpc2hDb25maWcgfCBmYWxzZSB7XG4gIGNvbnN0IGVuYWJsZWQgPSBpc1B1Ymxpc2hpbmcoZmxhdENvbmZpZ3VyYXRpb24sIGVudilcbiAgaWYgKCFlbmFibGVkKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIHtcbiAgICB1cmw6IGVudi5DVUNVTUJFUl9QVUJMSVNIX1VSTCxcbiAgICB0b2tlbjogZW52LkNVQ1VNQkVSX1BVQkxJU0hfVE9LRU4sXG4gIH1cbn1cblxuZnVuY3Rpb24gaXNQdWJsaXNoaW5nKFxuICBmbGF0Q29uZmlndXJhdGlvbjogSUNvbmZpZ3VyYXRpb24sXG4gIGVudjogTm9kZUpTLlByb2Nlc3NFbnZcbik6IGJvb2xlYW4ge1xuICByZXR1cm4gKFxuICAgIGZsYXRDb25maWd1cmF0aW9uLnB1Ymxpc2ggfHxcbiAgICBpc1RydXRoeVN0cmluZyhlbnYuQ1VDVU1CRVJfUFVCTElTSF9FTkFCTEVEKSB8fFxuICAgIGVudi5DVUNVTUJFUl9QVUJMSVNIX1RPS0VOICE9PSB1bmRlZmluZWRcbiAgKVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFBQSxlQUFBLEdBQUFDLE9BQUE7QUFRTyxlQUFlQyxvQkFBb0JBLENBQ3hDQyxpQkFBaUMsRUFDakNDLEdBQXNCO0VBRXRCLE9BQU87SUFDTEMsT0FBTyxFQUFFO01BQ1BDLEtBQUssRUFBRUgsaUJBQWlCLENBQUNHLEtBQUs7TUFDOUJDLGNBQWMsRUFBRUosaUJBQWlCLENBQUNLLFFBQVE7TUFDMUNDLEtBQUssRUFBRU4saUJBQWlCLENBQUNPLElBQUk7TUFDN0JDLGFBQWEsRUFBRVIsaUJBQWlCLENBQUNTLElBQUk7TUFDckNDLEtBQUssRUFBRVYsaUJBQWlCLENBQUNVO0tBQzFCO0lBQ0RD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