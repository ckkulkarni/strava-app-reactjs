fcd9e76b987db95fc4aac23e93bdf0a8
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterStackTrace = exports.isFileNameInCucumber = void 0;
const path_1 = __importDefault(require("path"));
const value_checker_1 = require("./value_checker");
const projectRootPath = path_1.default.join(__dirname, '..');
const projectChildDirs = ['src', 'lib', 'node_modules'];
function isFileNameInCucumber(fileName) {
  return projectChildDirs.some(dir => fileName.startsWith(path_1.default.join(projectRootPath, dir)));
}
exports.isFileNameInCucumber = isFileNameInCucumber;
function filterStackTrace(frames) {
  if (isErrorInCucumber(frames)) {
    return frames;
  }
  const index = frames.findIndex(x => isFrameInCucumber(x));
  if (index === -1) {
    return frames;
  }
  return frames.slice(0, index);
}
exports.filterStackTrace = filterStackTrace;
function isErrorInCucumber(frames) {
  const filteredFrames = frames.filter(x => !isFrameInNode(x));
  return filteredFrames.length > 0 && isFrameInCucumber(filteredFrames[0]);
}
function isFrameInCucumber(frame) {
  const fileName = (0, value_checker_1.valueOrDefault)(frame.getFileName(), '');
  return isFileNameInCucumber(fileName);
}
function isFrameInNode(frame) {
  const fileName = (0, value_checker_1.valueOrDefault)(frame.getFileName(), '');
  return !fileName.includes(path_1.default.sep);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwYXRoXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZXF1aXJlIiwidmFsdWVfY2hlY2tlcl8xIiwicHJvamVjdFJvb3RQYXRoIiwiZGVmYXVsdCIsImpvaW4iLCJfX2Rpcm5hbWUiLCJwcm9qZWN0Q2hpbGREaXJzIiwiaXNGaWxlTmFtZUluQ3VjdW1iZXIiLCJmaWxlTmFtZSIsInNvbWUiLCJkaXIiLCJzdGFydHNXaXRoIiwiZXhwb3J0cyIsImZpbHRlclN0YWNrVHJhY2UiLCJmcmFtZXMiLCJpc0Vycm9ySW5DdWN1bWJlciIsImluZGV4IiwiZmluZEluZGV4IiwieCIsImlzRnJhbWVJbkN1Y3VtYmVyIiwic2xpY2UiLCJmaWx0ZXJlZEZyYW1lcyIsImZpbHRlciIsImlzRnJhbWVJbk5vZGUiLCJsZW5ndGgiLCJmcmFtZSIsInZhbHVlT3JEZWZhdWx0IiwiZ2V0RmlsZU5hbWUiLCJpbmNsdWRlcyIsInNlcCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9maWx0ZXJfc3RhY2tfdHJhY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCB7IHZhbHVlT3JEZWZhdWx0IH0gZnJvbSAnLi92YWx1ZV9jaGVja2VyJ1xuaW1wb3J0IHsgU3RhY2tGcmFtZSB9IGZyb20gJ2Vycm9yLXN0YWNrLXBhcnNlcidcblxuY29uc3QgcHJvamVjdFJvb3RQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJylcbmNvbnN0IHByb2plY3RDaGlsZERpcnMgPSBbJ3NyYycsICdsaWInLCAnbm9kZV9tb2R1bGVzJ11cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsZU5hbWVJbkN1Y3VtYmVyKGZpbGVOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIHByb2plY3RDaGlsZERpcnMuc29tZSgoZGlyKSA9PlxuICAgIGZpbGVOYW1lLnN0YXJ0c1dpdGgocGF0aC5qb2luKHByb2plY3RSb290UGF0aCwgZGlyKSlcbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyU3RhY2tUcmFjZShmcmFtZXM6IFN0YWNrRnJhbWVbXSk6IFN0YWNrRnJhbWVbXSB7XG4gIGlmIChpc0Vycm9ySW5DdWN1bWJlcihmcmFtZXMpKSB7XG4gICAgcmV0dXJuIGZyYW1lc1xuICB9XG4gIGNvbnN0IGluZGV4ID0gZnJhbWVzLmZpbmRJbmRleCgoeCkgPT4gaXNGcmFtZUluQ3VjdW1iZXIoeCkpXG4gIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICByZXR1cm4gZnJhbWVzXG4gIH1cbiAgcmV0dXJuIGZyYW1lcy5zbGljZSgwLCBpbmRleClcbn1cblxuZnVuY3Rpb24gaXNFcnJvckluQ3VjdW1iZXIoZnJhbWVzOiBTdGFja0ZyYW1lW10pOiBib29sZWFuIHtcbiAgY29uc3QgZmlsdGVyZWRGcmFtZXMgPSBmcmFtZXMuZmlsdGVyKCh4KSA9PiAhaXNGcmFtZUluTm9kZSh4KSlcbiAgcmV0dXJuIGZpbHRlcmVkRnJhbWVzLmxlbmd0aCA+IDAgJiYgaXNGcmFtZUluQ3VjdW1iZXIoZmlsdGVyZWRGcmFtZXNbMF0pXG59XG5cbmZ1bmN0aW9uIGlzRnJhbWVJbkN1Y3VtYmVyKGZyYW1lOiBTdGFja0ZyYW1lKTogYm9vbGVhbiB7XG4gIGNvbnN0IGZpbGVOYW1lID0gdmFsdWVPckRlZmF1bHQoZnJhbWUuZ2V0RmlsZU5hbWUoKSwgJycpXG4gIHJldHVybiBpc0ZpbGVOYW1lSW5DdWN1bWJlcihmaWxlTmFtZSlcbn1cblxuZnVuY3Rpb24gaXNGcmFtZUluTm9kZShmcmFtZTogU3RhY2tGcmFtZSk6IGJvb2xlYW4ge1xuICBjb25zdCBmaWxlTmFtZSA9IHZhbHVlT3JEZWZhdWx0KGZyYW1lLmdldEZpbGVOYW1lKCksICcnKVxuICByZXR1cm4gIWZpbGVOYW1lLmluY2x1ZGVzKHBhdGguc2VwKVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLE1BQUFBLE1BQUEsR0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FBQ0EsTUFBQUMsZUFBQSxHQUFBRCxPQUFBO0FBR0EsTUFBTUUsZUFBZSxHQUFHSixNQUFBLENBQUFLLE9BQUksQ0FBQ0MsSUFBSSxDQUFDQyxTQUFTLEVBQUUsSUFBSSxDQUFDO0FBQ2xELE1BQU1DLGdCQUFnQixHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxjQUFjLENBQUM7QUFFdkQsU0FBZ0JDLG9CQUFvQkEsQ0FBQ0MsUUFBZ0I7RUFDbkQsT0FBT0YsZ0JBQWdCLENBQUNHLElBQUksQ0FBRUMsR0FBRyxJQUMvQkYsUUFBUSxDQUFDRyxVQUFVLENBQUNiLE1BQUEsQ0FBQUssT0FBSSxDQUFDQyxJQUFJLENBQUNGLGVBQWUsRUFBRVEsR0FBRyxDQUFDLENBQUMsQ0FDckQ7QUFDSDtBQUpBRSxPQUFBLENBQUFMLG9CQUFBLEdBQUFBLG9CQUFBO0FBTUEsU0FBZ0JNLGdCQUFnQkEsQ0FBQ0MsTUFBb0I7RUFDbkQsSUFBSUMsaUJBQWlCLENBQUNELE1BQU0sQ0FBQyxFQUFFO0lBQzdCLE9BQU9BLE1BQU07O0VBRWYsTUFBTUUsS0FBSyxHQUFHRixNQUFNLENBQUNHLFNBQVMsQ0FBRUMsQ0FBQyxJQUFLQyxpQkFBaUIsQ0FBQ0QsQ0FBQyxDQUFDLENBQUM7RUFDM0QsSUFBSUYsS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO0lBQ2hCLE9BQU9GLE1BQU07O0VBRWYsT0FBT0EsTUFBTSxDQUFDTSxLQUFLLENBQUMsQ0FBQyxFQUFFSixLQUFLLENBQUM7QUFDL0I7QUFUQUosT0FBQSxDQUFBQyxnQkFBQSxHQUFBQSxnQkFBQTtBQVdBLFNBQVNFLGlCQUFpQkEsQ0FBQ0QsTUFBb0I7RUFDN0MsTUFBTU8sY0FBYyxHQUFHUCxNQUFNLENBQUNRLE1BQU0sQ0FBRUosQ0FBQyxJQUFLLENBQUNLLGFBQWEsQ0FBQ0wsQ0FBQyxDQUFDLENBQUM7RUFDOUQsT0FBT0csY0FBYyxDQUFDRyxNQUFNLEdBQUcsQ0FBQyxJQUFJTCxpQkFBaUIsQ0FBQ0UsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFFO0FBRUEsU0FBU0YsaUJBQWlCQSxDQUFDTSxLQUFpQjtFQUMxQyxNQUFNakIsUUFBUSxHQUFHLElBQUFQLGVBQUEsQ0FBQXlCLGNBQWMsRUFBQ0QsS0FBSyxDQUFDRSxXQUFXLEVBQUUsRUFBRSxFQUFFLENBQUM7RUFDeEQsT0FBT3BCLG9CQUFvQixDQUFDQyxRQUFRLENBQUM7QUFDdkM7QUFFQSxTQUFTZSxhQUFhQSxDQUFDRSxLQUFpQjtFQUN0QyxNQUFNakIsUUFBUSxHQUFHLElBQUFQLGVBQUEsQ0FBQXlCLGNBQWMsRUFBQ0QsS0FBSyxDQUFDRSxXQUFXLEVBQUUsRUFBRSxFQUFFLENBQUM7RUFDeEQsT0FBTyxDQUFDbkIsUUFBUSxDQUFDb0IsUUFBUSxDQUFDOUIsTUFBQSxDQUFBSyxPQUFJLENBQUMwQixHQUFHLENBQUM7QUFDckMifQ==