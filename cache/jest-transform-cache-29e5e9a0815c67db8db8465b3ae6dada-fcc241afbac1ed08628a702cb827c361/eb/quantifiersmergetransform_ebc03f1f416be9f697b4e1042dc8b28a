339f033ef9cf6d67d39b3a50df9b3751
/**
 * The MIT License (MIT)
 * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>
 */

'use strict';

var _require = require('../../transform/utils'),
  increaseQuantifierByOne = _require.increaseQuantifierByOne;

/**
 * A regexp-tree plugin to merge quantifiers
 *
 * a+a+ -> a{2,}
 * a{2}a{3} -> a{5}
 * a{1,2}a{2,3} -> a{3,5}
 */

module.exports = {
  Repetition: function Repetition(path) {
    var node = path.node,
      parent = path.parent;
    if (parent.type !== 'Alternative' || !path.index) {
      return;
    }
    var previousSibling = path.getPreviousSibling();
    if (!previousSibling) {
      return;
    }
    if (previousSibling.node.type === 'Repetition') {
      if (!previousSibling.getChild().hasEqualSource(path.getChild())) {
        return;
      }
      var _extractFromTo = extractFromTo(previousSibling.node.quantifier),
        previousSiblingFrom = _extractFromTo.from,
        previousSiblingTo = _extractFromTo.to;
      var _extractFromTo2 = extractFromTo(node.quantifier),
        nodeFrom = _extractFromTo2.from,
        nodeTo = _extractFromTo2.to;

      // It's does not seem reliable to merge quantifiers with different greediness
      // when none of both is a greedy open range

      if (previousSibling.node.quantifier.greedy !== node.quantifier.greedy && !isGreedyOpenRange(previousSibling.node.quantifier) && !isGreedyOpenRange(node.quantifier)) {
        return;
      }

      // a*a* -> a*
      // a*a+ -> a+
      // a+a+ -> a{2,}
      // a{2}a{4} -> a{6}
      // a{1,2}a{2,3} -> a{3,5}
      // a{1,}a{2,} -> a{3,}
      // a+a{2,} -> a{3,}

      // a??a{2,} -> a{2,}
      // a*?a{2,} -> a{2,}
      // a+?a{2,} -> a{3,}

      node.quantifier.kind = 'Range';
      node.quantifier.from = previousSiblingFrom + nodeFrom;
      if (previousSiblingTo && nodeTo) {
        node.quantifier.to = previousSiblingTo + nodeTo;
      } else {
        delete node.quantifier.to;
      }
      if (isGreedyOpenRange(previousSibling.node.quantifier) || isGreedyOpenRange(node.quantifier)) {
        node.quantifier.greedy = true;
      }
      previousSibling.remove();
    } else {
      if (!previousSibling.hasEqualSource(path.getChild())) {
        return;
      }
      increaseQuantifierByOne(node.quantifier);
      previousSibling.remove();
    }
  }
};
function isGreedyOpenRange(quantifier) {
  return quantifier.greedy && (quantifier.kind === '+' || quantifier.kind === '*' || quantifier.kind === 'Range' && !quantifier.to);
}
function extractFromTo(quantifier) {
  var from = void 0,
    to = void 0;
  if (quantifier.kind === '*') {
    from = 0;
  } else if (quantifier.kind === '+') {
    from = 1;
  } else if (quantifier.kind === '?') {
    from = 0;
    to = 1;
  } else {
    from = quantifier.from;
    if (quantifier.to) {
      to = quantifier.to;
    }
  }
  return {
    from: from,
    to: to
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVxdWlyZSIsInJlcXVpcmUiLCJpbmNyZWFzZVF1YW50aWZpZXJCeU9uZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJSZXBldGl0aW9uIiwicGF0aCIsIm5vZGUiLCJwYXJlbnQiLCJ0eXBlIiwiaW5kZXgiLCJwcmV2aW91c1NpYmxpbmciLCJnZXRQcmV2aW91c1NpYmxpbmciLCJnZXRDaGlsZCIsImhhc0VxdWFsU291cmNlIiwiX2V4dHJhY3RGcm9tVG8iLCJleHRyYWN0RnJvbVRvIiwicXVhbnRpZmllciIsInByZXZpb3VzU2libGluZ0Zyb20iLCJmcm9tIiwicHJldmlvdXNTaWJsaW5nVG8iLCJ0byIsIl9leHRyYWN0RnJvbVRvMiIsIm5vZGVGcm9tIiwibm9kZVRvIiwiZ3JlZWR5IiwiaXNHcmVlZHlPcGVuUmFuZ2UiLCJraW5kIiwicmVtb3ZlIl0sInNvdXJjZXMiOlsicXVhbnRpZmllcnMtbWVyZ2UtdHJhbnNmb3JtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCBEbWl0cnkgU29zaG5pa292IDxkbWl0cnkuc29zaG5pa292QGdtYWlsLmNvbT5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uLy4uL3RyYW5zZm9ybS91dGlscycpLFxuICAgIGluY3JlYXNlUXVhbnRpZmllckJ5T25lID0gX3JlcXVpcmUuaW5jcmVhc2VRdWFudGlmaWVyQnlPbmU7XG5cbi8qKlxuICogQSByZWdleHAtdHJlZSBwbHVnaW4gdG8gbWVyZ2UgcXVhbnRpZmllcnNcbiAqXG4gKiBhK2ErIC0+IGF7Mix9XG4gKiBhezJ9YXszfSAtPiBhezV9XG4gKiBhezEsMn1hezIsM30gLT4gYXszLDV9XG4gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUmVwZXRpdGlvbjogZnVuY3Rpb24gUmVwZXRpdGlvbihwYXRoKSB7XG4gICAgdmFyIG5vZGUgPSBwYXRoLm5vZGUsXG4gICAgICAgIHBhcmVudCA9IHBhdGgucGFyZW50O1xuXG5cbiAgICBpZiAocGFyZW50LnR5cGUgIT09ICdBbHRlcm5hdGl2ZScgfHwgIXBhdGguaW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNTaWJsaW5nID0gcGF0aC5nZXRQcmV2aW91c1NpYmxpbmcoKTtcblxuICAgIGlmICghcHJldmlvdXNTaWJsaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHByZXZpb3VzU2libGluZy5ub2RlLnR5cGUgPT09ICdSZXBldGl0aW9uJykge1xuICAgICAgaWYgKCFwcmV2aW91c1NpYmxpbmcuZ2V0Q2hpbGQoKS5oYXNFcXVhbFNvdXJjZShwYXRoLmdldENoaWxkKCkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIF9leHRyYWN0RnJvbVRvID0gZXh0cmFjdEZyb21UbyhwcmV2aW91c1NpYmxpbmcubm9kZS5xdWFudGlmaWVyKSxcbiAgICAgICAgICBwcmV2aW91c1NpYmxpbmdGcm9tID0gX2V4dHJhY3RGcm9tVG8uZnJvbSxcbiAgICAgICAgICBwcmV2aW91c1NpYmxpbmdUbyA9IF9leHRyYWN0RnJvbVRvLnRvO1xuXG4gICAgICB2YXIgX2V4dHJhY3RGcm9tVG8yID0gZXh0cmFjdEZyb21Ubyhub2RlLnF1YW50aWZpZXIpLFxuICAgICAgICAgIG5vZGVGcm9tID0gX2V4dHJhY3RGcm9tVG8yLmZyb20sXG4gICAgICAgICAgbm9kZVRvID0gX2V4dHJhY3RGcm9tVG8yLnRvO1xuXG4gICAgICAvLyBJdCdzIGRvZXMgbm90IHNlZW0gcmVsaWFibGUgdG8gbWVyZ2UgcXVhbnRpZmllcnMgd2l0aCBkaWZmZXJlbnQgZ3JlZWRpbmVzc1xuICAgICAgLy8gd2hlbiBub25lIG9mIGJvdGggaXMgYSBncmVlZHkgb3BlbiByYW5nZVxuXG5cbiAgICAgIGlmIChwcmV2aW91c1NpYmxpbmcubm9kZS5xdWFudGlmaWVyLmdyZWVkeSAhPT0gbm9kZS5xdWFudGlmaWVyLmdyZWVkeSAmJiAhaXNHcmVlZHlPcGVuUmFuZ2UocHJldmlvdXNTaWJsaW5nLm5vZGUucXVhbnRpZmllcikgJiYgIWlzR3JlZWR5T3BlblJhbmdlKG5vZGUucXVhbnRpZmllcikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBhKmEqIC0+IGEqXG4gICAgICAvLyBhKmErIC0+IGErXG4gICAgICAvLyBhK2ErIC0+IGF7Mix9XG4gICAgICAvLyBhezJ9YXs0fSAtPiBhezZ9XG4gICAgICAvLyBhezEsMn1hezIsM30gLT4gYXszLDV9XG4gICAgICAvLyBhezEsfWF7Mix9IC0+IGF7Myx9XG4gICAgICAvLyBhK2F7Mix9IC0+IGF7Myx9XG5cbiAgICAgIC8vIGE/P2F7Mix9IC0+IGF7Mix9XG4gICAgICAvLyBhKj9hezIsfSAtPiBhezIsfVxuICAgICAgLy8gYSs/YXsyLH0gLT4gYXszLH1cblxuICAgICAgbm9kZS5xdWFudGlmaWVyLmtpbmQgPSAnUmFuZ2UnO1xuICAgICAgbm9kZS5xdWFudGlmaWVyLmZyb20gPSBwcmV2aW91c1NpYmxpbmdGcm9tICsgbm9kZUZyb207XG4gICAgICBpZiAocHJldmlvdXNTaWJsaW5nVG8gJiYgbm9kZVRvKSB7XG4gICAgICAgIG5vZGUucXVhbnRpZmllci50byA9IHByZXZpb3VzU2libGluZ1RvICsgbm9kZVRvO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIG5vZGUucXVhbnRpZmllci50bztcbiAgICAgIH1cbiAgICAgIGlmIChpc0dyZWVkeU9wZW5SYW5nZShwcmV2aW91c1NpYmxpbmcubm9kZS5xdWFudGlmaWVyKSB8fCBpc0dyZWVkeU9wZW5SYW5nZShub2RlLnF1YW50aWZpZXIpKSB7XG4gICAgICAgIG5vZGUucXVhbnRpZmllci5ncmVlZHkgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBwcmV2aW91c1NpYmxpbmcucmVtb3ZlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghcHJldmlvdXNTaWJsaW5nLmhhc0VxdWFsU291cmNlKHBhdGguZ2V0Q2hpbGQoKSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpbmNyZWFzZVF1YW50aWZpZXJCeU9uZShub2RlLnF1YW50aWZpZXIpO1xuICAgICAgcHJldmlvdXNTaWJsaW5nLnJlbW92ZSgpO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gaXNHcmVlZHlPcGVuUmFuZ2UocXVhbnRpZmllcikge1xuICByZXR1cm4gcXVhbnRpZmllci5ncmVlZHkgJiYgKHF1YW50aWZpZXIua2luZCA9PT0gJysnIHx8IHF1YW50aWZpZXIua2luZCA9PT0gJyonIHx8IHF1YW50aWZpZXIua2luZCA9PT0gJ1JhbmdlJyAmJiAhcXVhbnRpZmllci50byk7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RGcm9tVG8ocXVhbnRpZmllcikge1xuICB2YXIgZnJvbSA9IHZvaWQgMCxcbiAgICAgIHRvID0gdm9pZCAwO1xuICBpZiAocXVhbnRpZmllci5raW5kID09PSAnKicpIHtcbiAgICBmcm9tID0gMDtcbiAgfSBlbHNlIGlmIChxdWFudGlmaWVyLmtpbmQgPT09ICcrJykge1xuICAgIGZyb20gPSAxO1xuICB9IGVsc2UgaWYgKHF1YW50aWZpZXIua2luZCA9PT0gJz8nKSB7XG4gICAgZnJvbSA9IDA7XG4gICAgdG8gPSAxO1xuICB9IGVsc2Uge1xuICAgIGZyb20gPSBxdWFudGlmaWVyLmZyb207XG4gICAgaWYgKHF1YW50aWZpZXIudG8pIHtcbiAgICAgIHRvID0gcXVhbnRpZmllci50bztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHsgZnJvbTogZnJvbSwgdG86IHRvIH07XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZOztBQUVaLElBQUlBLFFBQVEsR0FBR0MsT0FBTyxDQUFDLHVCQUF1QixDQUFDO0VBQzNDQyx1QkFBdUIsR0FBR0YsUUFBUSxDQUFDRSx1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