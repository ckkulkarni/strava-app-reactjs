1d4e66e0c9d93828b0f5135c81e63239
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = printValue;
const toString = Object.prototype.toString;
const errorToString = Error.prototype.toString;
const regExpToString = RegExp.prototype.toString;
const symbolToString = typeof Symbol !== 'undefined' ? Symbol.prototype.toString : () => '';
const SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
function printNumber(val) {
  if (val != +val) return 'NaN';
  const isNegativeZero = val === 0 && 1 / val < 0;
  return isNegativeZero ? '-0' : '' + val;
}
function printSimpleValue(val, quoteStrings = false) {
  if (val == null || val === true || val === false) return '' + val;
  const typeOf = typeof val;
  if (typeOf === 'number') return printNumber(val);
  if (typeOf === 'string') return quoteStrings ? `"${val}"` : val;
  if (typeOf === 'function') return '[Function ' + (val.name || 'anonymous') + ']';
  if (typeOf === 'symbol') return symbolToString.call(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
  const tag = toString.call(val).slice(8, -1);
  if (tag === 'Date') return isNaN(val.getTime()) ? '' + val : val.toISOString(val);
  if (tag === 'Error' || val instanceof Error) return '[' + errorToString.call(val) + ']';
  if (tag === 'RegExp') return regExpToString.call(val);
  return null;
}
function printValue(value, quoteStrings) {
  let result = printSimpleValue(value, quoteStrings);
  if (result !== null) return result;
  return JSON.stringify(value, function (key, value) {
    let result = printSimpleValue(this[key], quoteStrings);
    if (result !== null) return result;
    return value;
  }, 2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJwcmludFZhbHVlIiwidG9TdHJpbmciLCJwcm90b3R5cGUiLCJlcnJvclRvU3RyaW5nIiwiRXJyb3IiLCJyZWdFeHBUb1N0cmluZyIsIlJlZ0V4cCIsInN5bWJvbFRvU3RyaW5nIiwiU3ltYm9sIiwiU1lNQk9MX1JFR0VYUCIsInByaW50TnVtYmVyIiwidmFsIiwiaXNOZWdhdGl2ZVplcm8iLCJwcmludFNpbXBsZVZhbHVlIiwicXVvdGVTdHJpbmdzIiwidHlwZU9mIiwibmFtZSIsImNhbGwiLCJyZXBsYWNlIiwidGFnIiwic2xpY2UiLCJpc05hTiIsImdldFRpbWUiLCJ0b0lTT1N0cmluZyIsInJlc3VsdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJrZXkiXSwic291cmNlcyI6WyJwcmludFZhbHVlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcHJpbnRWYWx1ZTtcbmNvbnN0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbmNvbnN0IGVycm9yVG9TdHJpbmcgPSBFcnJvci5wcm90b3R5cGUudG9TdHJpbmc7XG5jb25zdCByZWdFeHBUb1N0cmluZyA9IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmc7XG5jb25zdCBzeW1ib2xUb1N0cmluZyA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnID8gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZyA6ICgpID0+ICcnO1xuY29uc3QgU1lNQk9MX1JFR0VYUCA9IC9eU3ltYm9sXFwoKC4qKVxcKSguKikkLztcblxuZnVuY3Rpb24gcHJpbnROdW1iZXIodmFsKSB7XG4gIGlmICh2YWwgIT0gK3ZhbCkgcmV0dXJuICdOYU4nO1xuICBjb25zdCBpc05lZ2F0aXZlWmVybyA9IHZhbCA9PT0gMCAmJiAxIC8gdmFsIDwgMDtcbiAgcmV0dXJuIGlzTmVnYXRpdmVaZXJvID8gJy0wJyA6ICcnICsgdmFsO1xufVxuXG5mdW5jdGlvbiBwcmludFNpbXBsZVZhbHVlKHZhbCwgcXVvdGVTdHJpbmdzID0gZmFsc2UpIHtcbiAgaWYgKHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gdHJ1ZSB8fCB2YWwgPT09IGZhbHNlKSByZXR1cm4gJycgKyB2YWw7XG4gIGNvbnN0IHR5cGVPZiA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlT2YgPT09ICdudW1iZXInKSByZXR1cm4gcHJpbnROdW1iZXIodmFsKTtcbiAgaWYgKHR5cGVPZiA9PT0gJ3N0cmluZycpIHJldHVybiBxdW90ZVN0cmluZ3MgPyBgXCIke3ZhbH1cImAgOiB2YWw7XG4gIGlmICh0eXBlT2YgPT09ICdmdW5jdGlvbicpIHJldHVybiAnW0Z1bmN0aW9uICcgKyAodmFsLm5hbWUgfHwgJ2Fub255bW91cycpICsgJ10nO1xuICBpZiAodHlwZU9mID09PSAnc3ltYm9sJykgcmV0dXJuIHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsKS5yZXBsYWNlKFNZTUJPTF9SRUdFWFAsICdTeW1ib2woJDEpJyk7XG4gIGNvbnN0IHRhZyA9IHRvU3RyaW5nLmNhbGwodmFsKS5zbGljZSg4LCAtMSk7XG4gIGlmICh0YWcgPT09ICdEYXRlJykgcmV0dXJuIGlzTmFOKHZhbC5nZXRUaW1lKCkpID8gJycgKyB2YWwgOiB2YWwudG9JU09TdHJpbmcodmFsKTtcbiAgaWYgKHRhZyA9PT0gJ0Vycm9yJyB8fCB2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuICdbJyArIGVycm9yVG9TdHJpbmcuY2FsbCh2YWwpICsgJ10nO1xuICBpZiAodGFnID09PSAnUmVnRXhwJykgcmV0dXJuIHJlZ0V4cFRvU3RyaW5nLmNhbGwodmFsKTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHByaW50VmFsdWUodmFsdWUsIHF1b3RlU3RyaW5ncykge1xuICBsZXQgcmVzdWx0ID0gcHJpbnRTaW1wbGVWYWx1ZSh2YWx1ZSwgcXVvdGVTdHJpbmdzKTtcbiAgaWYgKHJlc3VsdCAhPT0gbnVsbCkgcmV0dXJuIHJlc3VsdDtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIGxldCByZXN1bHQgPSBwcmludFNpbXBsZVZhbHVlKHRoaXNba2V5XSwgcXVvdGVTdHJpbmdzKTtcbiAgICBpZiAocmVzdWx0ICE9PSBudWxsKSByZXR1cm4gcmVzdWx0O1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSwgMik7XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHQyxVQUFVO0FBQzVCLE1BQU1DLFFBQVEsR0FBR04sTUFBTSxDQUFDTyxTQUFTLENBQUNELFFBQVE7QUFDMUMsTUFBTUUsYUFBYSxHQUFHQyxLQUFLLENBQUNGLFNBQVMsQ0FBQ0QsUUFBUTtBQUM5QyxNQUFNSSxjQUFjLEdBQUdDLE1BQU0sQ0FBQ0osU0FBUyxDQUFDRCxRQUFRO0FBQ2hELE1BQU1NLGNBQWMsR0FBRyxPQUFPQyxNQUFNLEtBQUssV0FBVyxHQUFHQSxNQUFNLENBQUNOLFNBQVMsQ0FBQ0QsUUFBUSxHQUFHLE1BQU0sRUFBRTtBQUMzRixNQUFNUSxhQUFhLEdBQUcsc0JBQXNCO0FBRTVDLFNBQVNDLFdBQVdBLENBQUNDLEdBQUcsRUFBRTtFQUN4QixJQUFJQSxHQUFHLElBQUksQ0FBQ0EsR0FBRyxFQUFFLE9BQU8sS0FBSztFQUM3QixNQUFNQyxjQUFjLEdBQUdELEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHQSxHQUFHLEdBQUcsQ0FBQztFQUMvQyxPQUFPQyxjQUFjLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBR0QsR0FBRztBQUN6QztBQUVBLFNBQVNFLGdCQUFnQkEsQ0FBQ0YsR0FBRyxFQUFFRyxZQUFZLEdBQUcsS0FBSyxFQUFFO0VBQ25ELElBQUlILEdBQUcsSUFBSSxJQUFJLElBQUlBLEdBQUcsS0FBSyxJQUFJLElBQUlBLEdBQUcsS0FBSyxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUdBLEdBQUc7RUFDakUsTUFBTUksTUFBTSxHQUFHLE9BQU9KLEdBQUc7RUFDekIsSUFBSUksTUFBTSxLQUFLLFFBQVEsRUFBRSxPQUFPTCxXQUFXLENBQUNDLEdBQUcsQ0FBQztFQUNoRCxJQUFJSSxNQUFNLEtBQUssUUFBUSxFQUFFLE9BQU9ELFlBQVksR0FBSSxJQUFHSCxHQUFJLEdBQUUsR0FBR0EsR0FBRztFQUMvRCxJQUFJSSxNQUFNLEtBQUssVUFBVSxFQUFFLE9BQU8sWUFBWSxJQUFJSixHQUFHLENBQUNLLElBQUksSUFBSSxXQUFXLENBQUMsR0FBRyxHQUFHO0VBQ2hGLElBQUlELE1BQU0sS0FBSyxRQUFRLEVBQUUsT0FBT1IsY0FBYyxDQUFDVSxJQUFJLENBQUNOLEdBQUcsQ0FBQyxDQUFDTyxPQUFPLENBQUNULGFBQWEsRUFBRSxZQUFZLENBQUM7RUFDN0YsTUFBTVUsR0FBRyxHQUFHbEIsUUFBUSxDQUFDZ0IsSUFBSSxDQUFDTixHQUFHLENBQUMsQ0FBQ1MsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUMzQyxJQUFJRCxHQUFHLEtBQUssTUFBTSxFQUFFLE9BQU9FLEtBQUssQ0FBQ1YsR0FBRyxDQUFDVyxPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBR1gsR0FBRyxHQUFHQSxHQUFHLENBQUNZLFdBQVcsQ0FBQ1osR0FBRyxDQUFDO0VBQ2pGLElBQUlRLEdBQUcsS0FBSyxPQUFPLElBQUlSLEdBQUcsWUFBWVAsS0FBSyxFQUFFLE9BQU8sR0FBRyxHQUFHRCxhQUFhLENBQUNjLElBQUksQ0FBQ04sR0FBRyxDQUFDLEdBQUcsR0FBRztFQUN2RixJQUFJUSxHQUFHLEtBQUssUUFBUSxFQUFFLE9BQU9kLGNBQWMsQ0FBQ1ksSUFBSSxDQUFDTixHQUFHLENBQUM7RUFDckQsT0FBTyxJQUFJO0FBQ2I7QUFFQSxTQUFTWCxVQUFVQSxDQUFDRixLQUFLLEVBQUVnQixZQUFZLEVBQUU7RUFDdkMsSUFBSVUsTUFBTSxHQUFHWCxnQkFBZ0IsQ0FBQ2YsS0FBSyxFQUFFZ0IsWUFBWSxDQUFDO0VBQ2xELElBQUlVLE1BQU0sS0FBSyxJQUFJLEVBQUUsT0FBT0EsTUFBTTtFQUNsQyxPQUFPQyxJQUFJLENBQUNDLFNBQVMsQ0FBQzVCLEtBQUssRUFBRSxVQUFVNkIsR0FBRyxFQUFFN0IsS0FBSyxFQUFFO0lBQ2pELElBQUkwQixNQUFNLEdBQUdYLGdCQUFnQixDQUFDLElBQUksQ0FBQ2MsR0FBRyxDQUFDLEVBQUViLFlBQVksQ0FBQztJQUN0RCxJQUFJVSxNQUFNLEtBQUssSUFBSSxFQUFFLE9BQU9BLE1BQU07SUFDbEMsT0FBTzFCLEtBQUs7RUFDZCxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ1AifQ==