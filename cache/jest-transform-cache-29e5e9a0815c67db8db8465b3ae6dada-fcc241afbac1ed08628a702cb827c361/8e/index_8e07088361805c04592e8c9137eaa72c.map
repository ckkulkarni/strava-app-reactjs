{"version":3,"names":["gen","node","generator","type","RegExp","body","flags","Alternative","expressions","map","join","Disjunction","left","right","Group","expression","capturing","name","nameRaw","Backreference","kind","reference","referenceRaw","TypeError","Assertion","assertion","negative","_assertion","CharacterClass","ClassRange","from","to","Repetition","quantifier","Quantifier","greedy","Char","value","escaped","UnicodeProperty","escapeChar","namePart","shorthand","binary","module","exports","generate"],"sources":["index.js"],"sourcesContent":["/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */\n\n'use strict';\n\n/**\n * Helper `gen` function calls node type handler.\n */\n\nfunction gen(node) {\n  return node ? generator[node.type](node) : '';\n}\n\n/**\n * AST handler.\n */\nvar generator = {\n  RegExp: function RegExp(node) {\n    return '/' + gen(node.body) + '/' + node.flags;\n  },\n  Alternative: function Alternative(node) {\n    return (node.expressions || []).map(gen).join('');\n  },\n  Disjunction: function Disjunction(node) {\n    return gen(node.left) + '|' + gen(node.right);\n  },\n  Group: function Group(node) {\n    var expression = gen(node.expression);\n\n    if (node.capturing) {\n      // A named group.\n      if (node.name) {\n        return '(?<' + (node.nameRaw || node.name) + '>' + expression + ')';\n      }\n\n      return '(' + expression + ')';\n    }\n\n    return '(?:' + expression + ')';\n  },\n  Backreference: function Backreference(node) {\n    switch (node.kind) {\n      case 'number':\n        return '\\\\' + node.reference;\n      case 'name':\n        return '\\\\k<' + (node.referenceRaw || node.reference) + '>';\n      default:\n        throw new TypeError('Unknown Backreference kind: ' + node.kind);\n    }\n  },\n  Assertion: function Assertion(node) {\n    switch (node.kind) {\n      case '^':\n      case '$':\n      case '\\\\b':\n      case '\\\\B':\n        return node.kind;\n\n      case 'Lookahead':\n        {\n          var assertion = gen(node.assertion);\n\n          if (node.negative) {\n            return '(?!' + assertion + ')';\n          }\n\n          return '(?=' + assertion + ')';\n        }\n\n      case 'Lookbehind':\n        {\n          var _assertion = gen(node.assertion);\n\n          if (node.negative) {\n            return '(?<!' + _assertion + ')';\n          }\n\n          return '(?<=' + _assertion + ')';\n        }\n\n      default:\n        throw new TypeError('Unknown Assertion kind: ' + node.kind);\n    }\n  },\n  CharacterClass: function CharacterClass(node) {\n    var expressions = node.expressions.map(gen).join('');\n\n    if (node.negative) {\n      return '[^' + expressions + ']';\n    }\n\n    return '[' + expressions + ']';\n  },\n  ClassRange: function ClassRange(node) {\n    return gen(node.from) + '-' + gen(node.to);\n  },\n  Repetition: function Repetition(node) {\n    return '' + gen(node.expression) + gen(node.quantifier);\n  },\n  Quantifier: function Quantifier(node) {\n    var quantifier = void 0;\n    var greedy = node.greedy ? '' : '?';\n\n    switch (node.kind) {\n      case '+':\n      case '?':\n      case '*':\n        quantifier = node.kind;\n        break;\n      case 'Range':\n        // Exact: {1}\n        if (node.from === node.to) {\n          quantifier = '{' + node.from + '}';\n        }\n        // Open: {1,}\n        else if (!node.to) {\n            quantifier = '{' + node.from + ',}';\n          }\n          // Closed: {1,3}\n          else {\n              quantifier = '{' + node.from + ',' + node.to + '}';\n            }\n        break;\n      default:\n        throw new TypeError('Unknown Quantifier kind: ' + node.kind);\n    }\n\n    return '' + quantifier + greedy;\n  },\n  Char: function Char(node) {\n    var value = node.value;\n\n    switch (node.kind) {\n      case 'simple':\n        {\n          if (node.escaped) {\n            return '\\\\' + value;\n          }\n          return value;\n        }\n\n      case 'hex':\n      case 'unicode':\n      case 'oct':\n      case 'decimal':\n      case 'control':\n      case 'meta':\n        return value;\n\n      default:\n        throw new TypeError('Unknown Char kind: ' + node.kind);\n    }\n  },\n  UnicodeProperty: function UnicodeProperty(node) {\n    var escapeChar = node.negative ? 'P' : 'p';\n    var namePart = void 0;\n\n    if (!node.shorthand && !node.binary) {\n      namePart = node.name + '=';\n    } else {\n      namePart = '';\n    }\n\n    return '\\\\' + escapeChar + '{' + namePart + node.value + '}';\n  }\n};\n\nmodule.exports = {\n  /**\n   * Generates a regexp string from an AST.\n   *\n   * @param Object ast - an AST node\n   */\n  generate: gen\n};"],"mappings":"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"}