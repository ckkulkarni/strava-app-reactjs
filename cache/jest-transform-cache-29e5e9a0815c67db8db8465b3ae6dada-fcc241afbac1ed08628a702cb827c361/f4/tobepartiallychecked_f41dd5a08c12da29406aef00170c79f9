ca7de0ef2eff0f61769402d7dc3dc8d9
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toBePartiallyChecked = toBePartiallyChecked;
var _utils = require("./utils");
function toBePartiallyChecked(element) {
  (0, _utils.checkHtmlElement)(element, toBePartiallyChecked, this);
  const isValidInput = () => {
    return element.tagName.toLowerCase() === 'input' && element.type === 'checkbox';
  };
  const isValidAriaElement = () => {
    return element.getAttribute('role') === 'checkbox';
  };
  if (!isValidInput() && !isValidAriaElement()) {
    return {
      pass: false,
      message: () => 'only inputs with type="checkbox" or elements with role="checkbox" and a valid aria-checked attribute can be used with .toBePartiallyChecked(). Use .toHaveValue() instead'
    };
  }
  const isPartiallyChecked = () => {
    const isAriaMixed = element.getAttribute('aria-checked') === 'mixed';
    if (isValidInput()) {
      return element.indeterminate || isAriaMixed;
    }
    return isAriaMixed;
  };
  return {
    pass: isPartiallyChecked(),
    message: () => {
      const is = isPartiallyChecked() ? 'is' : 'is not';
      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBePartiallyChecked`, 'element', ''), '', `Received element ${is} partially checked:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\n');
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvQmVQYXJ0aWFsbHlDaGVja2VkIiwiX3V0aWxzIiwicmVxdWlyZSIsImVsZW1lbnQiLCJjaGVja0h0bWxFbGVtZW50IiwiaXNWYWxpZElucHV0IiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwidHlwZSIsImlzVmFsaWRBcmlhRWxlbWVudCIsImdldEF0dHJpYnV0ZSIsInBhc3MiLCJtZXNzYWdlIiwiaXNQYXJ0aWFsbHlDaGVja2VkIiwiaXNBcmlhTWl4ZWQiLCJpbmRldGVybWluYXRlIiwiaXMiLCJ1dGlscyIsIm1hdGNoZXJIaW50IiwiaXNOb3QiLCJwcmludFJlY2VpdmVkIiwiY2xvbmVOb2RlIiwiam9pbiJdLCJzb3VyY2VzIjpbInRvLWJlLXBhcnRpYWxseS1jaGVja2VkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy50b0JlUGFydGlhbGx5Q2hlY2tlZCA9IHRvQmVQYXJ0aWFsbHlDaGVja2VkO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbmZ1bmN0aW9uIHRvQmVQYXJ0aWFsbHlDaGVja2VkKGVsZW1lbnQpIHtcbiAgKDAsIF91dGlscy5jaGVja0h0bWxFbGVtZW50KShlbGVtZW50LCB0b0JlUGFydGlhbGx5Q2hlY2tlZCwgdGhpcyk7XG5cbiAgY29uc3QgaXNWYWxpZElucHV0ID0gKCkgPT4ge1xuICAgIHJldHVybiBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0JyAmJiBlbGVtZW50LnR5cGUgPT09ICdjaGVja2JveCc7XG4gIH07XG5cbiAgY29uc3QgaXNWYWxpZEFyaWFFbGVtZW50ID0gKCkgPT4ge1xuICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZSgncm9sZScpID09PSAnY2hlY2tib3gnO1xuICB9O1xuXG4gIGlmICghaXNWYWxpZElucHV0KCkgJiYgIWlzVmFsaWRBcmlhRWxlbWVudCgpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhc3M6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogKCkgPT4gJ29ubHkgaW5wdXRzIHdpdGggdHlwZT1cImNoZWNrYm94XCIgb3IgZWxlbWVudHMgd2l0aCByb2xlPVwiY2hlY2tib3hcIiBhbmQgYSB2YWxpZCBhcmlhLWNoZWNrZWQgYXR0cmlidXRlIGNhbiBiZSB1c2VkIHdpdGggLnRvQmVQYXJ0aWFsbHlDaGVja2VkKCkuIFVzZSAudG9IYXZlVmFsdWUoKSBpbnN0ZWFkJ1xuICAgIH07XG4gIH1cblxuICBjb25zdCBpc1BhcnRpYWxseUNoZWNrZWQgPSAoKSA9PiB7XG4gICAgY29uc3QgaXNBcmlhTWl4ZWQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1jaGVja2VkJykgPT09ICdtaXhlZCc7XG5cbiAgICBpZiAoaXNWYWxpZElucHV0KCkpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LmluZGV0ZXJtaW5hdGUgfHwgaXNBcmlhTWl4ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzQXJpYU1peGVkO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgcGFzczogaXNQYXJ0aWFsbHlDaGVja2VkKCksXG4gICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgY29uc3QgaXMgPSBpc1BhcnRpYWxseUNoZWNrZWQoKSA/ICdpcycgOiAnaXMgbm90JztcbiAgICAgIHJldHVybiBbdGhpcy51dGlscy5tYXRjaGVySGludChgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvQmVQYXJ0aWFsbHlDaGVja2VkYCwgJ2VsZW1lbnQnLCAnJyksICcnLCBgUmVjZWl2ZWQgZWxlbWVudCAke2lzfSBwYXJ0aWFsbHkgY2hlY2tlZDpgLCBgICAke3RoaXMudXRpbHMucHJpbnRSZWNlaXZlZChlbGVtZW50LmNsb25lTm9kZShmYWxzZSkpfWBdLmpvaW4oJ1xcbicpO1xuICAgIH1cbiAgfTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxvQkFBb0IsR0FBR0Esb0JBQW9CO0FBRW5ELElBQUlDLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUUvQixTQUFTRixvQkFBb0JBLENBQUNHLE9BQU8sRUFBRTtFQUNyQyxDQUFDLENBQUMsRUFBRUYsTUFBTSxDQUFDRyxnQkFBZ0IsRUFBRUQsT0FBTyxFQUFFSCxvQkFBb0IsRUFBRSxJQUFJLENBQUM7RUFFakUsTUFBTUssWUFBWSxHQUFHQSxDQUFBLEtBQU07SUFDekIsT0FBT0YsT0FBTyxDQUFDRyxPQUFPLENBQUNDLFdBQVcsRUFBRSxLQUFLLE9BQU8sSUFBSUosT0FBTyxDQUFDSyxJQUFJLEtBQUssVUFBVTtFQUNqRixDQUFDO0VBRUQsTUFBTUMsa0JBQWtCLEdBQUdBLENBQUEsS0FBTTtJQUMvQixPQUFPTixPQUFPLENBQUNPLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxVQUFVO0VBQ3BELENBQUM7RUFFRCxJQUFJLENBQUNMLFlBQVksRUFBRSxJQUFJLENBQUNJLGtCQUFrQixFQUFFLEVBQUU7SUFDNUMsT0FBTztNQUNMRSxJQUFJLEVBQUUsS0FBSztNQUNYQyxPQUFPLEVBQUVBLENBQUEsS0FBTTtJQUNqQixDQUFDO0VBQ0g7RUFFQSxNQUFNQyxrQkFBa0IsR0FBR0EsQ0FBQSxLQUFNO0lBQy9CLE1BQU1DLFdBQVcsR0FBR1gsT0FBTyxDQUFDTyxZQUFZLENBQUMsY0FBYyxDQUFDLEtBQUssT0FBTztJQUVwRSxJQUFJTCxZQUFZLEVBQUUsRUFBRTtNQUNsQixPQUFPRixPQUFPLENBQUNZLGFBQWEsSUFBSUQsV0FBVztJQUM3QztJQUVBLE9BQU9BLFdBQVc7RUFDcEIsQ0FBQztFQUVELE9BQU87SUFDTEgsSUFBSSxFQUFFRSxrQkFBa0IsRUFBRTtJQUMxQkQsT0FBTyxFQUFFQSxDQUFBLEtBQU07TUFDYixNQUFNSSxFQUFFLEdBQUdILGtCQUFrQixFQUFFLEdBQUcsSUFBSSxHQUFHLFFBQVE7TUFDakQsT0FBTyxDQUFDLElBQUksQ0FBQ0ksS0FBSyxDQUFDQyxXQUFXLENBQUUsR0FBRSxJQUFJLENBQUNDLEtBQUssR0FBRyxNQUFNLEdBQUcsRUFBRyx1QkFBc0IsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFHLG9CQUFtQkgsRUFBRyxxQkFBb0IsRUFBRyxLQUFJLElBQUksQ0FBQ0MsS0FBSyxDQUFDRyxhQUFhLENBQUNqQixPQUFPLENBQUNrQixTQUFTLENBQUMsS0FBSyxDQUFDLENBQUUsRUFBQyxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDM047RUFDRixDQUFDO0FBQ0gifQ==