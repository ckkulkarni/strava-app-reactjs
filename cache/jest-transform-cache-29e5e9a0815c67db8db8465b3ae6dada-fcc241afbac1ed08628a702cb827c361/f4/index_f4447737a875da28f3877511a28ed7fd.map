{"version":3,"names":["assemble_test_cases_1","require","helpers_1","run_test_run_hooks_1","stopwatch_1","test_case_runner_1","__importDefault","Runtime","constructor","eventBroadcaster","eventDataCollector","newId","options","pickleIds","supportCodeLibrary","stopwatch","create","success","runTestRunHooks","makeRunTestRunHooks","dryRun","defaultTimeout","name","location","runTestCase","pickleId","testCase","pickle","getPickle","retries","retriesForPickle","skip","failFast","testCaseRunner","default","gherkinDocument","getGherkinDocument","uri","filterStackTraces","filterStacktraces","worldParameters","status","run","shouldCauseFailure","start","testRunStarted","timestamp","emit","beforeTestRunHookDefinitions","assembledTestCases","assembleTestCases","pickles","map","afterTestRunHookDefinitions","slice","reverse","stop","testRunFinished","exports"],"sources":["../../src/runtime/index.ts"],"sourcesContent":["import * as messages from '@cucumber/messages'\nimport { IdGenerator } from '@cucumber/messages'\nimport { EventEmitter } from 'events'\nimport { EventDataCollector } from '../formatter/helpers'\nimport { ISupportCodeLibrary } from '../support_code_library_builder/types'\nimport { assembleTestCases } from './assemble_test_cases'\nimport { retriesForPickle, shouldCauseFailure } from './helpers'\nimport { makeRunTestRunHooks, RunsTestRunHooks } from './run_test_run_hooks'\nimport { IStopwatch, create } from './stopwatch'\nimport TestCaseRunner from './test_case_runner'\n\nexport interface IRuntime {\n  start: () => Promise<boolean>\n}\n\nexport interface INewRuntimeOptions {\n  eventBroadcaster: EventEmitter\n  eventDataCollector: EventDataCollector\n  newId: IdGenerator.NewId\n  options: IRuntimeOptions\n  pickleIds: string[]\n  supportCodeLibrary: ISupportCodeLibrary\n}\n\nexport interface IRuntimeOptions {\n  dryRun: boolean\n  failFast: boolean\n  filterStacktraces: boolean\n  retry: number\n  retryTagFilter: string\n  strict: boolean\n  worldParameters: any\n}\n\nexport default class Runtime implements IRuntime {\n  private readonly eventBroadcaster: EventEmitter\n  private readonly eventDataCollector: EventDataCollector\n  private readonly stopwatch: IStopwatch\n  private readonly newId: IdGenerator.NewId\n  private readonly options: IRuntimeOptions\n  private readonly pickleIds: string[]\n  private readonly supportCodeLibrary: ISupportCodeLibrary\n  private success: boolean\n  private runTestRunHooks: RunsTestRunHooks\n\n  constructor({\n    eventBroadcaster,\n    eventDataCollector,\n    newId,\n    options,\n    pickleIds,\n    supportCodeLibrary,\n  }: INewRuntimeOptions) {\n    this.eventBroadcaster = eventBroadcaster\n    this.eventDataCollector = eventDataCollector\n    this.stopwatch = create()\n    this.newId = newId\n    this.options = options\n    this.pickleIds = pickleIds\n    this.supportCodeLibrary = supportCodeLibrary\n    this.success = true\n    this.runTestRunHooks = makeRunTestRunHooks(\n      this.options.dryRun,\n      this.supportCodeLibrary.defaultTimeout,\n      (name, location) => `${name} hook errored, process exiting: ${location}`\n    )\n  }\n\n  async runTestCase(\n    pickleId: string,\n    testCase: messages.TestCase\n  ): Promise<void> {\n    const pickle = this.eventDataCollector.getPickle(pickleId)\n    const retries = retriesForPickle(pickle, this.options)\n    const skip = this.options.dryRun || (this.options.failFast && !this.success)\n    const testCaseRunner = new TestCaseRunner({\n      eventBroadcaster: this.eventBroadcaster,\n      stopwatch: this.stopwatch,\n      gherkinDocument: this.eventDataCollector.getGherkinDocument(pickle.uri),\n      newId: this.newId,\n      pickle,\n      testCase,\n      retries,\n      skip,\n      filterStackTraces: this.options.filterStacktraces,\n      supportCodeLibrary: this.supportCodeLibrary,\n      worldParameters: this.options.worldParameters,\n    })\n    const status = await testCaseRunner.run()\n    if (shouldCauseFailure(status, this.options)) {\n      this.success = false\n    }\n  }\n\n  async start(): Promise<boolean> {\n    const testRunStarted: messages.Envelope = {\n      testRunStarted: {\n        timestamp: this.stopwatch.timestamp(),\n      },\n    }\n    this.eventBroadcaster.emit('envelope', testRunStarted)\n    this.stopwatch.start()\n    await this.runTestRunHooks(\n      this.supportCodeLibrary.beforeTestRunHookDefinitions,\n      'a BeforeAll'\n    )\n    const assembledTestCases = await assembleTestCases({\n      eventBroadcaster: this.eventBroadcaster,\n      newId: this.newId,\n      pickles: this.pickleIds.map((pickleId) =>\n        this.eventDataCollector.getPickle(pickleId)\n      ),\n      supportCodeLibrary: this.supportCodeLibrary,\n    })\n    for (const pickleId of this.pickleIds) {\n      await this.runTestCase(pickleId, assembledTestCases[pickleId])\n    }\n    await this.runTestRunHooks(\n      this.supportCodeLibrary.afterTestRunHookDefinitions.slice(0).reverse(),\n      'an AfterAll'\n    )\n    this.stopwatch.stop()\n    const testRunFinished: messages.Envelope = {\n      testRunFinished: {\n        timestamp: this.stopwatch.timestamp(),\n        success: this.success,\n      },\n    }\n    this.eventBroadcaster.emit('envelope', testRunFinished)\n    return this.success\n  }\n}\n"],"mappings":"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"}