1fcaa0777efa8e3595a19f7ae21c291c
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _printValue = _interopRequireDefault(require("./util/printValue"));
var _toArray = _interopRequireDefault(require("./util/toArray"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
let strReg = /\$\{\s*(\w+)\s*\}/g;
class ValidationError extends Error {
  static formatError(message, params) {
    const path = params.label || params.path || 'this';
    if (path !== params.path) params = _extends({}, params, {
      path
    });
    if (typeof message === 'string') return message.replace(strReg, (_, key) => (0, _printValue.default)(params[key]));
    if (typeof message === 'function') return message(params);
    return message;
  }
  static isError(err) {
    return err && err.name === 'ValidationError';
  }
  constructor(errorOrErrors, value, field, type) {
    super();
    this.value = void 0;
    this.path = void 0;
    this.type = void 0;
    this.errors = void 0;
    this.params = void 0;
    this.inner = void 0;
    this.name = 'ValidationError';
    this.value = value;
    this.path = field;
    this.type = type;
    this.errors = [];
    this.inner = [];
    (0, _toArray.default)(errorOrErrors).forEach(err => {
      if (ValidationError.isError(err)) {
        this.errors.push(...err.errors);
        this.inner = this.inner.concat(err.inner.length ? err.inner : err);
      } else {
        this.errors.push(err);
      }
    });
    this.message = this.errors.length > 1 ? `${this.errors.length} errors occurred` : this.errors[0];
    if (Error.captureStackTrace) Error.captureStackTrace(this, ValidationError);
  }
}
exports.default = ValidationError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfcHJpbnRWYWx1ZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3RvQXJyYXkiLCJvYmoiLCJfX2VzTW9kdWxlIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJzdHJSZWciLCJWYWxpZGF0aW9uRXJyb3IiLCJFcnJvciIsImZvcm1hdEVycm9yIiwibWVzc2FnZSIsInBhcmFtcyIsInBhdGgiLCJsYWJlbCIsInJlcGxhY2UiLCJfIiwiaXNFcnJvciIsImVyciIsIm5hbWUiLCJjb25zdHJ1Y3RvciIsImVycm9yT3JFcnJvcnMiLCJmaWVsZCIsInR5cGUiLCJlcnJvcnMiLCJpbm5lciIsImZvckVhY2giLCJwdXNoIiwiY29uY2F0IiwiY2FwdHVyZVN0YWNrVHJhY2UiXSwic291cmNlcyI6WyJWYWxpZGF0aW9uRXJyb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcHJpbnRWYWx1ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9wcmludFZhbHVlXCIpKTtcblxudmFyIF90b0FycmF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL3RvQXJyYXlcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5sZXQgc3RyUmVnID0gL1xcJFxce1xccyooXFx3KylcXHMqXFx9L2c7XG5cbmNsYXNzIFZhbGlkYXRpb25FcnJvciBleHRlbmRzIEVycm9yIHtcbiAgc3RhdGljIGZvcm1hdEVycm9yKG1lc3NhZ2UsIHBhcmFtcykge1xuICAgIGNvbnN0IHBhdGggPSBwYXJhbXMubGFiZWwgfHwgcGFyYW1zLnBhdGggfHwgJ3RoaXMnO1xuICAgIGlmIChwYXRoICE9PSBwYXJhbXMucGF0aCkgcGFyYW1zID0gX2V4dGVuZHMoe30sIHBhcmFtcywge1xuICAgICAgcGF0aFxuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZycpIHJldHVybiBtZXNzYWdlLnJlcGxhY2Uoc3RyUmVnLCAoXywga2V5KSA9PiAoMCwgX3ByaW50VmFsdWUuZGVmYXVsdCkocGFyYW1zW2tleV0pKTtcbiAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdmdW5jdGlvbicpIHJldHVybiBtZXNzYWdlKHBhcmFtcyk7XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH1cblxuICBzdGF0aWMgaXNFcnJvcihlcnIpIHtcbiAgICByZXR1cm4gZXJyICYmIGVyci5uYW1lID09PSAnVmFsaWRhdGlvbkVycm9yJztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGVycm9yT3JFcnJvcnMsIHZhbHVlLCBmaWVsZCwgdHlwZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy52YWx1ZSA9IHZvaWQgMDtcbiAgICB0aGlzLnBhdGggPSB2b2lkIDA7XG4gICAgdGhpcy50eXBlID0gdm9pZCAwO1xuICAgIHRoaXMuZXJyb3JzID0gdm9pZCAwO1xuICAgIHRoaXMucGFyYW1zID0gdm9pZCAwO1xuICAgIHRoaXMuaW5uZXIgPSB2b2lkIDA7XG4gICAgdGhpcy5uYW1lID0gJ1ZhbGlkYXRpb25FcnJvcic7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMucGF0aCA9IGZpZWxkO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5lcnJvcnMgPSBbXTtcbiAgICB0aGlzLmlubmVyID0gW107XG4gICAgKDAsIF90b0FycmF5LmRlZmF1bHQpKGVycm9yT3JFcnJvcnMpLmZvckVhY2goZXJyID0+IHtcbiAgICAgIGlmIChWYWxpZGF0aW9uRXJyb3IuaXNFcnJvcihlcnIpKSB7XG4gICAgICAgIHRoaXMuZXJyb3JzLnB1c2goLi4uZXJyLmVycm9ycyk7XG4gICAgICAgIHRoaXMuaW5uZXIgPSB0aGlzLmlubmVyLmNvbmNhdChlcnIuaW5uZXIubGVuZ3RoID8gZXJyLmlubmVyIDogZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZXJyb3JzLnB1c2goZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLm1lc3NhZ2UgPSB0aGlzLmVycm9ycy5sZW5ndGggPiAxID8gYCR7dGhpcy5lcnJvcnMubGVuZ3RofSBlcnJvcnMgb2NjdXJyZWRgIDogdGhpcy5lcnJvcnNbMF07XG4gICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBWYWxpZGF0aW9uRXJyb3IpO1xuICB9XG5cbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gVmFsaWRhdGlvbkVycm9yOyJdLCJtYXBwaW5n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