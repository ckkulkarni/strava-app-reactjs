4df1da1585ba079b478b61096b04a22a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.noCase = void 0;
var lower_case_1 = require("lower-case");
// Support camel case ("camelCase" -> "camel Case" and "CAMELCase" -> "CAMEL Case").
var DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];
// Remove all non-word characters.
var DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;
/**
 * Normalize the string into something other libraries can manipulate easier.
 */
function noCase(input, options) {
  if (options === void 0) {
    options = {};
  }
  var _a = options.splitRegexp,
    splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a,
    _b = options.stripRegexp,
    stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b,
    _c = options.transform,
    transform = _c === void 0 ? lower_case_1.lowerCase : _c,
    _d = options.delimiter,
    delimiter = _d === void 0 ? " " : _d;
  var result = replace(replace(input, splitRegexp, "$1\0$2"), stripRegexp, "\0");
  var start = 0;
  var end = result.length;
  // Trim the delimiter from around the output string.
  while (result.charAt(start) === "\0") start++;
  while (result.charAt(end - 1) === "\0") end--;
  // Transform each token independently.
  return result.slice(start, end).split("\0").map(transform).join(delimiter);
}
exports.noCase = noCase;
/**
 * Replace `re` in the input string with the replacement value.
 */
function replace(input, re, value) {
  if (re instanceof RegExp) return input.replace(re, value);
  return re.reduce(function (input, re) {
    return input.replace(re, value);
  }, input);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb3dlcl9jYXNlXzEiLCJyZXF1aXJlIiwiREVGQVVMVF9TUExJVF9SRUdFWFAiLCJERUZBVUxUX1NUUklQX1JFR0VYUCIsIm5vQ2FzZSIsImlucHV0Iiwib3B0aW9ucyIsIl9hIiwic3BsaXRSZWdleHAiLCJfYiIsInN0cmlwUmVnZXhwIiwiX2MiLCJ0cmFuc2Zvcm0iLCJsb3dlckNhc2UiLCJfZCIsImRlbGltaXRlciIsInJlc3VsdCIsInJlcGxhY2UiLCJzdGFydCIsImVuZCIsImxlbmd0aCIsImNoYXJBdCIsInNsaWNlIiwic3BsaXQiLCJtYXAiLCJqb2luIiwiZXhwb3J0cyIsInJlIiwidmFsdWUiLCJSZWdFeHAiLCJyZWR1Y2UiXSwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbG93ZXJDYXNlIH0gZnJvbSBcImxvd2VyLWNhc2VcIjtcblxuZXhwb3J0IGludGVyZmFjZSBPcHRpb25zIHtcbiAgc3BsaXRSZWdleHA/OiBSZWdFeHAgfCBSZWdFeHBbXTtcbiAgc3RyaXBSZWdleHA/OiBSZWdFeHAgfCBSZWdFeHBbXTtcbiAgZGVsaW1pdGVyPzogc3RyaW5nO1xuICB0cmFuc2Zvcm0/OiAocGFydDogc3RyaW5nLCBpbmRleDogbnVtYmVyLCBwYXJ0czogc3RyaW5nW10pID0+IHN0cmluZztcbn1cblxuLy8gU3VwcG9ydCBjYW1lbCBjYXNlIChcImNhbWVsQ2FzZVwiIC0+IFwiY2FtZWwgQ2FzZVwiIGFuZCBcIkNBTUVMQ2FzZVwiIC0+IFwiQ0FNRUwgQ2FzZVwiKS5cbmNvbnN0IERFRkFVTFRfU1BMSVRfUkVHRVhQID0gWy8oW2EtejAtOV0pKFtBLVpdKS9nLCAvKFtBLVpdKShbQS1aXVthLXpdKS9nXTtcblxuLy8gUmVtb3ZlIGFsbCBub24td29yZCBjaGFyYWN0ZXJzLlxuY29uc3QgREVGQVVMVF9TVFJJUF9SRUdFWFAgPSAvW15BLVowLTldKy9naTtcblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIHN0cmluZyBpbnRvIHNvbWV0aGluZyBvdGhlciBsaWJyYXJpZXMgY2FuIG1hbmlwdWxhdGUgZWFzaWVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9DYXNlKGlucHV0OiBzdHJpbmcsIG9wdGlvbnM6IE9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgc3BsaXRSZWdleHAgPSBERUZBVUxUX1NQTElUX1JFR0VYUCxcbiAgICBzdHJpcFJlZ2V4cCA9IERFRkFVTFRfU1RSSVBfUkVHRVhQLFxuICAgIHRyYW5zZm9ybSA9IGxvd2VyQ2FzZSxcbiAgICBkZWxpbWl0ZXIgPSBcIiBcIixcbiAgfSA9IG9wdGlvbnM7XG5cbiAgbGV0IHJlc3VsdCA9IHJlcGxhY2UoXG4gICAgcmVwbGFjZShpbnB1dCwgc3BsaXRSZWdleHAsIFwiJDFcXDAkMlwiKSxcbiAgICBzdHJpcFJlZ2V4cCxcbiAgICBcIlxcMFwiXG4gICk7XG4gIGxldCBzdGFydCA9IDA7XG4gIGxldCBlbmQgPSByZXN1bHQubGVuZ3RoO1xuXG4gIC8vIFRyaW0gdGhlIGRlbGltaXRlciBmcm9tIGFyb3VuZCB0aGUgb3V0cHV0IHN0cmluZy5cbiAgd2hpbGUgKHJlc3VsdC5jaGFyQXQoc3RhcnQpID09PSBcIlxcMFwiKSBzdGFydCsrO1xuICB3aGlsZSAocmVzdWx0LmNoYXJBdChlbmQgLSAxKSA9PT0gXCJcXDBcIikgZW5kLS07XG5cbiAgLy8gVHJhbnNmb3JtIGVhY2ggdG9rZW4gaW5kZXBlbmRlbnRseS5cbiAgcmV0dXJuIHJlc3VsdC5zbGljZShzdGFydCwgZW5kKS5zcGxpdChcIlxcMFwiKS5tYXAodHJhbnNmb3JtKS5qb2luKGRlbGltaXRlcik7XG59XG5cbi8qKlxuICogUmVwbGFjZSBgcmVgIGluIHRoZSBpbnB1dCBzdHJpbmcgd2l0aCB0aGUgcmVwbGFjZW1lbnQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHJlcGxhY2UoaW5wdXQ6IHN0cmluZywgcmU6IFJlZ0V4cCB8IFJlZ0V4cFtdLCB2YWx1ZTogc3RyaW5nKSB7XG4gIGlmIChyZSBpbnN0YW5jZW9mIFJlZ0V4cCkgcmV0dXJuIGlucHV0LnJlcGxhY2UocmUsIHZhbHVlKTtcbiAgcmV0dXJuIHJlLnJlZHVjZSgoaW5wdXQsIHJlKSA9PiBpbnB1dC5yZXBsYWNlKHJlLCB2YWx1ZSksIGlucHV0KTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBU0E7QUFDQSxJQUFNQyxvQkFBb0IsR0FBRyxDQUFDLG9CQUFvQixFQUFFLHNCQUFzQixDQUFDO0FBRTNFO0FBQ0EsSUFBTUMsb0JBQW9CLEdBQUcsY0FBYztBQUUzQzs7O0FBR0EsU0FBZ0JDLE1BQU1BLENBQUNDLEtBQWEsRUFBRUMsT0FBcUI7RUFBckIsSUFBQUEsT0FBQTtJQUFBQSxPQUFBLEtBQXFCO0VBQUE7RUFFdkQsSUFBQUMsRUFBQSxHQUlFRCxPQUFPLENBQUFFLFdBSnlCO0lBQWxDQSxXQUFXLEdBQUFELEVBQUEsY0FBR0wsb0JBQW9CLEdBQUFLLEVBQUE7SUFDbENFLEVBQUEsR0FHRUgsT0FBTyxDQUFBSSxXQUh5QjtJQUFsQ0EsV0FBVyxHQUFBRCxFQUFBLGNBQUdOLG9CQUFvQixHQUFBTSxFQUFBO0lBQ2xDRSxFQUFBLEdBRUVMLE9BQU8sQ0FBQU0sU0FGWTtJQUFyQkEsU0FBUyxHQUFBRCxFQUFBLGNBQUdYLFlBQUEsQ0FBQWEsU0FBUyxHQUFBRixFQUFBO0lBQ3JCRyxFQUFBLEdBQ0VSLE9BQU8sQ0FBQVMsU0FETTtJQUFmQSxTQUFTLEdBQUFELEVBQUEsY0FBRyxHQUFHLEdBQUFBLEVBQUE7RUFHakIsSUFBSUUsTUFBTSxHQUFHQyxPQUFPLENBQ2xCQSxPQUFPLENBQUNaLEtBQUssRUFBRUcsV0FBVyxFQUFFLFFBQVEsQ0FBQyxFQUNyQ0UsV0FBVyxFQUNYLElBQUksQ0FDTDtFQUNELElBQUlRLEtBQUssR0FBRyxDQUFDO0VBQ2IsSUFBSUMsR0FBRyxHQUFHSCxNQUFNLENBQUNJLE1BQU07RUFFdkI7RUFDQSxPQUFPSixNQUFNLENBQUNLLE1BQU0sQ0FBQ0gsS0FBSyxDQUFDLEtBQUssSUFBSSxFQUFFQSxLQUFLLEVBQUU7RUFDN0MsT0FBT0YsTUFBTSxDQUFDSyxNQUFNLENBQUNGLEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUVBLEdBQUcsRUFBRTtFQUU3QztFQUNBLE9BQU9ILE1BQU0sQ0FBQ00sS0FBSyxDQUFDSixLQUFLLEVBQUVDLEdBQUcsQ0FBQyxDQUFDSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUNDLEdBQUcsQ0FBQ1osU0FBUyxDQUFDLENBQUNhLElBQUksQ0FBQ1YsU0FBUyxDQUFDO0FBQzVFO0FBdEJBVyxPQUFBLENBQUF0QixNQUFBLEdBQUFBLE1BQUE7QUF3QkE7OztBQUdBLFNBQVNhLE9BQU9BLENBQUNaLEtBQWEsRUFBRXNCLEVBQXFCLEVBQUVDLEtBQWE7RUFDbEUsSUFBSUQsRUFBRSxZQUFZRSxNQUFNLEVBQUUsT0FBT3hCLEtBQUssQ0FBQ1ksT0FBTyxDQUFDVSxFQUFFLEVBQUVDLEtBQUssQ0FBQztFQUN6RCxPQUFPRCxFQUFFLENBQUNHLE1BQU0sQ0FBQyxVQUFDekIsS0FBSyxFQUFFc0IsRUFBRTtJQUFLLE9BQUF0QixLQUFLLENBQUNZLE9BQU8sQ0FBQ1UsRUFBRSxFQUFFQyxLQUFLLENBQUM7RUFBeEIsQ0FBd0IsRUFBRXZCLEtBQUssQ0FBQztBQUNsRSJ9