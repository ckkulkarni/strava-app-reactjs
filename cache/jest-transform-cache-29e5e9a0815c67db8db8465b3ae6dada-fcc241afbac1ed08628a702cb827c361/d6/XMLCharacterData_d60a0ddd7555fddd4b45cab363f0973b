d38f288cb1ea2fb8a0828e7fec9bc01d
"use strict";

// Generated by CoffeeScript 2.4.1
(function () {
  var XMLCharacterData, XMLNode;
  XMLNode = require('./XMLNode');

  // Represents a character data node
  module.exports = XMLCharacterData = function () {
    class XMLCharacterData extends XMLNode {
      // Initializes a new instance of `XMLCharacterData`

      constructor(parent) {
        super(parent);
        this.value = '';
      }

      // Creates and returns a deep clone of `this`
      clone() {
        return Object.create(this);
      }

      // DOM level 1 functions to be implemented later
      substringData(offset, count) {
        throw new Error("This DOM method is not implemented." + this.debugInfo());
      }
      appendData(arg) {
        throw new Error("This DOM method is not implemented." + this.debugInfo());
      }
      insertData(offset, arg) {
        throw new Error("This DOM method is not implemented." + this.debugInfo());
      }
      deleteData(offset, count) {
        throw new Error("This DOM method is not implemented." + this.debugInfo());
      }
      replaceData(offset, count, arg) {
        throw new Error("This DOM method is not implemented." + this.debugInfo());
      }
      isEqualNode(node) {
        if (!super.isEqualNode(node)) {
          return false;
        }
        if (node.data !== this.data) {
          return false;
        }
        return true;
      }
    }
    ;

    // DOM level 1
    Object.defineProperty(XMLCharacterData.prototype, 'data', {
      get: function () {
        return this.value;
      },
      set: function (value) {
        return this.value = value || '';
      }
    });
    Object.defineProperty(XMLCharacterData.prototype, 'length', {
      get: function () {
        return this.value.length;
      }
    });

    // DOM level 3
    Object.defineProperty(XMLCharacterData.prototype, 'textContent', {
      get: function () {
        return this.value;
      },
      set: function (value) {
        return this.value = value || '';
      }
    });
    return XMLCharacterData;
  }.call(this);
}).call(void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJYTUxDaGFyYWN0ZXJEYXRhIiwiWE1MTm9kZSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29uc3RydWN0b3IiLCJwYXJlbnQiLCJ2YWx1ZSIsImNsb25lIiwiT2JqZWN0IiwiY3JlYXRlIiwic3Vic3RyaW5nRGF0YSIsIm9mZnNldCIsImNvdW50IiwiRXJyb3IiLCJkZWJ1Z0luZm8iLCJhcHBlbmREYXRhIiwiYXJnIiwiaW5zZXJ0RGF0YSIsImRlbGV0ZURhdGEiLCJyZXBsYWNlRGF0YSIsImlzRXF1YWxOb2RlIiwibm9kZSIsImRhdGEiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvdHlwZSIsImdldCIsInNldCIsImxlbmd0aCIsImNhbGwiXSwic291cmNlcyI6WyJYTUxDaGFyYWN0ZXJEYXRhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMi40LjFcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTENoYXJhY3RlckRhdGEsIFhNTE5vZGU7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIC8vIFJlcHJlc2VudHMgYSBjaGFyYWN0ZXIgZGF0YSBub2RlXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MQ2hhcmFjdGVyRGF0YSA9IChmdW5jdGlvbigpIHtcbiAgICBjbGFzcyBYTUxDaGFyYWN0ZXJEYXRhIGV4dGVuZHMgWE1MTm9kZSB7XG4gICAgICAvLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiBgWE1MQ2hhcmFjdGVyRGF0YWBcblxuICAgICAgY29uc3RydWN0b3IocGFyZW50KSB7XG4gICAgICAgIHN1cGVyKHBhcmVudCk7XG4gICAgICAgIHRoaXMudmFsdWUgPSAnJztcbiAgICAgIH1cblxuICAgICAgXG4gICAgICAvLyBDcmVhdGVzIGFuZCByZXR1cm5zIGEgZGVlcCBjbG9uZSBvZiBgdGhpc2BcbiAgICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgLy8gRE9NIGxldmVsIDEgZnVuY3Rpb25zIHRvIGJlIGltcGxlbWVudGVkIGxhdGVyXG4gICAgICBzdWJzdHJpbmdEYXRhKG9mZnNldCwgY291bnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuXG4gICAgICBhcHBlbmREYXRhKGFyZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIERPTSBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkLlwiICsgdGhpcy5kZWJ1Z0luZm8oKSk7XG4gICAgICB9XG5cbiAgICAgIGluc2VydERhdGEob2Zmc2V0LCBhcmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuXG4gICAgICBkZWxldGVEYXRhKG9mZnNldCwgY291bnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuXG4gICAgICByZXBsYWNlRGF0YShvZmZzZXQsIGNvdW50LCBhcmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBET00gbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZC5cIiArIHRoaXMuZGVidWdJbmZvKCkpO1xuICAgICAgfVxuXG4gICAgICBpc0VxdWFsTm9kZShub2RlKSB7XG4gICAgICAgIGlmICghc3VwZXIuaXNFcXVhbE5vZGUobm9kZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUuZGF0YSAhPT0gdGhpcy5kYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgfTtcblxuICAgIC8vIERPTSBsZXZlbCAxXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLCAnZGF0YScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPSB2YWx1ZSB8fCAnJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShYTUxDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZSwgJ2xlbmd0aCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIERPTSBsZXZlbCAzXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFhNTENoYXJhY3RlckRhdGEucHJvdG90eXBlLCAndGV4dENvbnRlbnQnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID0gdmFsdWUgfHwgJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gWE1MQ2hhcmFjdGVyRGF0YTtcblxuICB9KS5jYWxsKHRoaXMpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0EsQ0FBQyxZQUFXO0VBQ1YsSUFBSUEsZ0JBQWdCLEVBQUVDLE9BQU87RUFFN0JBLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFdBQVcsQ0FBQzs7RUFFOUI7RUFDQUMsTUFBTSxDQUFDQyxPQUFPLEdB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