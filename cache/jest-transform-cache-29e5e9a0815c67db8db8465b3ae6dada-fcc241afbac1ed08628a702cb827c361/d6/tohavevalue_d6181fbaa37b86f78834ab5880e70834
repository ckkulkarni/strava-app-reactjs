b24953003dad414f5f5198e86e1741dc
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveValue = toHaveValue;
var _isEqualWith = _interopRequireDefault(require("lodash/isEqualWith"));
var _utils = require("./utils");
function toHaveValue(htmlElement, expectedValue) {
  (0, _utils.checkHtmlElement)(htmlElement, toHaveValue, this);
  if (htmlElement.tagName.toLowerCase() === 'input' && ['checkbox', 'radio'].includes(htmlElement.type)) {
    throw new Error('input with type=checkbox or type=radio cannot be used with .toHaveValue(). Use .toBeChecked() for type=checkbox or .toHaveFormValues() instead');
  }
  const receivedValue = (0, _utils.getSingleElementValue)(htmlElement);
  const expectsValue = expectedValue !== undefined;
  let expectedTypedValue = expectedValue;
  let receivedTypedValue = receivedValue;
  if (expectedValue == receivedValue && expectedValue !== receivedValue) {
    expectedTypedValue = `${expectedValue} (${typeof expectedValue})`;
    receivedTypedValue = `${receivedValue} (${typeof receivedValue})`;
  }
  return {
    pass: expectsValue ? (0, _isEqualWith.default)(receivedValue, expectedValue, _utils.compareArraysAsSet) : Boolean(receivedValue),
    message: () => {
      const to = this.isNot ? 'not to' : 'to';
      const matcher = this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveValue`, 'element', expectedValue);
      return (0, _utils.getMessage)(this, matcher, `Expected the element ${to} have value`, expectsValue ? expectedTypedValue : '(any)', 'Received', receivedTypedValue);
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidG9IYXZlVmFsdWUiLCJfaXNFcXVhbFdpdGgiLCJfdXRpbHMiLCJodG1sRWxlbWVudCIsImV4cGVjdGVkVmFsdWUiLCJjaGVja0h0bWxFbGVtZW50IiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJ0eXBlIiwiRXJyb3IiLCJyZWNlaXZlZFZhbHVlIiwiZ2V0U2luZ2xlRWxlbWVudFZhbHVlIiwiZXhwZWN0c1ZhbHVlIiwidW5kZWZpbmVkIiwiZXhwZWN0ZWRUeXBlZFZhbHVlIiwicmVjZWl2ZWRUeXBlZFZhbHVlIiwicGFzcyIsImRlZmF1bHQiLCJjb21wYXJlQXJyYXlzQXNTZXQiLCJCb29sZWFuIiwibWVzc2FnZSIsInRvIiwiaXNOb3QiLCJtYXRjaGVyIiwidXRpbHMiLCJtYXRjaGVySGludCIsImdldE1lc3NhZ2UiXSwic291cmNlcyI6WyJ0by1oYXZlLXZhbHVlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudG9IYXZlVmFsdWUgPSB0b0hhdmVWYWx1ZTtcblxudmFyIF9pc0VxdWFsV2l0aCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImxvZGFzaC9pc0VxdWFsV2l0aFwiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxuZnVuY3Rpb24gdG9IYXZlVmFsdWUoaHRtbEVsZW1lbnQsIGV4cGVjdGVkVmFsdWUpIHtcbiAgKDAsIF91dGlscy5jaGVja0h0bWxFbGVtZW50KShodG1sRWxlbWVudCwgdG9IYXZlVmFsdWUsIHRoaXMpO1xuXG4gIGlmIChodG1sRWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgJiYgWydjaGVja2JveCcsICdyYWRpbyddLmluY2x1ZGVzKGh0bWxFbGVtZW50LnR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnB1dCB3aXRoIHR5cGU9Y2hlY2tib3ggb3IgdHlwZT1yYWRpbyBjYW5ub3QgYmUgdXNlZCB3aXRoIC50b0hhdmVWYWx1ZSgpLiBVc2UgLnRvQmVDaGVja2VkKCkgZm9yIHR5cGU9Y2hlY2tib3ggb3IgLnRvSGF2ZUZvcm1WYWx1ZXMoKSBpbnN0ZWFkJyk7XG4gIH1cblxuICBjb25zdCByZWNlaXZlZFZhbHVlID0gKDAsIF91dGlscy5nZXRTaW5nbGVFbGVtZW50VmFsdWUpKGh0bWxFbGVtZW50KTtcbiAgY29uc3QgZXhwZWN0c1ZhbHVlID0gZXhwZWN0ZWRWYWx1ZSAhPT0gdW5kZWZpbmVkO1xuICBsZXQgZXhwZWN0ZWRUeXBlZFZhbHVlID0gZXhwZWN0ZWRWYWx1ZTtcbiAgbGV0IHJlY2VpdmVkVHlwZWRWYWx1ZSA9IHJlY2VpdmVkVmFsdWU7XG5cbiAgaWYgKGV4cGVjdGVkVmFsdWUgPT0gcmVjZWl2ZWRWYWx1ZSAmJiBleHBlY3RlZFZhbHVlICE9PSByZWNlaXZlZFZhbHVlKSB7XG4gICAgZXhwZWN0ZWRUeXBlZFZhbHVlID0gYCR7ZXhwZWN0ZWRWYWx1ZX0gKCR7dHlwZW9mIGV4cGVjdGVkVmFsdWV9KWA7XG4gICAgcmVjZWl2ZWRUeXBlZFZhbHVlID0gYCR7cmVjZWl2ZWRWYWx1ZX0gKCR7dHlwZW9mIHJlY2VpdmVkVmFsdWV9KWA7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhc3M6IGV4cGVjdHNWYWx1ZSA/ICgwLCBfaXNFcXVhbFdpdGguZGVmYXVsdCkocmVjZWl2ZWRWYWx1ZSwgZXhwZWN0ZWRWYWx1ZSwgX3V0aWxzLmNvbXBhcmVBcnJheXNBc1NldCkgOiBCb29sZWFuKHJlY2VpdmVkVmFsdWUpLFxuICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgIGNvbnN0IHRvID0gdGhpcy5pc05vdCA/ICdub3QgdG8nIDogJ3RvJztcbiAgICAgIGNvbnN0IG1hdGNoZXIgPSB0aGlzLnV0aWxzLm1hdGNoZXJIaW50KGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9IYXZlVmFsdWVgLCAnZWxlbWVudCcsIGV4cGVjdGVkVmFsdWUpO1xuICAgICAgcmV0dXJuICgwLCBfdXRpbHMuZ2V0TWVzc2FnZSkodGhpcywgbWF0Y2hlciwgYEV4cGVjdGVkIHRoZSBlbGVtZW50ICR7dG99IGhhdmUgdmFsdWVgLCBleHBlY3RzVmFsdWUgPyBleHBlY3RlZFR5cGVkVmFsdWUgOiAnKGFueSknLCAnUmVjZWl2ZWQnLCByZWNlaXZlZFR5cGVkVmFsdWUpO1xuICAgIH1cbiAgfTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQztBQUVwRkMsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLFdBQVcsR0FBR0EsV0FBVztBQUVqQyxJQUFJQyxZQUFZLEdBQUdQLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUV4RSxJQUFJTyxNQUFNLEdBQUdQLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFFL0IsU0FBU0ssV0FBV0EsQ0FBQ0csV0FBVyxFQUFFQyxhQUFhLEVBQUU7RUFDL0MsQ0FBQyxDQUFDLEVBQUVGLE1BQU0sQ0FBQ0csZ0JBQWdCLEVBQUVGLFdBQVcsRUFBRUgsV0FBVyxFQUFFLElBQUksQ0FBQztFQUU1RCxJQUFJRyxXQUFXLENBQUNHLE9BQU8sQ0FBQ0MsV0FBVyxFQUFFLEtBQUssT0FBTyxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDQyxRQUFRLENBQUNMLFdBQVcsQ0FBQ00sSUFBSSxDQUFDLEVBQUU7SUFDckcsTUFBTSxJQUFJQyxLQUFLLENBQUMsZ0pBQWdKLENBQUM7RUFDbks7RUFFQSxNQUFNQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLEVBQUVULE1BQU0sQ0FBQ1UscUJBQXFCLEVBQUVULFdBQVcsQ0FBQztFQUNwRSxNQUFNVSxZQUFZLEdBQUdULGFBQWEsS0FBS1UsU0FBUztFQUNoRCxJQUFJQyxrQkFBa0IsR0FBR1gsYUFBYTtFQUN0QyxJQUFJWSxrQkFBa0IsR0FBR0wsYUFBYTtFQUV0QyxJQUFJUCxhQUFhLElBQUlPLGFBQWEsSUFBSVAsYUFBYSxLQUFLTyxhQUFhLEVBQUU7SUFDckVJLGtCQUFrQixHQUFJLEdBQUVYLGFBQWMsS0FBSSxPQUFPQSxhQUFjLEdBQUU7SUFDakVZLGtCQUFrQixHQUFJLEdBQUVMLGFBQWMsS0FBSSxPQUFPQSxhQUFjLEdBQUU7RUFDbkU7RUFFQSxPQUFPO0lBQ0xNLElBQUksRUFBRUosWUFBWSxHQUFHLENBQUMsQ0FBQyxFQUFFWixZQUFZLENBQUNpQixPQUFPLEVBQUVQLGFBQWEsRUFBRVAsYUFBYSxFQUFFRixNQUFNLENBQUNpQixrQkFBa0IsQ0FBQyxHQUFHQyxPQUFPLENBQUNULGFBQWEsQ0FBQztJQUNoSVUsT0FBTyxFQUFFQSxDQUFBLEtBQU07TUFDYixNQUFNQyxFQUFFLEdBQUcsSUFBSSxDQUFDQyxLQUFLLEdBQUcsUUFBUSxHQUFHLElBQUk7TUFDdkMsTUFBTUMsT0FBTyxHQUFHLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxXQUFXLENBQUUsR0FBRSxJQUFJLENBQUNILEtBQUssR0FBRyxNQUFNLEdBQUcsRUFBRyxjQUFhLEVBQUUsU0FBUyxFQUFFbkIsYUFBYSxDQUFDO01BQzNHLE9BQU8sQ0FBQyxDQUFDLEVBQUVGLE1BQU0sQ0FBQ3lCLFVBQVUsRUFBRSxJQUFJLEVBQUVILE9BQU8sRUFBRyx3QkFBdUJGLEVBQUcsYUFBWSxFQUFFVCxZQUFZLEdBQUdFLGtCQUFrQixHQUFHLE9BQU8sRUFBRSxVQUFVLEVBQUVDLGtCQUFrQixDQUFDO0lBQ3BLO0VBQ0YsQ0FBQztBQUNIIn0=