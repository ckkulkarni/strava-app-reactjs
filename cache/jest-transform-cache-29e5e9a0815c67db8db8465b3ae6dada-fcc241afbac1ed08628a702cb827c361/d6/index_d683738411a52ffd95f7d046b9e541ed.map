{"version":3,"names":["lower_case_1","require","DEFAULT_SPLIT_REGEXP","DEFAULT_STRIP_REGEXP","noCase","input","options","_a","splitRegexp","_b","stripRegexp","_c","transform","lowerCase","_d","delimiter","result","replace","start","end","length","charAt","slice","split","map","join","exports","re","value","RegExp","reduce"],"sources":["../src/index.ts"],"sourcesContent":["import { lowerCase } from \"lower-case\";\n\nexport interface Options {\n  splitRegexp?: RegExp | RegExp[];\n  stripRegexp?: RegExp | RegExp[];\n  delimiter?: string;\n  transform?: (part: string, index: number, parts: string[]) => string;\n}\n\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nconst DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n\n// Remove all non-word characters.\nconst DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input: string, options: Options = {}) {\n  const {\n    splitRegexp = DEFAULT_SPLIT_REGEXP,\n    stripRegexp = DEFAULT_STRIP_REGEXP,\n    transform = lowerCase,\n    delimiter = \" \",\n  } = options;\n\n  let result = replace(\n    replace(input, splitRegexp, \"$1\\0$2\"),\n    stripRegexp,\n    \"\\0\"\n  );\n  let start = 0;\n  let end = result.length;\n\n  // Trim the delimiter from around the output string.\n  while (result.charAt(start) === \"\\0\") start++;\n  while (result.charAt(end - 1) === \"\\0\") end--;\n\n  // Transform each token independently.\n  return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input: string, re: RegExp | RegExp[], value: string) {\n  if (re instanceof RegExp) return input.replace(re, value);\n  return re.reduce((input, re) => input.replace(re, value), input);\n}\n"],"mappings":";;;;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AASA;AACA,IAAMC,oBAAoB,GAAG,CAAC,oBAAoB,EAAE,sBAAsB,CAAC;AAE3E;AACA,IAAMC,oBAAoB,GAAG,cAAc;AAE3C;;;AAGA,SAAgBC,MAAMA,CAACC,KAAa,EAAEC,OAAqB;EAArB,IAAAA,OAAA;IAAAA,OAAA,KAAqB;EAAA;EAEvD,IAAAC,EAAA,GAIED,OAAO,CAAAE,WAJyB;IAAlCA,WAAW,GAAAD,EAAA,cAAGL,oBAAoB,GAAAK,EAAA;IAClCE,EAAA,GAGEH,OAAO,CAAAI,WAHyB;IAAlCA,WAAW,GAAAD,EAAA,cAAGN,oBAAoB,GAAAM,EAAA;IAClCE,EAAA,GAEEL,OAAO,CAAAM,SAFY;IAArBA,SAAS,GAAAD,EAAA,cAAGX,YAAA,CAAAa,SAAS,GAAAF,EAAA;IACrBG,EAAA,GACER,OAAO,CAAAS,SADM;IAAfA,SAAS,GAAAD,EAAA,cAAG,GAAG,GAAAA,EAAA;EAGjB,IAAIE,MAAM,GAAGC,OAAO,CAClBA,OAAO,CAACZ,KAAK,EAAEG,WAAW,EAAE,QAAQ,CAAC,EACrCE,WAAW,EACX,IAAI,CACL;EACD,IAAIQ,KAAK,GAAG,CAAC;EACb,IAAIC,GAAG,GAAGH,MAAM,CAACI,MAAM;EAEvB;EACA,OAAOJ,MAAM,CAACK,MAAM,CAACH,KAAK,CAAC,KAAK,IAAI,EAAEA,KAAK,EAAE;EAC7C,OAAOF,MAAM,CAACK,MAAM,CAACF,GAAG,GAAG,CAAC,CAAC,KAAK,IAAI,EAAEA,GAAG,EAAE;EAE7C;EACA,OAAOH,MAAM,CAACM,KAAK,CAACJ,KAAK,EAAEC,GAAG,CAAC,CAACI,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAACZ,SAAS,CAAC,CAACa,IAAI,CAACV,SAAS,CAAC;AAC5E;AAtBAW,OAAA,CAAAtB,MAAA,GAAAA,MAAA;AAwBA;;;AAGA,SAASa,OAAOA,CAACZ,KAAa,EAAEsB,EAAqB,EAAEC,KAAa;EAClE,IAAID,EAAE,YAAYE,MAAM,EAAE,OAAOxB,KAAK,CAACY,OAAO,CAACU,EAAE,EAAEC,KAAK,CAAC;EACzD,OAAOD,EAAE,CAACG,MAAM,CAAC,UAACzB,KAAK,EAAEsB,EAAE;IAAK,OAAAtB,KAAK,CAACY,OAAO,CAACU,EAAE,EAAEC,KAAK,CAAC;EAAxB,CAAwB,EAAEvB,KAAK,CAAC;AAClE"}