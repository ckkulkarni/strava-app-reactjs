{"version":3,"names":["_1","__importDefault","require","helpers_1","value_checker_1","messages","__importStar","SnippetsFormatter","default","constructor","options","eventBroadcaster","on","envelope","doesHaveValue","testRunFinished","logSnippets","snippets","eventDataCollector","getTestCaseAttempts","forEach","testCaseAttempt","parsed","parseTestCaseAttempt","snippetBuilder","supportCodeLibrary","testSteps","testStep","result","status","TestStepResultStatus","UNDEFINED","push","snippet","log","join","exports","documentation"],"sources":["../../src/formatter/snippets_formatter.ts"],"sourcesContent":["import Formatter, { IFormatterOptions } from './'\nimport { parseTestCaseAttempt } from './helpers'\nimport { doesHaveValue } from '../value_checker'\nimport * as messages from '@cucumber/messages'\nimport IEnvelope = messages.Envelope\n\nexport default class SnippetsFormatter extends Formatter {\n  public static readonly documentation: string =\n    \"The Snippets Formatter doesn't output anything regarding the test run; it just prints snippets to implement any undefined steps\"\n\n  constructor(options: IFormatterOptions) {\n    super(options)\n    options.eventBroadcaster.on('envelope', (envelope: IEnvelope) => {\n      if (doesHaveValue(envelope.testRunFinished)) {\n        this.logSnippets()\n      }\n    })\n  }\n\n  logSnippets(): void {\n    const snippets: string[] = []\n    this.eventDataCollector.getTestCaseAttempts().forEach((testCaseAttempt) => {\n      const parsed = parseTestCaseAttempt({\n        snippetBuilder: this.snippetBuilder,\n        supportCodeLibrary: this.supportCodeLibrary,\n        testCaseAttempt,\n      })\n      parsed.testSteps.forEach((testStep) => {\n        if (\n          testStep.result.status === messages.TestStepResultStatus.UNDEFINED\n        ) {\n          snippets.push(testStep.snippet)\n        }\n      })\n    })\n    this.log(snippets.join('\\n\\n'))\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,EAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,SAAA,GAAAD,OAAA;AACA,MAAAE,eAAA,GAAAF,OAAA;AACA,MAAAG,QAAA,GAAAC,YAAA,CAAAJ,OAAA;AAGA,MAAqBK,iBAAkB,SAAQP,EAAA,CAAAQ,OAAS;EAItDC,YAAYC,OAA0B;IACpC,KAAK,CAACA,OAAO,CAAC;IACdA,OAAO,CAACC,gBAAgB,CAACC,EAAE,CAAC,UAAU,EAAGC,QAAmB,IAAI;MAC9D,IAAI,IAAAT,eAAA,CAAAU,aAAa,EAACD,QAAQ,CAACE,eAAe,CAAC,EAAE;QAC3C,IAAI,CAACC,WAAW,EAAE;;IAEtB,CAAC,CAAC;EACJ;EAEAA,WAAWA,CAAA;IACT,MAAMC,QAAQ,GAAa,EAAE;IAC7B,IAAI,CAACC,kBAAkB,CAACC,mBAAmB,EAAE,CAACC,OAAO,CAAEC,eAAe,IAAI;MACxE,MAAMC,MAAM,GAAG,IAAAnB,SAAA,CAAAoB,oBAAoB,EAAC;QAClCC,cAAc,EAAE,IAAI,CAACA,cAAc;QACnCC,kBAAkB,EAAE,IAAI,CAACA,kBAAkB;QAC3CJ;OACD,CAAC;MACFC,MAAM,CAACI,SAAS,CAACN,OAAO,CAAEO,QAAQ,IAAI;QACpC,IACEA,QAAQ,CAACC,MAAM,CAACC,MAAM,KAAKxB,QAAQ,CAACyB,oBAAoB,CAACC,SAAS,EAClE;UACAd,QAAQ,CAACe,IAAI,CAACL,QAAQ,CAACM,OAAO,CAAC;;MAEnC,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,IAAI,CAACC,GAAG,CAACjB,QAAQ,CAACkB,IAAI,CAAC,MAAM,CAAC,CAAC;EACjC;;AA9BFC,OAAA,CAAA5B,OAAA,GAAAD,iBAAA;AACyBA,iBAAA,CAAA8B,aAAa,GAClC,iIAAiI"}