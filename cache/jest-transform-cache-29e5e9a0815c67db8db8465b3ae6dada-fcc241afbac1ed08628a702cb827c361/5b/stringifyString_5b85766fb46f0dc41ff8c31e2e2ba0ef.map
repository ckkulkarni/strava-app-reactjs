{"version":3,"names":["Scalar","require","foldFlowLines","getFoldOptions","ctx","indentAtStart","lineWidth","options","minContentWidth","containsDocumentMarker","str","test","lineLengthOverLimit","indentLength","limit","strLen","length","i","start","doubleQuotedString","value","json","JSON","stringify","doubleQuotedAsJSON","implicitKey","minMultiLineLength","doubleQuotedMinMultiLineLength","indent","ch","slice","code","substr","FOLD_QUOTED","singleQuotedString","singleQuote","includes","res","replace","FOLD_FLOW","quotedString","qs","hasDouble","hasSingle","blockString","comment","type","onComment","onChompKeep","blockQuote","commentString","forceBlockIndent","literal","BLOCK_FOLDED","BLOCK_LITERAL","chomp","endStart","end","substring","endNlPos","indexOf","startWithSpace","startEnd","startNlPos","indentSize","header","body","FOLD_BLOCK","plainString","item","actualString","indentStep","inFlow","PLAIN","tag","default","compat","tags","doc","schema","some","stringifyString","ss","Object","assign","String","QUOTE_DOUBLE","_stringify","_type","QUOTE_SINGLE","defaultKeyType","defaultStringType","t","Error","exports"],"sources":["stringifyString.js"],"sourcesContent":["'use strict';\n\nvar Scalar = require('../nodes/Scalar.js');\nvar foldFlowLines = require('./foldFlowLines.js');\n\nconst getFoldOptions = (ctx) => ({\n    indentAtStart: ctx.indentAtStart,\n    lineWidth: ctx.options.lineWidth,\n    minContentWidth: ctx.options.minContentWidth\n});\n// Also checks for lines starting with %, as parsing the output as YAML 1.1 will\n// presume that's starting a new document.\nconst containsDocumentMarker = (str) => /^(%|---|\\.\\.\\.)/m.test(str);\nfunction lineLengthOverLimit(str, lineWidth, indentLength) {\n    if (!lineWidth || lineWidth < 0)\n        return false;\n    const limit = lineWidth - indentLength;\n    const strLen = str.length;\n    if (strLen <= limit)\n        return false;\n    for (let i = 0, start = 0; i < strLen; ++i) {\n        if (str[i] === '\\n') {\n            if (i - start > limit)\n                return true;\n            start = i + 1;\n            if (strLen - start <= limit)\n                return false;\n        }\n    }\n    return true;\n}\nfunction doubleQuotedString(value, ctx) {\n    const json = JSON.stringify(value);\n    if (ctx.options.doubleQuotedAsJSON)\n        return json;\n    const { implicitKey } = ctx;\n    const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;\n    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\n    let str = '';\n    let start = 0;\n    for (let i = 0, ch = json[i]; ch; ch = json[++i]) {\n        if (ch === ' ' && json[i + 1] === '\\\\' && json[i + 2] === 'n') {\n            // space before newline needs to be escaped to not be folded\n            str += json.slice(start, i) + '\\\\ ';\n            i += 1;\n            start = i;\n            ch = '\\\\';\n        }\n        if (ch === '\\\\')\n            switch (json[i + 1]) {\n                case 'u':\n                    {\n                        str += json.slice(start, i);\n                        const code = json.substr(i + 2, 4);\n                        switch (code) {\n                            case '0000':\n                                str += '\\\\0';\n                                break;\n                            case '0007':\n                                str += '\\\\a';\n                                break;\n                            case '000b':\n                                str += '\\\\v';\n                                break;\n                            case '001b':\n                                str += '\\\\e';\n                                break;\n                            case '0085':\n                                str += '\\\\N';\n                                break;\n                            case '00a0':\n                                str += '\\\\_';\n                                break;\n                            case '2028':\n                                str += '\\\\L';\n                                break;\n                            case '2029':\n                                str += '\\\\P';\n                                break;\n                            default:\n                                if (code.substr(0, 2) === '00')\n                                    str += '\\\\x' + code.substr(2);\n                                else\n                                    str += json.substr(i, 6);\n                        }\n                        i += 5;\n                        start = i + 1;\n                    }\n                    break;\n                case 'n':\n                    if (implicitKey ||\n                        json[i + 2] === '\"' ||\n                        json.length < minMultiLineLength) {\n                        i += 1;\n                    }\n                    else {\n                        // folding will eat first newline\n                        str += json.slice(start, i) + '\\n\\n';\n                        while (json[i + 2] === '\\\\' &&\n                            json[i + 3] === 'n' &&\n                            json[i + 4] !== '\"') {\n                            str += '\\n';\n                            i += 2;\n                        }\n                        str += indent;\n                        // space after newline needs to be escaped to not be folded\n                        if (json[i + 2] === ' ')\n                            str += '\\\\';\n                        i += 1;\n                        start = i + 1;\n                    }\n                    break;\n                default:\n                    i += 1;\n            }\n    }\n    str = start ? str + json.slice(start) : json;\n    return implicitKey\n        ? str\n        : foldFlowLines.foldFlowLines(str, indent, foldFlowLines.FOLD_QUOTED, getFoldOptions(ctx));\n}\nfunction singleQuotedString(value, ctx) {\n    if (ctx.options.singleQuote === false ||\n        (ctx.implicitKey && value.includes('\\n')) ||\n        /[ \\t]\\n|\\n[ \\t]/.test(value) // single quoted string can't have leading or trailing whitespace around newline\n    )\n        return doubleQuotedString(value, ctx);\n    const indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\n    const res = \"'\" + value.replace(/'/g, \"''\").replace(/\\n+/g, `$&\\n${indent}`) + \"'\";\n    return ctx.implicitKey\n        ? res\n        : foldFlowLines.foldFlowLines(res, indent, foldFlowLines.FOLD_FLOW, getFoldOptions(ctx));\n}\nfunction quotedString(value, ctx) {\n    const { singleQuote } = ctx.options;\n    let qs;\n    if (singleQuote === false)\n        qs = doubleQuotedString;\n    else {\n        const hasDouble = value.includes('\"');\n        const hasSingle = value.includes(\"'\");\n        if (hasDouble && !hasSingle)\n            qs = singleQuotedString;\n        else if (hasSingle && !hasDouble)\n            qs = doubleQuotedString;\n        else\n            qs = singleQuote ? singleQuotedString : doubleQuotedString;\n    }\n    return qs(value, ctx);\n}\nfunction blockString({ comment, type, value }, ctx, onComment, onChompKeep) {\n    const { blockQuote, commentString, lineWidth } = ctx.options;\n    // 1. Block can't end in whitespace unless the last line is non-empty.\n    // 2. Strings consisting of only whitespace are best rendered explicitly.\n    if (!blockQuote || /\\n[\\t ]+$/.test(value) || /^\\s*$/.test(value)) {\n        return quotedString(value, ctx);\n    }\n    const indent = ctx.indent ||\n        (ctx.forceBlockIndent || containsDocumentMarker(value) ? '  ' : '');\n    const literal = blockQuote === 'literal'\n        ? true\n        : blockQuote === 'folded' || type === Scalar.Scalar.BLOCK_FOLDED\n            ? false\n            : type === Scalar.Scalar.BLOCK_LITERAL\n                ? true\n                : !lineLengthOverLimit(value, lineWidth, indent.length);\n    if (!value)\n        return literal ? '|\\n' : '>\\n';\n    // determine chomping from whitespace at value end\n    let chomp;\n    let endStart;\n    for (endStart = value.length; endStart > 0; --endStart) {\n        const ch = value[endStart - 1];\n        if (ch !== '\\n' && ch !== '\\t' && ch !== ' ')\n            break;\n    }\n    let end = value.substring(endStart);\n    const endNlPos = end.indexOf('\\n');\n    if (endNlPos === -1) {\n        chomp = '-'; // strip\n    }\n    else if (value === end || endNlPos !== end.length - 1) {\n        chomp = '+'; // keep\n        if (onChompKeep)\n            onChompKeep();\n    }\n    else {\n        chomp = ''; // clip\n    }\n    if (end) {\n        value = value.slice(0, -end.length);\n        if (end[end.length - 1] === '\\n')\n            end = end.slice(0, -1);\n        end = end.replace(/\\n+(?!\\n|$)/g, `$&${indent}`);\n    }\n    // determine indent indicator from whitespace at value start\n    let startWithSpace = false;\n    let startEnd;\n    let startNlPos = -1;\n    for (startEnd = 0; startEnd < value.length; ++startEnd) {\n        const ch = value[startEnd];\n        if (ch === ' ')\n            startWithSpace = true;\n        else if (ch === '\\n')\n            startNlPos = startEnd;\n        else\n            break;\n    }\n    let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);\n    if (start) {\n        value = value.substring(start.length);\n        start = start.replace(/\\n+/g, `$&${indent}`);\n    }\n    const indentSize = indent ? '2' : '1'; // root is at -1\n    let header = (literal ? '|' : '>') + (startWithSpace ? indentSize : '') + chomp;\n    if (comment) {\n        header += ' ' + commentString(comment.replace(/ ?[\\r\\n]+/g, ' '));\n        if (onComment)\n            onComment();\n    }\n    if (literal) {\n        value = value.replace(/\\n+/g, `$&${indent}`);\n        return `${header}\\n${indent}${start}${value}${end}`;\n    }\n    value = value\n        .replace(/\\n+/g, '\\n$&')\n        .replace(/(?:^|\\n)([\\t ].*)(?:([\\n\\t ]*)\\n(?![\\n\\t ]))?/g, '$1$2') // more-indented lines aren't folded\n        //                ^ more-ind. ^ empty     ^ capture next empty lines only at end of indent\n        .replace(/\\n+/g, `$&${indent}`);\n    const body = foldFlowLines.foldFlowLines(`${start}${value}${end}`, indent, foldFlowLines.FOLD_BLOCK, getFoldOptions(ctx));\n    return `${header}\\n${indent}${body}`;\n}\nfunction plainString(item, ctx, onComment, onChompKeep) {\n    const { type, value } = item;\n    const { actualString, implicitKey, indent, indentStep, inFlow } = ctx;\n    if ((implicitKey && /[\\n[\\]{},]/.test(value)) ||\n        (inFlow && /[[\\]{},]/.test(value))) {\n        return quotedString(value, ctx);\n    }\n    if (!value ||\n        /^[\\n\\t ,[\\]{}#&*!|>'\"%@`]|^[?-]$|^[?-][ \\t]|[\\n:][ \\t]|[ \\t]\\n|[\\n\\t ]#|[\\n\\t :]$/.test(value)) {\n        // not allowed:\n        // - empty string, '-' or '?'\n        // - start with an indicator character (except [?:-]) or /[?-] /\n        // - '\\n ', ': ' or ' \\n' anywhere\n        // - '#' not preceded by a non-space char\n        // - end with ' ' or ':'\n        return implicitKey || inFlow || !value.includes('\\n')\n            ? quotedString(value, ctx)\n            : blockString(item, ctx, onComment, onChompKeep);\n    }\n    if (!implicitKey &&\n        !inFlow &&\n        type !== Scalar.Scalar.PLAIN &&\n        value.includes('\\n')) {\n        // Where allowed & type not set explicitly, prefer block style for multiline strings\n        return blockString(item, ctx, onComment, onChompKeep);\n    }\n    if (containsDocumentMarker(value)) {\n        if (indent === '') {\n            ctx.forceBlockIndent = true;\n            return blockString(item, ctx, onComment, onChompKeep);\n        }\n        else if (implicitKey && indent === indentStep) {\n            return quotedString(value, ctx);\n        }\n    }\n    const str = value.replace(/\\n+/g, `$&\\n${indent}`);\n    // Verify that output will be parsed as a string, as e.g. plain numbers and\n    // booleans get parsed with those types in v1.2 (e.g. '42', 'true' & '0.9e-3'),\n    // and others in v1.1.\n    if (actualString) {\n        const test = (tag) => tag.default && tag.tag !== 'tag:yaml.org,2002:str' && tag.test?.test(str);\n        const { compat, tags } = ctx.doc.schema;\n        if (tags.some(test) || compat?.some(test))\n            return quotedString(value, ctx);\n    }\n    return implicitKey\n        ? str\n        : foldFlowLines.foldFlowLines(str, indent, foldFlowLines.FOLD_FLOW, getFoldOptions(ctx));\n}\nfunction stringifyString(item, ctx, onComment, onChompKeep) {\n    const { implicitKey, inFlow } = ctx;\n    const ss = typeof item.value === 'string'\n        ? item\n        : Object.assign({}, item, { value: String(item.value) });\n    let { type } = item;\n    if (type !== Scalar.Scalar.QUOTE_DOUBLE) {\n        // force double quotes on control characters & unpaired surrogates\n        if (/[\\x00-\\x08\\x0b-\\x1f\\x7f-\\x9f\\u{D800}-\\u{DFFF}]/u.test(ss.value))\n            type = Scalar.Scalar.QUOTE_DOUBLE;\n    }\n    const _stringify = (_type) => {\n        switch (_type) {\n            case Scalar.Scalar.BLOCK_FOLDED:\n            case Scalar.Scalar.BLOCK_LITERAL:\n                return implicitKey || inFlow\n                    ? quotedString(ss.value, ctx) // blocks are not valid inside flow containers\n                    : blockString(ss, ctx, onComment, onChompKeep);\n            case Scalar.Scalar.QUOTE_DOUBLE:\n                return doubleQuotedString(ss.value, ctx);\n            case Scalar.Scalar.QUOTE_SINGLE:\n                return singleQuotedString(ss.value, ctx);\n            case Scalar.Scalar.PLAIN:\n                return plainString(ss, ctx, onComment, onChompKeep);\n            default:\n                return null;\n        }\n    };\n    let res = _stringify(type);\n    if (res === null) {\n        const { defaultKeyType, defaultStringType } = ctx.options;\n        const t = (implicitKey && defaultKeyType) || defaultStringType;\n        res = _stringify(t);\n        if (res === null)\n            throw new Error(`Unsupported default string type ${t}`);\n    }\n    return res;\n}\n\nexports.stringifyString = stringifyString;\n"],"mappings":"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"}