{"version":3,"names":["warn","debug","require","Cell","ColSpanCell","RowSpanCell","next","alloc","col","layoutTable","table","forEach","row","rowIndex","cell","y","x","rowSpan","colSpan","cs","Object","keys","idx","maxWidth","mw","Math","max","maxHeight","length","cellsConflict","cell1","cell2","yMin1","yMax1","yMin2","yMax2","yConflict","xMin1","xMax1","xMin2","xMax2","xConflict","conflictExists","rows","i_max","min","i","j","allBlank","xMin","xMax","addRowSpanCells","rowSpanCell","insertCell","addColSpanCells","cellRows","cellColumns","columnIndex","k","colSpanCell","splice","fillInTable","h_max","w_max","opts","y2","generateCells","map","Array","isArray","key","slice","unshift","makeTableLayout","module","exports","computeWidths","makeComputeWidths","computeHeights","desiredWidth","forcedMin","vals","result","spanners","auto","push","val","index","span","existingWidth","editableCols","dif","round","assign"],"sources":["layout-manager.js"],"sourcesContent":["const { warn, debug } = require('./debug');\nconst Cell = require('./cell');\nconst { ColSpanCell, RowSpanCell } = Cell;\n\n(function () {\n  function next(alloc, col) {\n    if (alloc[col] > 0) {\n      return next(alloc, col + 1);\n    }\n    return col;\n  }\n\n  function layoutTable(table) {\n    let alloc = {};\n    table.forEach(function (row, rowIndex) {\n      let col = 0;\n      row.forEach(function (cell) {\n        cell.y = rowIndex;\n        // Avoid erroneous call to next() on first row\n        cell.x = rowIndex ? next(alloc, col) : col;\n        const rowSpan = cell.rowSpan || 1;\n        const colSpan = cell.colSpan || 1;\n        if (rowSpan > 1) {\n          for (let cs = 0; cs < colSpan; cs++) {\n            alloc[cell.x + cs] = rowSpan;\n          }\n        }\n        col = cell.x + colSpan;\n      });\n      Object.keys(alloc).forEach((idx) => {\n        alloc[idx]--;\n        if (alloc[idx] < 1) delete alloc[idx];\n      });\n    });\n  }\n\n  function maxWidth(table) {\n    let mw = 0;\n    table.forEach(function (row) {\n      row.forEach(function (cell) {\n        mw = Math.max(mw, cell.x + (cell.colSpan || 1));\n      });\n    });\n    return mw;\n  }\n\n  function maxHeight(table) {\n    return table.length;\n  }\n\n  function cellsConflict(cell1, cell2) {\n    let yMin1 = cell1.y;\n    let yMax1 = cell1.y - 1 + (cell1.rowSpan || 1);\n    let yMin2 = cell2.y;\n    let yMax2 = cell2.y - 1 + (cell2.rowSpan || 1);\n    let yConflict = !(yMin1 > yMax2 || yMin2 > yMax1);\n\n    let xMin1 = cell1.x;\n    let xMax1 = cell1.x - 1 + (cell1.colSpan || 1);\n    let xMin2 = cell2.x;\n    let xMax2 = cell2.x - 1 + (cell2.colSpan || 1);\n    let xConflict = !(xMin1 > xMax2 || xMin2 > xMax1);\n\n    return yConflict && xConflict;\n  }\n\n  function conflictExists(rows, x, y) {\n    let i_max = Math.min(rows.length - 1, y);\n    let cell = { x: x, y: y };\n    for (let i = 0; i <= i_max; i++) {\n      let row = rows[i];\n      for (let j = 0; j < row.length; j++) {\n        if (cellsConflict(cell, row[j])) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  function allBlank(rows, y, xMin, xMax) {\n    for (let x = xMin; x < xMax; x++) {\n      if (conflictExists(rows, x, y)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function addRowSpanCells(table) {\n    table.forEach(function (row, rowIndex) {\n      row.forEach(function (cell) {\n        for (let i = 1; i < cell.rowSpan; i++) {\n          let rowSpanCell = new RowSpanCell(cell);\n          rowSpanCell.x = cell.x;\n          rowSpanCell.y = cell.y + i;\n          rowSpanCell.colSpan = cell.colSpan;\n          insertCell(rowSpanCell, table[rowIndex + i]);\n        }\n      });\n    });\n  }\n\n  function addColSpanCells(cellRows) {\n    for (let rowIndex = cellRows.length - 1; rowIndex >= 0; rowIndex--) {\n      let cellColumns = cellRows[rowIndex];\n      for (let columnIndex = 0; columnIndex < cellColumns.length; columnIndex++) {\n        let cell = cellColumns[columnIndex];\n        for (let k = 1; k < cell.colSpan; k++) {\n          let colSpanCell = new ColSpanCell();\n          colSpanCell.x = cell.x + k;\n          colSpanCell.y = cell.y;\n          cellColumns.splice(columnIndex + 1, 0, colSpanCell);\n        }\n      }\n    }\n  }\n\n  function insertCell(cell, row) {\n    let x = 0;\n    while (x < row.length && row[x].x < cell.x) {\n      x++;\n    }\n    row.splice(x, 0, cell);\n  }\n\n  function fillInTable(table) {\n    let h_max = maxHeight(table);\n    let w_max = maxWidth(table);\n    debug(`Max rows: ${h_max}; Max cols: ${w_max}`);\n    for (let y = 0; y < h_max; y++) {\n      for (let x = 0; x < w_max; x++) {\n        if (!conflictExists(table, x, y)) {\n          let opts = { x: x, y: y, colSpan: 1, rowSpan: 1 };\n          x++;\n          while (x < w_max && !conflictExists(table, x, y)) {\n            opts.colSpan++;\n            x++;\n          }\n          let y2 = y + 1;\n          while (y2 < h_max && allBlank(table, y2, opts.x, opts.x + opts.colSpan)) {\n            opts.rowSpan++;\n            y2++;\n          }\n          let cell = new Cell(opts);\n          cell.x = opts.x;\n          cell.y = opts.y;\n          warn(`Missing cell at ${cell.y}-${cell.x}.`);\n          insertCell(cell, table[y]);\n        }\n      }\n    }\n  }\n\n  function generateCells(rows) {\n    return rows.map(function (row) {\n      if (!Array.isArray(row)) {\n        let key = Object.keys(row)[0];\n        row = row[key];\n        if (Array.isArray(row)) {\n          row = row.slice();\n          row.unshift(key);\n        } else {\n          row = [key, row];\n        }\n      }\n      return row.map(function (cell) {\n        return new Cell(cell);\n      });\n    });\n  }\n\n  function makeTableLayout(rows) {\n    let cellRows = generateCells(rows);\n    layoutTable(cellRows);\n    fillInTable(cellRows);\n    addRowSpanCells(cellRows);\n    addColSpanCells(cellRows);\n    return cellRows;\n  }\n\n  module.exports = {\n    makeTableLayout: makeTableLayout,\n    layoutTable: layoutTable,\n    addRowSpanCells: addRowSpanCells,\n    maxWidth: maxWidth,\n    fillInTable: fillInTable,\n    computeWidths: makeComputeWidths('colSpan', 'desiredWidth', 'x', 1),\n    computeHeights: makeComputeWidths('rowSpan', 'desiredHeight', 'y', 1),\n  };\n})();\n\nfunction makeComputeWidths(colSpan, desiredWidth, x, forcedMin) {\n  return function (vals, table) {\n    let result = [];\n    let spanners = [];\n    let auto = {};\n    table.forEach(function (row) {\n      row.forEach(function (cell) {\n        if ((cell[colSpan] || 1) > 1) {\n          spanners.push(cell);\n        } else {\n          result[cell[x]] = Math.max(result[cell[x]] || 0, cell[desiredWidth] || 0, forcedMin);\n        }\n      });\n    });\n\n    vals.forEach(function (val, index) {\n      if (typeof val === 'number') {\n        result[index] = val;\n      }\n    });\n\n    //spanners.forEach(function(cell){\n    for (let k = spanners.length - 1; k >= 0; k--) {\n      let cell = spanners[k];\n      let span = cell[colSpan];\n      let col = cell[x];\n      let existingWidth = result[col];\n      let editableCols = typeof vals[col] === 'number' ? 0 : 1;\n      if (typeof existingWidth === 'number') {\n        for (let i = 1; i < span; i++) {\n          existingWidth += 1 + result[col + i];\n          if (typeof vals[col + i] !== 'number') {\n            editableCols++;\n          }\n        }\n      } else {\n        existingWidth = desiredWidth === 'desiredWidth' ? cell.desiredWidth - 1 : 1;\n        if (!auto[col] || auto[col] < existingWidth) {\n          auto[col] = existingWidth;\n        }\n      }\n\n      if (cell[desiredWidth] > existingWidth) {\n        let i = 0;\n        while (editableCols > 0 && cell[desiredWidth] > existingWidth) {\n          if (typeof vals[col + i] !== 'number') {\n            let dif = Math.round((cell[desiredWidth] - existingWidth) / editableCols);\n            existingWidth += dif;\n            result[col + i] += dif;\n            editableCols--;\n          }\n          i++;\n        }\n      }\n    }\n\n    Object.assign(vals, result, auto);\n    for (let j = 0; j < vals.length; j++) {\n      vals[j] = Math.max(forcedMin, vals[j] || 0);\n    }\n  };\n}\n"],"mappings":"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"}