{"version":3,"names":["messages","__importStar","require","value_checker_1","EventDataCollector","constructor","eventBroadcaster","gherkinDocumentMap","pickleMap","testCaseMap","testCaseAttemptDataMap","undefinedParameterTypes","on","parseEnvelope","bind","getGherkinDocument","uri","getPickle","pickleId","getTestCaseAttempts","Object","keys","map","testCaseStartedId","getTestCaseAttempt","testCaseAttemptData","testCase","testCaseId","pickle","gherkinDocument","attempt","willBeRetried","stepAttachments","stepResults","worstTestStepResult","envelope","doesHaveValue","id","undefinedParameterType","push","testCaseStarted","initTestCaseAttempt","attachment","storeAttachment","testStepFinished","storeTestStepResult","testCaseFinished","storeTestCaseResult","duration","seconds","nanos","status","TestStepResultStatus","UNKNOWN","testStepId","doesNotHaveValue","testStepResult","values","getWorstTestStepResult","exports","default"],"sources":["../../../src/formatter/helpers/event_data_collector.ts"],"sourcesContent":["import * as messages from '@cucumber/messages'\nimport { doesHaveValue, doesNotHaveValue } from '../../value_checker'\nimport { EventEmitter } from 'events'\n\ninterface ITestCaseAttemptData {\n  attempt: number\n  willBeRetried: boolean\n  testCaseId: string\n  stepAttachments: Record<string, messages.Attachment[]>\n  stepResults: Record<string, messages.TestStepResult>\n  worstTestStepResult: messages.TestStepResult\n}\n\nexport interface ITestCaseAttempt {\n  attempt: number\n  willBeRetried: boolean\n  gherkinDocument: messages.GherkinDocument\n  pickle: messages.Pickle\n  stepAttachments: Record<string, messages.Attachment[]>\n  stepResults: Record<string, messages.TestStepResult>\n  testCase: messages.TestCase\n  worstTestStepResult: messages.TestStepResult\n}\n\nexport default class EventDataCollector {\n  private gherkinDocumentMap: Record<string, messages.GherkinDocument> = {}\n  private pickleMap: Record<string, messages.Pickle> = {}\n  private testCaseMap: Record<string, messages.TestCase> = {}\n  private testCaseAttemptDataMap: Record<string, ITestCaseAttemptData> = {}\n  readonly undefinedParameterTypes: messages.UndefinedParameterType[] = []\n\n  constructor(eventBroadcaster: EventEmitter) {\n    eventBroadcaster.on('envelope', this.parseEnvelope.bind(this))\n  }\n\n  getGherkinDocument(uri: string): messages.GherkinDocument {\n    return this.gherkinDocumentMap[uri]\n  }\n\n  getPickle(pickleId: string): messages.Pickle {\n    return this.pickleMap[pickleId]\n  }\n\n  getTestCaseAttempts(): ITestCaseAttempt[] {\n    return Object.keys(this.testCaseAttemptDataMap).map((testCaseStartedId) => {\n      return this.getTestCaseAttempt(testCaseStartedId)\n    })\n  }\n\n  getTestCaseAttempt(testCaseStartedId: string): ITestCaseAttempt {\n    const testCaseAttemptData = this.testCaseAttemptDataMap[testCaseStartedId]\n    const testCase = this.testCaseMap[testCaseAttemptData.testCaseId]\n    const pickle = this.pickleMap[testCase.pickleId]\n    return {\n      gherkinDocument: this.gherkinDocumentMap[pickle.uri],\n      pickle,\n      testCase,\n      attempt: testCaseAttemptData.attempt,\n      willBeRetried: testCaseAttemptData.willBeRetried,\n      stepAttachments: testCaseAttemptData.stepAttachments,\n      stepResults: testCaseAttemptData.stepResults,\n      worstTestStepResult: testCaseAttemptData.worstTestStepResult,\n    }\n  }\n\n  parseEnvelope(envelope: messages.Envelope): void {\n    if (doesHaveValue(envelope.gherkinDocument)) {\n      this.gherkinDocumentMap[envelope.gherkinDocument.uri] =\n        envelope.gherkinDocument\n    } else if (doesHaveValue(envelope.pickle)) {\n      this.pickleMap[envelope.pickle.id] = envelope.pickle\n    } else if (doesHaveValue(envelope.undefinedParameterType)) {\n      this.undefinedParameterTypes.push(envelope.undefinedParameterType)\n    } else if (doesHaveValue(envelope.testCase)) {\n      this.testCaseMap[envelope.testCase.id] = envelope.testCase\n    } else if (doesHaveValue(envelope.testCaseStarted)) {\n      this.initTestCaseAttempt(envelope.testCaseStarted)\n    } else if (doesHaveValue(envelope.attachment)) {\n      this.storeAttachment(envelope.attachment)\n    } else if (doesHaveValue(envelope.testStepFinished)) {\n      this.storeTestStepResult(envelope.testStepFinished)\n    } else if (doesHaveValue(envelope.testCaseFinished)) {\n      this.storeTestCaseResult(envelope.testCaseFinished)\n    }\n  }\n\n  private initTestCaseAttempt(testCaseStarted: messages.TestCaseStarted): void {\n    this.testCaseAttemptDataMap[testCaseStarted.id] = {\n      attempt: testCaseStarted.attempt,\n      willBeRetried: false,\n      testCaseId: testCaseStarted.testCaseId,\n      stepAttachments: {},\n      stepResults: {},\n      worstTestStepResult: {\n        duration: { seconds: 0, nanos: 0 },\n        status: messages.TestStepResultStatus.UNKNOWN,\n      },\n    }\n  }\n\n  storeAttachment(attachment: messages.Attachment): void {\n    const { testCaseStartedId, testStepId } = attachment\n    // TODO: we shouldn't have to check if these properties have values - they are non-nullable\n    if (doesHaveValue(testCaseStartedId) && doesHaveValue(testStepId)) {\n      const { stepAttachments } = this.testCaseAttemptDataMap[testCaseStartedId]\n      if (doesNotHaveValue(stepAttachments[testStepId])) {\n        stepAttachments[testStepId] = []\n      }\n      stepAttachments[testStepId].push(attachment)\n    }\n  }\n\n  storeTestStepResult({\n    testCaseStartedId,\n    testStepId,\n    testStepResult,\n  }: messages.TestStepFinished): void {\n    this.testCaseAttemptDataMap[testCaseStartedId].stepResults[testStepId] =\n      testStepResult\n  }\n\n  storeTestCaseResult({\n    testCaseStartedId,\n    willBeRetried,\n  }: messages.TestCaseFinished): void {\n    const stepResults = Object.values(\n      this.testCaseAttemptDataMap[testCaseStartedId].stepResults\n    )\n    this.testCaseAttemptDataMap[testCaseStartedId].worstTestStepResult =\n      messages.getWorstTestStepResult(stepResults)\n    this.testCaseAttemptDataMap[testCaseStartedId].willBeRetried = willBeRetried\n  }\n}\n"],"mappings":"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"}