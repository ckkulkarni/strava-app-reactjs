82c083632c9718296d610d812c94521a
"use strict";

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function () {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseTestCaseAttempt = void 0;
const keyword_type_1 = require("./keyword_type");
const gherkin_document_parser_1 = require("./gherkin_document_parser");
const pickle_parser_1 = require("./pickle_parser");
const messages = __importStar(require("@cucumber/messages"));
const value_checker_1 = require("../../value_checker");
const messages_1 = require("@cucumber/messages");
function parseStep({
  isBeforeHook,
  gherkinStepMap,
  keyword,
  keywordType,
  pickleStep,
  pickleUri,
  snippetBuilder,
  supportCodeLibrary,
  testStep,
  testStepResult,
  testStepAttachments
}) {
  const out = {
    attachments: testStepAttachments,
    keyword: (0, value_checker_1.doesHaveValue)(testStep.pickleStepId) ? keyword : isBeforeHook ? 'Before' : 'After',
    result: testStepResult
  };
  if ((0, value_checker_1.doesHaveValue)(testStep.hookId)) {
    let hookDefinition;
    if (isBeforeHook) {
      hookDefinition = supportCodeLibrary.beforeTestCaseHookDefinitions.find(x => x.id === testStep.hookId);
    } else {
      hookDefinition = supportCodeLibrary.afterTestCaseHookDefinitions.find(x => x.id === testStep.hookId);
    }
    out.actionLocation = {
      uri: hookDefinition.uri,
      line: hookDefinition.line
    };
    out.name = hookDefinition.name;
  }
  if ((0, value_checker_1.doesHaveValue)(testStep.stepDefinitionIds) && testStep.stepDefinitionIds.length === 1) {
    const stepDefinition = supportCodeLibrary.stepDefinitions.find(x => x.id === testStep.stepDefinitionIds[0]);
    out.actionLocation = {
      uri: stepDefinition.uri,
      line: stepDefinition.line
    };
  }
  if ((0, value_checker_1.doesHaveValue)(testStep.pickleStepId)) {
    out.sourceLocation = {
      uri: pickleUri,
      line: gherkinStepMap[pickleStep.astNodeIds[0]].location.line
    };
    out.text = pickleStep.text;
    if ((0, value_checker_1.doesHaveValue)(pickleStep.argument)) {
      out.argument = pickleStep.argument;
    }
  }
  if (testStepResult.status === messages.TestStepResultStatus.UNDEFINED) {
    out.snippet = snippetBuilder.build({
      keywordType,
      pickleStep
    });
  }
  return out;
}
// Converts a testCaseAttempt into a json object with all data needed for
// displaying it in a pretty format
function parseTestCaseAttempt({
  testCaseAttempt,
  snippetBuilder,
  supportCodeLibrary
}) {
  const {
    testCase,
    pickle,
    gherkinDocument
  } = testCaseAttempt;
  const gherkinStepMap = (0, gherkin_document_parser_1.getGherkinStepMap)(gherkinDocument);
  const gherkinScenarioLocationMap = (0, gherkin_document_parser_1.getGherkinScenarioLocationMap)(gherkinDocument);
  const pickleStepMap = (0, pickle_parser_1.getPickleStepMap)(pickle);
  const relativePickleUri = pickle.uri;
  const parsedTestCase = {
    attempt: testCaseAttempt.attempt,
    name: pickle.name,
    sourceLocation: {
      uri: relativePickleUri,
      line: gherkinScenarioLocationMap[pickle.astNodeIds[pickle.astNodeIds.length - 1]].line
    },
    worstTestStepResult: testCaseAttempt.worstTestStepResult
  };
  const parsedTestSteps = [];
  let isBeforeHook = true;
  let previousKeywordType = keyword_type_1.KeywordType.Precondition;
  testCase.testSteps.forEach(testStep => {
    const testStepResult = testCaseAttempt.stepResults[testStep.id] || new messages_1.TestStepResult();
    isBeforeHook = isBeforeHook && (0, value_checker_1.doesHaveValue)(testStep.hookId);
    let keyword, keywordType, pickleStep;
    if ((0, value_checker_1.doesHaveValue)(testStep.pickleStepId)) {
      pickleStep = pickleStepMap[testStep.pickleStepId];
      keyword = (0, pickle_parser_1.getStepKeyword)({
        pickleStep,
        gherkinStepMap
      });
      keywordType = (0, keyword_type_1.getStepKeywordType)({
        keyword,
        language: gherkinDocument.feature.language,
        previousKeywordType
      });
    }
    const parsedStep = parseStep({
      isBeforeHook,
      gherkinStepMap,
      keyword,
      keywordType,
      pickleStep,
      pickleUri: relativePickleUri,
      snippetBuilder,
      supportCodeLibrary,
      testStep,
      testStepResult,
      testStepAttachments: (0, value_checker_1.valueOrDefault)(testCaseAttempt.stepAttachments[testStep.id], [])
    });
    parsedTestSteps.push(parsedStep);
    previousKeywordType = keywordType;
  });
  return {
    testCase: parsedTestCase,
    testSteps: parsedTestSteps
  };
}
exports.parseTestCaseAttempt = parseTestCaseAttempt;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJrZXl3b3JkX3R5cGVfMSIsInJlcXVpcmUiLCJnaGVya2luX2RvY3VtZW50X3BhcnNlcl8xIiwicGlja2xlX3BhcnNlcl8xIiwibWVzc2FnZXMiLCJfX2ltcG9ydFN0YXIiLCJ2YWx1ZV9jaGVja2VyXzEiLCJtZXNzYWdlc18xIiwicGFyc2VTdGVwIiwiaXNCZWZvcmVIb29rIiwiZ2hlcmtpblN0ZXBNYXAiLCJrZXl3b3JkIiwia2V5d29yZFR5cGUiLCJwaWNrbGVTdGVwIiwicGlja2xlVXJpIiwic25pcHBldEJ1aWxkZXIiLCJzdXBwb3J0Q29kZUxpYnJhcnkiLCJ0ZXN0U3RlcCIsInRlc3RTdGVwUmVzdWx0IiwidGVzdFN0ZXBBdHRhY2htZW50cyIsIm91dCIsImF0dGFjaG1lbnRzIiwiZG9lc0hhdmVWYWx1ZSIsInBpY2tsZVN0ZXBJZCIsInJlc3VsdCIsImhvb2tJZCIsImhvb2tEZWZpbml0aW9uIiwiYmVmb3JlVGVzdENhc2VIb29rRGVmaW5pdGlvbnMiLCJmaW5kIiwieCIsImlkIiwiYWZ0ZXJUZXN0Q2FzZUhvb2tEZWZpbml0aW9ucyIsImFjdGlvbkxvY2F0aW9uIiwidXJpIiwibGluZSIsIm5hbWUiLCJzdGVwRGVmaW5pdGlvbklkcyIsImxlbmd0aCIsInN0ZXBEZWZpbml0aW9uIiwic3RlcERlZmluaXRpb25zIiwic291cmNlTG9jYXRpb24iLCJhc3ROb2RlSWRzIiwibG9jYXRpb24iLCJ0ZXh0IiwiYXJndW1lbnQiLCJzdGF0dXMiLCJUZXN0U3RlcFJlc3VsdFN0YXR1cyIsIlVOREVGSU5FRCIsInNuaXBwZXQiLCJidWlsZCIsInBhcnNlVGVzdENhc2VBdHRlbXB0IiwidGVzdENhc2VBdHRlbXB0IiwidGVzdENhc2UiLCJwaWNrbGUiLCJnaGVya2luRG9jdW1lbnQiLCJnZXRHaGVya2luU3RlcE1hcCIsImdoZXJraW5TY2VuYXJpb0xvY2F0aW9uTWFwIiwiZ2V0R2hlcmtpblNjZW5hcmlvTG9jYXRpb25NYXAiLCJwaWNrbGVTdGVwTWFwIiwiZ2V0UGlja2xlU3RlcE1hcCIsInJlbGF0aXZlUGlja2xlVXJpIiwicGFyc2VkVGVzdENhc2UiLCJhdHRlbXB0Iiwid29yc3RUZXN0U3RlcFJlc3VsdCIsInBhcnNlZFRlc3RTdGVwcyIsInByZXZpb3VzS2V5d29yZFR5cGUiLCJLZXl3b3JkVHlwZSIsIlByZWNvbmRpdGlvbiIsInRlc3RTdGVwcyIsImZvckVhY2giLCJzdGVwUmVzdWx0cyIsIlRlc3RTdGVwUmVzdWx0IiwiZ2V0U3RlcEtleXdvcmQiLCJnZXRTdGVwS2V5d29yZFR5cGUiLCJsYW5ndWFnZSIsImZlYXR1cmUiLCJwYXJzZWRTdGVwIiwidmFsdWVPckRlZmF1bHQiLCJzdGVwQXR0YWNobWVudHMiLCJwdXNoIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9mb3JtYXR0ZXIvaGVscGVycy90ZXN0X2Nhc2VfYXR0ZW1wdF9wYXJzZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0U3RlcEtleXdvcmRUeXBlLCBLZXl3b3JkVHlwZSB9IGZyb20gJy4va2V5d29yZF90eXBlJ1xuaW1wb3J0IHtcbiAgZ2V0R2hlcmtpblNjZW5hcmlvTG9jYXRpb25NYXAsXG4gIGdldEdoZXJraW5TdGVwTWFwLFxufSBmcm9tICcuL2doZXJraW5fZG9jdW1lbnRfcGFyc2VyJ1xuaW1wb3J0IHsgZ2V0UGlja2xlU3RlcE1hcCwgZ2V0U3RlcEtleXdvcmQgfSBmcm9tICcuL3BpY2tsZV9wYXJzZXInXG5pbXBvcnQgKiBhcyBtZXNzYWdlcyBmcm9tICdAY3VjdW1iZXIvbWVzc2FnZXMnXG5pbXBvcnQgeyBJVGVzdENhc2VBdHRlbXB0IH0gZnJvbSAnLi9ldmVudF9kYXRhX2NvbGxlY3RvcidcbmltcG9ydCBTdGVwRGVmaW5pdGlvblNuaXBwZXRCdWlsZGVyIGZyb20gJy4uL3N0ZXBfZGVmaW5pdGlvbl9zbmlwcGV0X2J1aWxkZXInXG5pbXBvcnQgeyBJU3VwcG9ydENvZGVMaWJyYXJ5IH0gZnJvbSAnLi4vLi4vc3VwcG9ydF9jb2RlX2xpYnJhcnlfYnVpbGRlci90eXBlcydcbmltcG9ydCB7IGRvZXNIYXZlVmFsdWUsIHZhbHVlT3JEZWZhdWx0IH0gZnJvbSAnLi4vLi4vdmFsdWVfY2hlY2tlcidcbmltcG9ydCBUZXN0Q2FzZUhvb2tEZWZpbml0aW9uIGZyb20gJy4uLy4uL21vZGVscy90ZXN0X2Nhc2VfaG9va19kZWZpbml0aW9uJ1xuaW1wb3J0IHsgSUxpbmVBbmRVcmkgfSBmcm9tICcuLi8uLi90eXBlcydcbmltcG9ydCB7IFRlc3RTdGVwUmVzdWx0IH0gZnJvbSAnQGN1Y3VtYmVyL21lc3NhZ2VzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIElQYXJzZWRUZXN0U3RlcCB7XG4gIGFjdGlvbkxvY2F0aW9uPzogSUxpbmVBbmRVcmlcbiAgYXJndW1lbnQ/OiBtZXNzYWdlcy5QaWNrbGVTdGVwQXJndW1lbnRcbiAgYXR0YWNobWVudHM6IG1lc3NhZ2VzLkF0dGFjaG1lbnRbXVxuICBrZXl3b3JkOiBzdHJpbmdcbiAgbmFtZT86IHN0cmluZ1xuICByZXN1bHQ6IG1lc3NhZ2VzLlRlc3RTdGVwUmVzdWx0XG4gIHNuaXBwZXQ/OiBzdHJpbmdcbiAgc291cmNlTG9jYXRpb24/OiBJTGluZUFuZFVyaVxuICB0ZXh0Pzogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBhcnNlZFRlc3RDYXNlIHtcbiAgYXR0ZW1wdDogbnVtYmVyXG4gIG5hbWU6IHN0cmluZ1xuICBzb3VyY2VMb2NhdGlvbj86IElMaW5lQW5kVXJpXG4gIHdvcnN0VGVzdFN0ZXBSZXN1bHQ6IG1lc3NhZ2VzLlRlc3RTdGVwUmVzdWx0XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBhcnNlZFRlc3RDYXNlQXR0ZW1wdCB7XG4gIHRlc3RDYXNlOiBJUGFyc2VkVGVzdENhc2VcbiAgdGVzdFN0ZXBzOiBJUGFyc2VkVGVzdFN0ZXBbXVxufVxuXG5pbnRlcmZhY2UgSVBhcnNlU3RlcFJlcXVlc3Qge1xuICBpc0JlZm9yZUhvb2s6IGJvb2xlYW5cbiAgZ2hlcmtpblN0ZXBNYXA6IFJlY29yZDxzdHJpbmcsIG1lc3NhZ2VzLlN0ZXA+XG4gIGtleXdvcmQ6IHN0cmluZ1xuICBrZXl3b3JkVHlwZTogS2V5d29yZFR5cGVcbiAgcGlja2xlU3RlcDogbWVzc2FnZXMuUGlja2xlU3RlcFxuICBwaWNrbGVVcmk6IHN0cmluZ1xuICBzbmlwcGV0QnVpbGRlcjogU3RlcERlZmluaXRpb25TbmlwcGV0QnVpbGRlclxuICBzdXBwb3J0Q29kZUxpYnJhcnk6IElTdXBwb3J0Q29kZUxpYnJhcnlcbiAgdGVzdFN0ZXA6IG1lc3NhZ2VzLlRlc3RTdGVwXG4gIHRlc3RTdGVwUmVzdWx0OiBtZXNzYWdlcy5UZXN0U3RlcFJlc3VsdFxuICB0ZXN0U3RlcEF0dGFjaG1lbnRzOiBtZXNzYWdlcy5BdHRhY2htZW50W11cbn1cblxuZnVuY3Rpb24gcGFyc2VTdGVwKHtcbiAgaXNCZWZvcmVIb29rLFxuICBnaGVya2luU3RlcE1hcCxcbiAga2V5d29yZCxcbiAga2V5d29yZFR5cGUsXG4gIHBpY2tsZVN0ZXAsXG4gIHBpY2tsZVVyaSxcbiAgc25pcHBldEJ1aWxkZXIsXG4gIHN1cHBvcnRDb2RlTGlicmFyeSxcbiAgdGVzdFN0ZXAsXG4gIHRlc3RTdGVwUmVzdWx0LFxuICB0ZXN0U3RlcEF0dGFjaG1lbnRzLFxufTogSVBhcnNlU3RlcFJlcXVlc3QpOiBJUGFyc2VkVGVzdFN0ZXAge1xuICBjb25zdCBvdXQ6IElQYXJzZWRUZXN0U3RlcCA9IHtcbiAgICBhdHRhY2htZW50czogdGVzdFN0ZXBBdHRhY2htZW50cyxcbiAgICBrZXl3b3JkOiBkb2VzSGF2ZVZhbHVlKHRlc3RTdGVwLnBpY2tsZVN0ZXBJZClcbiAgICAgID8ga2V5d29yZFxuICAgICAgOiBpc0JlZm9yZUhvb2tcbiAgICAgID8gJ0JlZm9yZSdcbiAgICAgIDogJ0FmdGVyJyxcbiAgICByZXN1bHQ6IHRlc3RTdGVwUmVzdWx0LFxuICB9XG4gIGlmIChkb2VzSGF2ZVZhbHVlKHRlc3RTdGVwLmhvb2tJZCkpIHtcbiAgICBsZXQgaG9va0RlZmluaXRpb246IFRlc3RDYXNlSG9va0RlZmluaXRpb25cbiAgICBpZiAoaXNCZWZvcmVIb29rKSB7XG4gICAgICBob29rRGVmaW5pdGlvbiA9IHN1cHBvcnRDb2RlTGlicmFyeS5iZWZvcmVUZXN0Q2FzZUhvb2tEZWZpbml0aW9ucy5maW5kKFxuICAgICAgICAoeCkgPT4geC5pZCA9PT0gdGVzdFN0ZXAuaG9va0lkXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIGhvb2tEZWZpbml0aW9uID0gc3VwcG9ydENvZGVMaWJyYXJ5LmFmdGVyVGVzdENhc2VIb29rRGVmaW5pdGlvbnMuZmluZChcbiAgICAgICAgKHgpID0+IHguaWQgPT09IHRlc3RTdGVwLmhvb2tJZFxuICAgICAgKVxuICAgIH1cbiAgICBvdXQuYWN0aW9uTG9jYXRpb24gPSB7XG4gICAgICB1cmk6IGhvb2tEZWZpbml0aW9uLnVyaSxcbiAgICAgIGxpbmU6IGhvb2tEZWZpbml0aW9uLmxpbmUsXG4gICAgfVxuICAgIG91dC5uYW1lID0gaG9va0RlZmluaXRpb24ubmFtZVxuICB9XG4gIGlmIChcbiAgICBkb2VzSGF2ZVZhbHVlKHRlc3RTdGVwLnN0ZXBEZWZpbml0aW9uSWRzKSAmJlxuICAgIHRlc3RTdGVwLnN0ZXBEZWZpbml0aW9uSWRzLmxlbmd0aCA9PT0gMVxuICApIHtcbiAgICBjb25zdCBzdGVwRGVmaW5pdGlvbiA9IHN1cHBvcnRDb2RlTGlicmFyeS5zdGVwRGVmaW5pdGlvbnMuZmluZChcbiAgICAgICh4KSA9PiB4LmlkID09PSB0ZXN0U3RlcC5zdGVwRGVmaW5pdGlvbklkc1swXVxuICAgIClcbiAgICBvdXQuYWN0aW9uTG9jYXRpb24gPSB7XG4gICAgICB1cmk6IHN0ZXBEZWZpbml0aW9uLnVyaSxcbiAgICAgIGxpbmU6IHN0ZXBEZWZpbml0aW9uLmxpbmUsXG4gICAgfVxuICB9XG4gIGlmIChkb2VzSGF2ZVZhbHVlKHRlc3RTdGVwLnBpY2tsZVN0ZXBJZCkpIHtcbiAgICBvdXQuc291cmNlTG9jYXRpb24gPSB7XG4gICAgICB1cmk6IHBpY2tsZVVyaSxcbiAgICAgIGxpbmU6IGdoZXJraW5TdGVwTWFwW3BpY2tsZVN0ZXAuYXN0Tm9kZUlkc1swXV0ubG9jYXRpb24ubGluZSxcbiAgICB9XG4gICAgb3V0LnRleHQgPSBwaWNrbGVTdGVwLnRleHRcbiAgICBpZiAoZG9lc0hhdmVWYWx1ZShwaWNrbGVTdGVwLmFyZ3VtZW50KSkge1xuICAgICAgb3V0LmFyZ3VtZW50ID0gcGlja2xlU3RlcC5hcmd1bWVudFxuICAgIH1cbiAgfVxuICBpZiAodGVzdFN0ZXBSZXN1bHQuc3RhdHVzID09PSBtZXNzYWdlcy5UZXN0U3RlcFJlc3VsdFN0YXR1cy5VTkRFRklORUQpIHtcbiAgICBvdXQuc25pcHBldCA9IHNuaXBwZXRCdWlsZGVyLmJ1aWxkKHsga2V5d29yZFR5cGUsIHBpY2tsZVN0ZXAgfSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBhcnNlVGVzdENhc2VBdHRlbXB0UmVxdWVzdCB7XG4gIHRlc3RDYXNlQXR0ZW1wdDogSVRlc3RDYXNlQXR0ZW1wdFxuICBzbmlwcGV0QnVpbGRlcjogU3RlcERlZmluaXRpb25TbmlwcGV0QnVpbGRlclxuICBzdXBwb3J0Q29kZUxpYnJhcnk6IElTdXBwb3J0Q29kZUxpYnJhcnlcbn1cblxuLy8gQ29udmVydHMgYSB0ZXN0Q2FzZUF0dGVtcHQgaW50byBhIGpzb24gb2JqZWN0IHdpdGggYWxsIGRhdGEgbmVlZGVkIGZvclxuLy8gZGlzcGxheWluZyBpdCBpbiBhIHByZXR0eSBmb3JtYXRcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRlc3RDYXNlQXR0ZW1wdCh7XG4gIHRlc3RDYXNlQXR0ZW1wdCxcbiAgc25pcHBldEJ1aWxkZXIsXG4gIHN1cHBvcnRDb2RlTGlicmFyeSxcbn06IElQYXJzZVRlc3RDYXNlQXR0ZW1wdFJlcXVlc3QpOiBJUGFyc2VkVGVzdENhc2VBdHRlbXB0IHtcbiAgY29uc3QgeyB0ZXN0Q2FzZSwgcGlja2xlLCBnaGVya2luRG9jdW1lbnQgfSA9IHRlc3RDYXNlQXR0ZW1wdFxuICBjb25zdCBnaGVya2luU3RlcE1hcCA9IGdldEdoZXJraW5TdGVwTWFwKGdoZXJraW5Eb2N1bWVudClcbiAgY29uc3QgZ2hlcmtpblNjZW5hcmlvTG9jYXRpb25NYXAgPVxuICAgIGdldEdoZXJraW5TY2VuYXJpb0xvY2F0aW9uTWFwKGdoZXJraW5Eb2N1bWVudClcbiAgY29uc3QgcGlja2xlU3RlcE1hcCA9IGdldFBpY2tsZVN0ZXBNYXAocGlja2xlKVxuICBjb25zdCByZWxhdGl2ZVBpY2tsZVVyaSA9IHBpY2tsZS51cmlcbiAgY29uc3QgcGFyc2VkVGVzdENhc2U6IElQYXJzZWRUZXN0Q2FzZSA9IHtcbiAgICBhdHRlbXB0OiB0ZXN0Q2FzZUF0dGVtcHQuYXR0ZW1wdCxcbiAgICBuYW1lOiBwaWNrbGUubmFtZSxcbiAgICBzb3VyY2VMb2NhdGlvbjoge1xuICAgICAgdXJpOiByZWxhdGl2ZVBpY2tsZVVyaSxcbiAgICAgIGxpbmU6IGdoZXJraW5TY2VuYXJpb0xvY2F0aW9uTWFwW1xuICAgICAgICBwaWNrbGUuYXN0Tm9kZUlkc1twaWNrbGUuYXN0Tm9kZUlkcy5sZW5ndGggLSAxXVxuICAgICAgXS5saW5lLFxuICAgIH0sXG4gICAgd29yc3RUZXN0U3RlcFJlc3VsdDogdGVzdENhc2VBdHRlbXB0LndvcnN0VGVzdFN0ZXBSZXN1bHQsXG4gIH1cbiAgY29uc3QgcGFyc2VkVGVzdFN0ZXBzOiBJUGFyc2VkVGVzdFN0ZXBbXSA9IFtdXG4gIGxldCBpc0JlZm9yZUhvb2sgPSB0cnVlXG4gIGxldCBwcmV2aW91c0tleXdvcmRUeXBlID0gS2V5d29yZFR5cGUuUHJlY29uZGl0aW9uXG5cbiAgdGVzdENhc2UudGVzdFN0ZXBzLmZvckVhY2goKHRlc3RTdGVwKSA9PiB7XG4gICAgY29uc3QgdGVzdFN0ZXBSZXN1bHQgPVxuICAgICAgdGVzdENhc2VBdHRlbXB0LnN0ZXBSZXN1bHRzW3Rlc3RTdGVwLmlkXSB8fCBuZXcgVGVzdFN0ZXBSZXN1bHQoKVxuXG4gICAgaXNCZWZvcmVIb29rID0gaXNCZWZvcmVIb29rICYmIGRvZXNIYXZlVmFsdWUodGVzdFN0ZXAuaG9va0lkKVxuXG4gICAgbGV0IGtleXdvcmQsIGtleXdvcmRUeXBlLCBwaWNrbGVTdGVwXG4gICAgaWYgKGRvZXNIYXZlVmFsdWUodGVzdFN0ZXAucGlja2xlU3RlcElkKSkge1xuICAgICAgcGlja2xlU3RlcCA9IHBpY2tsZVN0ZXBNYXBbdGVzdFN0ZXAucGlja2xlU3RlcElkXVxuICAgICAga2V5d29yZCA9IGdldFN0ZXBLZXl3b3JkKHsgcGlja2xlU3RlcCwgZ2hlcmtpblN0ZXBNYXAgfSlcbiAgICAgIGtleXdvcmRUeXBlID0gZ2V0U3RlcEtleXdvcmRUeXBlKHtcbiAgICAgICAga2V5d29yZCxcbiAgICAgICAgbGFuZ3VhZ2U6IGdoZXJraW5Eb2N1bWVudC5mZWF0dXJlLmxhbmd1YWdlLFxuICAgICAgICBwcmV2aW91c0tleXdvcmRUeXBlLFxuICAgICAgfSlcbiAgICB9XG4gICAgY29uc3QgcGFyc2VkU3RlcCA9IHBhcnNlU3RlcCh7XG4gICAgICBpc0JlZm9yZUhvb2ssXG4gICAgICBnaGVya2luU3RlcE1hcCxcbiAgICAgIGtleXdvcmQsXG4gICAgICBrZXl3b3JkVHlwZSxcbiAgICAgIHBpY2tsZVN0ZXAsXG4gICAgICBwaWNrbGVVcmk6IHJlbGF0aXZlUGlja2xlVXJpLFxuICAgICAgc25pcHBldEJ1aWxkZXIsXG4gICAgICBzdXBwb3J0Q29kZUxpYnJhcnksXG4gICAgICB0ZXN0U3RlcCxcbiAgICAgIHRlc3RTdGVwUmVzdWx0LFxuICAgICAgdGVzdFN0ZXBBdHRhY2htZW50czogdmFsdWVPckRlZmF1bHQoXG4gICAgICAgIHRlc3RDYXNlQXR0ZW1wdC5zdGVwQXR0YWNobWVudHNbdGVzdFN0ZXAuaWRdLFxuICAgICAgICBbXVxuICAgICAgKSxcbiAgICB9KVxuICAgIHBhcnNlZFRlc3RTdGVwcy5wdXNoKHBhcnNlZFN0ZXApXG4gICAgcHJldmlvdXNLZXl3b3JkVHlwZSA9IGtleXdvcmRUeXBlXG4gIH0pXG4gIHJldHVybiB7XG4gICAgdGVzdENhc2U6IHBhcnNlZFRlc3RDYXNlLFxuICAgIHRlc3RTdGVwczogcGFyc2VkVGVzdFN0ZXBzLFxuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxNQUFBQSxjQUFBLEdBQUFDLE9BQUE7QUFDQSxNQUFBQyx5QkFBQSxHQUFBRCxPQUFBO0FBSUEsTUFBQUUsZUFBQSxHQUFBRixPQUFBO0FBQ0EsTUFBQUcsUUFBQSxHQUFBQyxZQUFBLENBQUFKLE9BQUE7QUFJQSxNQUFBSyxlQUFBLEdBQUFMLE9BQUE7QUFHQSxNQUFBTSxVQUFBLEdBQUFOLE9BQUE7QUF3Q0EsU0FBU08sU0FBU0EsQ0FBQztFQUNqQkMsWUFBWTtFQUNaQyxjQUFjO0VBQ2RDLE9BQU87RUFDUEMsV0FBVztFQUNYQyxVQUFVO0VBQ1ZDLFNBQVM7RUFDVEMsY0FBYztFQUNkQyxrQkFBa0I7RUFDbEJDLFFBQVE7RUFDUkMsY0FBYztFQUNkQztBQUFtQixDQUNEO0VBQ2xCLE1BQU1DLEdBQUcsR0FBb0I7SUFDM0JDLFdBQVcsRUFBRUYsbUJBQW1CO0lBQ2hDUixPQUFPLEVBQUUsSUFBQUwsZUFBQSxDQUFBZ0IsYUFBYSxFQUFDTCxRQUFRLENBQUNNLFlBQVksQ0FBQyxHQUN6Q1osT0FBTyxHQUNQRixZQUFZLEdBQ1osUUFBUSxHQUNSLE9BQU87SUFDWGUsTUFBTSxFQUFFTjtHQUNUO0VBQ0QsSUFBSSxJQUFBWixlQUFBLENBQUFnQixhQUFhLEVBQUNMLFFBQVEsQ0FBQ1EsTUFBTSxDQUFDLEVBQUU7SUFDbEMsSUFBSUMsY0FBc0M7SUFDMUMsSUFBSWpCLFlBQVksRUFBRTtNQUNoQmlCLGNBQWMsR0FBR1Ysa0JBQWtCLENBQUNXLDZCQUE2QixDQUFDQyxJQUFJLENBQ25FQyxDQUFDLElBQUtBLENBQUMsQ0FBQ0MsRUFBRSxLQUFLYixRQUFRLENBQUNRLE1BQU0sQ0FDaEM7S0FDRixNQUFNO01BQ0xDLGNBQWMsR0FBR1Ysa0JBQWtCLENB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