{"version":3,"names":["is_stream_1","__importDefault","require","messages","__importStar","value_checker_1","AttachmentManager","constructor","onAttachment","log","text","create","data","mediaType","callback","Buffer","isBuffer","doesNotHaveValue","Error","createBufferAttachment","default","readable","createStreamAttachment","startsWith","createStringAttachment","encoding","AttachmentContentEncoding","BASE64","contentType","replace","IDENTITY","toString","promise","Promise","resolve","reject","buffers","on","chunk","push","concat","doesHaveValue","then","media","exports"],"sources":["../../../src/runtime/attachment_manager/index.ts"],"sourcesContent":["import isStream from 'is-stream'\nimport { Readable } from 'stream'\nimport * as messages from '@cucumber/messages'\nimport { doesHaveValue, doesNotHaveValue } from '../../value_checker'\n\nexport interface IAttachmentMedia {\n  encoding: messages.AttachmentContentEncoding\n  contentType: string\n}\n\nexport interface IAttachment {\n  data: string\n  media: IAttachmentMedia\n}\n\nexport type IAttachFunction = (attachment: IAttachment) => void\n\nexport type ICreateStringAttachment = (data: string, mediaType?: string) => void\nexport type ICreateBufferAttachment = (data: Buffer, mediaType: string) => void\nexport type ICreateStreamAttachment = (\n  data: Readable,\n  mediaType: string\n) => Promise<void>\nexport type ICreateStreamAttachmentWithCallback = (\n  data: Readable,\n  mediaType: string,\n  callback: () => void\n) => void\nexport type ICreateAttachment = ICreateStringAttachment &\n  ICreateBufferAttachment &\n  ICreateStreamAttachment &\n  ICreateStreamAttachmentWithCallback\nexport type ICreateLog = (text: string) => void\n\nexport default class AttachmentManager {\n  private readonly onAttachment: IAttachFunction\n\n  constructor(onAttachment: IAttachFunction) {\n    this.onAttachment = onAttachment\n  }\n\n  log(text: string): void | Promise<void> {\n    return this.create(text, 'text/x.cucumber.log+plain')\n  }\n\n  create(\n    data: Buffer | Readable | string,\n    mediaType?: string,\n    callback?: () => void\n  ): void | Promise<void> {\n    if (Buffer.isBuffer(data)) {\n      if (doesNotHaveValue(mediaType)) {\n        throw Error('Buffer attachments must specify a media type')\n      }\n      this.createBufferAttachment(data, mediaType)\n    } else if (isStream.readable(data)) {\n      if (doesNotHaveValue(mediaType)) {\n        throw Error('Stream attachments must specify a media type')\n      }\n      return this.createStreamAttachment(data, mediaType, callback)\n    } else if (typeof data === 'string') {\n      if (doesNotHaveValue(mediaType)) {\n        mediaType = 'text/plain'\n      }\n      if (mediaType.startsWith('base64:')) {\n        this.createStringAttachment(data, {\n          encoding: messages.AttachmentContentEncoding.BASE64,\n          contentType: mediaType.replace('base64:', ''),\n        })\n      } else {\n        this.createStringAttachment(data, {\n          encoding: messages.AttachmentContentEncoding.IDENTITY,\n          contentType: mediaType,\n        })\n      }\n    } else {\n      throw Error(\n        'Invalid attachment data: must be a buffer, readable stream, or string'\n      )\n    }\n  }\n\n  createBufferAttachment(data: Buffer, mediaType: string): void {\n    this.createStringAttachment(data.toString('base64'), {\n      encoding: messages.AttachmentContentEncoding.BASE64,\n      contentType: mediaType,\n    })\n  }\n\n  createStreamAttachment(\n    data: Readable,\n    mediaType: string,\n    callback: () => void\n  ): void | Promise<void> {\n    const promise = new Promise<void>((resolve, reject) => {\n      const buffers: Uint8Array[] = []\n      data.on('data', (chunk) => {\n        buffers.push(chunk)\n      })\n      data.on('end', () => {\n        this.createBufferAttachment(Buffer.concat(buffers), mediaType)\n        resolve()\n      })\n      data.on('error', reject)\n    })\n    if (doesHaveValue(callback)) {\n      promise.then(callback, callback)\n    } else {\n      return promise\n    }\n  }\n\n  createStringAttachment(data: string, media: IAttachmentMedia): void {\n    this.onAttachment({ data, media })\n  }\n}\n"],"mappings":"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"}