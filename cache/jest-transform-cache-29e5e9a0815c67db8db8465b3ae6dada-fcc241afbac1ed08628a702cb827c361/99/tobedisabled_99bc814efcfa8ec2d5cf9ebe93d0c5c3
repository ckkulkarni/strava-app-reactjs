a10ca55b8aa8788944fc3327c003f9e1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toBeDisabled = toBeDisabled;
exports.toBeEnabled = toBeEnabled;
var _utils = require("./utils");

// form elements that support 'disabled'
const FORM_TAGS = ['fieldset', 'input', 'select', 'optgroup', 'option', 'button', 'textarea'];
/*
 * According to specification:
 * If <fieldset> is disabled, the form controls that are its descendants,
 * except descendants of its first optional <legend> element, are disabled
 *
 * https://html.spec.whatwg.org/multipage/form-elements.html#concept-fieldset-disabled
 *
 * This method tests whether element is first legend child of fieldset parent
 */

function isFirstLegendChildOfFieldset(element, parent) {
  return (0, _utils.getTag)(element) === 'legend' && (0, _utils.getTag)(parent) === 'fieldset' && element.isSameNode(Array.from(parent.children).find(child => (0, _utils.getTag)(child) === 'legend'));
}
function isElementDisabledByParent(element, parent) {
  return isElementDisabled(parent) && !isFirstLegendChildOfFieldset(element, parent);
}
function isCustomElement(tag) {
  return tag.includes('-');
}
/*
 * Only certain form elements and custom elements can actually be disabled:
 * https://html.spec.whatwg.org/multipage/semantics-other.html#disabled-elements
 */

function canElementBeDisabled(element) {
  const tag = (0, _utils.getTag)(element);
  return FORM_TAGS.includes(tag) || isCustomElement(tag);
}
function isElementDisabled(element) {
  return canElementBeDisabled(element) && element.hasAttribute('disabled');
}
function isAncestorDisabled(element) {
  const parent = element.parentElement;
  return Boolean(parent) && (isElementDisabledByParent(element, parent) || isAncestorDisabled(parent));
}
function isElementOrAncestorDisabled(element) {
  return canElementBeDisabled(element) && (isElementDisabled(element) || isAncestorDisabled(element));
}
function toBeDisabled(element) {
  (0, _utils.checkHtmlElement)(element, toBeDisabled, this);
  const isDisabled = isElementOrAncestorDisabled(element);
  return {
    pass: isDisabled,
    message: () => {
      const is = isDisabled ? 'is' : 'is not';
      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeDisabled`, 'element', ''), '', `Received element ${is} disabled:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\n');
    }
  };
}
function toBeEnabled(element) {
  (0, _utils.checkHtmlElement)(element, toBeEnabled, this);
  const isEnabled = !isElementOrAncestorDisabled(element);
  return {
    pass: isEnabled,
    message: () => {
      const is = isEnabled ? 'is' : 'is not';
      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeEnabled`, 'element', ''), '', `Received element ${is} enabled:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\n');
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvQmVEaXNhYmxlZCIsInRvQmVFbmFibGVkIiwiX3V0aWxzIiwicmVxdWlyZSIsIkZPUk1fVEFHUyIsImlzRmlyc3RMZWdlbmRDaGlsZE9mRmllbGRzZXQiLCJlbGVtZW50IiwicGFyZW50IiwiZ2V0VGFnIiwiaXNTYW1lTm9kZSIsIkFycmF5IiwiZnJvbSIsImNoaWxkcmVuIiwiZmluZCIsImNoaWxkIiwiaXNFbGVtZW50RGlzYWJsZWRCeVBhcmVudCIsImlzRWxlbWVudERpc2FibGVkIiwiaXNDdXN0b21FbGVtZW50IiwidGFnIiwiaW5jbHVkZXMiLCJjYW5FbGVtZW50QmVEaXNhYmxlZCIsImhhc0F0dHJpYnV0ZSIsImlzQW5jZXN0b3JEaXNhYmxlZCIsInBhcmVudEVsZW1lbnQiLCJCb29sZWFuIiwiaXNFbGVtZW50T3JBbmNlc3RvckRpc2FibGVkIiwiY2hlY2tIdG1sRWxlbWVudCIsImlzRGlzYWJsZWQiLCJwYXNzIiwibWVzc2FnZSIsImlzIiwidXRpbHMiLCJtYXRjaGVySGludCIsImlzTm90IiwicHJpbnRSZWNlaXZlZCIsImNsb25lTm9kZSIsImpvaW4iLCJpc0VuYWJsZWQiXSwic291cmNlcyI6WyJ0by1iZS1kaXNhYmxlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudG9CZURpc2FibGVkID0gdG9CZURpc2FibGVkO1xuZXhwb3J0cy50b0JlRW5hYmxlZCA9IHRvQmVFbmFibGVkO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbi8vIGZvcm0gZWxlbWVudHMgdGhhdCBzdXBwb3J0ICdkaXNhYmxlZCdcbmNvbnN0IEZPUk1fVEFHUyA9IFsnZmllbGRzZXQnLCAnaW5wdXQnLCAnc2VsZWN0JywgJ29wdGdyb3VwJywgJ29wdGlvbicsICdidXR0b24nLCAndGV4dGFyZWEnXTtcbi8qXG4gKiBBY2NvcmRpbmcgdG8gc3BlY2lmaWNhdGlvbjpcbiAqIElmIDxmaWVsZHNldD4gaXMgZGlzYWJsZWQsIHRoZSBmb3JtIGNvbnRyb2xzIHRoYXQgYXJlIGl0cyBkZXNjZW5kYW50cyxcbiAqIGV4Y2VwdCBkZXNjZW5kYW50cyBvZiBpdHMgZmlyc3Qgb3B0aW9uYWwgPGxlZ2VuZD4gZWxlbWVudCwgYXJlIGRpc2FibGVkXG4gKlxuICogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1lbGVtZW50cy5odG1sI2NvbmNlcHQtZmllbGRzZXQtZGlzYWJsZWRcbiAqXG4gKiBUaGlzIG1ldGhvZCB0ZXN0cyB3aGV0aGVyIGVsZW1lbnQgaXMgZmlyc3QgbGVnZW5kIGNoaWxkIG9mIGZpZWxkc2V0IHBhcmVudFxuICovXG5cbmZ1bmN0aW9uIGlzRmlyc3RMZWdlbmRDaGlsZE9mRmllbGRzZXQoZWxlbWVudCwgcGFyZW50KSB7XG4gIHJldHVybiAoMCwgX3V0aWxzLmdldFRhZykoZWxlbWVudCkgPT09ICdsZWdlbmQnICYmICgwLCBfdXRpbHMuZ2V0VGFnKShwYXJlbnQpID09PSAnZmllbGRzZXQnICYmIGVsZW1lbnQuaXNTYW1lTm9kZShBcnJheS5mcm9tKHBhcmVudC5jaGlsZHJlbikuZmluZChjaGlsZCA9PiAoMCwgX3V0aWxzLmdldFRhZykoY2hpbGQpID09PSAnbGVnZW5kJykpO1xufVxuXG5mdW5jdGlvbiBpc0VsZW1lbnREaXNhYmxlZEJ5UGFyZW50KGVsZW1lbnQsIHBhcmVudCkge1xuICByZXR1cm4gaXNFbGVtZW50RGlzYWJsZWQocGFyZW50KSAmJiAhaXNGaXJzdExlZ2VuZENoaWxkT2ZGaWVsZHNldChlbGVtZW50LCBwYXJlbnQpO1xufVxuXG5mdW5jdGlvbiBpc0N1c3RvbUVsZW1lbnQodGFnKSB7XG4gIHJldHVybiB0YWcuaW5jbHVkZXMoJy0nKTtcbn1cbi8qXG4gKiBPbmx5IGNlcnRhaW4gZm9ybSBlbGVtZW50cyBhbmQgY3VzdG9tIGVsZW1lbnRzIGNhbiBhY3R1YWxseSBiZSBkaXNhYmxlZDpcbiAqIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NlbWFudGljcy1vdGhlci5odG1sI2Rpc2FibGVkLWVsZW1lbnRzXG4gKi9cblxuXG5mdW5jdGlvbiBjYW5FbGVtZW50QmVEaXNhYmxlZChlbGVtZW50KSB7XG4gIGNvbnN0IHRhZyA9ICgwLCBfdXRpbHMuZ2V0VGFnKShlbGVtZW50KTtcbiAgcmV0dXJuIEZPUk1fVEFHUy5pbmNsdWRlcyh0YWcpIHx8IGlzQ3VzdG9tRWxlbWVudCh0YWcpO1xufVxuXG5mdW5jdGlvbiBpc0VsZW1lbnREaXNhYmxlZChlbGVtZW50KSB7XG4gIHJldHVybiBjYW5FbGVtZW50QmVEaXNhYmxlZChlbGVtZW50KSAmJiBlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbn1cblxuZnVuY3Rpb24gaXNBbmNlc3RvckRpc2FibGVkKGVsZW1lbnQpIHtcbiAgY29uc3QgcGFyZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICByZXR1cm4gQm9vbGVhbihwYXJlbnQpICYmIChpc0VsZW1lbnREaXNhYmxlZEJ5UGFyZW50KGVsZW1lbnQsIHBhcmVudCkgfHwgaXNBbmNlc3RvckRpc2FibGVkKHBhcmVudCkpO1xufVxuXG5mdW5jdGlvbiBpc0VsZW1lbnRPckFuY2VzdG9yRGlzYWJsZWQoZWxlbWVudCkge1xuICByZXR1cm4gY2FuRWxlbWVudEJlRGlzYWJsZWQoZWxlbWVudCkgJiYgKGlzRWxlbWVudERpc2FibGVkKGVsZW1lbnQpIHx8IGlzQW5jZXN0b3JEaXNhYmxlZChlbGVtZW50KSk7XG59XG5cbmZ1bmN0aW9uIHRvQmVEaXNhYmxlZChlbGVtZW50KSB7XG4gICgwLCBfdXRpbHMuY2hlY2tIdG1sRWxlbWVudCkoZWxlbWVudCwgdG9CZURpc2FibGVkLCB0aGlzKTtcbiAgY29uc3QgaXNEaXNhYmxlZCA9IGlzRWxlbWVudE9yQW5jZXN0b3JEaXNhYmxlZChlbGVtZW50KTtcbiAgcmV0dXJuIHtcbiAgICBwYXNzOiBpc0Rpc2FibGVkLFxuICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgIGNvbnN0IGlzID0gaXNEaXNhYmxlZCA/ICdpcycgOiAnaXMgbm90JztcbiAgICAgIHJldHVybiBbdGhpcy51dGlscy5tYXRjaGVySGludChgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvQmVEaXNhYmxlZGAsICdlbGVtZW50JywgJycpLCAnJywgYFJlY2VpdmVkIGVsZW1lbnQgJHtpc30gZGlzYWJsZWQ6YCwgYCAgJHt0aGlzLnV0aWxzLnByaW50UmVjZWl2ZWQoZWxlbWVudC5jbG9uZU5vZGUoZmFsc2UpKX1gXS5qb2luKCdcXG4nKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRvQmVFbmFibGVkKGVsZW1lbnQpIHtcbiAgKDAsIF91dGlscy5jaGVja0h0bWxFbGVtZW50KShlbGVtZW50LCB0b0JlRW5hYmxlZCwgdGhpcyk7XG4gIGNvbnN0IGlzRW5hYmxlZCA9ICFpc0VsZW1lbnRPckFuY2VzdG9yRGlzYWJsZWQoZWxlbWVudCk7XG4gIHJldHVybiB7XG4gICAgcGFzczogaXNFbmFibGVkLFxuICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgIGNvbnN0IGlzID0gaXNFbmFibGVkID8gJ2lzJyA6ICdpcyBub3QnO1xuICAgICAgcmV0dXJuIFt0aGlzLnV0aWxzLm1hdGNoZXJIaW50KGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9CZUVuYWJsZWRgLCAnZWxlbWVudCcsICcnKSwgJycsIGBSZWNlaXZlZCBlbGVtZW50ICR7aXN9IGVuYWJsZWQ6YCwgYCAgJHt0aGlzLnV0aWxzLnByaW50UmVjZWl2ZWQoZWxlbWVudC5jbG9uZU5vZGUoZmFsc2UpKX1gXS5qb2luKCdcXG4nKTtcbiAgICB9XG4gIH07XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxN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