{"version":3,"names":["_react","_interopRequireDefault","require","_react2","_reactRouterDom","_PaymentScreen","_toolkit","_parkingSlice","_reactRedux","_jestCucumber","obj","__esModule","default","feature","loadFeature","defineFeature","test","given","when","then","and","alertMock","jest","spyOn","window","mockImplementation","state","spaceDetails","registration","parkingTime","space","store","configureStore","reducer","parkingSpaces","parkingSlice","screen","render","createElement","Provider","MemoryRouter","initialEntries","pathname","Routes","Route","path","element","expect","toBeDefined","regElement","getByTestId","toHaveTextContent","parkingHoursElement","paymentElement","paymentButton","fireEvent","click","postMock","fn","mockResolvedValueOnce","ok","global","fetch","json","toHaveBeenCalledWith","method","headers","body","JSON","stringify","charge","console","log"],"sources":["paymentscreen.steps.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { render, fireEvent, screen, waitFor } from \"@testing-library/react\";\r\nimport { MemoryRouter, Route, Routes } from \"react-router-dom\";\r\nimport PaymentScreen from \"../../PaymentScreen\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport parkingSlice from \"./../../redux/reducer/parkingSlice\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"@testing-library/jest-dom/extend-expect\";\r\nimport { loadFeature, defineFeature } from \"jest-cucumber\";\r\n\r\nconst feature = loadFeature(\"src/components/features/paymentscreen.feature\");\r\n\r\ndefineFeature(feature, (test) => {\r\n  test(\"User pays for occupied parking spot\", ({ given, when, then, and }) => {\r\n    const alertMock = jest.spyOn(window, \"alert\").mockImplementation(() => {});\r\n    const state = {\r\n      spaceDetails: {\r\n        registration: \"ABC\",\r\n        parkingTime: \"10:00\",\r\n      },\r\n      space: \"1\",\r\n    };\r\n    const store = configureStore({\r\n      reducer: {\r\n        parkingSpaces: parkingSlice,\r\n      },\r\n    });\r\n    const screen = render(\r\n      <Provider store={store}>\r\n        <MemoryRouter initialEntries={[{ pathname: \"/payment\", state }]}>\r\n          <Routes>\r\n            <Route path=\"/payment\" element={<PaymentScreen />} />\r\n          </Routes>\r\n        </MemoryRouter>\r\n      </Provider>\r\n    );\r\n    given(\"I am on the Payment Screen\", () => {\r\n      expect(screen).toBeDefined();\r\n    });\r\n    and(\r\n      \"I see the vehicle registration and hours parked for the occupied parking spot\",\r\n      () => {\r\n        const regElement = screen.getByTestId(\"reg\");\r\n        expect(regElement).toHaveTextContent(\"Vehicle Registration: ABC\");\r\n\r\n        const parkingHoursElement = screen.getByTestId(\"parkingHours\");\r\n        expect(parkingHoursElement).toHaveTextContent(\"Hours Parked: 9\");\r\n      }\r\n    );\r\n    and(\"I see the parking charge for the occupied parking spot\", () => {\r\n      const paymentElement = screen.getByTestId(\"payment\");\r\n      expect(paymentElement).toHaveTextContent(\"Parking Charge: $80\");\r\n    });\r\n    when(\"I click on the Make Payment button\", () => {\r\n      const paymentButton = screen.getByTestId(\"paymentButton\");\r\n      fireEvent.click(paymentButton);\r\n    });\r\n    and(\"the payment is successfully processed\", () => {\r\n      const postMock = jest.fn().mockResolvedValueOnce({ ok: true });\r\n      global.fetch = jest.fn().mockResolvedValueOnce({\r\n        ok: true,\r\n        json: jest.fn().mockResolvedValueOnce({}),\r\n      });\r\n      const paymentButton = screen.getByTestId(\"paymentButton\");\r\n      fireEvent.click(paymentButton);\r\n      expect(fetch).toHaveBeenCalledWith(\"https://httpstat.us/200\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          \"car-registration\": state.spaceDetails.registration,\r\n          charge: 80,\r\n        }),\r\n      });\r\n      then(\r\n        \"I see an alert indicating that the payment was successful\",\r\n        async () => {\r\n          console.log(\"Hello\");\r\n        }\r\n      );\r\n    });\r\n  });\r\n});\r\n"],"mappings":";;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AACA,IAAAE,eAAA,GAAAF,OAAA;AACA,IAAAG,cAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,QAAA,GAAAJ,OAAA;AACA,IAAAK,aAAA,GAAAN,sBAAA,CAAAC,OAAA;AACA,IAAAM,WAAA,GAAAN,OAAA;AACAA,OAAA;AACA,IAAAO,aAAA,GAAAP,OAAA;AAA2D,SAAAD,uBAAAS,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAE3D,MAAMG,OAAO,GAAG,IAAAC,yBAAW,EAAC,+CAA+C,CAAC;AAE5E,IAAAC,2BAAa,EAACF,OAAO,EAAGG,IAAI,IAAK;EAC/BA,IAAI,CAAC,qCAAqC,EAAE,CAAC;IAAEC,KAAK;IAAEC,IAAI;IAAEC,IAAI;IAAEC;EAAI,CAAC,KAAK;IAC1E,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,MAAM,EAAE,OAAO,CAAC,CAACC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;IAC1E,MAAMC,KAAK,GAAG;MACZC,YAAY,EAAE;QACZC,YAAY,EAAE,KAAK;QACnBC,WAAW,EAAE;MACf,CAAC;MACDC,KAAK,EAAE;IACT,CAAC;IACD,MAAMC,KAAK,GAAG,IAAAC,uBAAc,EAAC;MAC3BC,OAAO,EAAE;QACPC,aAAa,EAAEC;MACjB;IACF,CAAC,CAAC;IACF,MAAMC,MAAM,GAAG,IAAAC,cAAM,gBACnBrC,MAAA,CAAAY,OAAA,CAAA0B,aAAA,CAAC9B,WAAA,CAAA+B,QAAQ;MAACR,KAAK,EAAEA;IAAM,gBACrB/B,MAAA,CAAAY,OAAA,CAAA0B,aAAA,CAAClC,eAAA,CAAAoC,YAAY;MAACC,cAAc,EAAE,CAAC;QAAEC,QAAQ,EAAE,UAAU;QAAEhB;MAAM,CAAC;IAAE,gBAC9D1B,MAAA,CAAAY,OAAA,CAAA0B,aAAA,CAAClC,eAAA,CAAAuC,MAAM,qBACL3C,MAAA,CAAAY,OAAA,CAAA0B,aAAA,CAAClC,eAAA,CAAAwC,KAAK;MAACC,IAAI,EAAC,UAAU;MAACC,OAAO,eAAE9C,MAAA,CAAAY,OAAA,CAAA0B,aAAA,CAACjC,cAAA,CAAAO,OAAa;IAAI,EAAG,CAC9C,CACI,CACN,CACZ;IACDK,KAAK,CAAC,4BAA4B,EAAE,MAAM;MACxC8B,MAAM,CAACX,MAAM,CAAC,CAACY,WAAW,EAAE;IAC9B,CAAC,CAAC;IACF5B,GAAG,CACD,+EAA+E,EAC/E,MAAM;MACJ,MAAM6B,UAAU,GAAGb,MAAM,CAACc,WAAW,CAAC,KAAK,CAAC;MAC5CH,MAAM,CAACE,UAAU,CAAC,CAACE,iBAAiB,CAAC,2BAA2B,CAAC;MAEjE,MAAMC,mBAAmB,GAAGhB,MAAM,CAACc,WAAW,CAAC,cAAc,CAAC;MAC9DH,MAAM,CAACK,mBAAmB,CAAC,CAACD,iBAAiB,CAAC,iBAAiB,CAAC;IAClE,CAAC,CACF;IACD/B,GAAG,CAAC,wDAAwD,EAAE,MAAM;MAClE,MAAMiC,cAAc,GAAGjB,MAAM,CAACc,WAAW,CAAC,SAAS,CAAC;MACpDH,MAAM,CAACM,cAAc,CAAC,CAACF,iBAAiB,CAAC,qBAAqB,CAAC;IACjE,CAAC,CAAC;IACFjC,IAAI,CAAC,oCAAoC,EAAE,MAAM;MAC/C,MAAMoC,aAAa,GAAGlB,MAAM,CAACc,WAAW,CAAC,eAAe,CAAC;MACzDK,iBAAS,CAACC,KAAK,CAACF,aAAa,CAAC;IAChC,CAAC,CAAC;IACFlC,GAAG,CAAC,uCAAuC,EAAE,MAAM;MACjD,MAAMqC,QAAQ,GAAGnC,IAAI,CAACoC,EAAE,EAAE,CAACC,qBAAqB,CAAC;QAAEC,EAAE,EAAE;MAAK,CAAC,CAAC;MAC9DC,MAAM,CAACC,KAAK,GAAGxC,IAAI,CAACoC,EAAE,EAAE,CAACC,qBAAqB,CAAC;QAC7CC,EAAE,EAAE,IAAI;QACRG,IAAI,EAAEzC,IAAI,CAACoC,EAAE,EAAE,CAACC,qBAAqB,CAAC,CAAC,CAAC;MAC1C,CAAC,CAAC;MACF,MAAML,aAAa,GAAGlB,MAAM,CAACc,WAAW,CAAC,eAAe,CAAC;MACzDK,iBAAS,CAACC,KAAK,CAACF,aAAa,CAAC;MAC9BP,MAAM,CAACe,KAAK,CAAC,CAACE,oBAAoB,CAAC,yBAAyB,EAAE;QAC5DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnB,kBAAkB,EAAE3C,KAAK,CAACC,YAAY,CAACC,YAAY;UACnD0C,MAAM,EAAE;QACV,CAAC;MACH,CAAC,CAAC;MACFnD,IAAI,CACF,2DAA2D,EAC3D,YAAY;QACVoD,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MACtB,CAAC,CACF;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"}