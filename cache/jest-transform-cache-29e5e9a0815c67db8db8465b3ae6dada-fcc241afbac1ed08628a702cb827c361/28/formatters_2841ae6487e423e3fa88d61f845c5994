35b147c5bba8acffc72a16d26541e3dc
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initializeFormatters = void 0;
const util_1 = require("util");
const builder_1 = __importDefault(require("../formatter/builder"));
const fs_1 = __importDefault(require("mz/fs"));
const path_1 = __importDefault(require("path"));
async function initializeFormatters({
  env,
  cwd,
  stdout,
  logger,
  onStreamError,
  eventBroadcaster,
  eventDataCollector,
  configuration,
  supportCodeLibrary
}) {
  async function initializeFormatter(stream, target, type) {
    stream.on('error', error => {
      logger.error(error.message);
      onStreamError();
    });
    const typeOptions = {
      env,
      cwd,
      eventBroadcaster,
      eventDataCollector,
      log: stream.write.bind(stream),
      parsedArgvOptions: configuration.options,
      stream,
      cleanup: stream === stdout ? async () => await Promise.resolve() : (0, util_1.promisify)(stream.end.bind(stream)),
      supportCodeLibrary
    };
    if (type === 'progress-bar' && !stream.isTTY) {
      logger.warn(`Cannot use 'progress-bar' formatter for output to '${target}' as not a TTY. Switching to 'progress' formatter.`);
      type = 'progress';
    }
    return await builder_1.default.build(type, typeOptions);
  }
  const formatters = [];
  formatters.push(await initializeFormatter(stdout, 'stdout', configuration.stdout));
  for (const [target, type] of Object.entries(configuration.files)) {
    const stream = fs_1.default.createWriteStream(null, {
      fd: await fs_1.default.open(path_1.default.resolve(cwd, target), 'w')
    });
    formatters.push(await initializeFormatter(stream, target, type));
  }
  return async function () {
    await Promise.all(formatters.map(async f => await f.finished()));
  };
}
exports.initializeFormatters = initializeFormatters;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1dGlsXzEiLCJyZXF1aXJlIiwiYnVpbGRlcl8xIiwiX19pbXBvcnREZWZhdWx0IiwiZnNfMSIsInBhdGhfMSIsImluaXRpYWxpemVGb3JtYXR0ZXJzIiwiZW52IiwiY3dkIiwic3Rkb3V0IiwibG9nZ2VyIiwib25TdHJlYW1FcnJvciIsImV2ZW50QnJvYWRjYXN0ZXIiLCJldmVudERhdGFDb2xsZWN0b3IiLCJjb25maWd1cmF0aW9uIiwic3VwcG9ydENvZGVMaWJyYXJ5IiwiaW5pdGlhbGl6ZUZvcm1hdHRlciIsInN0cmVhbSIsInRhcmdldCIsInR5cGUiLCJvbiIsImVycm9yIiwibWVzc2FnZSIsInR5cGVPcHRpb25zIiwibG9nIiwid3JpdGUiLCJiaW5kIiwicGFyc2VkQXJndk9wdGlvbnMiLCJvcHRpb25zIiwiY2xlYW51cCIsIlByb21pc2UiLCJyZXNvbHZlIiwicHJvbWlzaWZ5IiwiZW5kIiwiaXNUVFkiLCJ3YXJuIiwiZGVmYXVsdCIsImJ1aWxkIiwiZm9ybWF0dGVycyIsInB1c2giLCJPYmplY3QiLCJlbnRyaWVzIiwiZmlsZXMiLCJjcmVhdGVXcml0ZVN0cmVhbSIsImZkIiwib3BlbiIsImFsbCIsIm1hcCIsImYiLCJmaW5pc2hlZCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBpL2Zvcm1hdHRlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEZvcm1hdHRlciwgeyBJRm9ybWF0dGVyU3RyZWFtIH0gZnJvbSAnLi4vZm9ybWF0dGVyJ1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJ1xuaW1wb3J0IHsgRXZlbnREYXRhQ29sbGVjdG9yIH0gZnJvbSAnLi4vZm9ybWF0dGVyL2hlbHBlcnMnXG5pbXBvcnQgeyBJU3VwcG9ydENvZGVMaWJyYXJ5IH0gZnJvbSAnLi4vc3VwcG9ydF9jb2RlX2xpYnJhcnlfYnVpbGRlci90eXBlcydcbmltcG9ydCB7IHByb21pc2lmeSB9IGZyb20gJ3V0aWwnXG5pbXBvcnQgeyBXcml0ZVN0cmVhbSBhcyBUdHlXcml0ZVN0cmVhbSB9IGZyb20gJ3R0eSdcbmltcG9ydCBGb3JtYXR0ZXJCdWlsZGVyIGZyb20gJy4uL2Zvcm1hdHRlci9idWlsZGVyJ1xuaW1wb3J0IGZzIGZyb20gJ216L2ZzJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCB7IElSdW5PcHRpb25zRm9ybWF0cyB9IGZyb20gJy4vdHlwZXMnXG5pbXBvcnQgeyBJTG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2VyJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZUZvcm1hdHRlcnMoe1xuICBlbnYsXG4gIGN3ZCxcbiAgc3Rkb3V0LFxuICBsb2dnZXIsXG4gIG9uU3RyZWFtRXJyb3IsXG4gIGV2ZW50QnJvYWRjYXN0ZXIsXG4gIGV2ZW50RGF0YUNvbGxlY3RvcixcbiAgY29uZmlndXJhdGlvbixcbiAgc3VwcG9ydENvZGVMaWJyYXJ5LFxufToge1xuICBlbnY6IE5vZGVKUy5Qcm9jZXNzRW52XG4gIGN3ZDogc3RyaW5nXG4gIHN0ZG91dDogSUZvcm1hdHRlclN0cmVhbVxuICBzdGRlcnI6IElGb3JtYXR0ZXJTdHJlYW1cbiAgbG9nZ2VyOiBJTG9nZ2VyXG4gIG9uU3RyZWFtRXJyb3I6ICgpID0+IHZvaWRcbiAgZXZlbnRCcm9hZGNhc3RlcjogRXZlbnRFbWl0dGVyXG4gIGV2ZW50RGF0YUNvbGxlY3RvcjogRXZlbnREYXRhQ29sbGVjdG9yXG4gIGNvbmZpZ3VyYXRpb246IElSdW5PcHRpb25zRm9ybWF0c1xuICBzdXBwb3J0Q29kZUxpYnJhcnk6IElTdXBwb3J0Q29kZUxpYnJhcnlcbn0pOiBQcm9taXNlPCgpID0+IFByb21pc2U8dm9pZD4+IHtcbiAgYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZUZvcm1hdHRlcihcbiAgICBzdHJlYW06IElGb3JtYXR0ZXJTdHJlYW0sXG4gICAgdGFyZ2V0OiBzdHJpbmcsXG4gICAgdHlwZTogc3RyaW5nXG4gICk6IFByb21pc2U8Rm9ybWF0dGVyPiB7XG4gICAgc3RyZWFtLm9uKCdlcnJvcicsIChlcnJvcjogRXJyb3IpID0+IHtcbiAgICAgIGxvZ2dlci5lcnJvcihlcnJvci5tZXNzYWdlKVxuICAgICAgb25TdHJlYW1FcnJvcigpXG4gICAgfSlcbiAgICBjb25zdCB0eXBlT3B0aW9ucyA9IHtcbiAgICAgIGVudixcbiAgICAgIGN3ZCxcbiAgICAgIGV2ZW50QnJvYWRjYXN0ZXIsXG4gICAgICBldmVudERhdGFDb2xsZWN0b3IsXG4gICAgICBsb2c6IHN0cmVhbS53cml0ZS5iaW5kKHN0cmVhbSksXG4gICAgICBwYXJzZWRBcmd2T3B0aW9uczogY29uZmlndXJhdGlvbi5vcHRpb25zLFxuICAgICAgc3RyZWFtLFxuICAgICAgY2xlYW51cDpcbiAgICAgICAgc3RyZWFtID09PSBzdGRvdXRcbiAgICAgICAgICA/IGFzeW5jICgpID0+IGF3YWl0IFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgICAgOiBwcm9taXNpZnk8YW55PihzdHJlYW0uZW5kLmJpbmQoc3RyZWFtKSksXG4gICAgICBzdXBwb3J0Q29kZUxpYnJhcnksXG4gICAgfVxuICAgIGlmICh0eXBlID09PSAncHJvZ3Jlc3MtYmFyJyAmJiAhKHN0cmVhbSBhcyBUdHlXcml0ZVN0cmVhbSkuaXNUVFkpIHtcbiAgICAgIGxvZ2dlci53YXJuKFxuICAgICAgICBgQ2Fubm90IHVzZSAncHJvZ3Jlc3MtYmFyJyBmb3JtYXR0ZXIgZm9yIG91dHB1dCB0byAnJHt0YXJnZXR9JyBhcyBub3QgYSBUVFkuIFN3aXRjaGluZyB0byAncHJvZ3Jlc3MnIGZvcm1hdHRlci5gXG4gICAgICApXG4gICAgICB0eXBlID0gJ3Byb2dyZXNzJ1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgRm9ybWF0dGVyQnVpbGRlci5idWlsZCh0eXBlLCB0eXBlT3B0aW9ucylcbiAgfVxuXG4gIGNvbnN0IGZvcm1hdHRlcnM6IEZvcm1hdHRlcltdID0gW11cblxuICBmb3JtYXR0ZXJzLnB1c2goXG4gICAgYXdhaXQgaW5pdGlhbGl6ZUZvcm1hdHRlcihzdGRvdXQsICdzdGRvdXQnLCBjb25maWd1cmF0aW9uLnN0ZG91dClcbiAgKVxuXG4gIGZvciAoY29uc3QgW3RhcmdldCwgdHlwZV0gb2YgT2JqZWN0LmVudHJpZXMoY29uZmlndXJhdGlvbi5maWxlcykpIHtcbiAgICBjb25zdCBzdHJlYW06IElGb3JtYXR0ZXJTdHJlYW0gPSBmcy5jcmVhdGVXcml0ZVN0cmVhbShudWxsLCB7XG4gICAgICBmZDogYXdhaXQgZnMub3BlbihwYXRoLnJlc29sdmUoY3dkLCB0YXJnZXQpLCAndycpLFxuICAgIH0pXG4gICAgZm9ybWF0dGVycy5wdXNoKGF3YWl0IGluaXRpYWxpemVGb3JtYXR0ZXIoc3RyZWFtLCB0YXJnZXQsIHR5cGUpKVxuICB9XG5cbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChmb3JtYXR0ZXJzLm1hcChhc3luYyAoZikgPT4gYXdhaXQgZi5maW5pc2hlZCgpKSlcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUlBLE1BQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUVBLE1BQUFDLFNBQUEsR0FBQUMsZUFBQSxDQUFBRixPQUFBO0FBQ0EsTUFBQUcsSUFBQSxHQUFBRCxlQUFBLENBQUFGLE9BQUE7QUFDQSxNQUFBSSxNQUFBLEdBQUFGLGVBQUEsQ0FBQUYsT0FBQTtBQUlPLGVBQWVLLG9CQUFvQkEsQ0FBQztFQUN6Q0MsR0FBRztFQUNIQyxHQUFHO0VBQ0hDLE1BQU07RUFDTkMsTUFBTTtFQUNOQyxhQUFhO0VBQ2JDLGdCQUFnQjtFQUNoQkMsa0JBQWtCO0VBQ2xCQyxhQUFhO0VBQ2JDO0FBQWtCLENBWW5CO0VBQ0MsZUFBZUMsbUJBQW1CQSxDQUNoQ0MsTUFBd0IsRUFDeEJDLE1BQWMsRUFDZEMsSUFBWTtJQUVaRixNQUFNLENBQUNHLEVBQUUsQ0FBQyxPQUFPLEVBQUdDLEtBQVksSUFBSTtNQUNsQ1gsTUFBTSxDQUFDVyxLQUFLLENBQUNBLEtBQUssQ0FBQ0MsT0FBTyxDQUFDO01BQzNCWCxhQUFhLEVBQUU7SUFDakIsQ0FBQyxDQUFDO0lBQ0YsTUFBTVksV0FBVyxHQUFHO01BQ2xCaEIsR0FBRztNQUNIQyxHQUFHO01BQ0hJLGdCQUFnQjtNQUNoQkMsa0JBQWtCO01BQ2xCVyxHQUFHLEVBQUVQLE1BQU0sQ0FBQ1EsS0FBSyxDQUFDQyxJQUFJLENBQUNULE1BQU0sQ0FBQztNQUM5QlUsaUJBQWlCLEVBQUViLGFBQWEsQ0FBQ2MsT0FBTztNQUN4Q1gsTUFBTTtNQUNOWSxPQUFPLEVBQ0xaLE1BQU0sS0FBS1IsTUFBTSxHQUNiLFlBQVksTUFBTXFCLE9BQU8sQ0FBQ0MsT0FBTyxFQUFFLEdBQ25DLElBQUEvQixNQUFBLENBQUFnQyxTQUFTLEVBQU1mLE1BQU0sQ0FBQ2dCLEdBQUcsQ0FBQ1AsSUFBSSxDQUFDVCxNQUFNLENBQUMsQ0FBQztNQUM3Q0Y7S0FDRDtJQUNELElBQUlJLElBQUksS0FBSyxjQUFjLElBQUksQ0FBRUYsTUFBeUIsQ0FBQ2lCLEtBQUssRUFBRTtNQUNoRXhCLE1BQU0sQ0FBQ3lCLElBQUksQ0FDVCxzREFBc0RqQixNQUFNLG9EQUFvRCxDQUNqSDtNQUNEQyxJQUFJLEdBQUcsVUFBVTs7SUFFbkIsT0FBTyxNQUFNakIsU0FBQSxDQUFBa0MsT0FBZ0IsQ0FBQ0MsS0FBSyxDQUFDbEIsSUFBSSxFQUFFSSxXQUFXLENBQUM7RUFDeEQ7RUFFQSxNQUFNZSxVQUFVLEdBQWdCLEVBQUU7RUFFbENBLFVBQVUsQ0FBQ0MsSUFBSSxDQUNiLE1BQU12QixtQkFBbUIsQ0FBQ1AsTUFBTSxFQUFFLFFBQVEsRUFBRUssYUFBYSxDQUFDTCxNQUFNLENBQUMsQ0FDbEU7RUFFRCxLQUFLLE1BQU0sQ0FBQ1MsTUFBTSxFQUFFQyxJQUFJLENBQUMsSUFBSXFCLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDM0IsYUFBYSxDQUFDNEIsS0FBSyxDQUFDLEVBQUU7SUFDaEUsTUFBTXpCLE1BQU0sR0FBcUJiLElBQUEsQ0FBQWdDLE9BQUUsQ0FBQ08saUJBQWlCLENBQUMsSUFBSSxFQUFFO01BQzFEQyxFQUFFLEVBQUUsTUFBTXhDLElBQUEsQ0FBQWdDLE9BQUUsQ0FBQ1MsSUFBSSxDQUFDeEMsTUFBQSxDQUFBK0IsT0FBSSxDQUFDTCxPQUFPLENBQUN2QixHQUFHLEVBQUVVLE1BQU0sQ0FBQyxFQUFFLEdBQUc7S0FDakQsQ0FBQztJQUNGb0IsVUFBVSxDQUFDQyxJQUFJLENBQUMsTUFBTXZCLG1CQUFtQixDQUFDQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxDQUFDLENBQUM7O0VBR2xFLE9BQU8sa0JBQUs7SUFDVixNQUFNVyxPQUFPLENBQUNnQixHQUFHLENBQUNSLFVBQVUsQ0FBQ1MsR0FBRyxDQUFDLE1BQU9DLENBQUMsSUFBSyxNQUFNQSxDQUFDLENBQUNDLFFBQVEsRUFBRSxDQUFDLENBQUM7RUFDcEUsQ0FBQztBQUNIO0FBdEVBQyxPQUFBLENBQUE1QyxvQkFBQSxHQUFBQSxvQkFBQSJ9