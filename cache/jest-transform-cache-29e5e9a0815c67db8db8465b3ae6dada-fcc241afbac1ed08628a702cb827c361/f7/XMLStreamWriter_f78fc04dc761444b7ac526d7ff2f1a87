7b68dfa7b40c55b02753c332d2b0f7ab
"use strict";

// Generated by CoffeeScript 2.4.1
(function () {
  var NodeType,
    WriterState,
    XMLStreamWriter,
    XMLWriterBase,
    hasProp = {}.hasOwnProperty;
  NodeType = require('./NodeType');
  XMLWriterBase = require('./XMLWriterBase');
  WriterState = require('./WriterState');

  // Prints XML nodes to a stream
  module.exports = XMLStreamWriter = class XMLStreamWriter extends XMLWriterBase {
    // Initializes a new instance of `XMLStreamWriter`

    // `stream` output stream
    // `options.pretty` pretty prints the result
    // `options.indent` indentation string
    // `options.newline` newline sequence
    // `options.offset` a fixed number of indentations to add to every line
    // `options.allowEmpty` do not self close empty element tags
    // 'options.dontPrettyTextNodes' if any text is present in node, don't indent or LF
    // `options.spaceBeforeSlash` add a space before the closing slash of empty elements
    constructor(stream, options) {
      super(options);
      this.stream = stream;
    }
    endline(node, options, level) {
      if (node.isLastRootNode && options.state === WriterState.CloseTag) {
        return '';
      } else {
        return super.endline(node, options, level);
      }
    }
    document(doc, options) {
      var child, i, j, k, len1, len2, ref, ref1, results;
      ref = doc.children;
      // set a flag so that we don't insert a newline after the last root level node 
      for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
        child = ref[i];
        child.isLastRootNode = i === doc.children.length - 1;
      }
      options = this.filterOptions(options);
      ref1 = doc.children;
      results = [];
      for (k = 0, len2 = ref1.length; k < len2; k++) {
        child = ref1[k];
        results.push(this.writeChildNode(child, options, 0));
      }
      return results;
    }
    cdata(node, options, level) {
      return this.stream.write(super.cdata(node, options, level));
    }
    comment(node, options, level) {
      return this.stream.write(super.comment(node, options, level));
    }
    declaration(node, options, level) {
      return this.stream.write(super.declaration(node, options, level));
    }
    docType(node, options, level) {
      var child, j, len1, ref;
      level || (level = 0);
      this.openNode(node, options, level);
      options.state = WriterState.OpenTag;
      this.stream.write(this.indent(node, options, level));
      this.stream.write('<!DOCTYPE ' + node.root().name);
      // external identifier
      if (node.pubID && node.sysID) {
        this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
      } else if (node.sysID) {
        this.stream.write(' SYSTEM "' + node.sysID + '"');
      }
      // internal subset
      if (node.children.length > 0) {
        this.stream.write(' [');
        this.stream.write(this.endline(node, options, level));
        options.state = WriterState.InsideTag;
        ref = node.children;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          child = ref[j];
          this.writeChildNode(child, options, level + 1);
        }
        options.state = WriterState.CloseTag;
        this.stream.write(']');
      }
      // close tag
      options.state = WriterState.CloseTag;
      this.stream.write(options.spaceBeforeSlash + '>');
      this.stream.write(this.endline(node, options, level));
      options.state = WriterState.None;
      return this.closeNode(node, options, level);
    }
    element(node, options, level) {
      var att, attLen, child, childNodeCount, firstChildNode, j, len, len1, name, prettySuppressed, r, ratt, ref, ref1, ref2, rline;
      level || (level = 0);
      // open tag
      this.openNode(node, options, level);
      options.state = WriterState.OpenTag;
      r = this.indent(node, options, level) + '<' + node.name;
      // attributes
      if (options.pretty && options.width > 0) {
        len = r.length;
        ref = node.attribs;
        for (name in ref) {
          if (!hasProp.call(ref, name)) continue;
          att = ref[name];
          ratt = this.attribute(att, options, level);
          attLen = ratt.length;
          if (len + attLen > options.width) {
            rline = this.indent(node, options, level + 1) + ratt;
            r += this.endline(node, options, level) + rline;
            len = rline.length;
          } else {
            rline = ' ' + ratt;
            r += rline;
            len += rline.length;
          }
        }
      } else {
        ref1 = node.attribs;
        for (name in ref1) {
          if (!hasProp.call(ref1, name)) continue;
          att = ref1[name];
          r += this.attribute(att, options, level);
        }
      }
      this.stream.write(r);
      childNodeCount = node.children.length;
      firstChildNode = childNodeCount === 0 ? null : node.children[0];
      if (childNodeCount === 0 || node.children.every(function (e) {
        return (e.type === NodeType.Text || e.type === NodeType.Raw || e.type === NodeType.CData) && e.value === '';
      })) {
        // empty element
        if (options.allowEmpty) {
          this.stream.write('>');
          options.state = WriterState.CloseTag;
          this.stream.write('</' + node.name + '>');
        } else {
          options.state = WriterState.CloseTag;
          this.stream.write(options.spaceBeforeSlash + '/>');
        }
      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw || firstChildNode.type === NodeType.CData) && firstChildNode.value != null) {
        // do not indent text-only nodes
        this.stream.write('>');
        options.state = WriterState.InsideTag;
        options.suppressPrettyCount++;
        prettySuppressed = true;
        this.writeChildNode(firstChildNode, options, level + 1);
        options.suppressPrettyCount--;
        prettySuppressed = false;
        options.state = WriterState.CloseTag;
        this.stream.write('</' + node.name + '>');
      } else {
        this.stream.write('>' + this.endline(node, options, level));
        options.state = WriterState.InsideTag;
        ref2 = node.children;
        // inner tags
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          child = ref2[j];
          this.writeChildNode(child, options, level + 1);
        }
        // close tag
        options.state = WriterState.CloseTag;
        this.stream.write(this.indent(node, options, level) + '</' + node.name + '>');
      }
      this.stream.write(this.endline(node, options, level));
      options.state = WriterState.None;
      return this.closeNode(node, options, level);
    }
    processingInstruction(node, options, level) {
      return this.stream.write(super.processingInstruction(node, options, level));
    }
    raw(node, options, level) {
      return this.stream.write(super.raw(node, options, level));
    }
    text(node, options, level) {
      return this.stream.write(super.text(node, options, level));
    }
    dtdAttList(node, options, level) {
      return this.stream.write(super.dtdAttList(node, options, level));
    }
    dtdElement(node, options, level) {
      return this.stream.write(super.dtdElement(node, options, level));
    }
    dtdEntity(node, options, level) {
      return this.stream.write(super.dtdEntity(node, options, level));
    }
    dtdNotation(node, options, level) {
      return this.stream.write(super.dtdNotation(node, options, level));
    }
  };
}).call(void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlVHlwZSIsIldyaXRlclN0YXRlIiwiWE1MU3RyZWFtV3JpdGVyIiwiWE1MV3JpdGVyQmFzZSIsImhhc1Byb3AiLCJoYXNPd25Qcm9wZXJ0eSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29uc3RydWN0b3IiLCJzdHJlYW0iLCJvcHRpb25zIiwiZW5kbGluZSIsIm5vZGUiLCJsZXZlbCIsImlzTGFzdFJvb3ROb2RlIiwic3RhdGUiLCJDbG9zZVRhZyIsImRvY3VtZW50IiwiZG9jIiwiY2hpbGQiLCJpIiwiaiIsImsiLCJsZW4xIiwibGVuMiIsInJlZiIsInJlZjEiLCJyZXN1bHRzIiwiY2hpbGRyZW4iLCJsZW5ndGgiLCJmaWx0ZXJPcHRpb25zIiwicHVzaCIsIndyaXRlQ2hpbGROb2RlIiwiY2RhdGEiLCJ3cml0ZSIsImNvbW1lbnQiLCJkZWNsYXJhdGlvbiIsImRvY1R5cGUiLCJvcGVuTm9kZSIsIk9wZW5UYWciLCJpbmRlbnQiLCJyb290IiwibmFtZSIsInB1YklEIiwic3lzSUQiLCJJbnNpZGVUYWciLCJzcGFjZUJlZm9yZVNsYXNoIiwiTm9uZSIsImNsb3NlTm9kZSIsImVsZW1lbnQiLCJhdHQiLCJhdHRMZW4iLCJjaGlsZE5vZGVDb3VudCIsImZpcnN0Q2hpbGROb2RlIiwibGVuIiwicHJldHR5U3VwcHJlc3NlZCIsInIiLCJyYXR0IiwicmVmMiIsInJsaW5lIiwicHJldHR5Iiwid2lkdGgiLCJhdHRyaWJzIiwiY2FsbCIsImF0dHJpYnV0ZSIsImV2ZXJ5IiwiZSIsInR5cGUiLCJUZXh0IiwiUmF3IiwiQ0RhdGEiLCJ2YWx1ZSIsImFsbG93RW1wdHkiLCJzdXBwcmVzc1ByZXR0eUNvdW50IiwicHJvY2Vzc2luZ0luc3RydWN0aW9uIiwicmF3IiwidGV4dCIsImR0ZEF0dExpc3QiLCJkdGRFbGVtZW50IiwiZHRkRW50aXR5IiwiZHRkTm90YXRpb24iXSwic291cmNlcyI6WyJYTUxTdHJlYW1Xcml0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAyLjQuMVxuKGZ1bmN0aW9uKCkge1xuICB2YXIgTm9kZVR5cGUsIFdyaXRlclN0YXRlLCBYTUxTdHJlYW1Xcml0ZXIsIFhNTFdyaXRlckJhc2UsXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIE5vZGVUeXBlID0gcmVxdWlyZSgnLi9Ob2RlVHlwZScpO1xuXG4gIFhNTFdyaXRlckJhc2UgPSByZXF1aXJlKCcuL1hNTFdyaXRlckJhc2UnKTtcblxuICBXcml0ZXJTdGF0ZSA9IHJlcXVpcmUoJy4vV3JpdGVyU3RhdGUnKTtcblxuICAvLyBQcmludHMgWE1MIG5vZGVzIHRvIGEgc3RyZWFtXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MU3RyZWFtV3JpdGVyID0gY2xhc3MgWE1MU3RyZWFtV3JpdGVyIGV4dGVuZHMgWE1MV3JpdGVyQmFzZSB7XG4gICAgLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYFhNTFN0cmVhbVdyaXRlcmBcblxuICAgIC8vIGBzdHJlYW1gIG91dHB1dCBzdHJlYW1cbiAgICAvLyBgb3B0aW9ucy5wcmV0dHlgIHByZXR0eSBwcmludHMgdGhlIHJlc3VsdFxuICAgIC8vIGBvcHRpb25zLmluZGVudGAgaW5kZW50YXRpb24gc3RyaW5nXG4gICAgLy8gYG9wdGlvbnMubmV3bGluZWAgbmV3bGluZSBzZXF1ZW5jZVxuICAgIC8vIGBvcHRpb25zLm9mZnNldGAgYSBmaXhlZCBudW1iZXIgb2YgaW5kZW50YXRpb25zIHRvIGFkZCB0byBldmVyeSBsaW5lXG4gICAgLy8gYG9wdGlvbnMuYWxsb3dFbXB0eWAgZG8gbm90IHNlbGYgY2xvc2UgZW1wdHkgZWxlbWVudCB0YWdzXG4gICAgLy8gJ29wdGlvbnMuZG9udFByZXR0eVRleHROb2RlcycgaWYgYW55IHRleHQgaXMgcHJlc2VudCBpbiBub2RlLCBkb24ndCBpbmRlbnQgb3IgTEZcbiAgICAvLyBgb3B0aW9ucy5zcGFjZUJlZm9yZVNsYXNoYCBhZGQgYSBzcGFjZSBiZWZvcmUgdGhlIGNsb3Npbmcgc2xhc2ggb2YgZW1wdHkgZWxlbWVudHNcbiAgICBjb25zdHJ1Y3RvcihzdHJlYW0sIG9wdGlvbnMpIHtcbiAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgdGhpcy5zdHJlYW0gPSBzdHJlYW07XG4gICAgfVxuXG4gICAgZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgaWYgKG5vZGUuaXNMYXN0Um9vdE5vZGUgJiYgb3B0aW9ucy5zdGF0ZSA9PT0gV3JpdGVyU3RhdGUuQ2xvc2VUYWcpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGRvY3VtZW50KGRvYywgb3B0aW9ucykge1xuICAgICAgdmFyIGNoaWxkLCBpLCBqLCBrLCBsZW4xLCBsZW4yLCByZWYsIHJlZjEsIHJlc3VsdHM7XG4gICAgICByZWYgPSBkb2MuY2hpbGRyZW47XG4gICAgICAvLyBzZXQgYSBmbGFnIHNvIHRoYXQgd2UgZG9uJ3QgaW5zZXJ0IGEgbmV3bGluZSBhZnRlciB0aGUgbGFzdCByb290IGxldmVsIG5vZGUgXG4gICAgICBmb3IgKGkgPSBqID0gMCwgbGVuMSA9IHJlZi5sZW5ndGg7IGogPCBsZW4xOyBpID0gKytqKSB7XG4gICAgICAgIGNoaWxkID0gcmVmW2ldO1xuICAgICAgICBjaGlsZC5pc0xhc3RSb290Tm9kZSA9IGkgPT09IGRvYy5jaGlsZHJlbi5sZW5ndGggLSAxO1xuICAgICAgfVxuICAgICAgb3B0aW9ucyA9IHRoaXMuZmlsdGVyT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIHJlZjEgPSBkb2MuY2hpbGRyZW47XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGsgPSAwLCBsZW4yID0gcmVmMS5sZW5ndGg7IGsgPCBsZW4yOyBrKyspIHtcbiAgICAgICAgY2hpbGQgPSByZWYxW2tdO1xuICAgICAgICByZXN1bHRzLnB1c2godGhpcy53cml0ZUNoaWxkTm9kZShjaGlsZCwgb3B0aW9ucywgMCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuXG4gICAgY2RhdGEobm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShzdXBlci5jZGF0YShub2RlLCBvcHRpb25zLCBsZXZlbCkpO1xuICAgIH1cblxuICAgIGNvbW1lbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShzdXBlci5jb21tZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKSk7XG4gICAgfVxuXG4gICAgZGVjbGFyYXRpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShzdXBlci5kZWNsYXJhdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkpO1xuICAgIH1cblxuICAgIGRvY1R5cGUobm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHZhciBjaGlsZCwgaiwgbGVuMSwgcmVmO1xuICAgICAgbGV2ZWwgfHwgKGxldmVsID0gMCk7XG4gICAgICB0aGlzLm9wZW5Ob2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgdGhpcy5zdHJlYW0ud3JpdGUodGhpcy5pbmRlbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCc8IURPQ1RZUEUgJyArIG5vZGUucm9vdCgpLm5hbWUpO1xuICAgICAgLy8gZXh0ZXJuYWwgaWRlbnRpZmllclxuICAgICAgaWYgKG5vZGUucHViSUQgJiYgbm9kZS5zeXNJRCkge1xuICAgICAgICB0aGlzLnN0cmVhbS53cml0ZSgnIFBVQkxJQyBcIicgKyBub2RlLnB1YklEICsgJ1wiIFwiJyArIG5vZGUuc3lzSUQgKyAnXCInKTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS5zeXNJRCkge1xuICAgICAgICB0aGlzLnN0cmVhbS53cml0ZSgnIFNZU1RFTSBcIicgKyBub2RlLnN5c0lEICsgJ1wiJyk7XG4gICAgICB9XG4gICAgICAvLyBpbnRlcm5hbCBzdWJzZXRcbiAgICAgIGlmIChub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJyBbJyk7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKHRoaXMuZW5kbGluZShub2RlLCBvcHRpb25zLCBsZXZlbCkpO1xuICAgICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgICByZWYgPSBub2RlLmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGogPSAwLCBsZW4xID0gcmVmLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAgICAgIGNoaWxkID0gcmVmW2pdO1xuICAgICAgICAgIHRoaXMud3JpdGVDaGlsZE5vZGUoY2hpbGQsIG9wdGlvbnMsIGxldmVsICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgICB0aGlzLnN0cmVhbS53cml0ZSgnXScpO1xuICAgICAgfVxuICAgICAgLy8gY2xvc2UgdGFnXG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuQ2xvc2VUYWc7XG4gICAgICB0aGlzLnN0cmVhbS53cml0ZShvcHRpb25zLnNwYWNlQmVmb3JlU2xhc2ggKyAnPicpO1xuICAgICAgdGhpcy5zdHJlYW0ud3JpdGUodGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKSk7XG4gICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuTm9uZTtcbiAgICAgIHJldHVybiB0aGlzLmNsb3NlTm9kZShub2RlLCBvcHRpb25zLCBsZXZlbCk7XG4gICAgfVxuXG4gICAgZWxlbWVudChub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgdmFyIGF0dCwgYXR0TGVuLCBjaGlsZCwgY2hpbGROb2RlQ291bnQsIGZpcnN0Q2hpbGROb2RlLCBqLCBsZW4sIGxlbjEsIG5hbWUsIHByZXR0eVN1cHByZXNzZWQsIHIsIHJhdHQsIHJlZiwgcmVmMSwgcmVmMiwgcmxpbmU7XG4gICAgICBsZXZlbCB8fCAobGV2ZWwgPSAwKTtcbiAgICAgIC8vIG9wZW4gdGFnXG4gICAgICB0aGlzLm9wZW5Ob2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5PcGVuVGFnO1xuICAgICAgciA9IHRoaXMuaW5kZW50KG5vZGUsIG9wdGlvbnMsIGxldmVsKSArICc8JyArIG5vZGUubmFtZTtcbiAgICAgIC8vIGF0dHJpYnV0ZXNcbiAgICAgIGlmIChvcHRpb25zLnByZXR0eSAmJiBvcHRpb25zLndpZHRoID4gMCkge1xuICAgICAgICBsZW4gPSByLmxlbmd0aDtcbiAgICAgICAgcmVmID0gbm9kZS5hdHRyaWJzO1xuICAgICAgICBmb3IgKG5hbWUgaW4gcmVmKSB7XG4gICAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwocmVmLCBuYW1lKSkgY29udGludWU7XG4gICAgICAgICAgYXR0ID0gcmVmW25hbWVdO1xuICAgICAgICAgIHJhdHQgPSB0aGlzLmF0dHJpYnV0ZShhdHQsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgICAgICBhdHRMZW4gPSByYXR0Lmxlbmd0aDtcbiAgICAgICAgICBpZiAobGVuICsgYXR0TGVuID4gb3B0aW9ucy53aWR0aCkge1xuICAgICAgICAgICAgcmxpbmUgPSB0aGlzLmluZGVudChub2RlLCBvcHRpb25zLCBsZXZlbCArIDEpICsgcmF0dDtcbiAgICAgICAgICAgIHIgKz0gdGhpcy5lbmRsaW5lKG5vZGUsIG9wdGlvbnMsIGxldmVsKSArIHJsaW5lO1xuICAgICAgICAgICAgbGVuID0gcmxpbmUubGVuZ3RoO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBybGluZSA9ICcgJyArIHJhdHQ7XG4gICAgICAgICAgICByICs9IHJsaW5lO1xuICAgICAgICAgICAgbGVuICs9IHJsaW5lLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlZjEgPSBub2RlLmF0dHJpYnM7XG4gICAgICAgIGZvciAobmFtZSBpbiByZWYxKSB7XG4gICAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwocmVmMSwgbmFtZSkpIGNvbnRpbnVlO1xuICAgICAgICAgIGF0dCA9IHJlZjFbbmFtZV07XG4gICAgICAgICAgciArPSB0aGlzLmF0dHJpYnV0ZShhdHQsIG9wdGlvbnMsIGxldmVsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5zdHJlYW0ud3JpdGUocik7XG4gICAgICBjaGlsZE5vZGVDb3VudCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgZmlyc3RDaGlsZE5vZGUgPSBjaGlsZE5vZGVDb3VudCA9PT0gMCA/IG51bGwgOiBub2RlLmNoaWxkcmVuWzBdO1xuICAgICAgaWYgKGNoaWxkTm9kZUNvdW50ID09PSAwIHx8IG5vZGUuY2hpbGRyZW4uZXZlcnkoZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gKGUudHlwZSA9PT0gTm9kZVR5cGUuVGV4dCB8fCBlLnR5cGUgPT09IE5vZGVUeXBlLlJhdyB8fCBlLnR5cGUgPT09IE5vZGVUeXBlLkNEYXRhKSAmJiBlLnZhbHVlID09PSAnJztcbiAgICAgIH0pKSB7XG4gICAgICAgIC8vIGVtcHR5IGVsZW1lbnRcbiAgICAgICAgaWYgKG9wdGlvbnMuYWxsb3dFbXB0eSkge1xuICAgICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCc+Jyk7XG4gICAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkNsb3NlVGFnO1xuICAgICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKCc8LycgKyBub2RlLm5hbWUgKyAnPicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgICAgICB0aGlzLnN0cmVhbS53cml0ZShvcHRpb25zLnNwYWNlQmVmb3JlU2xhc2ggKyAnLz4nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnByZXR0eSAmJiBjaGlsZE5vZGVDb3VudCA9PT0gMSAmJiAoZmlyc3RDaGlsZE5vZGUudHlwZSA9PT0gTm9kZVR5cGUuVGV4dCB8fCBmaXJzdENoaWxkTm9kZS50eXBlID09PSBOb2RlVHlwZS5SYXcgfHwgZmlyc3RDaGlsZE5vZGUudHlwZSA9PT0gTm9kZVR5cGUuQ0RhdGEpICYmIChmaXJzdENoaWxkTm9kZS52YWx1ZSAhPSBudWxsKSkge1xuICAgICAgICAvLyBkbyBub3QgaW5kZW50IHRleHQtb25seSBub2Rlc1xuICAgICAgICB0aGlzLnN0cmVhbS53cml0ZSgnPicpO1xuICAgICAgICBvcHRpb25zLnN0YXRlID0gV3JpdGVyU3RhdGUuSW5zaWRlVGFnO1xuICAgICAgICBvcHRpb25zLnN1cHByZXNzUHJldHR5Q291bnQrKztcbiAgICAgICAgcHJldHR5U3VwcHJlc3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMud3JpdGVDaGlsZE5vZGUoZmlyc3RDaGlsZE5vZGUsIG9wdGlvbnMsIGxldmVsICsgMSk7XG4gICAgICAgIG9wdGlvbnMuc3VwcHJlc3NQcmV0dHlDb3VudC0tO1xuICAgICAgICBwcmV0dHlTdXBwcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUoJzwvJyArIG5vZGUubmFtZSArICc+Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN0cmVhbS53cml0ZSgnPicgKyB0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICAgICAgb3B0aW9ucy5zdGF0ZSA9IFdyaXRlclN0YXRlLkluc2lkZVRhZztcbiAgICAgICAgcmVmMiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICAgIC8vIGlubmVyIHRhZ3NcbiAgICAgICAgZm9yIChqID0gMCwgbGVuMSA9IHJlZjIubGVuZ3RoOyBqIDwgbGVuMTsgaisrKSB7XG4gICAgICAgICAgY2hpbGQgPSByZWYyW2pdO1xuICAgICAgICAgIHRoaXMud3JpdGVDaGlsZE5vZGUoY2hpbGQsIG9wdGlvbnMsIGxldmVsICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2xvc2UgdGFnXG4gICAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5DbG9zZVRhZztcbiAgICAgICAgdGhpcy5zdHJlYW0ud3JpdGUodGhpcy5pbmRlbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpICsgJzwvJyArIG5vZGUubmFtZSArICc+Jyk7XG4gICAgICB9XG4gICAgICB0aGlzLnN0cmVhbS53cml0ZSh0aGlzLmVuZGxpbmUobm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICAgIG9wdGlvbnMuc3RhdGUgPSBXcml0ZXJTdGF0ZS5Ob25lO1xuICAgICAgcmV0dXJuIHRoaXMuY2xvc2VOb2RlKG5vZGUsIG9wdGlvbnMsIGxldmVsKTtcbiAgICB9XG5cbiAgICBwcm9jZXNzaW5nSW5zdHJ1Y3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShzdXBlci5wcm9jZXNzaW5nSW5zdHJ1Y3Rpb24obm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICB9XG5cbiAgICByYXcobm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShzdXBlci5yYXcobm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICB9XG5cbiAgICB0ZXh0KG5vZGUsIG9wdGlvbnMsIGxldmVsKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW0ud3JpdGUoc3VwZXIudGV4dChub2RlLCBvcHRpb25zLCBsZXZlbCkpO1xuICAgIH1cblxuICAgIGR0ZEF0dExpc3Qobm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShzdXBlci5kdGRBdHRMaXN0KG5vZGUsIG9wdGlvbnMsIGxldmVsKSk7XG4gICAgfVxuXG4gICAgZHRkRWxlbWVudChub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyaXRlKHN1cGVyLmR0ZEVsZW1lbnQobm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICB9XG5cbiAgICBkdGRFbnRpdHkobm9kZSwgb3B0aW9ucywgbGV2ZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS53cml0ZShzdXBlci5kdGRFbnRpdHkobm9kZSwgb3B0aW9ucywgbGV2ZWwpKTtcbiAgICB9XG5cbiAgICBkdGROb3RhdGlvbihub2RlLCBvcHRpb25zLCBsZXZlbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLndyaXRlKHN1cGVyLmR0ZE5vdGF0aW9uKG5vZGUsIG9wdGlvbnMsIGxldmVsKSk7XG4gICAgfVxuXG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSxDQUFDLFlBQVc7RUFDVixJQUFJQSxRQUFRO0lBQUVDLFdBQVc7SUFBRUMsZUFBZTtJQUFFQyxhQUFhO0lBQ3ZEQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUNDLGNBQWM7RUFFN0JMLFFBQVEsR0FBR00sT0FBTyxDQUFDLFlBQVksQ0FBQztFQUVoQ0gsYUFBYSxHQUFHRyxPQUFPLENBQUMsaUJBQWlCLENBQUM7RUFFMUNMLFdBQVcsR0FBR0ssT0FBTyxDQUFDLGVBQWUsQ0FBQzs7RUFFdEM7RUFDQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUdOLGVBQWUsR0FBRyxNQUFNQSxlQUFlLFNBQVNDLGFBQWEsQ0FBQztJQUM3RTs7SUFFQTtJQUNBO0lBQ0E7SUFDQTtJ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