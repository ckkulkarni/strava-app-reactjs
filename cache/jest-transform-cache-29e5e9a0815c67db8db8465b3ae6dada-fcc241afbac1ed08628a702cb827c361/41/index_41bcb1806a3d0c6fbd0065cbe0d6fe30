7dd0276f2e2dec882e1452b798cd09fd
"use strict";

/**
 * A minimal path module to resolve Unix, Windows and URL paths alike.
 * @memberof util
 * @namespace
 */
var path = exports;
var isAbsolute =
/**
 * Tests if the specified path is absolute.
 * @param {string} path Path to test
 * @returns {boolean} `true` if path is absolute
 */
path.isAbsolute = function isAbsolute(path) {
  return /^(?:\/|\w+:)/.test(path);
};
var normalize =
/**
 * Normalizes the specified path.
 * @param {string} path Path to normalize
 * @returns {string} Normalized path
 */
path.normalize = function normalize(path) {
  path = path.replace(/\\/g, "/").replace(/\/{2,}/g, "/");
  var parts = path.split("/"),
    absolute = isAbsolute(path),
    prefix = "";
  if (absolute) prefix = parts.shift() + "/";
  for (var i = 0; i < parts.length;) {
    if (parts[i] === "..") {
      if (i > 0 && parts[i - 1] !== "..") parts.splice(--i, 2);else if (absolute) parts.splice(i, 1);else ++i;
    } else if (parts[i] === ".") parts.splice(i, 1);else ++i;
  }
  return prefix + parts.join("/");
};

/**
 * Resolves the specified include path against the specified origin path.
 * @param {string} originPath Path to the origin file
 * @param {string} includePath Include path relative to origin path
 * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized
 * @returns {string} Path to the include file
 */
path.resolve = function resolve(originPath, includePath, alreadyNormalized) {
  if (!alreadyNormalized) includePath = normalize(includePath);
  if (isAbsolute(includePath)) return includePath;
  if (!alreadyNormalized) originPath = normalize(originPath);
  return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize(originPath + "/" + includePath) : includePath;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwYXRoIiwiZXhwb3J0cyIsImlzQWJzb2x1dGUiLCJ0ZXN0Iiwibm9ybWFsaXplIiwicmVwbGFjZSIsInBhcnRzIiwic3BsaXQiLCJhYnNvbHV0ZSIsInByZWZpeCIsInNoaWZ0IiwiaSIsImxlbmd0aCIsInNwbGljZSIsImpvaW4iLCJyZXNvbHZlIiwib3JpZ2luUGF0aCIsImluY2x1ZGVQYXRoIiwiYWxyZWFkeU5vcm1hbGl6ZWQiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8qKlxyXG4gKiBBIG1pbmltYWwgcGF0aCBtb2R1bGUgdG8gcmVzb2x2ZSBVbml4LCBXaW5kb3dzIGFuZCBVUkwgcGF0aHMgYWxpa2UuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBuYW1lc3BhY2VcclxuICovXHJcbnZhciBwYXRoID0gZXhwb3J0cztcclxuXHJcbnZhciBpc0Fic29sdXRlID1cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgcGF0aCBpcyBhYnNvbHV0ZS5cclxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCB0byB0ZXN0XHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgcGF0aCBpcyBhYnNvbHV0ZVxyXG4gKi9cclxucGF0aC5pc0Fic29sdXRlID0gZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRoKSB7XHJcbiAgICByZXR1cm4gL14oPzpcXC98XFx3KzopLy50ZXN0KHBhdGgpO1xyXG59O1xyXG5cclxudmFyIG5vcm1hbGl6ZSA9XHJcbi8qKlxyXG4gKiBOb3JtYWxpemVzIHRoZSBzcGVjaWZpZWQgcGF0aC5cclxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCB0byBub3JtYWxpemVcclxuICogQHJldHVybnMge3N0cmluZ30gTm9ybWFsaXplZCBwYXRoXHJcbiAqL1xyXG5wYXRoLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZShwYXRoKSB7XHJcbiAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXFxcL2csIFwiL1wiKVxyXG4gICAgICAgICAgICAgICAucmVwbGFjZSgvXFwvezIsfS9nLCBcIi9cIik7XHJcbiAgICB2YXIgcGFydHMgICAgPSBwYXRoLnNwbGl0KFwiL1wiKSxcclxuICAgICAgICBhYnNvbHV0ZSA9IGlzQWJzb2x1dGUocGF0aCksXHJcbiAgICAgICAgcHJlZml4ICAgPSBcIlwiO1xyXG4gICAgaWYgKGFic29sdXRlKVxyXG4gICAgICAgIHByZWZpeCA9IHBhcnRzLnNoaWZ0KCkgKyBcIi9cIjtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOykge1xyXG4gICAgICAgIGlmIChwYXJ0c1tpXSA9PT0gXCIuLlwiKSB7XHJcbiAgICAgICAgICAgIGlmIChpID4gMCAmJiBwYXJ0c1tpIC0gMV0gIT09IFwiLi5cIilcclxuICAgICAgICAgICAgICAgIHBhcnRzLnNwbGljZSgtLWksIDIpO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChhYnNvbHV0ZSlcclxuICAgICAgICAgICAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocGFydHNbaV0gPT09IFwiLlwiKVxyXG4gICAgICAgICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICArK2k7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJlZml4ICsgcGFydHMuam9pbihcIi9cIik7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVzb2x2ZXMgdGhlIHNwZWNpZmllZCBpbmNsdWRlIHBhdGggYWdhaW5zdCB0aGUgc3BlY2lmaWVkIG9yaWdpbiBwYXRoLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gb3JpZ2luUGF0aCBQYXRoIHRvIHRoZSBvcmlnaW4gZmlsZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5jbHVkZVBhdGggSW5jbHVkZSBwYXRoIHJlbGF0aXZlIHRvIG9yaWdpbiBwYXRoXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2FscmVhZHlOb3JtYWxpemVkPWZhbHNlXSBgdHJ1ZWAgaWYgYm90aCBwYXRocyBhcmUgYWxyZWFkeSBrbm93biB0byBiZSBub3JtYWxpemVkXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFBhdGggdG8gdGhlIGluY2x1ZGUgZmlsZVxyXG4gKi9cclxucGF0aC5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZShvcmlnaW5QYXRoLCBpbmNsdWRlUGF0aCwgYWxyZWFkeU5vcm1hbGl6ZWQpIHtcclxuICAgIGlmICghYWxyZWFkeU5vcm1hbGl6ZWQpXHJcbiAgICAgICAgaW5jbHVkZVBhdGggPSBub3JtYWxpemUoaW5jbHVkZVBhdGgpO1xyXG4gICAgaWYgKGlzQWJzb2x1dGUoaW5jbHVkZVBhdGgpKVxyXG4gICAgICAgIHJldHVybiBpbmNsdWRlUGF0aDtcclxuICAgIGlmICghYWxyZWFkeU5vcm1hbGl6ZWQpXHJcbiAgICAgICAgb3JpZ2luUGF0aCA9IG5vcm1hbGl6ZShvcmlnaW5QYXRoKTtcclxuICAgIHJldHVybiAob3JpZ2luUGF0aCA9IG9yaWdpblBhdGgucmVwbGFjZSgvKD86XFwvfF4pW14vXSskLywgXCJcIikpLmxlbmd0aCA/IG5vcm1hbGl6ZShvcmlnaW5QYXRoICsgXCIvXCIgKyBpbmNsdWRlUGF0aCkgOiBpbmNsdWRlUGF0aDtcclxufTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQSxJQUFJLEdBQUdDLE9BQU87QUFFbEIsSUFBSUMsVUFBVTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUYsSUFBSSxDQUFDRSxVQUFVLEdBQUcsU0FBU0EsVUFBVUEsQ0FBQ0YsSUFBSSxFQUFFO0VBQ3hDLE9BQU8sY0FBYyxDQUFDRyxJQUFJLENBQUNILElBQUksQ0FBQztBQUNwQyxDQUFDO0FBRUQsSUFBSUksU0FBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUosSUFBSSxDQUFDSSxTQUFTLEdBQUcsU0FBU0EsU0FBU0EsQ0FBQ0osSUFBSSxFQUFFO0VBQ3RDQSxJQUFJLEdBQUdBLElBQUksQ0FBQ0ssT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FDbkJBLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDO0VBQ25DLElBQUlDLEtBQUssR0FBTU4sSUFBSSxDQUFDTyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQzFCQyxRQUFRLEdBQUdOLFVBQVUsQ0FBQ0YsSUFBSSxDQUFDO0lBQzNCUyxNQUFNLEdBQUssRUFBRTtFQUNqQixJQUFJRCxRQUFRLEVBQ1JDLE1BQU0sR0FBR0gsS0FBSyxDQUFDSSxLQUFLLEVBQUUsR0FBRyxHQUFHO0VBQ2hDLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHTCxLQUFLLENBQUNNLE1BQU0sR0FBRztJQUMvQixJQUFJTixLQUFLLENBQUNLLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRTtNQUNuQixJQUFJQSxDQUFDLEdBQUcsQ0FBQyxJQUFJTCxLQUFLLENBQUNLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQzlCTCxLQUFLLENBQUNPLE1BQU0sQ0FBQyxFQUFFRixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FDcEIsSUFBSUgsUUFBUSxFQUNiRixLQUFLLENBQUNPLE1BQU0sQ0FBQ0YsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBRW5CLEVBQUVBLENBQUM7SUFDWCxDQUFDLE1BQU0sSUFBSUwsS0FBSyxDQUFDSyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQ3ZCTCxLQUFLLENBQUNPLE1BQU0sQ0FBQ0YsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBRW5CLEVBQUVBLENBQUM7RUFDWDtFQUNBLE9BQU9GLE1BQU0sR0FBR0gsS0FBSyxDQUFDUSxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQ25DLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQWQsSUFBSSxDQUFDZSxPQUFPLEdBQUcsU0FBU0EsT0FBT0EsQ0FBQ0MsVUFBVSxFQUFFQyxXQUFXLEVBQUVDLGlCQUFpQixFQUFFO0VBQ3hFLElBQUksQ0FBQ0EsaUJBQWlCLEVBQ2xCRCxXQUFXLEdBQUdiLFNBQVMsQ0FBQ2EsV0FBVyxDQUFDO0VBQ3hDLElBQUlmLFVBQVUsQ0FBQ2UsV0FBVyxDQUFDLEVBQ3ZCLE9BQU9BLFdBQVc7RUFDdEIsSUFBSSxDQUFDQyxpQkFBaUIsRUFDbEJGLFVBQVUsR0FBR1osU0FBUyxDQUFDWSxVQUFVLENBQUM7RUFDdEMsT0FBTyxDQUFDQSxVQUFVLEdBQUdBLFVBQVUsQ0FBQ1gsT0FBTyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxFQUFFTyxNQUFNLEdBQUdSLFNBQVMsQ0FBQ1ksVUFBVSxHQUFHLEdBQUcsR0FBR0MsV0FBVyxDQUFDLEdBQUdBLFdBQVc7QUFDbkksQ0FBQyJ9