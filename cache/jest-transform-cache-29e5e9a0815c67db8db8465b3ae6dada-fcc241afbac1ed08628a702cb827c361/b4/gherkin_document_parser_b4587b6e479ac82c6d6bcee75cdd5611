d2c053fd5ee40eb6797ee63d58ad4b5d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGherkinScenarioLocationMap = exports.getGherkinExampleRuleMap = exports.getGherkinScenarioMap = exports.getGherkinStepMap = void 0;
const value_checker_1 = require("../../value_checker");
function getGherkinStepMap(gherkinDocument) {
  const result = {};
  gherkinDocument.feature.children.map(extractStepContainers).flat().forEach(x => x.steps.forEach(step => result[step.id] = step));
  return result;
}
exports.getGherkinStepMap = getGherkinStepMap;
function extractStepContainers(child) {
  if ((0, value_checker_1.doesHaveValue)(child.background)) {
    return [child.background];
  } else if ((0, value_checker_1.doesHaveValue)(child.rule)) {
    return child.rule.children.map(ruleChild => (0, value_checker_1.doesHaveValue)(ruleChild.background) ? ruleChild.background : ruleChild.scenario);
  }
  return [child.scenario];
}
function getGherkinScenarioMap(gherkinDocument) {
  const result = {};
  gherkinDocument.feature.children.map(child => {
    if ((0, value_checker_1.doesHaveValue)(child.rule)) {
      return child.rule.children;
    }
    return [child];
  }).flat().forEach(x => {
    if (x.scenario != null) {
      result[x.scenario.id] = x.scenario;
    }
  });
  return result;
}
exports.getGherkinScenarioMap = getGherkinScenarioMap;
function getGherkinExampleRuleMap(gherkinDocument) {
  const result = {};
  gherkinDocument.feature.children.filter(x => x.rule != null).forEach(x => x.rule.children.filter(child => (0, value_checker_1.doesHaveValue)(child.scenario)).forEach(child => result[child.scenario.id] = x.rule));
  return result;
}
exports.getGherkinExampleRuleMap = getGherkinExampleRuleMap;
function getGherkinScenarioLocationMap(gherkinDocument) {
  const locationMap = {};
  const scenarioMap = getGherkinScenarioMap(gherkinDocument);
  Object.keys(scenarioMap).forEach(id => {
    const scenario = scenarioMap[id];
    locationMap[id] = scenario.location;
    if ((0, value_checker_1.doesHaveValue)(scenario.examples)) {
      scenario.examples.forEach(x => x.tableBody.forEach(tableRow => locationMap[tableRow.id] = tableRow.location));
    }
  });
  return locationMap;
}
exports.getGherkinScenarioLocationMap = getGherkinScenarioLocationMap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ2YWx1ZV9jaGVja2VyXzEiLCJyZXF1aXJlIiwiZ2V0R2hlcmtpblN0ZXBNYXAiLCJnaGVya2luRG9jdW1lbnQiLCJyZXN1bHQiLCJmZWF0dXJlIiwiY2hpbGRyZW4iLCJtYXAiLCJleHRyYWN0U3RlcENvbnRhaW5lcnMiLCJmbGF0IiwiZm9yRWFjaCIsIngiLCJzdGVwcyIsInN0ZXAiLCJpZCIsImV4cG9ydHMiLCJjaGlsZCIsImRvZXNIYXZlVmFsdWUiLCJiYWNrZ3JvdW5kIiwicnVsZSIsInJ1bGVDaGlsZCIsInNjZW5hcmlvIiwiZ2V0R2hlcmtpblNjZW5hcmlvTWFwIiwiZ2V0R2hlcmtpbkV4YW1wbGVSdWxlTWFwIiwiZmlsdGVyIiwiZ2V0R2hlcmtpblNjZW5hcmlvTG9jYXRpb25NYXAiLCJsb2NhdGlvbk1hcCIsInNjZW5hcmlvTWFwIiwiT2JqZWN0Iiwia2V5cyIsImxvY2F0aW9uIiwiZXhhbXBsZXMiLCJ0YWJsZUJvZHkiLCJ0YWJsZVJvdyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9mb3JtYXR0ZXIvaGVscGVycy9naGVya2luX2RvY3VtZW50X3BhcnNlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBtZXNzYWdlcyBmcm9tICdAY3VjdW1iZXIvbWVzc2FnZXMnXG5pbXBvcnQgeyBkb2VzSGF2ZVZhbHVlIH0gZnJvbSAnLi4vLi4vdmFsdWVfY2hlY2tlcidcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEdoZXJraW5TdGVwTWFwKFxuICBnaGVya2luRG9jdW1lbnQ6IG1lc3NhZ2VzLkdoZXJraW5Eb2N1bWVudFxuKTogUmVjb3JkPHN0cmluZywgbWVzc2FnZXMuU3RlcD4ge1xuICBjb25zdCByZXN1bHQ6IFJlY29yZDxzdHJpbmcsIG1lc3NhZ2VzLlN0ZXA+ID0ge31cbiAgZ2hlcmtpbkRvY3VtZW50LmZlYXR1cmUuY2hpbGRyZW5cbiAgICAubWFwKGV4dHJhY3RTdGVwQ29udGFpbmVycylcbiAgICAuZmxhdCgpXG4gICAgLmZvckVhY2goKHgpID0+XG4gICAgICB4LnN0ZXBzLmZvckVhY2goKHN0ZXA6IG1lc3NhZ2VzLlN0ZXApID0+IChyZXN1bHRbc3RlcC5pZF0gPSBzdGVwKSlcbiAgICApXG4gIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gZXh0cmFjdFN0ZXBDb250YWluZXJzKFxuICBjaGlsZDogbWVzc2FnZXMuRmVhdHVyZUNoaWxkXG4pOiBBcnJheTxtZXNzYWdlcy5TY2VuYXJpbyB8IG1lc3NhZ2VzLkJhY2tncm91bmQ+IHtcbiAgaWYgKGRvZXNIYXZlVmFsdWUoY2hpbGQuYmFja2dyb3VuZCkpIHtcbiAgICByZXR1cm4gW2NoaWxkLmJhY2tncm91bmRdXG4gIH0gZWxzZSBpZiAoZG9lc0hhdmVWYWx1ZShjaGlsZC5ydWxlKSkge1xuICAgIHJldHVybiBjaGlsZC5ydWxlLmNoaWxkcmVuLm1hcCgocnVsZUNoaWxkKSA9PlxuICAgICAgZG9lc0hhdmVWYWx1ZShydWxlQ2hpbGQuYmFja2dyb3VuZClcbiAgICAgICAgPyBydWxlQ2hpbGQuYmFja2dyb3VuZFxuICAgICAgICA6IHJ1bGVDaGlsZC5zY2VuYXJpb1xuICAgIClcbiAgfVxuICByZXR1cm4gW2NoaWxkLnNjZW5hcmlvXVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0R2hlcmtpblNjZW5hcmlvTWFwKFxuICBnaGVya2luRG9jdW1lbnQ6IG1lc3NhZ2VzLkdoZXJraW5Eb2N1bWVudFxuKTogUmVjb3JkPHN0cmluZywgbWVzc2FnZXMuU2NlbmFyaW8+IHtcbiAgY29uc3QgcmVzdWx0OiBSZWNvcmQ8c3RyaW5nLCBtZXNzYWdlcy5TY2VuYXJpbz4gPSB7fVxuICBnaGVya2luRG9jdW1lbnQuZmVhdHVyZS5jaGlsZHJlblxuICAgIC5tYXAoKGNoaWxkOiBtZXNzYWdlcy5GZWF0dXJlQ2hpbGQpID0+IHtcbiAgICAgIGlmIChkb2VzSGF2ZVZhbHVlKGNoaWxkLnJ1bGUpKSB7XG4gICAgICAgIHJldHVybiBjaGlsZC5ydWxlLmNoaWxkcmVuXG4gICAgICB9XG4gICAgICByZXR1cm4gW2NoaWxkXVxuICAgIH0pXG4gICAgLmZsYXQoKVxuICAgIC5mb3JFYWNoKCh4KSA9PiB7XG4gICAgICBpZiAoeC5zY2VuYXJpbyAhPSBudWxsKSB7XG4gICAgICAgIHJlc3VsdFt4LnNjZW5hcmlvLmlkXSA9IHguc2NlbmFyaW9cbiAgICAgIH1cbiAgICB9KVxuICByZXR1cm4gcmVzdWx0XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRHaGVya2luRXhhbXBsZVJ1bGVNYXAoXG4gIGdoZXJraW5Eb2N1bWVudDogbWVzc2FnZXMuR2hlcmtpbkRvY3VtZW50XG4pOiBSZWNvcmQ8c3RyaW5nLCBtZXNzYWdlcy5SdWxlPiB7XG4gIGNvbnN0IHJlc3VsdDogUmVjb3JkPHN0cmluZywgbWVzc2FnZXMuUnVsZT4gPSB7fVxuICBnaGVya2luRG9jdW1lbnQuZmVhdHVyZS5jaGlsZHJlblxuICAgIC5maWx0ZXIoKHgpID0+IHgucnVsZSAhPSBudWxsKVxuICAgIC5mb3JFYWNoKCh4KSA9PlxuICAgICAgeC5ydWxlLmNoaWxkcmVuXG4gICAgICAgIC5maWx0ZXIoKGNoaWxkKSA9PiBkb2VzSGF2ZVZhbHVlKGNoaWxkLnNjZW5hcmlvKSlcbiAgICAgICAgLmZvckVhY2goKGNoaWxkKSA9PiAocmVzdWx0W2NoaWxkLnNjZW5hcmlvLmlkXSA9IHgucnVsZSkpXG4gICAgKVxuICByZXR1cm4gcmVzdWx0XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRHaGVya2luU2NlbmFyaW9Mb2NhdGlvbk1hcChcbiAgZ2hlcmtpbkRvY3VtZW50OiBtZXNzYWdlcy5HaGVya2luRG9jdW1lbnRcbik6IFJlY29yZDxzdHJpbmcsIG1lc3NhZ2VzLkxvY2F0aW9uPiB7XG4gIGNvbnN0IGxvY2F0aW9uTWFwOiBSZWNvcmQ8c3RyaW5nLCBtZXNzYWdlcy5Mb2NhdGlvbj4gPSB7fVxuICBjb25zdCBzY2VuYXJpb01hcDogUmVjb3JkPHN0cmluZywgbWVzc2FnZXMuU2NlbmFyaW8+ID1cbiAgICBnZXRHaGVya2luU2NlbmFyaW9NYXAoZ2hlcmtpbkRvY3VtZW50KVxuICBPYmplY3Qua2V5cyhzY2VuYXJpb01hcCkuZm9yRWFjaCgoaWQpID0+IHtcbiAgICBjb25zdCBzY2VuYXJpbyA9IHNjZW5hcmlvTWFwW2lkXVxuICAgIGxvY2F0aW9uTWFwW2lkXSA9IHNjZW5hcmlvLmxvY2F0aW9uXG4gICAgaWYgKGRvZXNIYXZlVmFsdWUoc2NlbmFyaW8uZXhhbXBsZXMpKSB7XG4gICAgICBzY2VuYXJpby5leGFtcGxlcy5mb3JFYWNoKCh4KSA9PlxuICAgICAgICB4LnRhYmxlQm9keS5mb3JFYWNoKFxuICAgICAgICAgICh0YWJsZVJvdykgPT4gKGxvY2F0aW9uTWFwW3RhYmxlUm93LmlkXSA9IHRhYmxlUm93LmxvY2F0aW9uKVxuICAgICAgICApXG4gICAgICApXG4gICAgfVxuICB9KVxuICByZXR1cm4gbG9jYXRpb25NYXBcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsTUFBQUEsZUFBQSxHQUFBQyxPQUFBO0FBRUEsU0FBZ0JDLGlCQUFpQkEsQ0FDL0JDLGVBQXlDO0VBRXpDLE1BQU1DLE1BQU0sR0FBa0MsRUFBRTtFQUNoREQsZUFBZSxDQUFDRSxPQUFPLENBQUNDLFFBQVEsQ0FDN0JDLEdBQUcsQ0FBQ0MscUJBQXFCLENBQUMsQ0FDMUJDLElBQUksRUFBRSxDQUNOQyxPQUFPLENBQUVDLENBQUMsSUFDVEEsQ0FBQyxDQUFDQyxLQUFLLENBQUNGLE9BQU8sQ0FBRUcsSUFBbUIsSUFBTVQsTUFBTSxDQUFDUyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxHQUFHRCxJQUFLLENBQUMsQ0FDbkU7RUFDSCxPQUFPVCxNQUFNO0FBQ2Y7QUFYQVcsT0FBQSxDQUFBYixpQkFBQSxHQUFBQSxpQkFBQTtBQWFBLFNBQVNNLHFCQUFxQkEsQ0FDNUJRLEtBQTRCO0VBRTVCLElBQUksSUFBQWhCLGVBQUEsQ0FBQWlCLGFBQWEsRUFBQ0QsS0FBSyxDQUFDRSxVQUFVLENBQUMsRUFBRTtJQUNuQyxPQUFPLENBQUNGLEtBQUssQ0FBQ0UsVUFBVSxD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