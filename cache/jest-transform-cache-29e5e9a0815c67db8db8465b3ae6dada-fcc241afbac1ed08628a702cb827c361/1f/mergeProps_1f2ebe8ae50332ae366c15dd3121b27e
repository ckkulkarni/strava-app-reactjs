188f3080cf7365ce49c3c88099cb1d0c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.defaultMergeProps = defaultMergeProps;
exports.wrapMergePropsFunc = wrapMergePropsFunc;
exports.mergePropsFactory = mergePropsFactory;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _verifyPlainObject = _interopRequireDefault(require("../utils/verifyPlainObject"));
var _invalidArgFactory = require("./invalidArgFactory");
function defaultMergeProps(stateProps, dispatchProps, ownProps) {
  // @ts-ignore
  return (0, _extends2.default)({}, ownProps, stateProps, dispatchProps);
}
function wrapMergePropsFunc(mergeProps) {
  return function initMergePropsProxy(dispatch, {
    displayName,
    areMergedPropsEqual
  }) {
    let hasRunOnce = false;
    let mergedProps;
    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
      const nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      if (hasRunOnce) {
        if (!areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
      } else {
        hasRunOnce = true;
        mergedProps = nextMergedProps;
        if (process.env.NODE_ENV !== 'production') (0, _verifyPlainObject.default)(mergedProps, displayName, 'mergeProps');
      }
      return mergedProps;
    };
  };
}
function mergePropsFactory(mergeProps) {
  return !mergeProps ? () => defaultMergeProps : typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : (0, _invalidArgFactory.createInvalidArgFactory)(mergeProps, 'mergeProps');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdE1lcmdlUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJtZXJnZVByb3BzRmFjdG9yeSIsIl9leHRlbmRzMiIsIl92ZXJpZnlQbGFpbk9iamVjdCIsIl9pbnZhbGlkQXJnRmFjdG9yeSIsInN0YXRlUHJvcHMiLCJkaXNwYXRjaFByb3BzIiwib3duUHJvcHMiLCJkZWZhdWx0IiwibWVyZ2VQcm9wcyIsImluaXRNZXJnZVByb3BzUHJveHkiLCJkaXNwYXRjaCIsImRpc3BsYXlOYW1lIiwiYXJlTWVyZ2VkUHJvcHNFcXVhbCIsImhhc1J1bk9uY2UiLCJtZXJnZWRQcm9wcyIsIm1lcmdlUHJvcHNQcm94eSIsIm5leHRNZXJnZWRQcm9wcyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImNyZWF0ZUludmFsaWRBcmdGYWN0b3J5Il0sInNvdXJjZXMiOlsibWVyZ2VQcm9wcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHRNZXJnZVByb3BzID0gZGVmYXVsdE1lcmdlUHJvcHM7XG5leHBvcnRzLndyYXBNZXJnZVByb3BzRnVuYyA9IHdyYXBNZXJnZVByb3BzRnVuYztcbmV4cG9ydHMubWVyZ2VQcm9wc0ZhY3RvcnkgPSBtZXJnZVByb3BzRmFjdG9yeTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfdmVyaWZ5UGxhaW5PYmplY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdFwiKSk7XG5cbnZhciBfaW52YWxpZEFyZ0ZhY3RvcnkgPSByZXF1aXJlKFwiLi9pbnZhbGlkQXJnRmFjdG9yeVwiKTtcblxuZnVuY3Rpb24gZGVmYXVsdE1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgLy8gQHRzLWlnbm9yZVxuICByZXR1cm4gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgb3duUHJvcHMsIHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMpO1xufVxuXG5mdW5jdGlvbiB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdE1lcmdlUHJvcHNQcm94eShkaXNwYXRjaCwge1xuICAgIGRpc3BsYXlOYW1lLFxuICAgIGFyZU1lcmdlZFByb3BzRXF1YWxcbiAgfSkge1xuICAgIGxldCBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgbGV0IG1lcmdlZFByb3BzO1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZVByb3BzUHJveHkoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgICAgIGNvbnN0IG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgKDAsIF92ZXJpZnlQbGFpbk9iamVjdC5kZWZhdWx0KShtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzRmFjdG9yeShtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/ICgpID0+IGRlZmF1bHRNZXJnZVByb3BzIDogdHlwZW9mIG1lcmdlUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiAoMCwgX2ludmFsaWRBcmdGYWN0b3J5LmNyZWF0ZUludmFsaWRBcmdGYWN0b3J5KShtZXJnZVByb3BzLCAnbWVyZ2VQcm9wcycpO1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxzQkFBc0IsR0FBR0MsT0FBTyxDQUFDLDhDQUE4QyxDQUFDO0FBRXBGQyxPQUFPLENBQUNDLFVBQVUsR0FBRyxJQUFJO0FBQ3pCRCxPQUFPLENBQUNFLGlCQUFpQixHQUFHQSxpQkFBaUI7QUFDN0NGLE9BQU8sQ0FBQ0csa0JBQWtCLEdBQUdBLGtCQUFrQjtBQUMvQ0gsT0FBTyxDQUFDSSxpQkFBaUIsR0FBR0EsaUJBQWlCO0FBRTdDLElBQUlDLFNBQVMsR0FBR1Asc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBRWpGLElBQUlPLGtCQUFrQixHQUFHUixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLDRCQUE0QixDQUFDLENBQUM7QUFFdEYsSUFBSVEsa0JBQWtCLEdBQUdSLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztBQUV2RCxTQUFTRyxpQkFBaUJBLENBQUNNLFVBQVUsRUFBRUMsYUFBYSxFQUFFQyxRQUFRLEVBQUU7RUFDOUQ7RUFDQSxPQUFPLENBQUMsQ0FBQyxFQUFFTCxTQUFTLENBQUNNLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRUQsUUFBUSxFQUFFRixVQUFVLEVBQUVDLGFBQWEsQ0FBQztBQUN4RTtBQUVBLFNBQVNOLGtCQUFrQkEsQ0FBQ1MsVUFBVSxFQUFFO0VBQ3RDLE9BQU8sU0FBU0MsbUJBQW1CQSxDQUFDQyxRQUFRLEVBQUU7SUFDNUNDLFdBQVc7SUFDWEM7RUFDRixDQUFDLEVBQUU7SUFDRCxJQUFJQyxVQUFVLEdBQUcsS0FBSztJQUN0QixJQUFJQyxXQUFXO0lBQ2YsT0FBTyxTQUFTQyxlQUFlQSxDQUFDWCxVQUFVLEVBQUVDLGFBQWEsRUFBRUMsUUFBUSxFQUFFO01BQ25FLE1BQU1VLGVBQWUsR0FBR1IsVUFBVSxDQUFDSixVQUFVLEVBQUVDLGFBQWEsRUFBRUMsUUFBUSxDQUFDO01BRXZFLElBQUlPLFVBQVUsRUFBRTtRQUNkLElBQUksQ0FBQ0QsbUJBQW1CLENBQUNJLGVBQWUsRUFBRUYsV0FBVyxDQUFDLEVBQUVBLFdBQVcsR0FBR0UsZUFBZTtNQUN2RixDQUFDLE1BQU07UUFDTEgsVUFBVSxHQUFHLElBQUk7UUFDakJDLFdBQVcsR0FBR0UsZUFBZTtRQUM3QixJQUFJQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsUUFBUSxLQUFLLFlBQVksRUFBRSxDQUFDLENBQUMsRUFBRWpCLGtCQUFrQixDQUFDSyxPQUFPLEVBQUVPLFdBQVcsRUFBRUgsV0FBVyxFQUFFLFlBQVksQ0FBQztNQUNwSDtNQUVBLE9BQU9HLFdBQVc7SUFDcEIsQ0FBQztFQUNILENBQUM7QUFDSDtBQUVBLFNBQVNkLGlCQUFpQkEsQ0FBQ1EsVUFBVSxFQUFFO0VBQ3JDLE9BQU8sQ0FBQ0EsVUFBVSxHQUFHLE1BQU1WLGlCQUFpQixHQUFHLE9BQU9VLFVBQVUsS0FBSyxVQUFVLEdBQUdULGtCQUFrQixDQUFDUyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRUwsa0JBQWtCLENBQUNpQix1QkFBdUIsRUFBRVosVUFBVSxFQUFFLFlBQVksQ0FBQztBQUM5TCJ9