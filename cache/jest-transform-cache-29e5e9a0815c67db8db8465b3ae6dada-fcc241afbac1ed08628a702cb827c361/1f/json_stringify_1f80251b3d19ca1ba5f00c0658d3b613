31d01c5c9546cc0b1f589a2218c3b38d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = jsonStringify;
var _repeatString = _interopRequireDefault(require("repeat-string"));
var _type = _interopRequireDefault(require("./type"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function jsonStringify(object, depth) {
  depth = depth || 1;
  switch ((0, _type.default)(object)) {
    case 'boolean':
    case 'regexp':
    case 'symbol':
      return object.toString();
    case 'null':
    case 'undefined':
      return '[' + object + ']';
    case 'array':
    case 'object':
      return jsonStringifyProperties(object, depth);
    case 'number':
      if (object === 0 && 1 / object === -Infinity) {
        return '-0';
      } else {
        return object.toString();
      }
    case 'date':
      return jsonStringifyDate(object);
    case 'buffer':
      return jsonStringifyBuffer(object, depth);
    default:
      if (object === '[Function]' || object === '[Circular]') {
        return object;
      } else {
        return JSON.stringify(object); // string
      }
  }
}

function jsonStringifyBuffer(object, depth) {
  const {
    data
  } = object.toJSON();
  return '[Buffer: ' + jsonStringify(data, depth) + ']';
}
function jsonStringifyDate(object) {
  let str;
  if (isNaN(object.getTime())) {
    str = object.toString();
  } else {
    str = object.toISOString();
  }
  return '[Date: ' + str + ']';
}
function jsonStringifyProperties(object, depth) {
  const space = 2 * depth;
  const start = (0, _type.default)(object) === 'array' ? '[' : '{';
  const end = (0, _type.default)(object) === 'array' ? ']' : '}';
  const length = typeof object.length === 'number' ? object.length : Object.keys(object).length;
  let addedProperties = 0;
  let str = start;
  for (const prop in object) {
    if (Object.prototype.hasOwnProperty.call(object, prop)) {
      addedProperties += 1;
      str += '\n' + (0, _repeatString.default)(' ', space) + ((0, _type.default)(object) === 'array' ? '' : '"' + prop + '": ') + jsonStringify(object[prop], depth + 1) + (addedProperties === length ? '' : ',');
    }
  }
  if (str.length !== 1) {
    str += '\n' + (0, _repeatString.default)(' ', space - 2);
  }
  return str + end;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJqc29uU3RyaW5naWZ5IiwiX3JlcGVhdFN0cmluZyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3R5cGUiLCJvYmoiLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwiZGVwdGgiLCJ0b1N0cmluZyIsImpzb25TdHJpbmdpZnlQcm9wZXJ0aWVzIiwiSW5maW5pdHkiLCJqc29uU3RyaW5naWZ5RGF0ZSIsImpzb25TdHJpbmdpZnlCdWZmZXIiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInRvSlNPTiIsInN0ciIsImlzTmFOIiwiZ2V0VGltZSIsInRvSVNPU3RyaW5nIiwic3BhY2UiLCJzdGFydCIsImVuZCIsImxlbmd0aCIsImtleXMiLCJhZGRlZFByb3BlcnRpZXMiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIl0sInNvdXJjZXMiOlsianNvbl9zdHJpbmdpZnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO2V4cG9ydHMuZGVmYXVsdCA9IGpzb25TdHJpbmdpZnk7dmFyIF9yZXBlYXRTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZXBlYXQtc3RyaW5nXCIpKTtcbnZhciBfdHlwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdHlwZVwiKSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtyZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTt9XG5cbmZ1bmN0aW9uIGpzb25TdHJpbmdpZnkob2JqZWN0LCBkZXB0aCkge1xuICBkZXB0aCA9IGRlcHRoIHx8IDE7XG5cbiAgc3dpdGNoICgoMCwgX3R5cGUuZGVmYXVsdCkob2JqZWN0KSkge1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgIGNhc2UgJ3JlZ2V4cCc6XG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICAgIHJldHVybiBvYmplY3QudG9TdHJpbmcoKTtcbiAgICBjYXNlICdudWxsJzpcbiAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgcmV0dXJuICdbJyArIG9iamVjdCArICddJztcbiAgICBjYXNlICdhcnJheSc6XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHJldHVybiBqc29uU3RyaW5naWZ5UHJvcGVydGllcyhvYmplY3QsIGRlcHRoKTtcbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgaWYgKG9iamVjdCA9PT0gMCAmJiAxIC8gb2JqZWN0ID09PSAtSW5maW5pdHkpIHtcbiAgICAgICAgcmV0dXJuICctMCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gb2JqZWN0LnRvU3RyaW5nKCk7XG4gICAgICB9XG4gICAgY2FzZSAnZGF0ZSc6XG4gICAgICByZXR1cm4ganNvblN0cmluZ2lmeURhdGUob2JqZWN0KTtcbiAgICBjYXNlICdidWZmZXInOlxuICAgICAgcmV0dXJuIGpzb25TdHJpbmdpZnlCdWZmZXIob2JqZWN0LCBkZXB0aCk7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChvYmplY3QgPT09ICdbRnVuY3Rpb25dJyB8fCBvYmplY3QgPT09ICdbQ2lyY3VsYXJdJykge1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iamVjdCk7IC8vIHN0cmluZ1xuICAgICAgfX1cblxufVxuXG5mdW5jdGlvbiBqc29uU3RyaW5naWZ5QnVmZmVyKG9iamVjdCwgZGVwdGgpIHtcbiAgY29uc3QgeyBkYXRhIH0gPSBvYmplY3QudG9KU09OKCk7XG4gIHJldHVybiAnW0J1ZmZlcjogJyArIGpzb25TdHJpbmdpZnkoZGF0YSwgZGVwdGgpICsgJ10nO1xufVxuXG5mdW5jdGlvbiBqc29uU3RyaW5naWZ5RGF0ZShvYmplY3QpIHtcbiAgbGV0IHN0cjtcbiAgaWYgKGlzTmFOKG9iamVjdC5nZXRUaW1lKCkpKSB7XG4gICAgc3RyID0gb2JqZWN0LnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgc3RyID0gb2JqZWN0LnRvSVNPU3RyaW5nKCk7XG4gIH1cbiAgcmV0dXJuICdbRGF0ZTogJyArIHN0ciArICddJztcbn1cblxuZnVuY3Rpb24ganNvblN0cmluZ2lmeVByb3BlcnRpZXMob2JqZWN0LCBkZXB0aCkge1xuICBjb25zdCBzcGFjZSA9IDIgKiBkZXB0aDtcbiAgY29uc3Qgc3RhcnQgPSAoMCwgX3R5cGUuZGVmYXVsdCkob2JqZWN0KSA9PT0gJ2FycmF5JyA/ICdbJyA6ICd7JztcbiAgY29uc3QgZW5kID0gKDAsIF90eXBlLmRlZmF1bHQpKG9iamVjdCkgPT09ICdhcnJheScgPyAnXScgOiAnfSc7XG4gIGNvbnN0IGxlbmd0aCA9XG4gIHR5cGVvZiBvYmplY3QubGVuZ3RoID09PSAnbnVtYmVyJyA/XG4gIG9iamVjdC5sZW5ndGggOlxuICBPYmplY3Qua2V5cyhvYmplY3QpLmxlbmd0aDtcbiAgbGV0IGFkZGVkUHJvcGVydGllcyA9IDA7XG4gIGxldCBzdHIgPSBzdGFydDtcblxuICBmb3IgKGNvbnN0IHByb3AgaW4gb2JqZWN0KSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3ApKSB7XG4gICAgICBhZGRlZFByb3BlcnRpZXMgKz0gMTtcbiAgICAgIHN0ciArPVxuICAgICAgJ1xcbicgK1xuICAgICAgKDAsIF9yZXBlYXRTdHJpbmcuZGVmYXVsdCkoJyAnLCBzcGFjZSkgKyAoXG4gICAgICAoMCwgX3R5cGUuZGVmYXVsdCkob2JqZWN0KSA9PT0gJ2FycmF5JyA/ICcnIDogJ1wiJyArIHByb3AgKyAnXCI6ICcpICtcbiAgICAgIGpzb25TdHJpbmdpZnkob2JqZWN0W3Byb3BdLCBkZXB0aCArIDEpICsgKFxuICAgICAgYWRkZWRQcm9wZXJ0aWVzID09PSBsZW5ndGggPyAnJyA6ICcsJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0ci5sZW5ndGggIT09IDEpIHtcbiAgICBzdHIgKz0gJ1xcbicgKyAoMCwgX3JlcGVhdFN0cmluZy5kZWZhdWx0KSgnICcsIHNwYWNlIC0gMik7XG4gIH1cblxuICByZXR1cm4gc3RyICsgZW5kO1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFBQ0EsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBQUNELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHQyxhQUFhO0FBQUMsSUFBSUMsYUFBYSxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQy9LLElBQUlDLEtBQUssR0FBR0Ysc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUFDLFNBQVNELHNCQUFzQkEsQ0FBQ0csR0FBRyxFQUFFO0VBQUMsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVUsR0FBR0QsR0FBRyxHQUFHO0lBQUVOLE9BQU8sRUFBRU07RUFBSSxDQUFDO0FBQUM7QUFFbEosU0FBU0wsYUFBYUEsQ0FBQ08sTUFBTSxFQUFFQyxLQUFLLEVBQUU7RUFDcENBLEtBQUssR0FBR0EsS0FBSyxJQUFJLENBQUM7RUFFbEIsUUFBUSxDQUFDLENBQUMsRUFBRUosS0FBSyxDQUFDTCxPQUFPLEVBQUVRLE1BQU0sQ0FBQztJQUNoQyxLQUFLLFNBQVM7SUFDZCxLQUFLLFFBQVE7SUFDYixLQUFLLFFBQVE7TUFDWCxPQUFPQSxNQUFNLENBQUNFLFFBQVEsRUFBRTtJQUMxQixLQUFLLE1BQU07SUFDWCxLQUFLLFdBQVc7TUFDZCxPQUFPLEdBQUcsR0FBR0YsTUFBTSxHQUFHLEdBQUc7SUFDM0IsS0FBSyxPQUFPO0lBQ1osS0FBSyxR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