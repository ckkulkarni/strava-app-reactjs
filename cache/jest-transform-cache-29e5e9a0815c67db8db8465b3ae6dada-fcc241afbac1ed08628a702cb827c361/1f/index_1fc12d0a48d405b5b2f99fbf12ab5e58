0f7d9663c4aa566a15ad6b65513289c5
'use strict';

var forEach = require('for-each');
var availableTypedArrays = require('available-typed-arrays');
var callBound = require('call-bind/callBound');
var $toString = callBound('Object.prototype.toString');
var hasToStringTag = require('has-tostringtag/shams')();
var gOPD = require('gopd');
var g = typeof globalThis === 'undefined' ? global : globalThis;
var typedArrays = availableTypedArrays();
var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
  for (var i = 0; i < array.length; i += 1) {
    if (array[i] === value) {
      return i;
    }
  }
  return -1;
};
var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
  forEach(typedArrays, function (typedArray) {
    var arr = new g[typedArray]();
    if (Symbol.toStringTag in arr) {
      var proto = getPrototypeOf(arr);
      var descriptor = gOPD(proto, Symbol.toStringTag);
      if (!descriptor) {
        var superProto = getPrototypeOf(proto);
        descriptor = gOPD(superProto, Symbol.toStringTag);
      }
      toStrTags[typedArray] = descriptor.get;
    }
  });
}
var tryTypedArrays = function tryAllTypedArrays(value) {
  var anyTrue = false;
  forEach(toStrTags, function (getter, typedArray) {
    if (!anyTrue) {
      try {
        anyTrue = getter.call(value) === typedArray;
      } catch (e) {/**/}
    }
  });
  return anyTrue;
};
module.exports = function isTypedArray(value) {
  if (!value || typeof value !== 'object') {
    return false;
  }
  if (!hasToStringTag || !(Symbol.toStringTag in value)) {
    var tag = $slice($toString(value), 8, -1);
    return $indexOf(typedArrays, tag) > -1;
  }
  if (!gOPD) {
    return false;
  }
  return tryTypedArrays(value);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmb3JFYWNoIiwicmVxdWlyZSIsImF2YWlsYWJsZVR5cGVkQXJyYXlzIiwiY2FsbEJvdW5kIiwiJHRvU3RyaW5nIiwiaGFzVG9TdHJpbmdUYWciLCJnT1BEIiwiZyIsImdsb2JhbFRoaXMiLCJnbG9iYWwiLCJ0eXBlZEFycmF5cyIsIiRpbmRleE9mIiwiaW5kZXhPZiIsImFycmF5IiwidmFsdWUiLCJpIiwibGVuZ3RoIiwiJHNsaWNlIiwidG9TdHJUYWdzIiwiZ2V0UHJvdG90eXBlT2YiLCJPYmplY3QiLCJ0eXBlZEFycmF5IiwiYXJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJwcm90byIsImRlc2NyaXB0b3IiLCJzdXBlclByb3RvIiwiZ2V0IiwidHJ5VHlwZWRBcnJheXMiLCJ0cnlBbGxUeXBlZEFycmF5cyIsImFueVRydWUiLCJnZXR0ZXIiLCJjYWxsIiwiZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpc1R5cGVkQXJyYXkiLCJ0YWciXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnZm9yLWVhY2gnKTtcbnZhciBhdmFpbGFibGVUeXBlZEFycmF5cyA9IHJlcXVpcmUoJ2F2YWlsYWJsZS10eXBlZC1hcnJheXMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG5cbnZhciAkdG9TdHJpbmcgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcnKTtcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJ2hhcy10b3N0cmluZ3RhZy9zaGFtcycpKCk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJ2dvcGQnKTtcblxudmFyIGcgPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiBnbG9iYWxUaGlzO1xudmFyIHR5cGVkQXJyYXlzID0gYXZhaWxhYmxlVHlwZWRBcnJheXMoKTtcblxudmFyICRpbmRleE9mID0gY2FsbEJvdW5kKCdBcnJheS5wcm90b3R5cGUuaW5kZXhPZicsIHRydWUpIHx8IGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRpZiAoYXJyYXlbaV0gPT09IHZhbHVlKSB7XG5cdFx0XHRyZXR1cm4gaTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIC0xO1xufTtcbnZhciAkc2xpY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuc2xpY2UnKTtcbnZhciB0b1N0clRhZ3MgPSB7fTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjsgLy8gcmVxdWlyZSgnZ2V0cHJvdG90eXBlb2YnKTtcbmlmIChoYXNUb1N0cmluZ1RhZyAmJiBnT1BEICYmIGdldFByb3RvdHlwZU9mKSB7XG5cdGZvckVhY2godHlwZWRBcnJheXMsIGZ1bmN0aW9uICh0eXBlZEFycmF5KSB7XG5cdFx0dmFyIGFyciA9IG5ldyBnW3R5cGVkQXJyYXldKCk7XG5cdFx0aWYgKFN5bWJvbC50b1N0cmluZ1RhZyBpbiBhcnIpIHtcblx0XHRcdHZhciBwcm90byA9IGdldFByb3RvdHlwZU9mKGFycik7XG5cdFx0XHR2YXIgZGVzY3JpcHRvciA9IGdPUEQocHJvdG8sIFN5bWJvbC50b1N0cmluZ1RhZyk7XG5cdFx0XHRpZiAoIWRlc2NyaXB0b3IpIHtcblx0XHRcdFx0dmFyIHN1cGVyUHJvdG8gPSBnZXRQcm90b3R5cGVPZihwcm90byk7XG5cdFx0XHRcdGRlc2NyaXB0b3IgPSBnT1BEKHN1cGVyUHJvdG8sIFN5bWJvbC50b1N0cmluZ1RhZyk7XG5cdFx0XHR9XG5cdFx0XHR0b1N0clRhZ3NbdHlwZWRBcnJheV0gPSBkZXNjcmlwdG9yLmdldDtcblx0XHR9XG5cdH0pO1xufVxuXG52YXIgdHJ5VHlwZWRBcnJheXMgPSBmdW5jdGlvbiB0cnlBbGxUeXBlZEFycmF5cyh2YWx1ZSkge1xuXHR2YXIgYW55VHJ1ZSA9IGZhbHNlO1xuXHRmb3JFYWNoKHRvU3RyVGFncywgZnVuY3Rpb24gKGdldHRlciwgdHlwZWRBcnJheSkge1xuXHRcdGlmICghYW55VHJ1ZSkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0YW55VHJ1ZSA9IGdldHRlci5jYWxsKHZhbHVlKSA9PT0gdHlwZWRBcnJheTtcblx0XHRcdH0gY2F0Y2ggKGUpIHsgLyoqLyB9XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGFueVRydWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzVHlwZWRBcnJheSh2YWx1ZSkge1xuXHRpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICghaGFzVG9TdHJpbmdUYWcgfHwgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUpKSB7XG5cdFx0dmFyIHRhZyA9ICRzbGljZSgkdG9TdHJpbmcodmFsdWUpLCA4LCAtMSk7XG5cdFx0cmV0dXJuICRpbmRleE9mKHR5cGVkQXJyYXlzLCB0YWcpID4gLTE7XG5cdH1cblx0aWYgKCFnT1BEKSB7IHJldHVybiBmYWxzZTsgfVxuXHRyZXR1cm4gdHJ5VHlwZWRBcnJheXModmFsdWUpO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDakMsSUFBSUMsb0JBQW9CLEdBQUdELE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztBQUM1RCxJQUFJRSxTQUFTLEdBQUdGLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztBQUU5QyxJQUFJRyxTQUFTLEdBQUdELFNBQVMsQ0FBQywyQkFBMkIsQ0FBQztBQUN0RCxJQUFJRSxjQUFjLEdBQUdKLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFO0FBQ3ZELElBQUlLLElBQUksR0FBR0wsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUUxQixJQUFJTSxDQUFDLEdBQUcs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