{"version":3,"names":["value_checker_1","require","Formatter","constructor","options","colorFns","cwd","eventDataCollector","log","snippetBuilder","stream","supportCodeLibrary","cleanup","printAttachments","valueOrDefault","parsedArgvOptions","finished","exports","default"],"sources":["../../src/formatter/index.ts"],"sourcesContent":["import { IColorFns } from './get_color_fns'\nimport { EventDataCollector } from './helpers'\nimport StepDefinitionSnippetBuilder from './step_definition_snippet_builder'\nimport { Writable } from 'stream'\nimport { ISupportCodeLibrary } from '../support_code_library_builder/types'\nimport { EventEmitter } from 'events'\nimport { valueOrDefault } from '../value_checker'\nimport { SnippetInterface } from './step_definition_snippet_builder/snippet_syntax'\n\nexport interface FormatRerunOptions {\n  separator?: string\n}\n\nexport interface FormatOptions {\n  colorsEnabled?: boolean\n  rerun?: FormatRerunOptions\n  snippetInterface?: SnippetInterface\n  snippetSyntax?: string\n  printAttachments?: boolean\n  [customKey: string]: any\n}\n\nexport interface IPublishConfig {\n  url: string\n  token: string\n}\n\nexport type IFormatterStream = Writable\nexport type IFormatterLogFn = (buffer: string | Uint8Array) => void\nexport type IFormatterCleanupFn = () => Promise<any>\n\nexport interface IFormatterOptions {\n  colorFns: IColorFns\n  cwd: string\n  eventBroadcaster: EventEmitter\n  eventDataCollector: EventDataCollector\n  log: IFormatterLogFn\n  parsedArgvOptions: FormatOptions\n  snippetBuilder: StepDefinitionSnippetBuilder\n  stream: Writable\n  cleanup: IFormatterCleanupFn\n  supportCodeLibrary: ISupportCodeLibrary\n}\n\nexport default class Formatter {\n  protected colorFns: IColorFns\n  protected cwd: string\n  protected eventDataCollector: EventDataCollector\n  protected log: IFormatterLogFn\n  protected snippetBuilder: StepDefinitionSnippetBuilder\n  protected stream: Writable\n  protected supportCodeLibrary: ISupportCodeLibrary\n  protected printAttachments: boolean\n  private readonly cleanup: IFormatterCleanupFn\n  static readonly documentation: string\n\n  constructor(options: IFormatterOptions) {\n    this.colorFns = options.colorFns\n    this.cwd = options.cwd\n    this.eventDataCollector = options.eventDataCollector\n    this.log = options.log\n    this.snippetBuilder = options.snippetBuilder\n    this.stream = options.stream\n    this.supportCodeLibrary = options.supportCodeLibrary\n    this.cleanup = options.cleanup\n    this.printAttachments = valueOrDefault(\n      options.parsedArgvOptions.printAttachments,\n      true\n    )\n  }\n\n  async finished(): Promise<void> {\n    await this.cleanup()\n  }\n}\n"],"mappings":";;;;;AAMA,MAAAA,eAAA,GAAAC,OAAA;AAsCA,MAAqBC,SAAS;EAY5BC,YAAYC,OAA0B;IACpC,IAAI,CAACC,QAAQ,GAAGD,OAAO,CAACC,QAAQ;IAChC,IAAI,CAACC,GAAG,GAAGF,OAAO,CAACE,GAAG;IACtB,IAAI,CAACC,kBAAkB,GAAGH,OAAO,CAACG,kBAAkB;IACpD,IAAI,CAACC,GAAG,GAAGJ,OAAO,CAACI,GAAG;IACtB,IAAI,CAACC,cAAc,GAAGL,OAAO,CAACK,cAAc;IAC5C,IAAI,CAACC,MAAM,GAAGN,OAAO,CAACM,MAAM;IAC5B,IAAI,CAACC,kBAAkB,GAAGP,OAAO,CAACO,kBAAkB;IACpD,IAAI,CAACC,OAAO,GAAGR,OAAO,CAACQ,OAAO;IAC9B,IAAI,CAACC,gBAAgB,GAAG,IAAAb,eAAA,CAAAc,cAAc,EACpCV,OAAO,CAACW,iBAAiB,CAACF,gBAAgB,EAC1C,IAAI,CACL;EACH;EAEA,MAAMG,QAAQA,CAAA;IACZ,MAAM,IAAI,CAACJ,OAAO,EAAE;EACtB;;AA7BFK,OAAA,CAAAC,OAAA,GAAAhB,SAAA"}