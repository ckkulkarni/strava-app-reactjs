ba35359b9edbf2ba00adb7c066fb19d1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByDisplayValue = exports.queryAllByDisplayValue = exports.getByDisplayValue = exports.getAllByDisplayValue = exports.findByDisplayValue = exports.findAllByDisplayValue = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
const queryAllByDisplayValue = (container, value, {
  exact = true,
  collapseWhitespace,
  trim,
  normalizer
} = {}) => {
  (0, _helpers.checkContainerType)(container);
  const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
  const matchNormalizer = (0, _allUtils.makeNormalizer)({
    collapseWhitespace,
    trim,
    normalizer
  });
  return Array.from(container.querySelectorAll(`input,textarea,select`)).filter(node => {
    if (node.tagName === 'SELECT') {
      const selectedOptions = Array.from(node.options).filter(option => option.selected);
      return selectedOptions.some(optionNode => matcher((0, _allUtils.getNodeText)(optionNode), optionNode, value, matchNormalizer));
    } else {
      return matcher(node.value, node, value, matchNormalizer);
    }
  });
};
const getMultipleError = (c, value) => `Found multiple elements with the display value: ${value}.`;
const getMissingError = (c, value) => `Unable to find an element with the display value: ${value}.`;
const queryAllByDisplayValueWithSuggestions = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByDisplayValue, queryAllByDisplayValue.name, 'queryAll');
exports.queryAllByDisplayValue = queryAllByDisplayValueWithSuggestions;
const [queryByDisplayValue, getAllByDisplayValue, getByDisplayValue, findAllByDisplayValue, findByDisplayValue] = (0, _allUtils.buildQueries)(queryAllByDisplayValue, getMultipleError, getMissingError);
exports.findByDisplayValue = findByDisplayValue;
exports.findAllByDisplayValue = findAllByDisplayValue;
exports.getByDisplayValue = getByDisplayValue;
exports.getAllByDisplayValue = getAllByDisplayValue;
exports.queryByDisplayValue = queryByDisplayValue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXJ5QnlEaXNwbGF5VmFsdWUiLCJxdWVyeUFsbEJ5RGlzcGxheVZhbHVlIiwiZ2V0QnlEaXNwbGF5VmFsdWUiLCJnZXRBbGxCeURpc3BsYXlWYWx1ZSIsImZpbmRCeURpc3BsYXlWYWx1ZSIsImZpbmRBbGxCeURpc3BsYXlWYWx1ZSIsIl9xdWVyeUhlbHBlcnMiLCJyZXF1aXJlIiwiX2hlbHBlcnMiLCJfYWxsVXRpbHMiLCJjb250YWluZXIiLCJleGFjdCIsImNvbGxhcHNlV2hpdGVzcGFjZSIsInRyaW0iLCJub3JtYWxpemVyIiwiY2hlY2tDb250YWluZXJUeXBlIiwibWF0Y2hlciIsIm1hdGNoZXMiLCJmdXp6eU1hdGNoZXMiLCJtYXRjaE5vcm1hbGl6ZXIiLCJtYWtlTm9ybWFsaXplciIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmaWx0ZXIiLCJub2RlIiwidGFnTmFtZSIsInNlbGVjdGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJvcHRpb24iLCJzZWxlY3RlZCIsInNvbWUiLCJvcHRpb25Ob2RlIiwiZ2V0Tm9kZVRleHQiLCJnZXRNdWx0aXBsZUVycm9yIiwiYyIsImdldE1pc3NpbmdFcnJvciIsInF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWVXaXRoU3VnZ2VzdGlvbnMiLCJ3cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uIiwibmFtZSIsImJ1aWxkUXVlcmllcyJdLCJzb3VyY2VzIjpbImRpc3BsYXktdmFsdWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlEaXNwbGF5VmFsdWUgPSBleHBvcnRzLnF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWUgPSBleHBvcnRzLmdldEJ5RGlzcGxheVZhbHVlID0gZXhwb3J0cy5nZXRBbGxCeURpc3BsYXlWYWx1ZSA9IGV4cG9ydHMuZmluZEJ5RGlzcGxheVZhbHVlID0gZXhwb3J0cy5maW5kQWxsQnlEaXNwbGF5VmFsdWUgPSB2b2lkIDA7XG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX2FsbFV0aWxzID0gcmVxdWlyZShcIi4vYWxsLXV0aWxzXCIpO1xuY29uc3QgcXVlcnlBbGxCeURpc3BsYXlWYWx1ZSA9IChjb250YWluZXIsIHZhbHVlLCB7XG4gIGV4YWN0ID0gdHJ1ZSxcbiAgY29sbGFwc2VXaGl0ZXNwYWNlLFxuICB0cmltLFxuICBub3JtYWxpemVyXG59ID0ge30pID0+IHtcbiAgKDAsIF9oZWxwZXJzLmNoZWNrQ29udGFpbmVyVHlwZSkoY29udGFpbmVyKTtcbiAgY29uc3QgbWF0Y2hlciA9IGV4YWN0ID8gX2FsbFV0aWxzLm1hdGNoZXMgOiBfYWxsVXRpbHMuZnV6enlNYXRjaGVzO1xuICBjb25zdCBtYXRjaE5vcm1hbGl6ZXIgPSAoMCwgX2FsbFV0aWxzLm1ha2VOb3JtYWxpemVyKSh7XG4gICAgY29sbGFwc2VXaGl0ZXNwYWNlLFxuICAgIHRyaW0sXG4gICAgbm9ybWFsaXplclxuICB9KTtcbiAgcmV0dXJuIEFycmF5LmZyb20oY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoYGlucHV0LHRleHRhcmVhLHNlbGVjdGApKS5maWx0ZXIobm9kZSA9PiB7XG4gICAgaWYgKG5vZGUudGFnTmFtZSA9PT0gJ1NFTEVDVCcpIHtcbiAgICAgIGNvbnN0IHNlbGVjdGVkT3B0aW9ucyA9IEFycmF5LmZyb20obm9kZS5vcHRpb25zKS5maWx0ZXIob3B0aW9uID0+IG9wdGlvbi5zZWxlY3RlZCk7XG4gICAgICByZXR1cm4gc2VsZWN0ZWRPcHRpb25zLnNvbWUob3B0aW9uTm9kZSA9PiBtYXRjaGVyKCgwLCBfYWxsVXRpbHMuZ2V0Tm9kZVRleHQpKG9wdGlvbk5vZGUpLCBvcHRpb25Ob2RlLCB2YWx1ZSwgbWF0Y2hOb3JtYWxpemVyKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtYXRjaGVyKG5vZGUudmFsdWUsIG5vZGUsIHZhbHVlLCBtYXRjaE5vcm1hbGl6ZXIpO1xuICAgIH1cbiAgfSk7XG59O1xuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9IChjLCB2YWx1ZSkgPT4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGhlIGRpc3BsYXkgdmFsdWU6ICR7dmFsdWV9LmA7XG5jb25zdCBnZXRNaXNzaW5nRXJyb3IgPSAoYywgdmFsdWUpID0+IGBVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IHdpdGggdGhlIGRpc3BsYXkgdmFsdWU6ICR7dmFsdWV9LmA7XG5jb25zdCBxdWVyeUFsbEJ5RGlzcGxheVZhbHVlV2l0aFN1Z2dlc3Rpb25zID0gKDAsIF9xdWVyeUhlbHBlcnMud3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbikocXVlcnlBbGxCeURpc3BsYXlWYWx1ZSwgcXVlcnlBbGxCeURpc3BsYXlWYWx1ZS5uYW1lLCAncXVlcnlBbGwnKTtcbmV4cG9ydHMucXVlcnlBbGxCeURpc3BsYXlWYWx1ZSA9IHF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWVXaXRoU3VnZ2VzdGlvbnM7XG5jb25zdCBbcXVlcnlCeURpc3BsYXlWYWx1ZSwgZ2V0QWxsQnlEaXNwbGF5VmFsdWUsIGdldEJ5RGlzcGxheVZhbHVlLCBmaW5kQWxsQnlEaXNwbGF5VmFsdWUsIGZpbmRCeURpc3BsYXlWYWx1ZV0gPSAoMCwgX2FsbFV0aWxzLmJ1aWxkUXVlcmllcykocXVlcnlBbGxCeURpc3BsYXlWYWx1ZSwgZ2V0TXVsdGlwbGVFcnJvciwgZ2V0TWlzc2luZ0Vycm9yKTtcbmV4cG9ydHMuZmluZEJ5RGlzcGxheVZhbHVlID0gZmluZEJ5RGlzcGxheVZhbHVlO1xuZXhwb3J0cy5maW5kQWxsQnlEaXNwbGF5VmFsdWUgPSBmaW5kQWxsQnlEaXNwbGF5VmFsdWU7XG5leHBvcnRzLmdldEJ5RGlzcGxheVZhbHVlID0gZ2V0QnlEaXNwbGF5VmFsdWU7XG5leHBvcnRzLmdldEFsbEJ5RGlzcGxheVZhbHVlID0gZ2V0QWxsQnlEaXNwbGF5VmFsdWU7XG5leHBvcnRzLnF1ZXJ5QnlEaXNwbGF5VmFsdWUgPSBxdWVyeUJ5RGlzcGxheVZhbHVlOyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLG1CQUFtQixHQUFHRixPQUFPLENBQUNHLHNCQUFzQixHQUFHSCxPQUFPLENBQUNJLGlCQUFpQixHQUFHSixPQUFPLENBQUNLLG9CQUFvQixHQUFHTCxPQUFPLENBQUNNLGtCQUFrQixHQUFHTixPQUFPLENBQUNPLHFCQUFxQixHQUFHLEtBQUssQ0FBQztBQUM3TCxJQUFJQyxhQUFhLEdBQUdDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztBQUMvQyxJQUFJQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDcEMsSUFBSUUsU0FBUyxHQUFHRixPQUFPLENBQUMsYUFBYSxDQUFDO0FBQ3RDLE1BQU1OLHNCQUFzQixHQUFHQSxDQUFDUyxTQUFTLEVBQUVYLEtBQUssRUFBRTtFQUNoRFksS0FBSyxHQUFHLElBQUk7RUFDWkMsa0JBQWtCO0VBQ2xCQyxJQUFJO0VBQ0pDO0FBQ0YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLO0VBQ1QsQ0FBQyxDQUFDLEVBQUVOLFFBQVEsQ0FBQ08sa0JBQWtCLEVBQUVMLFNBQVMsQ0FBQztFQUMzQyxNQUFNTSxPQUFPLEdBQUdMLEtBQUssR0FBR0YsU0FBUyxDQUFDUSxPQUFPLEdBQUdSLFNBQVMsQ0FBQ1MsWUFBWTtFQUNsRSxNQUFNQyxlQUFlLEdBQUcsQ0FBQyxDQUFDLEVBQUVWLFNBQVMsQ0FBQ1csY0FBYyxFQUFFO0lBQ3BEUixrQkFBa0I7SUFDbEJDLElBQUk7SUFDSkM7RUFDRixDQUFDLENBQUM7RUFDRixPQUFPTyxLQUFLLENBQUNDLElBQUksQ0FBQ1osU0FBUyxDQUFDYSxnQkFBZ0IsQ0FBRSx1QkFBc0IsQ0FBQyxDQUFDLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxJQUFJO0lBQ3BGLElBQUlBLElBQUksQ0FBQ0MsT0FBTyxLQUFLLFFBQVEsRUFBRTtNQUM3QixNQUFNQyxlQUFlLEdBQUdOLEtBQUssQ0FBQ0MsSUFBSSxDQUFDRyxJQUFJLENBQUNHLE9BQU8sQ0FBQyxDQUFDSixNQUFNLENBQUNLLE1BQU0sSUFBSUEsTUFBTSxDQUFDQyxRQUFRLENBQUM7TUFDbEYsT0FBT0gsZUFBZSxDQUFDSSxJQUFJLENBQUNDLFVBQVUsSUFBSWhCLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRVAsU0FBUyxDQUFDd0IsV0FBVyxFQUFFRCxVQUFVLENBQUMsRUFBRUEsVUFBVSxFQUFFakMsS0FBSyxFQUFFb0IsZUFBZSxDQUFDLENBQUM7SUFDaEksQ0FBQyxNQUFNO01BQ0wsT0FBT0gsT0FBTyxDQUFDUyxJQUFJLENBQUMxQixLQUFLLEVBQUUwQixJQUFJLEVBQUUxQixLQUFLLEVBQUVvQixlQUFlLENBQUM7SUFDMUQ7RUFDRixDQUFDLENBQUM7QUFDSixDQUFDO0FBQ0QsTUFBTWUsZ0JBQWdCLEdBQUdBLENBQUNDLENBQUMsRUFBRXBDLEtBQUssS0FBTSxtREFBa0RBLEtBQU0sR0FBRTtBQUNsRyxNQUFNcUMsZUFBZSxHQUFHQSxDQUFDRCxDQUFDLEVBQUVwQyxLQUFLLEtBQU0scURBQW9EQSxLQUFNLEdBQUU7QUFDbkcsTUFBTXNDLHFDQUFxQyxHQUFHLENBQUMsQ0FBQyxFQUFFL0IsYUFBYSxDQUFDZ0MsNEJBQTRCLEVBQUVyQyxzQkFBc0IsRUFBRUEsc0JBQXNCLENBQUNzQyxJQUFJLEVBQUUsVUFBVSxDQUFDO0FBQzlKekMsT0FBTyxDQUFDRyxzQkFBc0IsR0FBR29DLHFDQUFxQztBQUN0RSxNQUFNLENBQUNyQyxtQkFBbUIsRUFBRUcsb0JBQW9CLEVBQUVELGlCQUFpQixFQUFFRyxxQkFBcUIsRUFBRUQsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRUssU0FBUyxDQUFDK0IsWUFBWSxFQUFFdkMsc0JBQXNCLEVBQUVpQyxnQkFBZ0IsRUFBRUUsZUFBZSxDQUFDO0FBQ3hNdEMsT0FBTyxDQUFDTSxrQkFBa0IsR0FBR0Esa0JBQWtCO0FBQy9DTixPQUFPLENBQUNPLHFCQUFxQixHQUFHQSxxQkFBcUI7QUFDckRQLE9BQU8sQ0FBQ0ksaUJBQWlCLEdBQUdBLGlCQUFpQjtBQUM3Q0osT0FBTyxDQUFDSyxvQkFBb0IsR0FBR0Esb0JBQW9CO0FBQ25ETCxPQUFPLENBQUNFLG1CQUFtQixHQUFHQSxtQkFBbUIifQ==