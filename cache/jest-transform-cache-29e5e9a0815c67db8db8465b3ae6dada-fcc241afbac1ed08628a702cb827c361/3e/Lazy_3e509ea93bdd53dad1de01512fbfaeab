0039b0bc3b1edd093be82528bc2a2c9e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create = create;
exports.default = void 0;
var _isSchema = _interopRequireDefault(require("./util/isSchema"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function create(builder) {
  return new Lazy(builder);
}
class Lazy {
  constructor(builder) {
    this.type = 'lazy';
    this.__isYupSchema__ = true;
    this.__inputType = void 0;
    this.__outputType = void 0;
    this._resolve = (value, options = {}) => {
      let schema = this.builder(value, options);
      if (!(0, _isSchema.default)(schema)) throw new TypeError('lazy() functions must return a valid schema');
      return schema.resolve(options);
    };
    this.builder = builder;
  }
  resolve(options) {
    return this._resolve(options.value, options);
  }
  cast(value, options) {
    return this._resolve(value, options).cast(value, options);
  }
  validate(value, options, maybeCb) {
    // @ts-expect-error missing public callback on type
    return this._resolve(value, options).validate(value, options, maybeCb);
  }
  validateSync(value, options) {
    return this._resolve(value, options).validateSync(value, options);
  }
  validateAt(path, value, options) {
    return this._resolve(value, options).validateAt(path, value, options);
  }
  validateSyncAt(path, value, options) {
    return this._resolve(value, options).validateSyncAt(path, value, options);
  }
  describe() {
    return null;
  }
  isValid(value, options) {
    return this._resolve(value, options).isValid(value, options);
  }
  isValidSync(value, options) {
    return this._resolve(value, options).isValidSync(value, options);
  }
}
var _default = Lazy;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNyZWF0ZSIsImRlZmF1bHQiLCJfaXNTY2hlbWEiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJidWlsZGVyIiwiTGF6eSIsImNvbnN0cnVjdG9yIiwidHlwZSIsIl9faXNZdXBTY2hlbWFfXyIsIl9faW5wdXRUeXBlIiwiX19vdXRwdXRUeXBlIiwiX3Jlc29sdmUiLCJvcHRpb25zIiwic2NoZW1hIiwiVHlwZUVycm9yIiwicmVzb2x2ZSIsImNhc3QiLCJ2YWxpZGF0ZSIsIm1heWJlQ2IiLCJ2YWxpZGF0ZVN5bmMiLCJ2YWxpZGF0ZUF0IiwicGF0aCIsInZhbGlkYXRlU3luY0F0IiwiZGVzY3JpYmUiLCJpc1ZhbGlkIiwiaXNWYWxpZFN5bmMiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIkxhenkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNyZWF0ZSA9IGNyZWF0ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pc1NjaGVtYSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9pc1NjaGVtYVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGNyZWF0ZShidWlsZGVyKSB7XG4gIHJldHVybiBuZXcgTGF6eShidWlsZGVyKTtcbn1cblxuY2xhc3MgTGF6eSB7XG4gIGNvbnN0cnVjdG9yKGJ1aWxkZXIpIHtcbiAgICB0aGlzLnR5cGUgPSAnbGF6eSc7XG4gICAgdGhpcy5fX2lzWXVwU2NoZW1hX18gPSB0cnVlO1xuICAgIHRoaXMuX19pbnB1dFR5cGUgPSB2b2lkIDA7XG4gICAgdGhpcy5fX291dHB1dFR5cGUgPSB2b2lkIDA7XG5cbiAgICB0aGlzLl9yZXNvbHZlID0gKHZhbHVlLCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgIGxldCBzY2hlbWEgPSB0aGlzLmJ1aWxkZXIodmFsdWUsIG9wdGlvbnMpO1xuICAgICAgaWYgKCEoMCwgX2lzU2NoZW1hLmRlZmF1bHQpKHNjaGVtYSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2xhenkoKSBmdW5jdGlvbnMgbXVzdCByZXR1cm4gYSB2YWxpZCBzY2hlbWEnKTtcbiAgICAgIHJldHVybiBzY2hlbWEucmVzb2x2ZShvcHRpb25zKTtcbiAgICB9O1xuXG4gICAgdGhpcy5idWlsZGVyID0gYnVpbGRlcjtcbiAgfVxuXG4gIHJlc29sdmUob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlKG9wdGlvbnMudmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgY2FzdCh2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlKHZhbHVlLCBvcHRpb25zKS5jYXN0KHZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHZhbGlkYXRlKHZhbHVlLCBvcHRpb25zLCBtYXliZUNiKSB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBtaXNzaW5nIHB1YmxpYyBjYWxsYmFjayBvbiB0eXBlXG4gICAgcmV0dXJuIHRoaXMuX3Jlc29sdmUodmFsdWUsIG9wdGlvbnMpLnZhbGlkYXRlKHZhbHVlLCBvcHRpb25zLCBtYXliZUNiKTtcbiAgfVxuXG4gIHZhbGlkYXRlU3luYyh2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlKHZhbHVlLCBvcHRpb25zKS52YWxpZGF0ZVN5bmModmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgdmFsaWRhdGVBdChwYXRoLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlKHZhbHVlLCBvcHRpb25zKS52YWxpZGF0ZUF0KHBhdGgsIHZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHZhbGlkYXRlU3luY0F0KHBhdGgsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc29sdmUodmFsdWUsIG9wdGlvbnMpLnZhbGlkYXRlU3luY0F0KHBhdGgsIHZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIGRlc2NyaWJlKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaXNWYWxpZCh2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlKHZhbHVlLCBvcHRpb25zKS5pc1ZhbGlkKHZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIGlzVmFsaWRTeW5jKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc29sdmUodmFsdWUsIG9wdGlvbnMpLmlzVmFsaWRTeW5jKHZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG59XG5cbnZhciBfZGVmYXVsdCA9IExhenk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxNQUFNLEdBQUdBLE1BQU07QUFDdkJGLE9BQU8sQ0FBQ0csT0FBTyxHQUFHLEtBQUssQ0FBQztBQUV4QixJQUFJQyxTQUFTLEdBQUdDLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUVsRSxTQUFTRCxzQkFBc0JBLENBQUNFLEdBQUcsRUFBRTtFQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFVLEdBQUdELEdBQUcsR0FBRztJQUFFSixPQUFPLEVBQUVJO0VBQUksQ0FBQztBQUFFO0FBRTlGLFNBQVNMLE1B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