08b9d44c7fcde149470903d82f532c72
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
const snippet_syntax_1 = require("./snippet_syntax");
const CALLBACK_NAME = 'callback';
class JavaScriptSnippetSyntax {
  constructor(snippetInterface) {
    this.snippetInterface = snippetInterface;
  }
  build({
    comment,
    generatedExpressions,
    functionName,
    stepParameterNames
  }) {
    let functionKeyword = 'function ';
    if (this.snippetInterface === snippet_syntax_1.SnippetInterface.AsyncAwait) {
      functionKeyword = 'async ' + functionKeyword;
    }
    let implementation;
    if (this.snippetInterface === snippet_syntax_1.SnippetInterface.Callback) {
      implementation = `${CALLBACK_NAME}(null, 'pending');`;
    } else if (this.snippetInterface === snippet_syntax_1.SnippetInterface.Promise) {
      implementation = "return Promise.resolve('pending');";
    } else {
      implementation = "return 'pending';";
    }
    const definitionChoices = generatedExpressions.map((generatedExpression, index) => {
      const prefix = index === 0 ? '' : '// ';
      const allParameterNames = generatedExpression.parameterNames.concat(stepParameterNames);
      if (this.snippetInterface === snippet_syntax_1.SnippetInterface.Callback) {
        allParameterNames.push(CALLBACK_NAME);
      }
      return `${prefix + functionName}('${this.escapeSpecialCharacters(generatedExpression)}', ${functionKeyword}(${allParameterNames.join(', ')}) {\n`;
    });
    return `${definitionChoices.join('')}  // ${comment}\n` + `  ${implementation}\n` + '});';
  }
  escapeSpecialCharacters(generatedExpression) {
    let source = generatedExpression.source;
    // double up any backslashes because we're in a javascript string
    source = source.replace(/\\/g, '\\\\');
    // escape any single quotes because that's our quote delimiter
    source = source.replace(/'/g, "\\'");
    return source;
  }
}
exports.default = JavaScriptSnippetSyntax;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzbmlwcGV0X3N5bnRheF8xIiwicmVxdWlyZSIsIkNBTExCQUNLX05BTUUiLCJKYXZhU2NyaXB0U25pcHBldFN5bnRheCIsImNvbnN0cnVjdG9yIiwic25pcHBldEludGVyZmFjZSIsImJ1aWxkIiwiY29tbWVudCIsImdlbmVyYXRlZEV4cHJlc3Npb25zIiwiZnVuY3Rpb25OYW1lIiwic3RlcFBhcmFtZXRlck5hbWVzIiwiZnVuY3Rpb25LZXl3b3JkIiwiU25pcHBldEludGVyZmFjZSIsIkFzeW5jQXdhaXQiLCJpbXBsZW1lbnRhdGlvbiIsIkNhbGxiYWNrIiwiUHJvbWlzZSIsImRlZmluaXRpb25DaG9pY2VzIiwibWFwIiwiZ2VuZXJhdGVkRXhwcmVzc2lvbiIsImluZGV4IiwicHJlZml4IiwiYWxsUGFyYW1ldGVyTmFtZXMiLCJwYXJhbWV0ZXJOYW1lcyIsImNvbmNhdCIsInB1c2giLCJlc2NhcGVTcGVjaWFsQ2hhcmFjdGVycyIsImpvaW4iLCJzb3VyY2UiLCJyZXBsYWNlIiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZm9ybWF0dGVyL3N0ZXBfZGVmaW5pdGlvbl9zbmlwcGV0X2J1aWxkZXIvamF2YXNjcmlwdF9zbmlwcGV0X3N5bnRheC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHZW5lcmF0ZWRFeHByZXNzaW9uIH0gZnJvbSAnQGN1Y3VtYmVyL2N1Y3VtYmVyLWV4cHJlc3Npb25zJ1xuaW1wb3J0IHtcbiAgSVNuaXBwZXRTbnl0YXgsXG4gIElTbmlwcGV0U3ludGF4QnVpbGRPcHRpb25zLFxuICBTbmlwcGV0SW50ZXJmYWNlLFxufSBmcm9tICcuL3NuaXBwZXRfc3ludGF4J1xuXG5jb25zdCBDQUxMQkFDS19OQU1FID0gJ2NhbGxiYWNrJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBKYXZhU2NyaXB0U25pcHBldFN5bnRheCBpbXBsZW1lbnRzIElTbmlwcGV0U255dGF4IHtcbiAgcHJpdmF0ZSByZWFkb25seSBzbmlwcGV0SW50ZXJmYWNlOiBTbmlwcGV0SW50ZXJmYWNlXG5cbiAgY29uc3RydWN0b3Ioc25pcHBldEludGVyZmFjZTogU25pcHBldEludGVyZmFjZSkge1xuICAgIHRoaXMuc25pcHBldEludGVyZmFjZSA9IHNuaXBwZXRJbnRlcmZhY2VcbiAgfVxuXG4gIGJ1aWxkKHtcbiAgICBjb21tZW50LFxuICAgIGdlbmVyYXRlZEV4cHJlc3Npb25zLFxuICAgIGZ1bmN0aW9uTmFtZSxcbiAgICBzdGVwUGFyYW1ldGVyTmFtZXMsXG4gIH06IElTbmlwcGV0U3ludGF4QnVpbGRPcHRpb25zKTogc3RyaW5nIHtcbiAgICBsZXQgZnVuY3Rpb25LZXl3b3JkID0gJ2Z1bmN0aW9uICdcbiAgICBpZiAodGhpcy5zbmlwcGV0SW50ZXJmYWNlID09PSBTbmlwcGV0SW50ZXJmYWNlLkFzeW5jQXdhaXQpIHtcbiAgICAgIGZ1bmN0aW9uS2V5d29yZCA9ICdhc3luYyAnICsgZnVuY3Rpb25LZXl3b3JkXG4gICAgfVxuXG4gICAgbGV0IGltcGxlbWVudGF0aW9uOiBzdHJpbmdcbiAgICBpZiAodGhpcy5zbmlwcGV0SW50ZXJmYWNlID09PSBTbmlwcGV0SW50ZXJmYWNlLkNhbGxiYWNrKSB7XG4gICAgICBpbXBsZW1lbnRhdGlvbiA9IGAke0NBTExCQUNLX05BTUV9KG51bGwsICdwZW5kaW5nJyk7YFxuICAgIH0gZWxzZSBpZiAodGhpcy5zbmlwcGV0SW50ZXJmYWNlID09PSBTbmlwcGV0SW50ZXJmYWNlLlByb21pc2UpIHtcbiAgICAgIGltcGxlbWVudGF0aW9uID0gXCJyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCdwZW5kaW5nJyk7XCJcbiAgICB9IGVsc2Uge1xuICAgICAgaW1wbGVtZW50YXRpb24gPSBcInJldHVybiAncGVuZGluZyc7XCJcbiAgICB9XG5cbiAgICBjb25zdCBkZWZpbml0aW9uQ2hvaWNlcyA9IGdlbmVyYXRlZEV4cHJlc3Npb25zLm1hcChcbiAgICAgIChnZW5lcmF0ZWRFeHByZXNzaW9uLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBwcmVmaXggPSBpbmRleCA9PT0gMCA/ICcnIDogJy8vICdcbiAgICAgICAgY29uc3QgYWxsUGFyYW1ldGVyTmFtZXMgPVxuICAgICAgICAgIGdlbmVyYXRlZEV4cHJlc3Npb24ucGFyYW1ldGVyTmFtZXMuY29uY2F0KHN0ZXBQYXJhbWV0ZXJOYW1lcylcbiAgICAgICAgaWYgKHRoaXMuc25pcHBldEludGVyZmFjZSA9PT0gU25pcHBldEludGVyZmFjZS5DYWxsYmFjaykge1xuICAgICAgICAgIGFsbFBhcmFtZXRlck5hbWVzLnB1c2goQ0FMTEJBQ0tfTkFNRSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7cHJlZml4ICsgZnVuY3Rpb25OYW1lfSgnJHt0aGlzLmVzY2FwZVNwZWNpYWxDaGFyYWN0ZXJzKFxuICAgICAgICAgIGdlbmVyYXRlZEV4cHJlc3Npb25cbiAgICAgICAgKX0nLCAke2Z1bmN0aW9uS2V5d29yZH0oJHthbGxQYXJhbWV0ZXJOYW1lcy5qb2luKCcsICcpfSkge1xcbmBcbiAgICAgIH1cbiAgICApXG5cbiAgICByZXR1cm4gKFxuICAgICAgYCR7ZGVmaW5pdGlvbkNob2ljZXMuam9pbignJyl9ICAvLyAke2NvbW1lbnR9XFxuYCArXG4gICAgICBgICAke2ltcGxlbWVudGF0aW9ufVxcbmAgK1xuICAgICAgJ30pOydcbiAgICApXG4gIH1cblxuICBwcml2YXRlIGVzY2FwZVNwZWNpYWxDaGFyYWN0ZXJzKGdlbmVyYXRlZEV4cHJlc3Npb246IEdlbmVyYXRlZEV4cHJlc3Npb24pIHtcbiAgICBsZXQgc291cmNlID0gZ2VuZXJhdGVkRXhwcmVzc2lvbi5zb3VyY2VcbiAgICAvLyBkb3VibGUgdXAgYW55IGJhY2tzbGFzaGVzIGJlY2F1c2Ugd2UncmUgaW4gYSBqYXZhc2NyaXB0IHN0cmluZ1xuICAgIHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpXG4gICAgLy8gZXNjYXBlIGFueSBzaW5nbGUgcXVvdGVzIGJlY2F1c2UgdGhhdCdzIG91ciBxdW90ZSBkZWxpbWl0ZXJcbiAgICBzb3VyY2UgPSBzb3VyY2UucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgcmV0dXJuIHNvdXJjZVxuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsTUFBQUEsZ0JBQUEsR0FBQUMsT0FBQTtBQU1BLE1BQU1DLGFBQWEsR0FBRyxVQUFVO0FBRWhDLE1BQXFCQyx1QkFBdUI7RUFHMUNDLFlBQVlDLGdCQUFrQztJQUM1QyxJQUFJLENBQUNBLGdCQUFnQixHQUFHQSxnQkFBZ0I7RUFDMUM7RUFFQUMsS0FBS0EsQ0FBQztJQUNKQyxPQUFPO0lBQ1BDLG9CQUFvQjtJQUNwQkMsWUFBWTtJQUNaQztFQUFrQixDQUNTO0lBQzNCLElBQUlDLGVBQWUsR0FBRyxXQUFXO0lBQ2pDLElBQUksSUFBSSxDQUFDTixnQkFBZ0IsS0FBS0wsZ0JBQUEsQ0FBQVksZ0JBQWdCLENBQUNDLFVBQVUsRUFBRTtNQUN6REYsZUFBZSxHQUFHLFFBQVEsR0FBR0EsZUFBZTs7SUFHOUMsSUFBSUcsY0FBc0I7SUFDMUIsSUFBSSxJQUFJLENBQUNULGdCQUFnQixLQUFLTCxnQkFBQSxDQUFBWSxnQkFBZ0IsQ0FBQ0csUUFBUSxFQUFFO01BQ3ZERCxjQUFjLEdBQUcsR0FBR1osYUFBYSxvQkFBb0I7S0FDdEQsTUFBTSxJQUFJLElBQUksQ0FBQ0csZ0JBQWdCLEtBQUtMLGdCQUFBLENBQUFZLGdCQUFnQixDQUFDSSxPQUFPLEVBQUU7TUFDN0RGLGNBQWMsR0FBRyxvQ0FBb0M7S0FDdEQsTUFBTTtNQUNMQSxjQUFjLEdBQUcsbUJBQW1COztJQUd0QyxNQUFNRyxpQkFBaUIsR0FBR1Qsb0JBQW9CLENBQUNVLEdBQUcsQ0FDaEQsQ0FBQ0MsbUJBQW1CLEVBQUVDLEtBQUssS0FBSTtNQUM3QixNQUFNQyxNQUFNLEdBQUdELEtBQUssS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUs7TUFDdkMsTUFBTUUsaUJBQWlCLEdBQ3JCSCxtQkFBbUIsQ0FBQ0ksY0FBYyxDQUFDQyxNQUFNLENBQUNkLGtCQUFrQixDQUFDO01BQy9ELElBQUksSUFBSSxDQUFDTCxnQkFBZ0IsS0FBS0wsZ0JBQUEsQ0FBQVksZ0JBQWdCLENBQUNHLFFBQVEsRUFBRTtRQUN2RE8saUJBQWlCLENBQUNHLElBQUksQ0FBQ3ZCLGFBQWEsQ0FBQzs7TUFFdkMsT0FBTyxHQUFHbUIsTUFBTSxHQUFHWixZQUFZLEtBQUssSUFBSSxDQUFDaUIsdUJBQXVCLENBQzlEUCxtQkFBbUIsQ0FDcEIsTUFBTVIsZUFBZSxJQUFJVyxpQkFBaUIsQ0FBQ0ssSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPO0lBQy9ELENBQUMsQ0FDRjtJQUVELE9BQ0UsR0FBR1YsaUJBQWlCLENBQUNVLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUXBCLE9BQU8sSUFBSSxHQUNoRCxLQUFLTyxjQUFjLElBQUksR0FDdkIsS0FBSztFQUVUO0VBRVFZLHVCQUF1QkEsQ0FBQ1AsbUJBQXdDO0lBQ3RFLElBQUlTLE1BQU0sR0FBR1QsbUJBQW1CLENBQUNTLE1BQU07SUFDdkM7SUFDQUEsTUFBTSxHQUFHQSxNQUFNLENBQUNDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDO0lBQ3RDO0lBQ0FELE1BQU0sR0FBR0EsTUFBTSxDQUFDQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztJQUNwQyxPQUFPRCxNQUFNO0VBQ2Y7O0FBdkRGRSxPQUFBLENBQUFDLE9BQUEsR0FBQTVCLHVCQUFBIn0=