77bb48ec5a9bd390f3aed79dc43f95b1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _has = _interopRequireDefault(require("lodash/has"));
var _isSchema = _interopRequireDefault(require("./util/isSchema"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
class Condition {
  constructor(refs, options) {
    this.fn = void 0;
    this.refs = refs;
    this.refs = refs;
    if (typeof options === 'function') {
      this.fn = options;
      return;
    }
    if (!(0, _has.default)(options, 'is')) throw new TypeError('`is:` is required for `when()` conditions');
    if (!options.then && !options.otherwise) throw new TypeError('either `then:` or `otherwise:` is required for `when()` conditions');
    let {
      is,
      then,
      otherwise
    } = options;
    let check = typeof is === 'function' ? is : (...values) => values.every(value => value === is);
    this.fn = function (...args) {
      let options = args.pop();
      let schema = args.pop();
      let branch = check(...args) ? then : otherwise;
      if (!branch) return undefined;
      if (typeof branch === 'function') return branch(schema);
      return schema.concat(branch.resolve(options));
    };
  }
  resolve(base, options) {
    let values = this.refs.map(ref => ref.getValue(options == null ? void 0 : options.value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context));
    let schema = this.fn.apply(base, values.concat(base, options));
    if (schema === undefined || schema === base) return base;
    if (!(0, _isSchema.default)(schema)) throw new TypeError('conditions must return a schema object');
    return schema.resolve(options);
  }
}
var _default = Condition;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfaGFzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfaXNTY2hlbWEiLCJvYmoiLCJfX2VzTW9kdWxlIiwiQ29uZGl0aW9uIiwiY29uc3RydWN0b3IiLCJyZWZzIiwib3B0aW9ucyIsImZuIiwiVHlwZUVycm9yIiwidGhlbiIsIm90aGVyd2lzZSIsImlzIiwiY2hlY2siLCJ2YWx1ZXMiLCJldmVyeSIsImFyZ3MiLCJwb3AiLCJzY2hlbWEiLCJicmFuY2giLCJ1bmRlZmluZWQiLCJjb25jYXQiLCJyZXNvbHZlIiwiYmFzZSIsIm1hcCIsInJlZiIsImdldFZhbHVlIiwicGFyZW50IiwiY29udGV4dCIsImFwcGx5IiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJDb25kaXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfaGFzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL2hhc1wiKSk7XG5cbnZhciBfaXNTY2hlbWEgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvaXNTY2hlbWFcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jbGFzcyBDb25kaXRpb24ge1xuICBjb25zdHJ1Y3RvcihyZWZzLCBvcHRpb25zKSB7XG4gICAgdGhpcy5mbiA9IHZvaWQgMDtcbiAgICB0aGlzLnJlZnMgPSByZWZzO1xuICAgIHRoaXMucmVmcyA9IHJlZnM7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuZm4gPSBvcHRpb25zO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghKDAsIF9oYXMuZGVmYXVsdCkob3B0aW9ucywgJ2lzJykpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BpczpgIGlzIHJlcXVpcmVkIGZvciBgd2hlbigpYCBjb25kaXRpb25zJyk7XG4gICAgaWYgKCFvcHRpb25zLnRoZW4gJiYgIW9wdGlvbnMub3RoZXJ3aXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdlaXRoZXIgYHRoZW46YCBvciBgb3RoZXJ3aXNlOmAgaXMgcmVxdWlyZWQgZm9yIGB3aGVuKClgIGNvbmRpdGlvbnMnKTtcbiAgICBsZXQge1xuICAgICAgaXMsXG4gICAgICB0aGVuLFxuICAgICAgb3RoZXJ3aXNlXG4gICAgfSA9IG9wdGlvbnM7XG4gICAgbGV0IGNoZWNrID0gdHlwZW9mIGlzID09PSAnZnVuY3Rpb24nID8gaXMgOiAoLi4udmFsdWVzKSA9PiB2YWx1ZXMuZXZlcnkodmFsdWUgPT4gdmFsdWUgPT09IGlzKTtcblxuICAgIHRoaXMuZm4gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgbGV0IG9wdGlvbnMgPSBhcmdzLnBvcCgpO1xuICAgICAgbGV0IHNjaGVtYSA9IGFyZ3MucG9wKCk7XG4gICAgICBsZXQgYnJhbmNoID0gY2hlY2soLi4uYXJncykgPyB0aGVuIDogb3RoZXJ3aXNlO1xuICAgICAgaWYgKCFicmFuY2gpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICBpZiAodHlwZW9mIGJyYW5jaCA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGJyYW5jaChzY2hlbWEpO1xuICAgICAgcmV0dXJuIHNjaGVtYS5jb25jYXQoYnJhbmNoLnJlc29sdmUob3B0aW9ucykpO1xuICAgIH07XG4gIH1cblxuICByZXNvbHZlKGJhc2UsIG9wdGlvbnMpIHtcbiAgICBsZXQgdmFsdWVzID0gdGhpcy5yZWZzLm1hcChyZWYgPT4gcmVmLmdldFZhbHVlKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMudmFsdWUsIG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMucGFyZW50LCBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmNvbnRleHQpKTtcbiAgICBsZXQgc2NoZW1hID0gdGhpcy5mbi5hcHBseShiYXNlLCB2YWx1ZXMuY29uY2F0KGJhc2UsIG9wdGlvbnMpKTtcbiAgICBpZiAoc2NoZW1hID09PSB1bmRlZmluZWQgfHwgc2NoZW1hID09PSBiYXNlKSByZXR1cm4gYmFzZTtcbiAgICBpZiAoISgwLCBfaXNTY2hlbWEuZGVmYXVsdCkoc2NoZW1hKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignY29uZGl0aW9ucyBtdXN0IHJldHVybiBhIHNjaGVtYSBvYmplY3QnKTtcbiAgICByZXR1cm4gc2NoZW1hLnJlc29sdmUob3B0aW9ucyk7XG4gIH1cblxufVxuXG52YXIgX2RlZmF1bHQgPSBDb25kaXRpb247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBRXhCLElBQUlDLElBQUksR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUV4RCxJQUFJQyxTQUFTLEdBQUdGLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUVsRSxTQUFTRCxzQkFBc0JBLENBQUNHLEdBQUcsRUFBRTtFQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFVLEdBQUdELEdBQUcsR0FBRztJQUFFTCxPQUFPLEVBQUVLO0VBQUksQ0FBQztBQUFFO0FBRTlGLE1BQU1F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