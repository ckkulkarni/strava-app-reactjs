8ab9a72657c2955f605016b08745a012
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolvePaths = void 0;
const util_1 = require("util");
const glob_1 = __importDefault(require("glob"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("mz/fs"));
async function resolvePaths(logger, cwd, sources, support = {
  requireModules: [],
  requirePaths: [],
  importPaths: []
}) {
  const unexpandedFeaturePaths = await getUnexpandedFeaturePaths(cwd, sources.paths);
  const featurePaths = await expandFeaturePaths(cwd, unexpandedFeaturePaths);
  logger.debug('Found feature files based on configuration:', featurePaths);
  const {
    requirePaths,
    importPaths
  } = await deriveSupportPaths(cwd, featurePaths, support.requirePaths, support.importPaths);
  logger.debug('Found support files to load via `require` based on configuration:', requirePaths);
  logger.debug('Found support files to load via `import` based on configuration:', importPaths);
  return {
    unexpandedFeaturePaths,
    featurePaths,
    requirePaths,
    importPaths
  };
}
exports.resolvePaths = resolvePaths;
async function expandPaths(cwd, unexpandedPaths, defaultExtension) {
  const expandedPaths = await Promise.all(unexpandedPaths.map(async unexpandedPath => {
    const matches = await (0, util_1.promisify)(glob_1.default)(unexpandedPath, {
      absolute: true,
      cwd
    });
    const expanded = await Promise.all(matches.map(async match => {
      if (path_1.default.extname(match) === '') {
        return await (0, util_1.promisify)(glob_1.default)(`${match}/**/*${defaultExtension}`);
      }
      return [match];
    }));
    return expanded.flat();
  }));
  const normalized = expandedPaths.flat().map(x => path_1.default.normalize(x));
  return [...new Set(normalized)];
}
async function getUnexpandedFeaturePaths(cwd, args) {
  if (args.length > 0) {
    const nestedFeaturePaths = await Promise.all(args.map(async arg => {
      const filename = path_1.default.basename(arg);
      if (filename[0] === '@') {
        const filePath = path_1.default.join(cwd, arg);
        const content = await fs_1.default.readFile(filePath, 'utf8');
        return content.split('\n').map(x => x.trim());
      }
      return [arg];
    }));
    const featurePaths = nestedFeaturePaths.flat();
    if (featurePaths.length > 0) {
      return featurePaths.filter(x => x !== '');
    }
  }
  return ['features/**/*.{feature,feature.md}'];
}
function getFeatureDirectoryPaths(cwd, featurePaths) {
  const featureDirs = featurePaths.map(featurePath => {
    let featureDir = path_1.default.dirname(featurePath);
    let childDir;
    let parentDir = featureDir;
    while (childDir !== parentDir) {
      childDir = parentDir;
      parentDir = path_1.default.dirname(childDir);
      if (path_1.default.basename(parentDir) === 'features') {
        featureDir = parentDir;
        break;
      }
    }
    return path_1.default.relative(cwd, featureDir);
  });
  return [...new Set(featureDirs)];
}
async function expandFeaturePaths(cwd, featurePaths) {
  featurePaths = featurePaths.map(p => p.replace(/(:\d+)*$/g, '')); // Strip line numbers
  return await expandPaths(cwd, featurePaths, '.feature');
}
async function deriveSupportPaths(cwd, featurePaths, unexpandedRequirePaths, unexpandedImportPaths) {
  if (unexpandedRequirePaths.length === 0 && unexpandedImportPaths.length === 0) {
    const defaultPaths = getFeatureDirectoryPaths(cwd, featurePaths);
    const requirePaths = await expandPaths(cwd, defaultPaths, '.js');
    const importPaths = await expandPaths(cwd, defaultPaths, '.mjs');
    return {
      requirePaths,
      importPaths
    };
  }
  const requirePaths = unexpandedRequirePaths.length > 0 ? await expandPaths(cwd, unexpandedRequirePaths, '.js') : [];
  const importPaths = unexpandedImportPaths.length > 0 ? await expandPaths(cwd, unexpandedImportPaths, '.@(js|cjs|mjs)') : [];
  return {
    requirePaths,
    importPaths
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1dGlsXzEiLCJyZXF1aXJlIiwiZ2xvYl8xIiwiX19pbXBvcnREZWZhdWx0IiwicGF0aF8xIiwiZnNfMSIsInJlc29sdmVQYXRocyIsImxvZ2dlciIsImN3ZCIsInNvdXJjZXMiLCJzdXBwb3J0IiwicmVxdWlyZU1vZHVsZXMiLCJyZXF1aXJlUGF0aHMiLCJpbXBvcnRQYXRocyIsInVuZXhwYW5kZWRGZWF0dXJlUGF0aHMiLCJnZXRVbmV4cGFuZGVkRmVhdHVyZVBhdGhzIiwicGF0aHMiLCJmZWF0dXJlUGF0aHMiLCJleHBhbmRGZWF0dXJlUGF0aHMiLCJkZWJ1ZyIsImRlcml2ZVN1cHBvcnRQYXRocyIsImV4cG9ydHMiLCJleHBhbmRQYXRocyIsInVuZXhwYW5kZWRQYXRocyIsImRlZmF1bHRFeHRlbnNpb24iLCJleHBhbmRlZFBhdGhzIiwiUHJvbWlzZSIsImFsbCIsIm1hcCIsInVuZXhwYW5kZWRQYXRoIiwibWF0Y2hlcyIsInByb21pc2lmeSIsImRlZmF1bHQiLCJhYnNvbHV0ZSIsImV4cGFuZGVkIiwibWF0Y2giLCJleHRuYW1lIiwiZmxhdCIsIm5vcm1hbGl6ZWQiLCJ4Iiwibm9ybWFsaXplIiwiU2V0IiwiYXJncyIsImxlbmd0aCIsIm5lc3RlZEZlYXR1cmVQYXRocyIsImFyZyIsImZpbGVuYW1lIiwiYmFzZW5hbWUiLCJmaWxlUGF0aCIsImpvaW4iLCJjb250ZW50IiwicmVhZEZpbGUiLCJzcGxpdCIsInRyaW0iLCJmaWx0ZXIiLCJnZXRGZWF0dXJlRGlyZWN0b3J5UGF0aHMiLCJmZWF0dXJlRGlycyIsImZlYXR1cmVQYXRoIiwiZmVhdHVyZURpciIsImRpcm5hbWUiLCJjaGlsZERpciIsInBhcmVudERpciIsInJlbGF0aXZlIiwicCIsInJlcGxhY2UiLCJ1bmV4cGFuZGVkUmVxdWlyZVBhdGhzIiwidW5leHBhbmRlZEltcG9ydFBhdGhzIiwiZGVmYXVsdFBhdGhzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwaS9wYXRocy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tICd1dGlsJ1xuaW1wb3J0IGdsb2IgZnJvbSAnZ2xvYidcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgZnMgZnJvbSAnbXovZnMnXG5pbXBvcnQgeyBJU291cmNlc0Nvb3JkaW5hdGVzLCBJU3VwcG9ydENvZGVDb29yZGluYXRlcyB9IGZyb20gJy4vdHlwZXMnXG5pbXBvcnQgeyBJTG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2VyJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZVBhdGhzKFxuICBsb2dnZXI6IElMb2dnZXIsXG4gIGN3ZDogc3RyaW5nLFxuICBzb3VyY2VzOiBQaWNrPElTb3VyY2VzQ29vcmRpbmF0ZXMsICdwYXRocyc+LFxuICBzdXBwb3J0OiBJU3VwcG9ydENvZGVDb29yZGluYXRlcyA9IHtcbiAgICByZXF1aXJlTW9kdWxlczogW10sXG4gICAgcmVxdWlyZVBhdGhzOiBbXSxcbiAgICBpbXBvcnRQYXRoczogW10sXG4gIH1cbik6IFByb21pc2U8e1xuICB1bmV4cGFuZGVkRmVhdHVyZVBhdGhzOiBzdHJpbmdbXVxuICBmZWF0dXJlUGF0aHM6IHN0cmluZ1tdXG4gIHJlcXVpcmVQYXRoczogc3RyaW5nW11cbiAgaW1wb3J0UGF0aHM6IHN0cmluZ1tdXG59PiB7XG4gIGNvbnN0IHVuZXhwYW5kZWRGZWF0dXJlUGF0aHMgPSBhd2FpdCBnZXRVbmV4cGFuZGVkRmVhdHVyZVBhdGhzKFxuICAgIGN3ZCxcbiAgICBzb3VyY2VzLnBhdGhzXG4gIClcbiAgY29uc3QgZmVhdHVyZVBhdGhzOiBzdHJpbmdbXSA9IGF3YWl0IGV4cGFuZEZlYXR1cmVQYXRocyhcbiAgICBjd2QsXG4gICAgdW5leHBhbmRlZEZlYXR1cmVQYXRoc1xuICApXG4gIGxvZ2dlci5kZWJ1ZygnRm91bmQgZmVhdHVyZSBmaWxlcyBiYXNlZCBvbiBjb25maWd1cmF0aW9uOicsIGZlYXR1cmVQYXRocylcbiAgY29uc3QgeyByZXF1aXJlUGF0aHMsIGltcG9ydFBhdGhzIH0gPSBhd2FpdCBkZXJpdmVTdXBwb3J0UGF0aHMoXG4gICAgY3dkLFxuICAgIGZlYXR1cmVQYXRocyxcbiAgICBzdXBwb3J0LnJlcXVpcmVQYXRocyxcbiAgICBzdXBwb3J0LmltcG9ydFBhdGhzXG4gIClcbiAgbG9nZ2VyLmRlYnVnKFxuICAgICdGb3VuZCBzdXBwb3J0IGZpbGVzIHRvIGxvYWQgdmlhIGByZXF1aXJlYCBiYXNlZCBvbiBjb25maWd1cmF0aW9uOicsXG4gICAgcmVxdWlyZVBhdGhzXG4gIClcbiAgbG9nZ2VyLmRlYnVnKFxuICAgICdGb3VuZCBzdXBwb3J0IGZpbGVzIHRvIGxvYWQgdmlhIGBpbXBvcnRgIGJhc2VkIG9uIGNvbmZpZ3VyYXRpb246JyxcbiAgICBpbXBvcnRQYXRoc1xuICApXG4gIHJldHVybiB7XG4gICAgdW5leHBhbmRlZEZlYXR1cmVQYXRocyxcbiAgICBmZWF0dXJlUGF0aHMsXG4gICAgcmVxdWlyZVBhdGhzLFxuICAgIGltcG9ydFBhdGhzLFxuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGV4cGFuZFBhdGhzKFxuICBjd2Q6IHN0cmluZyxcbiAgdW5leHBhbmRlZFBhdGhzOiBzdHJpbmdbXSxcbiAgZGVmYXVsdEV4dGVuc2lvbjogc3RyaW5nXG4pOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gIGNvbnN0IGV4cGFuZGVkUGF0aHMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICB1bmV4cGFuZGVkUGF0aHMubWFwKGFzeW5jICh1bmV4cGFuZGVkUGF0aCkgPT4ge1xuICAgICAgY29uc3QgbWF0Y2hlcyA9IGF3YWl0IHByb21pc2lmeShnbG9iKSh1bmV4cGFuZGVkUGF0aCwge1xuICAgICAgICBhYnNvbHV0ZTogdHJ1ZSxcbiAgICAgICAgY3dkLFxuICAgICAgfSlcbiAgICAgIGNvbnN0IGV4cGFuZGVkID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIG1hdGNoZXMubWFwKGFzeW5jIChtYXRjaCkgPT4ge1xuICAgICAgICAgIGlmIChwYXRoLmV4dG5hbWUobWF0Y2gpID09PSAnJykge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHByb21pc2lmeShnbG9iKShgJHttYXRjaH0vKiovKiR7ZGVmYXVsdEV4dGVuc2lvbn1gKVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gW21hdGNoXVxuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgcmV0dXJuIGV4cGFuZGVkLmZsYXQoKVxuICAgIH0pXG4gIClcbiAgY29uc3Qgbm9ybWFsaXplZCA9IGV4cGFuZGVkUGF0aHMuZmxhdCgpLm1hcCgoeCkgPT4gcGF0aC5ub3JtYWxpemUoeCkpXG4gIHJldHVybiBbLi4ubmV3IFNldChub3JtYWxpemVkKV1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0VW5leHBhbmRlZEZlYXR1cmVQYXRocyhcbiAgY3dkOiBzdHJpbmcsXG4gIGFyZ3M6IHN0cmluZ1tdXG4pOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gIGlmIChhcmdzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBuZXN0ZWRGZWF0dXJlUGF0aHMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIGFyZ3MubWFwKGFzeW5jIChhcmcpID0+IHtcbiAgICAgICAgY29uc3QgZmlsZW5hbWUgPSBwYXRoLmJhc2VuYW1lKGFyZylcbiAgICAgICAgaWYgKGZpbGVuYW1lWzBdID09PSAnQCcpIHtcbiAgICAgICAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbihjd2QsIGFyZylcbiAgICAgICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgZnMucmVhZEZpbGUoZmlsZVBhdGgsICd1dGY4JylcbiAgICAgICAgICByZXR1cm4gY29udGVudC5zcGxpdCgnXFxuJykubWFwKCh4KSA9PiB4LnRyaW0oKSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2FyZ11cbiAgICAgIH0pXG4gICAgKVxuICAgIGNvbnN0IGZlYXR1cmVQYXRocyA9IG5lc3RlZEZlYXR1cmVQYXRocy5mbGF0KClcbiAgICBpZiAoZmVhdHVyZVBhdGhzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBmZWF0dXJlUGF0aHMuZmlsdGVyKCh4KSA9PiB4ICE9PSAnJylcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFsnZmVhdHVyZXMvKiovKi57ZmVhdHVyZSxmZWF0dXJlLm1kfSddXG59XG5cbmZ1bmN0aW9uIGdldEZlYXR1cmVEaXJlY3RvcnlQYXRocyhcbiAgY3dkOiBzdHJpbmcsXG4gIGZlYXR1cmVQYXRoczogc3RyaW5nW11cbik6IHN0cmluZ1tdIHtcbiAgY29uc3QgZmVhdHVyZURpcnMgPSBmZWF0dXJlUGF0aHMubWFwKChmZWF0dXJlUGF0aCkgPT4ge1xuICAgIGxldCBmZWF0dXJlRGlyID0gcGF0aC5kaXJuYW1lKGZlYXR1cmVQYXRoKVxuICAgIGxldCBjaGlsZERpcjogc3RyaW5nXG4gICAgbGV0IHBhcmVudERpciA9IGZlYXR1cmVEaXJcbiAgICB3aGlsZSAoY2hpbGREaXIgIT09IHBhcmVudERpcikge1xuICAgICAgY2hpbGREaXIgPSBwYXJlbnREaXJcbiAgICAgIHBhcmVudERpciA9IHBhdGguZGlybmFtZShjaGlsZERpcilcbiAgICAgIGlmIChwYXRoLmJhc2VuYW1lKHBhcmVudERpcikgPT09ICdmZWF0dXJlcycpIHtcbiAgICAgICAgZmVhdHVyZURpciA9IHBhcmVudERpclxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGF0aC5yZWxhdGl2ZShjd2QsIGZlYXR1cmVEaXIpXG4gIH0pXG4gIHJldHVybiBbLi4ubmV3IFNldChmZWF0dXJlRGlycyldXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGV4cGFuZEZlYXR1cmVQYXRocyhcbiAgY3dkOiBzdHJpbmcsXG4gIGZlYXR1cmVQYXRoczogc3RyaW5nW11cbik6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgZmVhdHVyZVBhdGhzID0gZmVhdHVyZVBhdGhzLm1hcCgocCkgPT4gcC5yZXBsYWNlKC8oOlxcZCspKiQvZywgJycpKSAvLyBTdHJpcCBsaW5lIG51bWJlcnNcbiAgcmV0dXJuIGF3YWl0IGV4cGFuZFBhdGhzKGN3ZCwgZmVhdHVyZVBhdGhzLCAnLmZlYXR1cmUnKVxufVxuXG5hc3luYyBmdW5jdGlvbiBkZXJpdmVTdXBwb3J0UGF0aHMoXG4gIGN3ZDogc3RyaW5nLFxuICBmZWF0dXJlUGF0aHM6IHN0cmluZ1tdLFxuICB1bmV4cGFuZGVkUmVxdWlyZVBhdGhzOiBzdHJpbmdbXSxcbiAgdW5leHBhbmRlZEltcG9ydFBhdGhzOiBzdHJpbmdbXVxuKTogUHJvbWlzZTx7XG4gIHJlcXVpcmVQYXRoczogc3RyaW5nW11cbiAgaW1wb3J0UGF0aHM6IHN0cmluZ1tdXG59PiB7XG4gIGlmIChcbiAgICB1bmV4cGFuZGVkUmVxdWlyZVBhdGhzLmxlbmd0aCA9PT0gMCAmJlxuICAgIHVuZXhwYW5kZWRJbXBvcnRQYXRocy5sZW5ndGggPT09IDBcbiAgKSB7XG4gICAgY29uc3QgZGVmYXVsdFBhdGhzID0gZ2V0RmVhdHVyZURpcmVjdG9yeVBhdGhzKGN3ZCwgZmVhdHVyZVBhdGhzKVxuICAgIGNvbnN0IHJlcXVpcmVQYXRocyA9IGF3YWl0IGV4cGFuZFBhdGhzKGN3ZCwgZGVmYXVsdFBhdGhzLCAnLmpzJylcbiAgICBjb25zdCBpbXBvcnRQYXRocyA9IGF3YWl0IGV4cGFuZFBhdGhzKGN3ZCwgZGVmYXVsdFBhdGhzLCAnLm1qcycpXG4gICAgcmV0dXJuIHsgcmVxdWlyZVBhdGhzLCBpbXBvcnRQYXRocyB9XG4gIH1cbiAgY29uc3QgcmVxdWlyZVBhdGhzID1cbiAgICB1bmV4cGFuZGVkUmVxdWlyZVBhdGhzLmxlbmd0aCA+IDBcbiAgICAgID8gYXdhaXQgZXhwYW5kUGF0aHMoY3dkLCB1bmV4cGFuZGVkUmVxdWlyZVBhdGhzLCAnLmpzJylcbiAgICAgIDogW11cbiAgY29uc3QgaW1wb3J0UGF0aHMgPVxuICAgIHVuZXhwYW5kZWRJbXBvcnRQYXRocy5sZW5ndGggPiAwXG4gICAgICA/IGF3YWl0IGV4cGFuZFBhdGhzKGN3ZCwgdW5leHBhbmRlZEltcG9ydFBhdGhzLCAnLkAoanN8Y2pzfG1qcyknKVxuICAgICAgOiBbXVxuICByZXR1cm4geyByZXF1aXJlUGF0aHMsIGltcG9ydFBhdGhzIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxNQUFBQyxNQUFBLEdBQUFDLGVBQUEsQ0FBQUYsT0FBQTtBQUNBLE1BQUFHLE1BQUEsR0FBQUQsZUFBQSxDQUFBRixPQUFBO0FBQ0EsTUFBQUksSUFBQSxHQUFBRixlQUFBLENBQUFGLE9BQUE7QUFJTyxlQUFlSyxZQUFZQSxDQUNoQ0MsTUFBZSxFQUNmQyxHQUFXLEVBQ1hDLE9BQTJDLEVBQzNDQyxPQUFBLEdBQW1DO0VBQ2pDQyxjQUFjLEVBQUUsRUFBRTtFQUNsQkMsWUFBWSxFQUFFLEVBQUU7RUFDaEJDLFdBQVcsRUFBRTtDQUNkO0VBT0QsTUFBTUMsc0JBQXNCLEdBQUcsTUFBTUMseUJBQXlCLENBQzVEUCxHQUFHLEVBQ0hDLE9BQU8sQ0FBQ08sS0FBSyxDQUNkO0VBQ0QsTUFBTUMsWUFBWSxHQUFhLE1BQU1DLGtCQUFrQixDQUNyRFYsR0FBRyxFQUNITSxzQkFBc0IsQ0FDdkI7RUFDRFAsTUFBTSxDQUFDWSxLQUFLLENBQUMsNkNBQTZDLEVBQUVGLFlBQVksQ0FBQztFQUN6RSxNQUFNO0lBQUVMLFlBQVk7SUFBRUM7RUFBVyxDQUFFLEdBQUcsTUFBTU8sa0JBQWtCLENBQzVEWixHQUFHLEVBQ0hTLFlBQVksRUFDWlAsT0FBTyxDQUFDRSxZQUFZLEVBQ3BCRixPQUFPLENBQUNHLFdBQVcsQ0FDcEI7RUFDRE4sTUFBTSxDQUFDWSxLQUFLLENBQ1YsbUVBQW1FLEVBQ25FUCxZQUFZLENBQ2I7RUFDREwsTUFBTSxDQUFDWSxLQUFLLENBQ1Ysa0VBQWtFLEVBQ2xFTixXQUFXLENBQ1o7RUFDRCxPQUFPO0lBQ0xDLHNCQUFzQjtJQUN0QkcsWUFBWTtJQUNaTCxZQUFZO0lBQ1pDO0dBQ0Q7QUFDSDtBQTVDQVEsT0FBQSxDQUFBZixZQUFBLEdBQUFBLFlBQUE7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