78cdfc789169e9c0f4776e3d7ecd4036
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Reference = _interopRequireDefault(require("../Reference"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
class ReferenceSet {
  constructor() {
    this.list = void 0;
    this.refs = void 0;
    this.list = new Set();
    this.refs = new Map();
  }
  get size() {
    return this.list.size + this.refs.size;
  }
  describe() {
    const description = [];
    for (const item of this.list) description.push(item);
    for (const [, ref] of this.refs) description.push(ref.describe());
    return description;
  }
  toArray() {
    return Array.from(this.list).concat(Array.from(this.refs.values()));
  }
  resolveAll(resolve) {
    return this.toArray().reduce((acc, e) => acc.concat(_Reference.default.isRef(e) ? resolve(e) : e), []);
  }
  add(value) {
    _Reference.default.isRef(value) ? this.refs.set(value.key, value) : this.list.add(value);
  }
  delete(value) {
    _Reference.default.isRef(value) ? this.refs.delete(value.key) : this.list.delete(value);
  }
  clone() {
    const next = new ReferenceSet();
    next.list = new Set(this.list);
    next.refs = new Map(this.refs);
    return next;
  }
  merge(newItems, removeItems) {
    const next = this.clone();
    newItems.list.forEach(value => next.add(value));
    newItems.refs.forEach(value => next.add(value));
    removeItems.list.forEach(value => next.delete(value));
    removeItems.refs.forEach(value => next.delete(value));
    return next;
  }
}
exports.default = ReferenceSet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfUmVmZXJlbmNlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiUmVmZXJlbmNlU2V0IiwiY29uc3RydWN0b3IiLCJsaXN0IiwicmVmcyIsIlNldCIsIk1hcCIsInNpemUiLCJkZXNjcmliZSIsImRlc2NyaXB0aW9uIiwiaXRlbSIsInB1c2giLCJyZWYiLCJ0b0FycmF5IiwiQXJyYXkiLCJmcm9tIiwiY29uY2F0IiwidmFsdWVzIiwicmVzb2x2ZUFsbCIsInJlc29sdmUiLCJyZWR1Y2UiLCJhY2MiLCJlIiwiaXNSZWYiLCJhZGQiLCJzZXQiLCJrZXkiLCJkZWxldGUiLCJjbG9uZSIsIm5leHQiLCJtZXJnZSIsIm5ld0l0ZW1zIiwicmVtb3ZlSXRlbXMiLCJmb3JFYWNoIl0sInNvdXJjZXMiOlsiUmVmZXJlbmNlU2V0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX1JlZmVyZW5jZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1JlZmVyZW5jZVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNsYXNzIFJlZmVyZW5jZVNldCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubGlzdCA9IHZvaWQgMDtcbiAgICB0aGlzLnJlZnMgPSB2b2lkIDA7XG4gICAgdGhpcy5saXN0ID0gbmV3IFNldCgpO1xuICAgIHRoaXMucmVmcyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIGdldCBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLmxpc3Quc2l6ZSArIHRoaXMucmVmcy5zaXplO1xuICB9XG5cbiAgZGVzY3JpYmUoKSB7XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSBbXTtcblxuICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLmxpc3QpIGRlc2NyaXB0aW9uLnB1c2goaXRlbSk7XG5cbiAgICBmb3IgKGNvbnN0IFssIHJlZl0gb2YgdGhpcy5yZWZzKSBkZXNjcmlwdGlvbi5wdXNoKHJlZi5kZXNjcmliZSgpKTtcblxuICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgfVxuXG4gIHRvQXJyYXkoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5saXN0KS5jb25jYXQoQXJyYXkuZnJvbSh0aGlzLnJlZnMudmFsdWVzKCkpKTtcbiAgfVxuXG4gIHJlc29sdmVBbGwocmVzb2x2ZSkge1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXkoKS5yZWR1Y2UoKGFjYywgZSkgPT4gYWNjLmNvbmNhdChfUmVmZXJlbmNlLmRlZmF1bHQuaXNSZWYoZSkgPyByZXNvbHZlKGUpIDogZSksIFtdKTtcbiAgfVxuXG4gIGFkZCh2YWx1ZSkge1xuICAgIF9SZWZlcmVuY2UuZGVmYXVsdC5pc1JlZih2YWx1ZSkgPyB0aGlzLnJlZnMuc2V0KHZhbHVlLmtleSwgdmFsdWUpIDogdGhpcy5saXN0LmFkZCh2YWx1ZSk7XG4gIH1cblxuICBkZWxldGUodmFsdWUpIHtcbiAgICBfUmVmZXJlbmNlLmRlZmF1bHQuaXNSZWYodmFsdWUpID8gdGhpcy5yZWZzLmRlbGV0ZSh2YWx1ZS5rZXkpIDogdGhpcy5saXN0LmRlbGV0ZSh2YWx1ZSk7XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICBjb25zdCBuZXh0ID0gbmV3IFJlZmVyZW5jZVNldCgpO1xuICAgIG5leHQubGlzdCA9IG5ldyBTZXQodGhpcy5saXN0KTtcbiAgICBuZXh0LnJlZnMgPSBuZXcgTWFwKHRoaXMucmVmcyk7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH1cblxuICBtZXJnZShuZXdJdGVtcywgcmVtb3ZlSXRlbXMpIHtcbiAgICBjb25zdCBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIG5ld0l0ZW1zLmxpc3QuZm9yRWFjaCh2YWx1ZSA9PiBuZXh0LmFkZCh2YWx1ZSkpO1xuICAgIG5ld0l0ZW1zLnJlZnMuZm9yRWFjaCh2YWx1ZSA9PiBuZXh0LmFkZCh2YWx1ZSkpO1xuICAgIHJlbW92ZUl0ZW1zLmxpc3QuZm9yRWFjaCh2YWx1ZSA9PiBuZXh0LmRlbGV0ZSh2YWx1ZSkpO1xuICAgIHJlbW92ZUl0ZW1zLnJlZnMuZm9yRWFjaCh2YWx1ZSA9PiBuZXh0LmRlbGV0ZSh2YWx1ZSkpO1xuICAgIHJldHVybiBuZXh0O1xuICB9XG5cbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gUmVmZXJlbmNlU2V0OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFFeEIsSUFBSUMsVUFBVSxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBRWhFLFNBQVNELHNCQUFzQkEsQ0FBQ0UsR0FBRyxFQUFFO0VBQUUsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVUsR0FBR0QsR0FBRyxHQUFHO0lBQUVKLE9BQU8sRUFBRUk7RUFBSSxDQUFDO0FBQUU7QUFFOUYsTUFBTUUsWUFBWSxDQUFDO0VBQ2pCQyxXQUFXQSxDQUFBLEVBQUc7SUFDWixJQUFJLENBQUNDLElBQUksR0FBRyxLQUFLLENBQUM7SUFDbEIsSUFBSSxDQUFDQyxJQUFJLEdBQUcsS0FBSyxDQUFDO0lBQ2xCLElBQUksQ0FBQ0QsSUFBSSxHQUFHLElBQUlFLEdBQUcsRUFBRTtJQUNyQixJQUFJLENBQUNELElBQUksR0FBRyxJQUFJ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