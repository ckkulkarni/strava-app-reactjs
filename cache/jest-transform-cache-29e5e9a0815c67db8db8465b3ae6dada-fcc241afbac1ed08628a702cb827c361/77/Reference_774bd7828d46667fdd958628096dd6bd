ebe673cd8e45533d99fe624bb7d13004
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create = create;
exports.default = void 0;
var _propertyExpr = require("property-expr");
const prefixes = {
  context: '$',
  value: '.'
};
function create(key, options) {
  return new Reference(key, options);
}
class Reference {
  constructor(key, options = {}) {
    this.key = void 0;
    this.isContext = void 0;
    this.isValue = void 0;
    this.isSibling = void 0;
    this.path = void 0;
    this.getter = void 0;
    this.map = void 0;
    if (typeof key !== 'string') throw new TypeError('ref must be a string, got: ' + key);
    this.key = key.trim();
    if (key === '') throw new TypeError('ref must be a non-empty string');
    this.isContext = this.key[0] === prefixes.context;
    this.isValue = this.key[0] === prefixes.value;
    this.isSibling = !this.isContext && !this.isValue;
    let prefix = this.isContext ? prefixes.context : this.isValue ? prefixes.value : '';
    this.path = this.key.slice(prefix.length);
    this.getter = this.path && (0, _propertyExpr.getter)(this.path, true);
    this.map = options.map;
  }
  getValue(value, parent, context) {
    let result = this.isContext ? context : this.isValue ? value : parent;
    if (this.getter) result = this.getter(result || {});
    if (this.map) result = this.map(result);
    return result;
  }
  /**
   *
   * @param {*} value
   * @param {Object} options
   * @param {Object=} options.context
   * @param {Object=} options.parent
   */

  cast(value, options) {
    return this.getValue(value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);
  }
  resolve() {
    return this;
  }
  describe() {
    return {
      type: 'ref',
      key: this.key
    };
  }
  toString() {
    return `Ref(${this.key})`;
  }
  static isRef(value) {
    return value && value.__isYupRef;
  }
} // @ts-ignore

exports.default = Reference;
Reference.prototype.__isYupRef = true;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNyZWF0ZSIsImRlZmF1bHQiLCJfcHJvcGVydHlFeHByIiwicmVxdWlyZSIsInByZWZpeGVzIiwiY29udGV4dCIsImtleSIsIm9wdGlvbnMiLCJSZWZlcmVuY2UiLCJjb25zdHJ1Y3RvciIsImlzQ29udGV4dCIsImlzVmFsdWUiLCJpc1NpYmxpbmciLCJwYXRoIiwiZ2V0dGVyIiwibWFwIiwiVHlwZUVycm9yIiwidHJpbSIsInByZWZpeCIsInNsaWNlIiwibGVuZ3RoIiwiZ2V0VmFsdWUiLCJwYXJlbnQiLCJyZXN1bHQiLCJjYXN0IiwicmVzb2x2ZSIsImRlc2NyaWJlIiwidHlwZSIsInRvU3RyaW5nIiwiaXNSZWYiLCJfX2lzWXVwUmVmIiwicHJvdG90eXBlIl0sInNvdXJjZXMiOlsiUmVmZXJlbmNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jcmVhdGUgPSBjcmVhdGU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcHJvcGVydHlFeHByID0gcmVxdWlyZShcInByb3BlcnR5LWV4cHJcIik7XG5cbmNvbnN0IHByZWZpeGVzID0ge1xuICBjb250ZXh0OiAnJCcsXG4gIHZhbHVlOiAnLidcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZShrZXksIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBSZWZlcmVuY2Uoa2V5LCBvcHRpb25zKTtcbn1cblxuY2xhc3MgUmVmZXJlbmNlIHtcbiAgY29uc3RydWN0b3Ioa2V5LCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzQ29udGV4dCA9IHZvaWQgMDtcbiAgICB0aGlzLmlzVmFsdWUgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1NpYmxpbmcgPSB2b2lkIDA7XG4gICAgdGhpcy5wYXRoID0gdm9pZCAwO1xuICAgIHRoaXMuZ2V0dGVyID0gdm9pZCAwO1xuICAgIHRoaXMubWFwID0gdm9pZCAwO1xuICAgIGlmICh0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVmIG11c3QgYmUgYSBzdHJpbmcsIGdvdDogJyArIGtleSk7XG4gICAgdGhpcy5rZXkgPSBrZXkudHJpbSgpO1xuICAgIGlmIChrZXkgPT09ICcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWYgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcbiAgICB0aGlzLmlzQ29udGV4dCA9IHRoaXMua2V5WzBdID09PSBwcmVmaXhlcy5jb250ZXh0O1xuICAgIHRoaXMuaXNWYWx1ZSA9IHRoaXMua2V5WzBdID09PSBwcmVmaXhlcy52YWx1ZTtcbiAgICB0aGlzLmlzU2libGluZyA9ICF0aGlzLmlzQ29udGV4dCAmJiAhdGhpcy5pc1ZhbHVlO1xuICAgIGxldCBwcmVmaXggPSB0aGlzLmlzQ29udGV4dCA/IHByZWZpeGVzLmNvbnRleHQgOiB0aGlzLmlzVmFsdWUgPyBwcmVmaXhlcy52YWx1ZSA6ICcnO1xuICAgIHRoaXMucGF0aCA9IHRoaXMua2V5LnNsaWNlKHByZWZpeC5sZW5ndGgpO1xuICAgIHRoaXMuZ2V0dGVyID0gdGhpcy5wYXRoICYmICgwLCBfcHJvcGVydHlFeHByLmdldHRlcikodGhpcy5wYXRoLCB0cnVlKTtcbiAgICB0aGlzLm1hcCA9IG9wdGlvbnMubWFwO1xuICB9XG5cbiAgZ2V0VmFsdWUodmFsdWUsIHBhcmVudCwgY29udGV4dCkge1xuICAgIGxldCByZXN1bHQgPSB0aGlzLmlzQ29udGV4dCA/IGNvbnRleHQgOiB0aGlzLmlzVmFsdWUgPyB2YWx1ZSA6IHBhcmVudDtcbiAgICBpZiAodGhpcy5nZXR0ZXIpIHJlc3VsdCA9IHRoaXMuZ2V0dGVyKHJlc3VsdCB8fCB7fSk7XG4gICAgaWYgKHRoaXMubWFwKSByZXN1bHQgPSB0aGlzLm1hcChyZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zLmNvbnRleHRcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zLnBhcmVudFxuICAgKi9cblxuXG4gIGNhc3QodmFsdWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZSh2YWx1ZSwgb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5wYXJlbnQsIG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuY29udGV4dCk7XG4gIH1cblxuICByZXNvbHZlKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGVzY3JpYmUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdyZWYnLFxuICAgICAga2V5OiB0aGlzLmtleVxuICAgIH07XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gYFJlZigke3RoaXMua2V5fSlgO1xuICB9XG5cbiAgc3RhdGljIGlzUmVmKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLl9faXNZdXBSZWY7XG4gIH1cblxufSAvLyBAdHMtaWdub3JlXG5cblxuZXhwb3J0cy5kZWZhdWx0ID0gUmVmZXJlbmNlO1xuUmVmZXJlbmNlLnByb3RvdHlwZS5fX2lzWXVwUmVmID0gdHJ1ZTsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxNQUFNLEdBQUdBLE1BQU07QUFDdkJGLE9BQU8sQ0FBQ0csT0FBTyxHQUFHLEtBQUssQ0FBQztBQUV4QixJQUFJQyxhQUFhLEdBQUdDLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFFNUMsTUFBTUMsUUFBUSxHQUFHO0VBQ2ZDLE9BQU8sRUFBRSxHQUFHO0VBQ1pOLEtBQUssRUFBRTtBQUNULENBQUM7QUFFRCxTQUFTQyxNQUFNQSxDQUFDTSxHQUFHLEVBQUVDLE9BQU8sRUFBRTtFQUM1QixPQUFPLElBQUlDLFNBQVMsQ0FBQ0YsR0FBRyxFQUFFQyxPQUFPLENBQUM7QUFDcEM7QUFFQSxNQUFNQyxTQUFTLENBQUM7RUFDZEMsV0FBV0EsQ0FBQ0gsR0FBRyxFQUFFQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUU7SUFDN0IsSUFBSSxDQUFDRCxHQUFHLEdBQUcsS0FBSyxDQUFDO0lBQ2pCLElBQUksQ0FBQ0ksU0FBUyxHQUFHLEtBQUssQ0FBQztJQUN2QixJQUFJLENBQUNDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDckIsSUFBSSxDQUFDQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLElBQUksQ0FBQ0MsSUFBSSxHQUFHLEtBQUssQ0FBQztJQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDcEIsSUFBSSxDQUFDQyxHQUFHLEdBQUcsS0FBSyxDQUFDO0lBQ2pCLElBQUksT0FBT1QsR0FBRyxLQUFLLFFBQVEsRUFBRSxNQUFNLElBQUlVLFNBQVMsQ0FBQyw2QkFBNkIsR0FBR1YsR0FBRyxDQUFDO0lBQ3JGLElBQUksQ0FBQ0EsR0FBRyxHQUFHQSxHQUFHLENBQUNXLElBQUksRUFBRTtJQUNyQixJQUFJWCxHQUFHLEtBQUssRUFBRSxFQUFFLE1BQU0sSUFBSVUsU0FBUyxDQUFDLGdDQUFnQyxDQUFDO0lBQ3JFLElBQUksQ0FBQ04sU0FBUyxHQUFHLElBQUksQ0FBQ0osR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLRixRQUFRLENBQUNDLE9BQU87SUFDakQsSUFBSSxDQUFDTSxPQUFPLEdBQUcsSUFBSSxDQUFDTCxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUtGLFFBQVEsQ0FBQ0wsS0FBSztJQUM3QyxJQUFJLENBQUNhLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQ0YsU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDQyxPQUFPO0lBQ2pELElBQUlPLE1BQU0sR0FBRyxJQUFJLENBQUNSLFNBQVMsR0FBR04sUUFBUSxDQUFDQyxPQUFPLEdBQUcsSUFBSSxDQUFDTSxPQUFPLEdBQUdQLFFBQVEsQ0FBQ0wsS0FBSyxHQUFHLEVBQUU7SUFDbkYsSUFBSSxDQUFDYyxJQUFJLEdBQUcsSUFBSSxDQUFDUCxHQUFHLENBQUNhLEtBQUssQ0FBQ0QsTUFBTSxDQUFDRSxNQUFNLENBQUM7SUFDekMsSUFBSSxDQUFDTixNQUFNLEdBQUcsSUFBSSxDQUFDRCxJQUFJLElBQUksQ0FBQyxDQUFDLEVBQUVYLGFBQWEsQ0FBQ1ksTUFBTSxFQUFFLElBQUksQ0FBQ0QsSUFBSSxFQUFFLElBQUksQ0FBQztJQUNyRSxJQUFJLENBQUNFLEdBQUcsR0FBR1IsT0FBTyxDQUFDUSxHQUFHO0VBQ3hCO0VBRUFNLFFBQVFBLENBQUN0QixLQUFLLEVBQUV1QixNQUFNLEVBQUVqQixPQUFPLEVBQUU7SUFDL0IsSUFBSWtCLE1BQU0sR0FBRyxJQUFJLENBQUNiLFNBQVMsR0FBR0wsT0FBTyxHQUFHLElBQUksQ0FBQ00sT0FBTyxHQUFHWixLQUFLLEdBQUd1QixNQUFNO0lBQ3JFLElBQUksSUFBSSxDQUFDUixNQUFNLEVBQUVTLE1BQU0sR0FBRyxJQUFJLENBQUNULE1BQU0sQ0FBQ1MsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ25ELElBQUksSUFBSSxDQUFDUixHQUFHLEVBQUVRLE1BQU0sR0FBRyxJQUFJLENBQUNSLEdBQUcsQ0FBQ1EsTUFBTSxDQUFDO0lBQ3ZDLE9BQU9BLE1BQU07RUFDZjtFQUNBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztFQUdFQyxJQUFJQSxDQUFDekIsS0FBSyxFQUFFUSxPQUFPLEVBQUU7SUFDbkIsT0FBTyxJQUFJLENBQUNjLFFBQVEsQ0FBQ3RCLEtBQUssRUFBRVEsT0FBTyxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBR0EsT0FBTyxDQUFDZSxNQUFNLEVBQUVmLE9BQU8sSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUdBLE9BQU8sQ0FBQ0YsT0FBTyxDQUFDO0VBQ3BIO0VBRUFvQixPQUFPQSxDQUFBLEVBQUc7SUFDUixPQUFPLElBQUk7RUFDYjtFQUVBQyxRQUFRQSxDQUFBLEVBQUc7SUFDVCxPQUFPO01BQ0xDLElBQUksRUFBRSxLQUFLO01BQ1hyQixHQUFHLEVBQUUsSUFBSSxDQUFDQTtJQUNaLENBQUM7RUFDSDtFQUVBc0IsUUFBUUEsQ0FBQSxFQUFHO0lBQ1QsT0FBUSxPQUFNLElBQUksQ0FBQ3RCLEdBQUksR0FBRTtFQUMzQjtFQUVBLE9BQU91QixLQUFLQSxDQUFDOUIsS0FBSyxFQUFFO0lBQ2xCLE9BQU9BLEtBQUssSUFBSUEsS0FBSyxDQUFDK0IsVUFBVTtFQUNsQztBQUVGLENBQUMsQ0FBQzs7QUFHRmhDLE9BQU8sQ0FBQ0csT0FBTyxHQUFHTyxTQUFTO0FBQzNCQSxTQUFTLENBQUN1QixTQUFTLENBQUNELFVBQVUsR0FBRyxJQUFJIn0=