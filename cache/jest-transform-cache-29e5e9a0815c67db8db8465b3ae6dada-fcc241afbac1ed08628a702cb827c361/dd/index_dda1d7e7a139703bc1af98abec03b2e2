bf784677aeb5230b5366b984e36d8a79
'use strict';

var isCallable = require('is-callable');
var toStr = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var forEachArray = function forEachArray(array, iterator, receiver) {
  for (var i = 0, len = array.length; i < len; i++) {
    if (hasOwnProperty.call(array, i)) {
      if (receiver == null) {
        iterator(array[i], i, array);
      } else {
        iterator.call(receiver, array[i], i, array);
      }
    }
  }
};
var forEachString = function forEachString(string, iterator, receiver) {
  for (var i = 0, len = string.length; i < len; i++) {
    // no such thing as a sparse string.
    if (receiver == null) {
      iterator(string.charAt(i), i, string);
    } else {
      iterator.call(receiver, string.charAt(i), i, string);
    }
  }
};
var forEachObject = function forEachObject(object, iterator, receiver) {
  for (var k in object) {
    if (hasOwnProperty.call(object, k)) {
      if (receiver == null) {
        iterator(object[k], k, object);
      } else {
        iterator.call(receiver, object[k], k, object);
      }
    }
  }
};
var forEach = function forEach(list, iterator, thisArg) {
  if (!isCallable(iterator)) {
    throw new TypeError('iterator must be a function');
  }
  var receiver;
  if (arguments.length >= 3) {
    receiver = thisArg;
  }
  if (toStr.call(list) === '[object Array]') {
    forEachArray(list, iterator, receiver);
  } else if (typeof list === 'string') {
    forEachString(list, iterator, receiver);
  } else {
    forEachObject(list, iterator, receiver);
  }
};
module.exports = forEach;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc0NhbGxhYmxlIiwicmVxdWlyZSIsInRvU3RyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJoYXNPd25Qcm9wZXJ0eSIsImZvckVhY2hBcnJheSIsImFycmF5IiwiaXRlcmF0b3IiLCJyZWNlaXZlciIsImkiLCJsZW4iLCJsZW5ndGgiLCJjYWxsIiwiZm9yRWFjaFN0cmluZyIsInN0cmluZyIsImNoYXJBdCIsImZvckVhY2hPYmplY3QiLCJvYmplY3QiLCJrIiwiZm9yRWFjaCIsImxpc3QiLCJ0aGlzQXJnIiwiVHlwZUVycm9yIiwiYXJndW1lbnRzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCdpcy1jYWxsYWJsZScpO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZvckVhY2hBcnJheSA9IGZ1bmN0aW9uIGZvckVhY2hBcnJheShhcnJheSwgaXRlcmF0b3IsIHJlY2VpdmVyKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCBpKSkge1xuICAgICAgICAgICAgaWYgKHJlY2VpdmVyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvcihhcnJheVtpXSwgaSwgYXJyYXkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5jYWxsKHJlY2VpdmVyLCBhcnJheVtpXSwgaSwgYXJyYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIGZvckVhY2hTdHJpbmcgPSBmdW5jdGlvbiBmb3JFYWNoU3RyaW5nKHN0cmluZywgaXRlcmF0b3IsIHJlY2VpdmVyKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHN0cmluZy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAvLyBubyBzdWNoIHRoaW5nIGFzIGEgc3BhcnNlIHN0cmluZy5cbiAgICAgICAgaWYgKHJlY2VpdmVyID09IG51bGwpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yKHN0cmluZy5jaGFyQXQoaSksIGksIHN0cmluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpdGVyYXRvci5jYWxsKHJlY2VpdmVyLCBzdHJpbmcuY2hhckF0KGkpLCBpLCBzdHJpbmcpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIGZvckVhY2hPYmplY3QgPSBmdW5jdGlvbiBmb3JFYWNoT2JqZWN0KG9iamVjdCwgaXRlcmF0b3IsIHJlY2VpdmVyKSB7XG4gICAgZm9yICh2YXIgayBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrKSkge1xuICAgICAgICAgICAgaWYgKHJlY2VpdmVyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvcihvYmplY3Rba10sIGssIG9iamVjdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLmNhbGwocmVjZWl2ZXIsIG9iamVjdFtrXSwgaywgb2JqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBmb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChsaXN0LCBpdGVyYXRvciwgdGhpc0FyZykge1xuICAgIGlmICghaXNDYWxsYWJsZShpdGVyYXRvcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaXRlcmF0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgdmFyIHJlY2VpdmVyO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIHtcbiAgICAgICAgcmVjZWl2ZXIgPSB0aGlzQXJnO1xuICAgIH1cblxuICAgIGlmICh0b1N0ci5jYWxsKGxpc3QpID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICAgIGZvckVhY2hBcnJheShsaXN0LCBpdGVyYXRvciwgcmVjZWl2ZXIpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGZvckVhY2hTdHJpbmcobGlzdCwgaXRlcmF0b3IsIHJlY2VpdmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3JFYWNoT2JqZWN0KGxpc3QsIGl0ZXJhdG9yLCByZWNlaXZlcik7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmb3JFYWNoO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLFVBQVUsR0FBR0MsT0FBTyxDQUFDLGFBQWEsQ0FBQztBQUV2QyxJQUFJQyxLQUFLLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDQyxRQUFRO0FBQ3JDLElBQUlDLGNBQWMsR0FBR0gsTUFBTSxDQUFDQyxTQUFTLENBQUNFLGNBQWM7QUFFcEQsSUFBSUMsWUFBWSxHQUFHLFNBQVNBLFlBQVlBLENBQUNDLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUU7RUFDaEUsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQyxHQUFHLEdBQUdKLEtBQUssQ0FBQ0ssTUFBTSxFQUFFRixDQUFDLEdBQUdDLEdBQUcsRUFBRUQsQ0FBQyxFQUFFLEVBQUU7SUFDOUMsSUFBSUwsY0FBYyxDQUFDUSxJQUFJLENBQUNOLEtBQUssRUFBRUcsQ0FBQyxDQUFDLEVBQUU7TUFDL0IsSUFBSUQsUUFBUSxJQUFJLElBQUksRUFBRTtRQUNsQkQsUUFBUSxDQUFDRCxLQUFLLENBQUNHLENBQUMsQ0FBQyxFQUFFQSxDQUFDLEVBQUVILEtBQUssQ0FBQztNQUNoQyxDQUFDLE1BQU07UUFDSEMs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