57efee586ac9d2076281b9058322e08a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadConfiguration = void 0;
const locate_file_1 = require("../configuration/locate_file");
const configuration_1 = require("../configuration");
const validate_configuration_1 = require("../configuration/validate_configuration");
const convert_configuration_1 = require("./convert_configuration");
const environment_1 = require("./environment");
const console_logger_1 = require("./console_logger");
/**
 * Load user-authored configuration to be used in a test run.
 *
 * @public
 * @param options - Coordinates required to find configuration.
 * @param environment - Project environment.
 */
async function loadConfiguration(options = {}, environment = {}) {
  var _a;
  const {
    cwd,
    stderr,
    env,
    debug
  } = (0, environment_1.mergeEnvironment)(environment);
  const logger = new console_logger_1.ConsoleLogger(stderr, debug);
  const configFile = (_a = options.file) !== null && _a !== void 0 ? _a : (0, locate_file_1.locateFile)(cwd);
  if (configFile) {
    logger.debug(`Configuration will be loaded from "${configFile}"`);
  } else {
    logger.debug('No configuration file found');
  }
  const profileConfiguration = configFile ? await (0, configuration_1.fromFile)(logger, cwd, configFile, options.profiles) : {};
  const original = (0, configuration_1.mergeConfigurations)(configuration_1.DEFAULT_CONFIGURATION, profileConfiguration, options.provided);
  logger.debug('Resolved configuration:', original);
  (0, validate_configuration_1.validateConfiguration)(original);
  const runnable = await (0, convert_configuration_1.convertConfiguration)(original, env);
  return {
    useConfiguration: original,
    runConfiguration: runnable
  };
}
exports.loadConfiguration = loadConfiguration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2NhdGVfZmlsZV8xIiwicmVxdWlyZSIsImNvbmZpZ3VyYXRpb25fMSIsInZhbGlkYXRlX2NvbmZpZ3VyYXRpb25fMSIsImNvbnZlcnRfY29uZmlndXJhdGlvbl8xIiwiZW52aXJvbm1lbnRfMSIsImNvbnNvbGVfbG9nZ2VyXzEiLCJsb2FkQ29uZmlndXJhdGlvbiIsIm9wdGlvbnMiLCJlbnZpcm9ubWVudCIsImN3ZCIsInN0ZGVyciIsImVudiIsImRlYnVnIiwibWVyZ2VFbnZpcm9ubWVudCIsImxvZ2dlciIsIkNvbnNvbGVMb2dnZXIiLCJjb25maWdGaWxlIiwiX2EiLCJmaWxlIiwibG9jYXRlRmlsZSIsInByb2ZpbGVDb25maWd1cmF0aW9uIiwiZnJvbUZpbGUiLCJwcm9maWxlcyIsIm9yaWdpbmFsIiwibWVyZ2VDb25maWd1cmF0aW9ucyIsIkRFRkFVTFRfQ09ORklHVVJBVElPTiIsInByb3ZpZGVkIiwidmFsaWRhdGVDb25maWd1cmF0aW9uIiwicnVubmFibGUiLCJjb252ZXJ0Q29uZmlndXJhdGlvbiIsInVzZUNvbmZpZ3VyYXRpb24iLCJydW5Db25maWd1cmF0aW9uIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvbG9hZF9jb25maWd1cmF0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIElSdW5FbnZpcm9ubWVudCxcbiAgSVJlc29sdmVkQ29uZmlndXJhdGlvbixcbiAgSUxvYWRDb25maWd1cmF0aW9uT3B0aW9ucyxcbn0gZnJvbSAnLi90eXBlcydcbmltcG9ydCB7IGxvY2F0ZUZpbGUgfSBmcm9tICcuLi9jb25maWd1cmF0aW9uL2xvY2F0ZV9maWxlJ1xuaW1wb3J0IHtcbiAgREVGQVVMVF9DT05GSUdVUkFUSU9OLFxuICBmcm9tRmlsZSxcbiAgbWVyZ2VDb25maWd1cmF0aW9ucyxcbn0gZnJvbSAnLi4vY29uZmlndXJhdGlvbidcbmltcG9ydCB7IHZhbGlkYXRlQ29uZmlndXJhdGlvbiB9IGZyb20gJy4uL2NvbmZpZ3VyYXRpb24vdmFsaWRhdGVfY29uZmlndXJhdGlvbidcbmltcG9ydCB7IGNvbnZlcnRDb25maWd1cmF0aW9uIH0gZnJvbSAnLi9jb252ZXJ0X2NvbmZpZ3VyYXRpb24nXG5pbXBvcnQgeyBtZXJnZUVudmlyb25tZW50IH0gZnJvbSAnLi9lbnZpcm9ubWVudCdcbmltcG9ydCB7IElMb2dnZXIgfSBmcm9tICcuLi9sb2dnZXInXG5pbXBvcnQgeyBDb25zb2xlTG9nZ2VyIH0gZnJvbSAnLi9jb25zb2xlX2xvZ2dlcidcblxuLyoqXG4gKiBMb2FkIHVzZXItYXV0aG9yZWQgY29uZmlndXJhdGlvbiB0byBiZSB1c2VkIGluIGEgdGVzdCBydW4uXG4gKlxuICogQHB1YmxpY1xuICogQHBhcmFtIG9wdGlvbnMgLSBDb29yZGluYXRlcyByZXF1aXJlZCB0byBmaW5kIGNvbmZpZ3VyYXRpb24uXG4gKiBAcGFyYW0gZW52aXJvbm1lbnQgLSBQcm9qZWN0IGVudmlyb25tZW50LlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZENvbmZpZ3VyYXRpb24oXG4gIG9wdGlvbnM6IElMb2FkQ29uZmlndXJhdGlvbk9wdGlvbnMgPSB7fSxcbiAgZW52aXJvbm1lbnQ6IElSdW5FbnZpcm9ubWVudCA9IHt9XG4pOiBQcm9taXNlPElSZXNvbHZlZENvbmZpZ3VyYXRpb24+IHtcbiAgY29uc3QgeyBjd2QsIHN0ZGVyciwgZW52LCBkZWJ1ZyB9ID0gbWVyZ2VFbnZpcm9ubWVudChlbnZpcm9ubWVudClcbiAgY29uc3QgbG9nZ2VyOiBJTG9nZ2VyID0gbmV3IENvbnNvbGVMb2dnZXIoc3RkZXJyLCBkZWJ1ZylcbiAgY29uc3QgY29uZmlnRmlsZSA9IG9wdGlvbnMuZmlsZSA/PyBsb2NhdGVGaWxlKGN3ZClcbiAgaWYgKGNvbmZpZ0ZpbGUpIHtcbiAgICBsb2dnZXIuZGVidWcoYENvbmZpZ3VyYXRpb24gd2lsbCBiZSBsb2FkZWQgZnJvbSBcIiR7Y29uZmlnRmlsZX1cImApXG4gIH0gZWxzZSB7XG4gICAgbG9nZ2VyLmRlYnVnKCdObyBjb25maWd1cmF0aW9uIGZpbGUgZm91bmQnKVxuICB9XG4gIGNvbnN0IHByb2ZpbGVDb25maWd1cmF0aW9uID0gY29uZmlnRmlsZVxuICAgID8gYXdhaXQgZnJvbUZpbGUobG9nZ2VyLCBjd2QsIGNvbmZpZ0ZpbGUsIG9wdGlvbnMucHJvZmlsZXMpXG4gICAgOiB7fVxuICBjb25zdCBvcmlnaW5hbCA9IG1lcmdlQ29uZmlndXJhdGlvbnMoXG4gICAgREVGQVVMVF9DT05GSUdVUkFUSU9OLFxuICAgIHByb2ZpbGVDb25maWd1cmF0aW9uLFxuICAgIG9wdGlvbnMucHJvdmlkZWRcbiAgKVxuICBsb2dnZXIuZGVidWcoJ1Jlc29sdmVkIGNvbmZpZ3VyYXRpb246Jywgb3JpZ2luYWwpXG4gIHZhbGlkYXRlQ29uZmlndXJhdGlvbihvcmlnaW5hbClcbiAgY29uc3QgcnVubmFibGUgPSBhd2FpdCBjb252ZXJ0Q29uZmlndXJhdGlvbihvcmlnaW5hbCwgZW52KVxuICByZXR1cm4ge1xuICAgIHVzZUNvbmZpZ3VyYXRpb246IG9yaWdpbmFsLFxuICAgIHJ1bkNvbmZpZ3VyYXRpb246IHJ1bm5hYmxlLFxuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUtBLE1BQUFBLGFBQUEsR0FBQUMsT0FBQTtBQUNBLE1BQUFDLGVBQUEsR0FBQUQsT0FBQTtBQUtBLE1BQUFFLHdCQUFBLEdBQUFGLE9BQUE7QUFDQSxNQUFBRyx1QkFBQSxHQUFBSCxPQUFBO0FBQ0EsTUFBQUksYUFBQSxHQUFBSixPQUFBO0FBRUEsTUFBQUssZ0JBQUEsR0FBQUwsT0FBQTtBQUVBOzs7Ozs7O0FBT08sZUFBZU0saUJBQWlCQSxDQUNyQ0MsT0FBQSxHQUFxQyxFQUFFLEVBQ3ZDQyxXQUFBLEdBQStCLEVBQUU7O0VBRWpDLE1BQU07SUFBRUMsR0FBRztJQUFFQyxNQUFNO0lBQUVDLEdBQUc7SUFBRUM7RUFBSyxDQUFFLEdBQUcsSUFBQVIsYUFBQSxDQUFBUyxnQkFBZ0IsRUFBQ0wsV0FBVyxDQUFDO0VBQ2pFLE1BQU1NLE1BQU0sR0FBWSxJQUFJVCxnQkFBQSxDQUFBVSxhQUFhLENBQUNMLE1BQU0sRUFBRUUsS0FBSyxDQUFDO0VBQ3hELE1BQU1JLFVBQVUsR0FBRyxDQUFBQyxFQUFBLEdBQUFWLE9BQU8sQ0FBQ1csSUFBSSxjQUFBRCxFQUFBLGNBQUFBLEVBQUEsR0FBSSxJQUFBbEIsYUFBQSxDQUFBb0IsVUFBVSxFQUFDVixHQUFHLENBQUM7RUFDbEQsSUFBSU8sVUFBVSxFQUFFO0lBQ2RGLE1BQU0sQ0FBQ0YsS0FBSyxDQUFDLHNDQUFzQ0ksVUFBVSxHQUFHLENBQUM7R0FDbEUsTUFBTTtJQUNMRixNQUFNLENBQUNGLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQzs7RUFFN0MsTUFBTVEsb0JBQW9CLEdBQUdKLFVBQVUsR0FDbkMsTUFBTSxJQUFBZixlQUFBLENBQUFvQixRQUFRLEVBQUNQLE1BQU0sRUFBRUwsR0FBRyxFQUFFTyxVQUFVLEVBQUVULE9BQU8sQ0FBQ2UsUUFBUSxDQUFDLEdBQ3pELEVBQUU7RUFDTixNQUFNQyxRQUFRLEdBQUcsSUFBQXRCLGVBQUEsQ0FBQXVCLG1CQUFtQixFQUNsQ3ZCLGVBQUEsQ0FBQXdCLHFCQUFxQixFQUNyQkwsb0JBQW9CLEVBQ3BCYixPQUFPLENBQUNtQixRQUFRLENBQ2pCO0VBQ0RaLE1BQU0sQ0FBQ0YsS0FBSyxDQUFDLHlCQUF5QixFQUFFVyxRQUFRLENBQUM7RUFDakQsSUFBQXJCLHdCQUFBLENBQUF5QixxQkFBcUIsRUFBQ0osUUFBUSxDQUFDO0VBQy9CLE1BQU1LLFFBQVEsR0FBRyxNQUFNLElBQUF6Qix1QkFBQSxDQUFBMEIsb0JBQW9CLEVBQUNOLFFBQVEsRUFBRVosR0FBRyxDQUFDO0VBQzFELE9BQU87SUFDTG1CLGdCQUFnQixFQUFFUCxRQUFRO0lBQzFCUSxnQkFBZ0IsRUFBRUg7R0FDbkI7QUFDSDtBQTNCQUksT0FBQSxDQUFBMUIsaUJBQUEsR0FBQUEsaUJBQUEifQ==