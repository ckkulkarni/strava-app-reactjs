{"version":3,"names":["locate_file_1","require","configuration_1","validate_configuration_1","convert_configuration_1","environment_1","console_logger_1","loadConfiguration","options","environment","cwd","stderr","env","debug","mergeEnvironment","logger","ConsoleLogger","configFile","_a","file","locateFile","profileConfiguration","fromFile","profiles","original","mergeConfigurations","DEFAULT_CONFIGURATION","provided","validateConfiguration","runnable","convertConfiguration","useConfiguration","runConfiguration","exports"],"sources":["../../src/api/load_configuration.ts"],"sourcesContent":["import {\n  IRunEnvironment,\n  IResolvedConfiguration,\n  ILoadConfigurationOptions,\n} from './types'\nimport { locateFile } from '../configuration/locate_file'\nimport {\n  DEFAULT_CONFIGURATION,\n  fromFile,\n  mergeConfigurations,\n} from '../configuration'\nimport { validateConfiguration } from '../configuration/validate_configuration'\nimport { convertConfiguration } from './convert_configuration'\nimport { mergeEnvironment } from './environment'\nimport { ILogger } from '../logger'\nimport { ConsoleLogger } from './console_logger'\n\n/**\n * Load user-authored configuration to be used in a test run.\n *\n * @public\n * @param options - Coordinates required to find configuration.\n * @param environment - Project environment.\n */\nexport async function loadConfiguration(\n  options: ILoadConfigurationOptions = {},\n  environment: IRunEnvironment = {}\n): Promise<IResolvedConfiguration> {\n  const { cwd, stderr, env, debug } = mergeEnvironment(environment)\n  const logger: ILogger = new ConsoleLogger(stderr, debug)\n  const configFile = options.file ?? locateFile(cwd)\n  if (configFile) {\n    logger.debug(`Configuration will be loaded from \"${configFile}\"`)\n  } else {\n    logger.debug('No configuration file found')\n  }\n  const profileConfiguration = configFile\n    ? await fromFile(logger, cwd, configFile, options.profiles)\n    : {}\n  const original = mergeConfigurations(\n    DEFAULT_CONFIGURATION,\n    profileConfiguration,\n    options.provided\n  )\n  logger.debug('Resolved configuration:', original)\n  validateConfiguration(original)\n  const runnable = await convertConfiguration(original, env)\n  return {\n    useConfiguration: original,\n    runConfiguration: runnable,\n  }\n}\n"],"mappings":";;;;;;AAKA,MAAAA,aAAA,GAAAC,OAAA;AACA,MAAAC,eAAA,GAAAD,OAAA;AAKA,MAAAE,wBAAA,GAAAF,OAAA;AACA,MAAAG,uBAAA,GAAAH,OAAA;AACA,MAAAI,aAAA,GAAAJ,OAAA;AAEA,MAAAK,gBAAA,GAAAL,OAAA;AAEA;;;;;;;AAOO,eAAeM,iBAAiBA,CACrCC,OAAA,GAAqC,EAAE,EACvCC,WAAA,GAA+B,EAAE;;EAEjC,MAAM;IAAEC,GAAG;IAAEC,MAAM;IAAEC,GAAG;IAAEC;EAAK,CAAE,GAAG,IAAAR,aAAA,CAAAS,gBAAgB,EAACL,WAAW,CAAC;EACjE,MAAMM,MAAM,GAAY,IAAIT,gBAAA,CAAAU,aAAa,CAACL,MAAM,EAAEE,KAAK,CAAC;EACxD,MAAMI,UAAU,GAAG,CAAAC,EAAA,GAAAV,OAAO,CAACW,IAAI,cAAAD,EAAA,cAAAA,EAAA,GAAI,IAAAlB,aAAA,CAAAoB,UAAU,EAACV,GAAG,CAAC;EAClD,IAAIO,UAAU,EAAE;IACdF,MAAM,CAACF,KAAK,CAAC,sCAAsCI,UAAU,GAAG,CAAC;GAClE,MAAM;IACLF,MAAM,CAACF,KAAK,CAAC,6BAA6B,CAAC;;EAE7C,MAAMQ,oBAAoB,GAAGJ,UAAU,GACnC,MAAM,IAAAf,eAAA,CAAAoB,QAAQ,EAACP,MAAM,EAAEL,GAAG,EAAEO,UAAU,EAAET,OAAO,CAACe,QAAQ,CAAC,GACzD,EAAE;EACN,MAAMC,QAAQ,GAAG,IAAAtB,eAAA,CAAAuB,mBAAmB,EAClCvB,eAAA,CAAAwB,qBAAqB,EACrBL,oBAAoB,EACpBb,OAAO,CAACmB,QAAQ,CACjB;EACDZ,MAAM,CAACF,KAAK,CAAC,yBAAyB,EAAEW,QAAQ,CAAC;EACjD,IAAArB,wBAAA,CAAAyB,qBAAqB,EAACJ,QAAQ,CAAC;EAC/B,MAAMK,QAAQ,GAAG,MAAM,IAAAzB,uBAAA,CAAA0B,oBAAoB,EAACN,QAAQ,EAAEZ,GAAG,CAAC;EAC1D,OAAO;IACLmB,gBAAgB,EAAEP,QAAQ;IAC1BQ,gBAAgB,EAAEH;GACnB;AACH;AA3BAI,OAAA,CAAA1B,iBAAA,GAAAA,iBAAA"}