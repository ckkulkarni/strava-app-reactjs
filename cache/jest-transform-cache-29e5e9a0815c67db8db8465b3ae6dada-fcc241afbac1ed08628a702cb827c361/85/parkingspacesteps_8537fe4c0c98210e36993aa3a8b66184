f9f5afdb2c560d92d627e5c9af9f1789
"use strict";

var _ParkingSpace = _interopRequireDefault(require("../../ParkingSpace"));
var _jestCucumber = require("jest-cucumber");
var _react = require("@testing-library/react");
var _react2 = _interopRequireDefault(require("react"));
require("text-encoding");
var _parkingSlice = _interopRequireWildcard(require("../../redux/reducer/parkingSlice"));
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _reactRouterDom = require("react-router-dom");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/parkingspace.feature");
let store;
(0, _jestCucumber.defineFeature)(feature, test => {
  test("Add a new parking space", ({
    given,
    when,
    then
  }) => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        parkingSpaces: _parkingSlice.default
      }
    });
    const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
    given("that there is a Parking Space Component", () => {
      expect(screen).toBeTruthy();
    });
    when('I click on the "Add Space" button', () => {
      const addSpace = screen.getAllByTestId("addSpace");
      _react.fireEvent.click(addSpace[0]);
    });
    then("a new parking space should be added to the list of available spaces", () => {
      const addSpace = screen.getAllByTestId("addSpace");
      (0, _react.act)(() => {
        _react.fireEvent.click(addSpace[0]);
        store.dispatch((0, _parkingSlice.addToParkingSpace)());
      });
    });
  });
  test("Remove an existing parking space", ({
    given,
    when,
    then,
    and
  }) => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        parkingSpaces: _parkingSlice.default
      }
    });
    const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
    given("that there is a Parking Space Component", () => {
      expect(screen).toBeTruthy();
    });
    and("there is more than one parking space available", () => {
      store = (0, _toolkit.configureStore)({
        reducer: {
          parkingSpaces: _parkingSlice.default
        }
      });
      const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
        store: store
      }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
      const addSpace = screen.getAllByTestId("addSpace");
      (0, _react.act)(() => {
        _react.fireEvent.click(addSpace[0]);
        store.dispatch((0, _parkingSlice.addToParkingSpace)());
      });
      const numSpaces = store.getState().parkingSpaces.numSpaces;
      expect(numSpaces).toBeGreaterThan(1);
    });
    when('I click on the "Remove Space" button', () => {
      const removeSpace = screen.getAllByTestId("decreaseSpace");
      (0, _react.act)(() => {
        _react.fireEvent.click(removeSpace[0]);
      });
    });
    then("a parking space should be removed from the list of available spaces", () => {
      const numSpaces = store.getState().parkingSpaces.numSpaces;
      expect(numSpaces).toBeGreaterThan(0);
      expect(numSpaces).toBeLessThanOrEqual(1);
    });
  });
  test("Register a parking lot", ({
    given,
    when,
    then,
    and
  }) => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        parkingSpaces: _parkingSlice.default
      }
    });
    const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
    given("that there is a Parking Space Component", () => {
      expect(screen).toBeTruthy();
    });
    and("I have selected a parking space", () => {
      store = (0, _toolkit.configureStore)({
        reducer: {
          parkingSpaces: _parkingSlice.default
        }
      });
      const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
        store: store
      }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
      const addSpace = screen.getAllByTestId("addSpace");
      (0, _react.act)(() => {
        _react.fireEvent.click(addSpace[0]);
        store.dispatch((0, _parkingSlice.addToParkingSpace)());
      });
      const selectedSpace = screen.getAllByTestId("space");
      _react.fireEvent.click(selectedSpace[0]);
    });
    when('I click on the "Register Lot" button', () => {
      const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
        store: store
      }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
      const registerButton = screen.getByText("Register Lot");
      _react.fireEvent.click(registerButton);
    });
    then("a form should appear to register the parking lot", () => {
      store = (0, _toolkit.configureStore)({
        reducer: {
          parkingSpaces: _parkingSlice.default
        }
      });
      const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
        store: store
      }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_ParkingSpace.default, null))));
      const registerButton = screen.getByText("Register Lot 1");
      _react.fireEvent.click(registerButton);
      const registerForm = screen.getByTestId("registerForm");
      expect(registerForm).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUGFya2luZ1NwYWNlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfamVzdEN1Y3VtYmVyIiwiX3JlYWN0IiwiX3JlYWN0MiIsIl9wYXJraW5nU2xpY2UiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9yZWFjdFJlZHV4IiwiX3Rvb2xraXQiLCJfcmVhY3RSb3V0ZXJEb20iLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwic3RvcmUiLCJkZWZpbmVGZWF0dXJlIiwidGVzdCIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJjb25maWd1cmVTdG9yZSIsInJlZHVjZXIiLCJwYXJraW5nU3BhY2VzIiwicGFya2luZ1NsaWNlIiwic2NyZWVuIiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIiwiTWVtb3J5Um91dGVyIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsImFkZFNwYWNlIiwiZ2V0QWxsQnlUZXN0SWQiLCJmaXJlRXZlbnQiLCJjbGljayIsImFjdCIsImRpc3BhdGNoIiwiYWRkVG9QYXJraW5nU3BhY2UiLCJhbmQiLCJCcm93c2VyUm91dGVyIiwibnVtU3BhY2VzIiwiZ2V0U3RhdGUiLCJ0b0JlR3JlYXRlclRoYW4iLCJyZW1vdmVTcGFjZSIsInRvQmVMZXNzVGhhbk9yRXF1YWwiLCJzZWxlY3RlZFNwYWNlIiwicmVnaXN0ZXJCdXR0b24iLCJnZXRCeVRleHQiLCJyZWdpc3RlckZvcm0iLCJnZXRCeVRlc3RJZCJdLCJzb3VyY2VzIjpbInBhcmtpbmdzcGFjZS5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBhcmtpbmdTcGFjZSBmcm9tIFwiLi4vLi4vUGFya2luZ1NwYWNlXCI7XHJcbmltcG9ydCBQYXltZW50U2NyZWVuIGZyb20gXCIuLi8uLi9QYXltZW50U2NyZWVuXCI7XHJcbmltcG9ydCB7IGRlZmluZUZlYXR1cmUsIGxvYWRGZWF0dXJlIH0gZnJvbSBcImplc3QtY3VjdW1iZXJcIjtcclxuaW1wb3J0IHsgZmlyZUV2ZW50LCByZW5kZXIsIHdhaXRGb3IsIGFjdCB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI7XHJcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFwidGV4dC1lbmNvZGluZ1wiO1xyXG5pbXBvcnQgcGFya2luZ1NsaWNlLCB7XHJcbiAgaW5pdGlhbGl6ZVBhcmtpbmdMb3QsXHJcbiAgYWRkVG9QYXJraW5nU3BhY2UsXHJcbn0gZnJvbSBcIi4uLy4uL3JlZHV4L3JlZHVjZXIvcGFya2luZ1NsaWNlXCI7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IGNvbmZpZ3VyZVN0b3JlIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcclxuaW1wb3J0IHtcclxuICBCcm93c2VyUm91dGVyIGFzIFJvdXRlcixcclxuICBSb3V0ZXMsXHJcbiAgUm91dGUsXHJcbiAgTWVtb3J5Um91dGVyLFxyXG59IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBCYXNlIGZyb20gXCIuLy4uLy4uL0Jhc2VcIjtcclxuXHJcbmNvbnN0IGZlYXR1cmUgPSBsb2FkRmVhdHVyZShcInNyYy9jb21wb25lbnRzL2ZlYXR1cmVzL3BhcmtpbmdzcGFjZS5mZWF0dXJlXCIpO1xyXG5sZXQgc3RvcmU6IGFueTtcclxuZGVmaW5lRmVhdHVyZShmZWF0dXJlLCAodGVzdCkgPT4ge1xyXG4gIHRlc3QoXCJBZGQgYSBuZXcgcGFya2luZyBzcGFjZVwiLCAoeyBnaXZlbiwgd2hlbiwgdGhlbiB9KSA9PiB7XHJcbiAgICBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKHtcclxuICAgICAgcmVkdWNlcjoge1xyXG4gICAgICAgIHBhcmtpbmdTcGFjZXM6IHBhcmtpbmdTbGljZSxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG4gICAgY29uc3Qgc2NyZWVuID0gcmVuZGVyKFxyXG4gICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cclxuICAgICAgICA8TWVtb3J5Um91dGVyPlxyXG4gICAgICAgICAgPFBhcmtpbmdTcGFjZSAvPlxyXG4gICAgICAgIDwvTWVtb3J5Um91dGVyPlxyXG4gICAgICA8L1Byb3ZpZGVyPlxyXG4gICAgKTtcclxuICAgIGdpdmVuKFwidGhhdCB0aGVyZSBpcyBhIFBhcmtpbmcgU3BhY2UgQ29tcG9uZW50XCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHNjcmVlbikudG9CZVRydXRoeSgpO1xyXG4gICAgfSk7XHJcbiAgICB3aGVuKCdJIGNsaWNrIG9uIHRoZSBcIkFkZCBTcGFjZVwiIGJ1dHRvbicsICgpID0+IHtcclxuICAgICAgY29uc3QgYWRkU3BhY2UgPSBzY3JlZW4uZ2V0QWxsQnlUZXN0SWQoXCJhZGRTcGFjZVwiKTtcclxuICAgICAgZmlyZUV2ZW50LmNsaWNrKGFkZFNwYWNlWzBdKTtcclxuICAgIH0pO1xyXG4gICAgdGhlbihcclxuICAgICAgXCJhIG5ldyBwYXJraW5nIHNwYWNlIHNob3VsZCBiZSBhZGRlZCB0byB0aGUgbGlzdCBvZiBhdmFpbGFibGUgc3BhY2VzXCIsXHJcbiAgICAgICgpID0+IHtcclxuICAgICAgICBjb25zdCBhZGRTcGFjZSA9IHNjcmVlbi5nZXRBbGxCeVRlc3RJZChcImFkZFNwYWNlXCIpO1xyXG4gICAgICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgICAgICBmaXJlRXZlbnQuY2xpY2soYWRkU3BhY2VbMF0pO1xyXG4gICAgICAgICAgc3RvcmUuZGlzcGF0Y2goYWRkVG9QYXJraW5nU3BhY2UoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfSk7XHJcbiAgdGVzdChcIlJlbW92ZSBhbiBleGlzdGluZyBwYXJraW5nIHNwYWNlXCIsICh7IGdpdmVuLCB3aGVuLCB0aGVuLCBhbmQgfSkgPT4ge1xyXG4gICAgc3RvcmUgPSBjb25maWd1cmVTdG9yZSh7XHJcbiAgICAgIHJlZHVjZXI6IHtcclxuICAgICAgICBwYXJraW5nU3BhY2VzOiBwYXJraW5nU2xpY2UsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlcihcclxuICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICAgICAgPFJvdXRlcj5cclxuICAgICAgICAgIDxQYXJraW5nU3BhY2UgLz5cclxuICAgICAgICA8L1JvdXRlcj5cclxuICAgICAgPC9Qcm92aWRlcj5cclxuICAgICk7XHJcbiAgICBnaXZlbihcInRoYXQgdGhlcmUgaXMgYSBQYXJraW5nIFNwYWNlIENvbXBvbmVudFwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4pLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gICAgYW5kKFwidGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBwYXJraW5nIHNwYWNlIGF2YWlsYWJsZVwiLCAoKSA9PiB7XHJcbiAgICAgIHN0b3JlID0gY29uZmlndXJlU3RvcmUoe1xyXG4gICAgICAgIHJlZHVjZXI6IHtcclxuICAgICAgICAgIHBhcmtpbmdTcGFjZXM6IHBhcmtpbmdTbGljZSxcclxuICAgICAgICB9LFxyXG4gICAgICB9KTtcclxuICAgICAgY29uc3Qgc2NyZWVuID0gcmVuZGVyKFxyXG4gICAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxyXG4gICAgICAgICAgPFJvdXRlcj5cclxuICAgICAgICAgICAgPFBhcmtpbmdTcGFjZSAvPlxyXG4gICAgICAgICAgPC9Sb3V0ZXI+XHJcbiAgICAgICAgPC9Qcm92aWRlcj5cclxuICAgICAgKTtcclxuICAgICAgY29uc3QgYWRkU3BhY2UgPSBzY3JlZW4uZ2V0QWxsQnlUZXN0SWQoXCJhZGRTcGFjZVwiKTtcclxuICAgICAgYWN0KCgpID0+IHtcclxuICAgICAgICBmaXJlRXZlbnQuY2xpY2soYWRkU3BhY2VbMF0pO1xyXG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKGFkZFRvUGFya2luZ1NwYWNlKCkpO1xyXG4gICAgICB9KTtcclxuICAgICAgY29uc3QgbnVtU3BhY2VzID0gc3RvcmUuZ2V0U3RhdGUoKS5wYXJraW5nU3BhY2VzLm51bVNwYWNlcztcclxuICAgICAgZXhwZWN0KG51bVNwYWNlcykudG9CZUdyZWF0ZXJUaGFuKDEpO1xyXG4gICAgfSk7XHJcbiAgICB3aGVuKCdJIGNsaWNrIG9uIHRoZSBcIlJlbW92ZSBTcGFjZVwiIGJ1dHRvbicsICgpID0+IHtcclxuICAgICAgY29uc3QgcmVtb3ZlU3BhY2UgPSBzY3JlZW4uZ2V0QWxsQnlUZXN0SWQoXCJkZWNyZWFzZVNwYWNlXCIpO1xyXG4gICAgICBhY3QoKCkgPT4ge1xyXG4gICAgICAgIGZpcmVFdmVudC5jbGljayhyZW1vdmVTcGFjZVswXSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICB0aGVuKFxyXG4gICAgICBcImEgcGFya2luZyBzcGFjZSBzaG91bGQgYmUgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0IG9mIGF2YWlsYWJsZSBzcGFjZXNcIixcclxuICAgICAgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG51bVNwYWNlcyA9IHN0b3JlLmdldFN0YXRlKCkucGFya2luZ1NwYWNlcy5udW1TcGFjZXM7XHJcbiAgICAgICAgZXhwZWN0KG51bVNwYWNlcykudG9CZUdyZWF0ZXJUaGFuKDApO1xyXG4gICAgICAgIGV4cGVjdChudW1TcGFjZXMpLnRvQmVMZXNzVGhhbk9yRXF1YWwoMSk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfSk7XHJcbiAgdGVzdChcIlJlZ2lzdGVyIGEgcGFya2luZyBsb3RcIiwgKHsgZ2l2ZW4sIHdoZW4sIHRoZW4sIGFuZCB9KSA9PiB7XHJcbiAgICBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKHtcclxuICAgICAgcmVkdWNlcjoge1xyXG4gICAgICAgIHBhcmtpbmdTcGFjZXM6IHBhcmtpbmdTbGljZSxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlcihcclxuICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICAgICAgPE1lbW9yeVJvdXRlcj5cclxuICAgICAgICAgIDxQYXJraW5nU3BhY2UgLz5cclxuICAgICAgICA8L01lbW9yeVJvdXRlcj5cclxuICAgICAgPC9Qcm92aWRlcj5cclxuICAgICk7XHJcbiAgICBnaXZlbihcInRoYXQgdGhlcmUgaXMgYSBQYXJraW5nIFNwYWNlIENvbXBvbmVudFwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4pLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gICAgYW5kKFwiSSBoYXZlIHNlbGVjdGVkIGEgcGFya2luZyBzcGFjZVwiLCAoKSA9PiB7XHJcbiAgICAgIHN0b3JlID0gY29uZmlndXJlU3RvcmUoe1xyXG4gICAgICAgIHJlZHVjZXI6IHtcclxuICAgICAgICAgIHBhcmtpbmdTcGFjZXM6IHBhcmtpbmdTbGljZSxcclxuICAgICAgICB9LFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlcihcclxuICAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cclxuICAgICAgICAgIDxNZW1vcnlSb3V0ZXI+XHJcbiAgICAgICAgICAgIDxQYXJraW5nU3BhY2UgLz5cclxuICAgICAgICAgIDwvTWVtb3J5Um91dGVyPlxyXG4gICAgICAgIDwvUHJvdmlkZXI+XHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IGFkZFNwYWNlID0gc2NyZWVuLmdldEFsbEJ5VGVzdElkKFwiYWRkU3BhY2VcIik7XHJcbiAgICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgICAgZmlyZUV2ZW50LmNsaWNrKGFkZFNwYWNlWzBdKTtcclxuICAgICAgICBzdG9yZS5kaXNwYXRjaChhZGRUb1BhcmtpbmdTcGFjZSgpKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnN0IHNlbGVjdGVkU3BhY2UgPSBzY3JlZW4uZ2V0QWxsQnlUZXN0SWQoXCJzcGFjZVwiKTtcclxuICAgICAgZmlyZUV2ZW50LmNsaWNrKHNlbGVjdGVkU3BhY2VbMF0pO1xyXG4gICAgfSk7XHJcbiAgICB3aGVuKCdJIGNsaWNrIG9uIHRoZSBcIlJlZ2lzdGVyIExvdFwiIGJ1dHRvbicsICgpID0+IHtcclxuICAgICAgY29uc3Qgc2NyZWVuID0gcmVuZGVyKFxyXG4gICAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxyXG4gICAgICAgICAgPE1lbW9yeVJvdXRlcj5cclxuICAgICAgICAgICAgPFBhcmtpbmdTcGFjZSAvPlxyXG4gICAgICAgICAgPC9NZW1vcnlSb3V0ZXI+XHJcbiAgICAgICAgPC9Qcm92aWRlcj5cclxuICAgICAgKTtcclxuICAgICAgY29uc3QgcmVnaXN0ZXJCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXh0KFwiUmVnaXN0ZXIgTG90XCIpO1xyXG4gICAgICBmaXJlRXZlbnQuY2xpY2socmVnaXN0ZXJCdXR0b24pO1xyXG4gICAgfSk7XHJcbiAgICB0aGVuKFwiYSBmb3JtIHNob3VsZCBhcHBlYXIgdG8gcmVnaXN0ZXIgdGhlIHBhcmtpbmcgbG90XCIsICgpID0+IHtcclxuICAgICAgc3RvcmUgPSBjb25maWd1cmVTdG9yZSh7XHJcbiAgICAgICAgcmVkdWNlcjoge1xyXG4gICAgICAgICAgcGFya2luZ1NwYWNlczogcGFya2luZ1NsaWNlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zdCBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICAgICAgICA8TWVtb3J5Um91dGVyPlxyXG4gICAgICAgICAgICA8UGFya2luZ1NwYWNlIC8+XHJcbiAgICAgICAgICA8L01lbW9yeVJvdXRlcj5cclxuICAgICAgICA8L1Byb3ZpZGVyPlxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCByZWdpc3RlckJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRleHQoXCJSZWdpc3RlciBMb3QgMVwiKTtcclxuICAgICAgZmlyZUV2ZW50LmNsaWNrKHJlZ2lzdGVyQnV0dG9uKTtcclxuICAgICAgY29uc3QgcmVnaXN0ZXJGb3JtID0gc2NyZWVuLmdldEJ5VGVzdElkKFwicmVnaXN0ZXJGb3JtXCIpO1xyXG4gICAgICBleHBlY3QocmVnaXN0ZXJGb3JtKS50b0JlVHJ1dGh5KCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxhQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxhQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxNQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxPQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQUEsT0FBQTtBQUNBLElBQUFJLGFBQUEsR0FBQUMsdUJBQUEsQ0FBQUwsT0FBQTtBQUlBLElBQUFNLFdBQUEsR0FBQU4sT0FBQTtBQUNBLElBQUFPLFFBQUEsR0FBQVAsT0FBQTtBQUNBLElBQUFRLGVBQUEsR0FBQVIsT0FBQTtBQUswQixTQUFBUyx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEsQ0FBQUMsV0FBQSxXQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFBLEtBQUFGLFdBQUE7QUFBQSxTQUFBTCx3QkFBQVMsR0FBQSxFQUFBSixXQUFBLFNBQUFBLFdBQUEsSUFB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