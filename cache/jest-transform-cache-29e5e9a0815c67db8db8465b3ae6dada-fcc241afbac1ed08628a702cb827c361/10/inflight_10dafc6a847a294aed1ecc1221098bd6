6f5b36bac9cef99bed647deb8a72e86e
"use strict";

var wrappy = require('wrappy');
var reqs = Object.create(null);
var once = require('once');
module.exports = wrappy(inflight);
function inflight(key, cb) {
  if (reqs[key]) {
    reqs[key].push(cb);
    return null;
  } else {
    reqs[key] = [cb];
    return makeres(key);
  }
}
function makeres(key) {
  return once(function RES() {
    var cbs = reqs[key];
    var len = cbs.length;
    var args = slice(arguments);

    // XXX It's somewhat ambiguous whether a new callback added in this
    // pass should be queued for later execution if something in the
    // list of callbacks throws, or if it should just be discarded.
    // However, it's such an edge case that it hardly matters, and either
    // choice is likely as surprising as the other.
    // As it happens, we do go ahead and schedule it for later execution.
    try {
      for (var i = 0; i < len; i++) {
        cbs[i].apply(null, args);
      }
    } finally {
      if (cbs.length > len) {
        // added more in the interim.
        // de-zalgo, just in case, but don't call again.
        cbs.splice(0, len);
        process.nextTick(function () {
          RES.apply(null, args);
        });
      } else {
        delete reqs[key];
      }
    }
  });
}
function slice(args) {
  var length = args.length;
  var array = [];
  for (var i = 0; i < length; i++) array[i] = args[i];
  return array;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ3cmFwcHkiLCJyZXF1aXJlIiwicmVxcyIsIk9iamVjdCIsImNyZWF0ZSIsIm9uY2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW5mbGlnaHQiLCJrZXkiLCJjYiIsInB1c2giLCJtYWtlcmVzIiwiUkVTIiwiY2JzIiwibGVuIiwibGVuZ3RoIiwiYXJncyIsInNsaWNlIiwiYXJndW1lbnRzIiwiaSIsImFwcGx5Iiwic3BsaWNlIiwicHJvY2VzcyIsIm5leHRUaWNrIiwiYXJyYXkiXSwic291cmNlcyI6WyJpbmZsaWdodC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgd3JhcHB5ID0gcmVxdWlyZSgnd3JhcHB5JylcbnZhciByZXFzID0gT2JqZWN0LmNyZWF0ZShudWxsKVxudmFyIG9uY2UgPSByZXF1aXJlKCdvbmNlJylcblxubW9kdWxlLmV4cG9ydHMgPSB3cmFwcHkoaW5mbGlnaHQpXG5cbmZ1bmN0aW9uIGluZmxpZ2h0IChrZXksIGNiKSB7XG4gIGlmIChyZXFzW2tleV0pIHtcbiAgICByZXFzW2tleV0ucHVzaChjYilcbiAgICByZXR1cm4gbnVsbFxuICB9IGVsc2Uge1xuICAgIHJlcXNba2V5XSA9IFtjYl1cbiAgICByZXR1cm4gbWFrZXJlcyhrZXkpXG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZXJlcyAoa2V5KSB7XG4gIHJldHVybiBvbmNlKGZ1bmN0aW9uIFJFUyAoKSB7XG4gICAgdmFyIGNicyA9IHJlcXNba2V5XVxuICAgIHZhciBsZW4gPSBjYnMubGVuZ3RoXG4gICAgdmFyIGFyZ3MgPSBzbGljZShhcmd1bWVudHMpXG5cbiAgICAvLyBYWFggSXQncyBzb21ld2hhdCBhbWJpZ3VvdXMgd2hldGhlciBhIG5ldyBjYWxsYmFjayBhZGRlZCBpbiB0aGlzXG4gICAgLy8gcGFzcyBzaG91bGQgYmUgcXVldWVkIGZvciBsYXRlciBleGVjdXRpb24gaWYgc29tZXRoaW5nIGluIHRoZVxuICAgIC8vIGxpc3Qgb2YgY2FsbGJhY2tzIHRocm93cywgb3IgaWYgaXQgc2hvdWxkIGp1c3QgYmUgZGlzY2FyZGVkLlxuICAgIC8vIEhvd2V2ZXIsIGl0J3Mgc3VjaCBhbiBlZGdlIGNhc2UgdGhhdCBpdCBoYXJkbHkgbWF0dGVycywgYW5kIGVpdGhlclxuICAgIC8vIGNob2ljZSBpcyBsaWtlbHkgYXMgc3VycHJpc2luZyBhcyB0aGUgb3RoZXIuXG4gICAgLy8gQXMgaXQgaGFwcGVucywgd2UgZG8gZ28gYWhlYWQgYW5kIHNjaGVkdWxlIGl0IGZvciBsYXRlciBleGVjdXRpb24uXG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY2JzW2ldLmFwcGx5KG51bGwsIGFyZ3MpXG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChjYnMubGVuZ3RoID4gbGVuKSB7XG4gICAgICAgIC8vIGFkZGVkIG1vcmUgaW4gdGhlIGludGVyaW0uXG4gICAgICAgIC8vIGRlLXphbGdvLCBqdXN0IGluIGNhc2UsIGJ1dCBkb24ndCBjYWxsIGFnYWluLlxuICAgICAgICBjYnMuc3BsaWNlKDAsIGxlbilcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgUkVTLmFwcGx5KG51bGwsIGFyZ3MpXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGUgcmVxc1trZXldXG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuXG5mdW5jdGlvbiBzbGljZSAoYXJncykge1xuICB2YXIgbGVuZ3RoID0gYXJncy5sZW5ndGhcbiAgdmFyIGFycmF5ID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSBhcnJheVtpXSA9IGFyZ3NbaV1cbiAgcmV0dXJuIGFycmF5XG59XG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsUUFBUSxDQUFDO0FBQzlCLElBQUlDLElBQUksR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQzlCLElBQUlDLElBQUksR0FBR0osT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUUxQkssTUFBTSxDQUFDQyxPQUFPLEdBQUdQLE1BQU0sQ0FBQ1EsUUFBUSxDQUFDO0FBRWpDLFNBQVNBLFFBQVFBLENBQUVDLEdBQUcsRUFBRUMsRUFBRSxFQUFFO0VBQzFCLElBQUlSLElBQUksQ0FBQ08sR0FBRyxDQUFDLEVBQUU7SUFDYlAsSUFBSSxDQUFDTyxHQUFHLENBQUMsQ0FBQ0UsSUFBSSxDQUFDRCxFQUFFLENBQUM7SUFDbEIsT0FBTyxJQUFJO0VBQ2IsQ0FBQyxNQUFNO0lBQ0xSLElBQUksQ0FBQ08sR0FBRyxDQUFDLEdBQUcsQ0FBQ0MsRUFBRSxDQUFDO0lBQ2hCLE9BQU9FLE9BQU8sQ0FBQ0gsR0FBRyxDQUFDO0VBQ3JCO0FBQ0Y7QUFFQSxTQUFTRyxPQUFPQSxDQUFFSCxHQUFHLEVBQUU7RUFDckIsT0FBT0osSUFBSSxDQUFDLFNBQVNRLEdBQUdBLENBQUEsRUFBSTtJQUMxQixJQUFJQyxHQUFHLEdBQUdaLElBQUksQ0FBQ08sR0FBRyxDQUFDO0lBQ25CLElBQUlNLEdBQUcsR0FBR0QsR0FBRyxDQUFDRSxNQUFNO0lBQ3BCLElBQUlDLElBQUksR0FBR0MsS0FBSyxDQUFDQyxTQUFTLENBQUM7O0lBRTNCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBLElBQUk7TUFDRixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0wsR0FBRyxFQUFFSyxDQUFDLEVBQUUsRUFBRTtRQUM1Qk4sR0FBRyxDQUFDTSxDQUFDLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLElBQUksRUFBRUosSUFBSSxDQUFDO01BQzFCO0lBQ0YsQ0FBQyxTQUFTO01BQ1IsSUFBSUgsR0FBRyxDQUFDRSxNQUFNLEdBQUdELEdBQUcsRUFBRTtRQUNwQjtRQUNBO1FBQ0FELEdBQUcsQ0FBQ1EsTUFBTSxDQUFDLENBQUMsRUFBRVAsR0FBRyxDQUFDO1FBQ2xCUSxPQUFPLENBQUNDLFFBQVEsQ0FBQyxZQUFZO1VBQzNCWCxHQUFHLENBQUNRLEtBQUssQ0FBQyxJQUFJLEVBQUVKLElBQUksQ0FBQztRQUN2QixDQUFDLENBQUM7TUFDSixDQUFDLE1BQU07UUFDTCxPQUFPZixJQUFJLENBQUNPLEdBQUcsQ0FBQztNQUNsQjtJQUNGO0VBQ0YsQ0FBQyxDQUFDO0FBQ0o7QUFFQSxTQUFTUyxLQUFLQSxDQUFFRCxJQUFJLEVBQUU7RUFDcEIsSUFBSUQsTUFBTSxHQUFHQyxJQUFJLENBQUNELE1BQU07RUFDeEIsSUFBSVMsS0FBSyxHQUFHLEVBQUU7RUFFZCxLQUFLLElBQUlMLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0osTUFBTSxFQUFFSSxDQUFDLEVBQUUsRUFBRUssS0FBSyxDQUFDTCxDQUFDLENBQUMsR0FBR0gsSUFBSSxDQUFDRyxDQUFDLENBQUM7RUFDbkQsT0FBT0ssS0FBSztBQUNkIn0=