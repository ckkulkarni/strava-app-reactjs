4deef56f5d5b17e7b4422cbfe5ba64de
"use strict";

var _react = require("@testing-library/react");
var _PaymentScreen = _interopRequireDefault(require("./../../PaymentScreen"));
require("@testing-library/jest-dom/extend-expect");
var _jestCucumber = require("jest-cucumber");
var _reactRouterDom = require("react-router-dom");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
let store;
const feature = (0, _jestCucumber.loadFeature)("src/components/features/paymentscreen.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User pays for occupied parking spot", ({
    given,
    then,
    when,
    and
  }) => {
    given("I am on the Payment Screen", () => {
      const state = {
        spaceDetails: {
          registration: "ABC123",
          parkingTime: "08:30"
        },
        space: 1
      };
      (0, _react.render)( /*#__PURE__*/React.createElement(_reactRouterDom.MemoryRouter, {
        initialEntries: ["/payment"]
      }, /*#__PURE__*/React.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/React.createElement(_reactRouterDom.Route, {
        path: "/payment",
        element: /*#__PURE__*/React.createElement(_PaymentScreen.default, null)
      }))), {
        wrapper: Wrapper
      });
    });
    when("I click the Make Payment button", async () => {
      const paymentButton = _react.screen.getByTestId("paymentButton");
      _react.fireEvent.click(paymentButton);
      await _react.screen.findByText("Payment Successful!");
    });
    function Wrapper({
      children
    }) {
      const location = (0, _reactRouterDom.useLocation)();
      return /*#__PURE__*/React.createElement("div", null, children);
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX1BheW1lbnRTY3JlZW4iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2plc3RDdWN1bWJlciIsIl9yZWFjdFJvdXRlckRvbSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Iiwic3RvcmUiLCJmZWF0dXJlIiwibG9hZEZlYXR1cmUiLCJkZWZpbmVGZWF0dXJlIiwidGVzdCIsImdpdmVuIiwidGhlbiIsIndoZW4iLCJhbmQiLCJzdGF0ZSIsInNwYWNlRGV0YWlscyIsInJlZ2lzdHJhdGlvbiIsInBhcmtpbmdUaW1lIiwic3BhY2UiLCJyZW5kZXIiLCJSZWFjdCIsImNyZWF0ZUVsZW1lbnQiLCJNZW1vcnlSb3V0ZXIiLCJpbml0aWFsRW50cmllcyIsIlJvdXRlcyIsIlJvdXRlIiwicGF0aCIsImVsZW1lbnQiLCJ3cmFwcGVyIiwiV3JhcHBlciIsInBheW1lbnRCdXR0b24iLCJzY3JlZW4iLCJnZXRCeVRlc3RJZCIsImZpcmVFdmVudCIsImNsaWNrIiwiZmluZEJ5VGV4dCIsImNoaWxkcmVuIiwibG9jYXRpb24iLCJ1c2VMb2NhdGlvbiJdLCJzb3VyY2VzIjpbInBheW1lbnRzY3JlZW4uc3RlcHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNjcmVlbiwgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiO1xyXG5pbXBvcnQgUGF5bWVudFNjcmVlbiBmcm9tIFwiLi8uLi8uLi9QYXltZW50U2NyZWVuXCI7XHJcbmltcG9ydCBcIkB0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20vZXh0ZW5kLWV4cGVjdFwiO1xyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBjb25maWd1cmVTdG9yZSB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XHJcbmltcG9ydCB7IGRlZmluZUZlYXR1cmUsIGxvYWRGZWF0dXJlIH0gZnJvbSBcImplc3QtY3VjdW1iZXJcIjtcclxuaW1wb3J0IHtcclxuICBCcm93c2VyUm91dGVyIGFzIFJvdXRlcixcclxuICBSb3V0ZXMsXHJcbiAgUm91dGUsXHJcbiAgTWVtb3J5Um91dGVyLFxyXG4gIHVzZUxvY2F0aW9uLFxyXG59IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmxldCBzdG9yZTogYW55O1xyXG5jb25zdCBmZWF0dXJlID0gbG9hZEZlYXR1cmUoXCJzcmMvY29tcG9uZW50cy9mZWF0dXJlcy9wYXltZW50c2NyZWVuLmZlYXR1cmVcIik7XHJcbmRlZmluZUZlYXR1cmUoZmVhdHVyZSwgKHRlc3QpID0+IHtcclxuICB0ZXN0KFwiVXNlciBwYXlzIGZvciBvY2N1cGllZCBwYXJraW5nIHNwb3RcIiwgKHsgZ2l2ZW4sIHRoZW4sIHdoZW4sIGFuZCB9KSA9PiB7XHJcbiAgICBnaXZlbihcIkkgYW0gb24gdGhlIFBheW1lbnQgU2NyZWVuXCIsICgpID0+IHtcclxuICAgICAgY29uc3Qgc3RhdGUgPSB7XHJcbiAgICAgICAgc3BhY2VEZXRhaWxzOiB7XHJcbiAgICAgICAgICByZWdpc3RyYXRpb246IFwiQUJDMTIzXCIsXHJcbiAgICAgICAgICBwYXJraW5nVGltZTogXCIwODozMFwiLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3BhY2U6IDEsXHJcbiAgICAgIH07XHJcbiAgICAgIHJlbmRlcihcclxuICAgICAgICA8TWVtb3J5Um91dGVyIGluaXRpYWxFbnRyaWVzPXtbXCIvcGF5bWVudFwiXX0+XHJcbiAgICAgICAgICA8Um91dGVzPlxyXG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9wYXltZW50XCIgZWxlbWVudD17PFBheW1lbnRTY3JlZW4gLz59IC8+XHJcbiAgICAgICAgICA8L1JvdXRlcz5cclxuICAgICAgICA8L01lbW9yeVJvdXRlcj4sXHJcbiAgICAgICAgeyB3cmFwcGVyOiBXcmFwcGVyIH1cclxuICAgICAgKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHdoZW4oXCJJIGNsaWNrIHRoZSBNYWtlIFBheW1lbnQgYnV0dG9uXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgcGF5bWVudEJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZChcInBheW1lbnRCdXR0b25cIik7XHJcbiAgICAgIGZpcmVFdmVudC5jbGljayhwYXltZW50QnV0dG9uKTtcclxuICAgICAgYXdhaXQgc2NyZWVuLmZpbmRCeVRleHQoXCJQYXltZW50IFN1Y2Nlc3NmdWwhXCIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gV3JhcHBlcih7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9KSB7XHJcbiAgICAgIGNvbnN0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcclxuICAgICAgcmV0dXJuIDxkaXY+e2NoaWxkcmVufTwvZGl2PjtcclxuICAgIH1cclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxjQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQUEsT0FBQTtBQUdBLElBQUFHLGFBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLGVBQUEsR0FBQUosT0FBQTtBQU0wQixTQUFBRSx1QkFBQUcsR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUMxQixJQUFJRyxLQUFVO0FBQ2QsTUFBTUMsT0FBTyxHQUFHLElBQUFDLHlCQUFXLEVBQUMsK0NBQStDLENBQUM7QUFDNUUsSUFBQUMsMkJBQWEsRUFBQ0YsT0FBTyxFQUFHRyxJQUFJLElBQUs7RUFDL0JBLElBQUksQ0FBQyxxQ0FBcUMsRUFBRSxDQUFDO0lBQUVDLEtBQUs7SUFBRUMsSUFBSTtJQUFFQyxJQUFJO0lBQUVDO0VBQUksQ0FBQyxLQUFLO0lBQzFFSCxLQUFLLENBQUMsNEJBQTRCLEVBQUUsTUFBTTtNQUN4QyxNQUFNSSxLQUFLLEdBQUc7UUFDWkMsWUFBWSxFQUFFO1VBQ1pDLFlBQVksRUFBRSxRQUFRO1VBQ3RCQyxXQUFXLEVBQUU7UUFDZixDQUFDO1FBQ0RDLEtBQUssRUFBRTtNQUNULENBQUM7TUFDRCxJQUFBQyxhQUFNLGdCQUNKQyxLQUFBLENBQUFDLGFBQUEsQ0FBQ3BCLGVBQUEsQ0FBQXFCLFlBQVk7UUFBQ0MsY0FBYyxFQUFFLENBQUMsVUFBVTtNQUFFLGdCQUN6Q0gsS0FBQSxDQUFBQyxhQUFBLENBQUNwQixlQUFBLENBQUF1QixNQUFNLHFCQUNMSixLQUFBLENBQUFDLGFBQUEsQ0FBQ3BCLGVBQUEsQ0FBQXdCLEtBQUs7UUFBQ0MsSUFBSSxFQUFDLFVBQVU7UUFBQ0MsT0FBTyxlQUFFUCxLQUFBLENBQUFDLGFBQUEsQ0FBQ3ZCLGNBQUEsQ0FBQU0sT0FBYTtNQUFJLEVBQUcsQ0FDOUMsQ0FDSSxFQUNmO1FBQUV3QixPQUFPLEVBQUVDO01BQVEsQ0FBQyxDQUNyQjtJQUNILENBQUMsQ0FBQztJQUVGakIsSUFBSSxDQUFDLGlDQUFpQyxFQUFFLFlBQVk7TUFDbEQsTUFBTWtCLGFBQWEsR0FBR0MsYUFBTSxDQUFDQyxXQUFXLENBQUMsZUFBZSxDQUFDO01BQ3pEQyxnQkFBUyxDQUFDQyxLQUFLLENBQUNKLGFBQWEsQ0FBQztNQUM5QixNQUFNQyxhQUFNLENBQUNJLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQztJQUNoRCxDQUFDLENBQUM7SUFFRixTQUFTTixPQUFPQSxDQUFDO01BQUVPO0lBQXdDLENBQUMsRUFBRTtNQUM1RCxNQUFNQyxRQUFRLEdBQUcsSUFBQUMsMkJBQVcsR0FBRTtNQUM5QixvQkFBT2xCLEtBQUEsQ0FBQUMsYUFBQSxjQUFNZSxRQUFRLENBQU87SUFDOUI7RUFDRixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==