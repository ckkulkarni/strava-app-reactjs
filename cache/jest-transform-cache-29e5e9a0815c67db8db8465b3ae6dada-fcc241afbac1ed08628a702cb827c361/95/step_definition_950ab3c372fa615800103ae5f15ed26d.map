{"version":3,"names":["data_table_1","__importDefault","require","definition_1","step_arguments_1","value_checker_1","StepDefinition","default","constructor","data","keyword","pattern","expression","getInvocationParameters","step","world","parameters","Promise","all","match","text","map","arg","getValue","doesHaveValue","argument","argumentParamater","parseStepArgument","dataTable","docString","content","push","getInvalidCodeLengthMessage","baseGetInvalidCodeLengthMessage","validCodeLengths","length","matchesStepName","stepName","exports"],"sources":["../../src/models/step_definition.ts"],"sourcesContent":["import DataTable from './data_table'\nimport Definition, {\n  IDefinition,\n  IGetInvocationDataRequest,\n  IGetInvocationDataResponse,\n  IStepDefinitionParameters,\n} from './definition'\nimport { parseStepArgument } from '../step_arguments'\nimport { Expression } from '@cucumber/cucumber-expressions'\nimport { doesHaveValue } from '../value_checker'\nimport { GherkinStepKeyword } from './gherkin_step_keyword'\n\nexport default class StepDefinition extends Definition implements IDefinition {\n  public readonly keyword: GherkinStepKeyword\n  public readonly pattern: string | RegExp\n  public readonly expression: Expression\n\n  constructor(data: IStepDefinitionParameters) {\n    super(data)\n    this.keyword = data.keyword\n    this.pattern = data.pattern\n    this.expression = data.expression\n  }\n\n  async getInvocationParameters({\n    step,\n    world,\n  }: IGetInvocationDataRequest): Promise<IGetInvocationDataResponse> {\n    const parameters = await Promise.all(\n      this.expression.match(step.text).map((arg) => arg.getValue(world))\n    )\n    if (doesHaveValue(step.argument)) {\n      const argumentParamater = parseStepArgument<any>(step.argument, {\n        dataTable: (arg) => new DataTable(arg),\n        docString: (arg) => arg.content,\n      })\n      parameters.push(argumentParamater)\n    }\n    return {\n      getInvalidCodeLengthMessage: () =>\n        this.baseGetInvalidCodeLengthMessage(parameters),\n      parameters,\n      validCodeLengths: [parameters.length, parameters.length + 1],\n    }\n  }\n\n  matchesStepName(stepName: string): boolean {\n    return doesHaveValue(this.expression.match(stepName))\n  }\n}\n"],"mappings":";;;;;;;;;;AAAA,MAAAA,YAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,YAAA,GAAAF,eAAA,CAAAC,OAAA;AAMA,MAAAE,gBAAA,GAAAF,OAAA;AAEA,MAAAG,eAAA,GAAAH,OAAA;AAGA,MAAqBI,cAAe,SAAQH,YAAA,CAAAI,OAAU;EAKpDC,YAAYC,IAA+B;IACzC,KAAK,CAACA,IAAI,CAAC;IACX,IAAI,CAACC,OAAO,GAAGD,IAAI,CAACC,OAAO;IAC3B,IAAI,CAACC,OAAO,GAAGF,IAAI,CAACE,OAAO;IAC3B,IAAI,CAACC,UAAU,GAAGH,IAAI,CAACG,UAAU;EACnC;EAEA,MAAMC,uBAAuBA,CAAC;IAC5BC,IAAI;IACJC;EAAK,CACqB;IAC1B,MAAMC,UAAU,GAAG,MAAMC,OAAO,CAACC,GAAG,CAClC,IAAI,CAACN,UAAU,CAACO,KAAK,CAACL,IAAI,CAACM,IAAI,CAAC,CAACC,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAACC,QAAQ,CAACR,KAAK,CAAC,CAAC,CACnE;IACD,IAAI,IAAAV,eAAA,CAAAmB,aAAa,EAACV,IAAI,CAACW,QAAQ,CAAC,EAAE;MAChC,MAAMC,iBAAiB,GAAG,IAAAtB,gBAAA,CAAAuB,iBAAiB,EAAMb,IAAI,CAACW,QAAQ,EAAE;QAC9DG,SAAS,EAAGN,GAAG,IAAK,IAAItB,YAAA,CAAAO,OAAS,CAACe,GAAG,CAAC;QACtCO,SAAS,EAAGP,GAAG,IAAKA,GAAG,CAACQ;OACzB,CAAC;MACFd,UAAU,CAACe,IAAI,CAACL,iBAAiB,CAAC;;IAEpC,OAAO;MACLM,2BAA2B,EAAEA,CAAA,KAC3B,IAAI,CAACC,+BAA+B,CAACjB,UAAU,CAAC;MAClDA,UAAU;MACVkB,gBAAgB,EAAE,CAAClB,UAAU,CAACmB,MAAM,EAAEnB,UAAU,CAACmB,MAAM,GAAG,CAAC;KAC5D;EACH;EAEAC,eAAeA,CAACC,QAAgB;IAC9B,OAAO,IAAAhC,eAAA,CAAAmB,aAAa,EAAC,IAAI,CAACZ,UAAU,CAACO,KAAK,CAACkB,QAAQ,CAAC,CAAC;EACvD;;AApCFC,OAAA,CAAA/B,OAAA,GAAAD,cAAA"}