102df95e6ab78481cc97df1c1b73529f
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
const data_table_1 = __importDefault(require("./data_table"));
const definition_1 = __importDefault(require("./definition"));
const step_arguments_1 = require("../step_arguments");
const value_checker_1 = require("../value_checker");
class StepDefinition extends definition_1.default {
  constructor(data) {
    super(data);
    this.keyword = data.keyword;
    this.pattern = data.pattern;
    this.expression = data.expression;
  }
  async getInvocationParameters({
    step,
    world
  }) {
    const parameters = await Promise.all(this.expression.match(step.text).map(arg => arg.getValue(world)));
    if ((0, value_checker_1.doesHaveValue)(step.argument)) {
      const argumentParamater = (0, step_arguments_1.parseStepArgument)(step.argument, {
        dataTable: arg => new data_table_1.default(arg),
        docString: arg => arg.content
      });
      parameters.push(argumentParamater);
    }
    return {
      getInvalidCodeLengthMessage: () => this.baseGetInvalidCodeLengthMessage(parameters),
      parameters,
      validCodeLengths: [parameters.length, parameters.length + 1]
    };
  }
  matchesStepName(stepName) {
    return (0, value_checker_1.doesHaveValue)(this.expression.match(stepName));
  }
}
exports.default = StepDefinition;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkYXRhX3RhYmxlXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZXF1aXJlIiwiZGVmaW5pdGlvbl8xIiwic3RlcF9hcmd1bWVudHNfMSIsInZhbHVlX2NoZWNrZXJfMSIsIlN0ZXBEZWZpbml0aW9uIiwiZGVmYXVsdCIsImNvbnN0cnVjdG9yIiwiZGF0YSIsImtleXdvcmQiLCJwYXR0ZXJuIiwiZXhwcmVzc2lvbiIsImdldEludm9jYXRpb25QYXJhbWV0ZXJzIiwic3RlcCIsIndvcmxkIiwicGFyYW1ldGVycyIsIlByb21pc2UiLCJhbGwiLCJtYXRjaCIsInRleHQiLCJtYXAiLCJhcmciLCJnZXRWYWx1ZSIsImRvZXNIYXZlVmFsdWUiLCJhcmd1bWVudCIsImFyZ3VtZW50UGFyYW1hdGVyIiwicGFyc2VTdGVwQXJndW1lbnQiLCJkYXRhVGFibGUiLCJkb2NTdHJpbmciLCJjb250ZW50IiwicHVzaCIsImdldEludmFsaWRDb2RlTGVuZ3RoTWVzc2FnZSIsImJhc2VHZXRJbnZhbGlkQ29kZUxlbmd0aE1lc3NhZ2UiLCJ2YWxpZENvZGVMZW5ndGhzIiwibGVuZ3RoIiwibWF0Y2hlc1N0ZXBOYW1lIiwic3RlcE5hbWUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGVscy9zdGVwX2RlZmluaXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERhdGFUYWJsZSBmcm9tICcuL2RhdGFfdGFibGUnXG5pbXBvcnQgRGVmaW5pdGlvbiwge1xuICBJRGVmaW5pdGlvbixcbiAgSUdldEludm9jYXRpb25EYXRhUmVxdWVzdCxcbiAgSUdldEludm9jYXRpb25EYXRhUmVzcG9uc2UsXG4gIElTdGVwRGVmaW5pdGlvblBhcmFtZXRlcnMsXG59IGZyb20gJy4vZGVmaW5pdGlvbidcbmltcG9ydCB7IHBhcnNlU3RlcEFyZ3VtZW50IH0gZnJvbSAnLi4vc3RlcF9hcmd1bWVudHMnXG5pbXBvcnQgeyBFeHByZXNzaW9uIH0gZnJvbSAnQGN1Y3VtYmVyL2N1Y3VtYmVyLWV4cHJlc3Npb25zJ1xuaW1wb3J0IHsgZG9lc0hhdmVWYWx1ZSB9IGZyb20gJy4uL3ZhbHVlX2NoZWNrZXInXG5pbXBvcnQgeyBHaGVya2luU3RlcEtleXdvcmQgfSBmcm9tICcuL2doZXJraW5fc3RlcF9rZXl3b3JkJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGVwRGVmaW5pdGlvbiBleHRlbmRzIERlZmluaXRpb24gaW1wbGVtZW50cyBJRGVmaW5pdGlvbiB7XG4gIHB1YmxpYyByZWFkb25seSBrZXl3b3JkOiBHaGVya2luU3RlcEtleXdvcmRcbiAgcHVibGljIHJlYWRvbmx5IHBhdHRlcm46IHN0cmluZyB8IFJlZ0V4cFxuICBwdWJsaWMgcmVhZG9ubHkgZXhwcmVzc2lvbjogRXhwcmVzc2lvblxuXG4gIGNvbnN0cnVjdG9yKGRhdGE6IElTdGVwRGVmaW5pdGlvblBhcmFtZXRlcnMpIHtcbiAgICBzdXBlcihkYXRhKVxuICAgIHRoaXMua2V5d29yZCA9IGRhdGEua2V5d29yZFxuICAgIHRoaXMucGF0dGVybiA9IGRhdGEucGF0dGVyblxuICAgIHRoaXMuZXhwcmVzc2lvbiA9IGRhdGEuZXhwcmVzc2lvblxuICB9XG5cbiAgYXN5bmMgZ2V0SW52b2NhdGlvblBhcmFtZXRlcnMoe1xuICAgIHN0ZXAsXG4gICAgd29ybGQsXG4gIH06IElHZXRJbnZvY2F0aW9uRGF0YVJlcXVlc3QpOiBQcm9taXNlPElHZXRJbnZvY2F0aW9uRGF0YVJlc3BvbnNlPiB7XG4gICAgY29uc3QgcGFyYW1ldGVycyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgdGhpcy5leHByZXNzaW9uLm1hdGNoKHN0ZXAudGV4dCkubWFwKChhcmcpID0+IGFyZy5nZXRWYWx1ZSh3b3JsZCkpXG4gICAgKVxuICAgIGlmIChkb2VzSGF2ZVZhbHVlKHN0ZXAuYXJndW1lbnQpKSB7XG4gICAgICBjb25zdCBhcmd1bWVudFBhcmFtYXRlciA9IHBhcnNlU3RlcEFyZ3VtZW50PGFueT4oc3RlcC5hcmd1bWVudCwge1xuICAgICAgICBkYXRhVGFibGU6IChhcmcpID0+IG5ldyBEYXRhVGFibGUoYXJnKSxcbiAgICAgICAgZG9jU3RyaW5nOiAoYXJnKSA9PiBhcmcuY29udGVudCxcbiAgICAgIH0pXG4gICAgICBwYXJhbWV0ZXJzLnB1c2goYXJndW1lbnRQYXJhbWF0ZXIpXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBnZXRJbnZhbGlkQ29kZUxlbmd0aE1lc3NhZ2U6ICgpID0+XG4gICAgICAgIHRoaXMuYmFzZUdldEludmFsaWRDb2RlTGVuZ3RoTWVzc2FnZShwYXJhbWV0ZXJzKSxcbiAgICAgIHBhcmFtZXRlcnMsXG4gICAgICB2YWxpZENvZGVMZW5ndGhzOiBbcGFyYW1ldGVycy5sZW5ndGgsIHBhcmFtZXRlcnMubGVuZ3RoICsgMV0sXG4gICAgfVxuICB9XG5cbiAgbWF0Y2hlc1N0ZXBOYW1lKHN0ZXBOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZG9lc0hhdmVWYWx1ZSh0aGlzLmV4cHJlc3Npb24ubWF0Y2goc3RlcE5hbWUpKVxuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxNQUFBQSxZQUFBLEdBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUNBLE1BQUFDLFlBQUEsR0FBQUYsZUFBQSxDQUFBQyxPQUFBO0FBTUEsTUFBQUUsZ0JBQUEsR0FBQUYsT0FBQTtBQUVBLE1BQUFHLGVBQUEsR0FBQUgsT0FBQTtBQUdBLE1BQXFCSSxjQUFlLFNBQVFILFlBQUEsQ0FBQUksT0FBVTtFQUtwREMsWUFBWUMsSUFBK0I7SUFDekMsS0FBSyxDQUFDQSxJQUFJLENBQUM7SUFDWCxJQUFJLENBQUNDLE9BQU8sR0FBR0QsSUFBSSxDQUFDQyxPQUFPO0lBQzNCLElBQUksQ0FBQ0MsT0FBTyxHQUFHRixJQUFJLENBQUNFLE9BQU87SUFDM0IsSUFBSSxDQUFDQyxVQUFVLEdBQUdILElBQUksQ0FBQ0csVUFBVTtFQUNuQztFQUVBLE1BQU1DLHVCQUF1QkEsQ0FBQztJQUM1QkMsSUFBSTtJQUNKQztFQUFLLENBQ3FCO0lBQzFCLE1BQU1DLFVBQVUsR0FBRyxNQUFNQyxPQUFPLENBQUNDLEdBQUcsQ0FDbEMsSUFBSSxDQUFDTixVQUFVLENBQUNPLEtBQUssQ0FBQ0wsSUFBSSxDQUFDTSxJQUFJLENBQUMsQ0FBQ0MsR0FBRyxDQUFFQyxHQUFHLElBQUtBLEdBQUcsQ0FBQ0MsUUFBUSxDQUFDUixLQUFLLENBQUMsQ0FBQyxDQUNuRTtJQUNELElBQUksSUFBQVYsZUFBQSxDQUFBbUIsYUFBYSxFQUFDVixJQUFJLENBQUNXLFFBQVEsQ0FBQyxFQUFFO01BQ2hDLE1BQU1DLGlCQUFpQixHQUFHLElBQUF0QixnQkFBQSxDQUFBdUIsaUJBQWlCLEVBQU1iLElBQUksQ0FBQ1csUUFBUSxFQUFFO1FBQzlERyxTQUFTLEVBQUdOLEdBQUcsSUFBSyxJQUFJdEIsWUFBQSxDQUFBTyxPQUFTLENBQUNlLEdBQUcsQ0FBQztRQUN0Q08sU0FBUyxFQUFHUCxHQUFHLElBQUtBLEdBQUcsQ0FBQ1E7T0FDekIsQ0FBQztNQUNGZCxVQUFVLENBQUNlLElBQUksQ0FBQ0wsaUJBQWlCLENBQUM7O0lBRXBDLE9BQU87TUFDTE0sMkJBQTJCLEVBQUVBLENBQUEsS0FDM0IsSUFBSSxDQUFDQywrQkFBK0IsQ0FBQ2pCLFVBQVUsQ0FBQztNQUNsREEsVUFBVTtNQUNWa0IsZ0JBQWdCLEVBQUUsQ0FBQ2xCLFVBQVUsQ0FBQ21CLE1BQU0sRUFBRW5CLFVBQVUsQ0FBQ21CLE1BQU0sR0FBRyxDQUFDO0tBQzVEO0VBQ0g7RUFFQUMsZUFBZUEsQ0FBQ0MsUUFBZ0I7SUFDOUIsT0FBTyxJQUFBaEMsZUFBQSxDQUFBbUIsYUFBYSxFQUFDLElBQUksQ0FBQ1osVUFBVSxDQUFDTyxLQUFLLENBQUNrQixRQUFRLENBQUMsQ0FBQztFQUN2RDs7QUFwQ0ZDLE9BQUEsQ0FBQS9CLE9BQUEsR0FBQUQsY0FBQSJ9