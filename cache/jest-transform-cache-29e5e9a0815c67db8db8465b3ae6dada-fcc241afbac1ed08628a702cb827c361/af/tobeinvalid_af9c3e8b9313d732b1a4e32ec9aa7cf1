eead775d0dcdfda98c885fe3d61d552f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toBeInvalid = toBeInvalid;
exports.toBeValid = toBeValid;
var _utils = require("./utils");
const FORM_TAGS = ['form', 'input', 'select', 'textarea'];
function isElementHavingAriaInvalid(element) {
  return element.hasAttribute('aria-invalid') && element.getAttribute('aria-invalid') !== 'false';
}
function isSupportsValidityMethod(element) {
  return FORM_TAGS.includes((0, _utils.getTag)(element));
}
function isElementInvalid(element) {
  const isHaveAriaInvalid = isElementHavingAriaInvalid(element);
  if (isSupportsValidityMethod(element)) {
    return isHaveAriaInvalid || !element.checkValidity();
  } else {
    return isHaveAriaInvalid;
  }
}
function toBeInvalid(element) {
  (0, _utils.checkHtmlElement)(element, toBeInvalid, this);
  const isInvalid = isElementInvalid(element);
  return {
    pass: isInvalid,
    message: () => {
      const is = isInvalid ? 'is' : 'is not';
      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeInvalid`, 'element', ''), '', `Received element ${is} currently invalid:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\n');
    }
  };
}
function toBeValid(element) {
  (0, _utils.checkHtmlElement)(element, toBeValid, this);
  const isValid = !isElementInvalid(element);
  return {
    pass: isValid,
    message: () => {
      const is = isValid ? 'is' : 'is not';
      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeValid`, 'element', ''), '', `Received element ${is} currently valid:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\n');
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvQmVJbnZhbGlkIiwidG9CZVZhbGlkIiwiX3V0aWxzIiwicmVxdWlyZSIsIkZPUk1fVEFHUyIsImlzRWxlbWVudEhhdmluZ0FyaWFJbnZhbGlkIiwiZWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsImlzU3VwcG9ydHNWYWxpZGl0eU1ldGhvZCIsImluY2x1ZGVzIiwiZ2V0VGFnIiwiaXNFbGVtZW50SW52YWxpZCIsImlzSGF2ZUFyaWFJbnZhbGlkIiwiY2hlY2tWYWxpZGl0eSIsImNoZWNrSHRtbEVsZW1lbnQiLCJpc0ludmFsaWQiLCJwYXNzIiwibWVzc2FnZSIsImlzIiwidXRpbHMiLCJtYXRjaGVySGludCIsImlzTm90IiwicHJpbnRSZWNlaXZlZCIsImNsb25lTm9kZSIsImpvaW4iLCJpc1ZhbGlkIl0sInNvdXJjZXMiOlsidG8tYmUtaW52YWxpZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudG9CZUludmFsaWQgPSB0b0JlSW52YWxpZDtcbmV4cG9ydHMudG9CZVZhbGlkID0gdG9CZVZhbGlkO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbmNvbnN0IEZPUk1fVEFHUyA9IFsnZm9ybScsICdpbnB1dCcsICdzZWxlY3QnLCAndGV4dGFyZWEnXTtcblxuZnVuY3Rpb24gaXNFbGVtZW50SGF2aW5nQXJpYUludmFsaWQoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2FyaWEtaW52YWxpZCcpICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWludmFsaWQnKSAhPT0gJ2ZhbHNlJztcbn1cblxuZnVuY3Rpb24gaXNTdXBwb3J0c1ZhbGlkaXR5TWV0aG9kKGVsZW1lbnQpIHtcbiAgcmV0dXJuIEZPUk1fVEFHUy5pbmNsdWRlcygoMCwgX3V0aWxzLmdldFRhZykoZWxlbWVudCkpO1xufVxuXG5mdW5jdGlvbiBpc0VsZW1lbnRJbnZhbGlkKGVsZW1lbnQpIHtcbiAgY29uc3QgaXNIYXZlQXJpYUludmFsaWQgPSBpc0VsZW1lbnRIYXZpbmdBcmlhSW52YWxpZChlbGVtZW50KTtcblxuICBpZiAoaXNTdXBwb3J0c1ZhbGlkaXR5TWV0aG9kKGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGlzSGF2ZUFyaWFJbnZhbGlkIHx8ICFlbGVtZW50LmNoZWNrVmFsaWRpdHkoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaXNIYXZlQXJpYUludmFsaWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gdG9CZUludmFsaWQoZWxlbWVudCkge1xuICAoMCwgX3V0aWxzLmNoZWNrSHRtbEVsZW1lbnQpKGVsZW1lbnQsIHRvQmVJbnZhbGlkLCB0aGlzKTtcbiAgY29uc3QgaXNJbnZhbGlkID0gaXNFbGVtZW50SW52YWxpZChlbGVtZW50KTtcbiAgcmV0dXJuIHtcbiAgICBwYXNzOiBpc0ludmFsaWQsXG4gICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgY29uc3QgaXMgPSBpc0ludmFsaWQgPyAnaXMnIDogJ2lzIG5vdCc7XG4gICAgICByZXR1cm4gW3RoaXMudXRpbHMubWF0Y2hlckhpbnQoYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0JlSW52YWxpZGAsICdlbGVtZW50JywgJycpLCAnJywgYFJlY2VpdmVkIGVsZW1lbnQgJHtpc30gY3VycmVudGx5IGludmFsaWQ6YCwgYCAgJHt0aGlzLnV0aWxzLnByaW50UmVjZWl2ZWQoZWxlbWVudC5jbG9uZU5vZGUoZmFsc2UpKX1gXS5qb2luKCdcXG4nKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRvQmVWYWxpZChlbGVtZW50KSB7XG4gICgwLCBfdXRpbHMuY2hlY2tIdG1sRWxlbWVudCkoZWxlbWVudCwgdG9CZVZhbGlkLCB0aGlzKTtcbiAgY29uc3QgaXNWYWxpZCA9ICFpc0VsZW1lbnRJbnZhbGlkKGVsZW1lbnQpO1xuICByZXR1cm4ge1xuICAgIHBhc3M6IGlzVmFsaWQsXG4gICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgY29uc3QgaXMgPSBpc1ZhbGlkID8gJ2lzJyA6ICdpcyBub3QnO1xuICAgICAgcmV0dXJuIFt0aGlzLnV0aWxzLm1hdGNoZXJIaW50KGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9CZVZhbGlkYCwgJ2VsZW1lbnQnLCAnJyksICcnLCBgUmVjZWl2ZWQgZWxlbWVudCAke2lzfSBjdXJyZW50bHkgdmFsaWQ6YCwgYCAgJHt0aGlzLnV0aWxzLnByaW50UmVjZWl2ZWQoZWxlbWVudC5jbG9uZU5vZGUoZmFsc2UpKX1gXS5qb2luKCdcXG4nKTtcbiAgICB9XG4gIH07XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsV0FBVyxHQUFHQSxXQUFXO0FBQ2pDRixPQUFPLENBQUNHLFNBQVMsR0FBR0EsU0FBUztBQUU3QixJQUFJQyxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFFL0IsTUFBTUMsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDO0FBRXpELFNBQVNDLDBCQUEwQkEsQ0FBQ0MsT0FBTyxFQUFFO0VBQzNDLE9BQU9BLE9BQU8sQ0FBQ0MsWUFBWSxDQUFDLGNBQWMsQ0FBQyxJQUFJRCxPQUFPLENBQUNFLFlBQVksQ0FBQyxjQUFjLENBQUMsS0FBSyxPQUFPO0FBQ2pHO0FBRUEsU0FBU0Msd0JBQXdCQSxDQUFDSCxPQUFPLEVBQUU7RUFDekMsT0FBT0YsU0FBUyxDQUFDTSxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUVSLE1BQU0sQ0FBQ1MsTUFBTSxFQUFFTCxPQUFPLENBQUMsQ0FBQztBQUN4RDtBQUVBLFNBQVNNLGdCQUFnQkEsQ0FBQ04sT0FBTyxFQUFFO0VBQ2pDLE1BQU1PLGlCQUFpQixHQUFHUiwwQkFBMEIsQ0FBQ0MsT0FBTyxDQUFDO0VBRTdELElBQUlHLHdCQUF3QixDQUFDSCxPQUFPLENBQUMsRUFBRTtJQUNyQyxPQUFPTyxpQkFBaUIsSUFBSSxDQUFDUCxPQUFPLENBQUNRLGFBQWEsRUFBRTtFQUN0RCxDQUFDLE1BQU07SUFDTCxPQUFPRCxpQkFBaUI7RUFDMUI7QUFDRjtBQUVBLFNBQVNiLFdBQVdBLENBQUNNLE9BQU8sRUFBRTtFQUM1QixDQUFDLENBQUMsRUFBRUosTUFBTSxDQUFDYSxnQkFBZ0IsRUFBRVQsT0FBTyxFQUFFTixXQUFXLEVBQUUsSUFBSSxDQUFDO0VBQ3hELE1BQU1nQixTQUFTLEdBQUdKLGdCQUFnQixDQUFDTixPQUFPLENBQUM7RUFDM0MsT0FBTztJQUNMVyxJQUFJLEVBQUVELFNBQVM7SUFDZkUsT0FBTyxFQUFFQSxDQUFBLEtBQU07TUFDYixNQUFNQyxFQUFFLEdBQUdILFNBQVMsR0FBRyxJQUFJLEdBQUcsUUFBUTtNQUN0QyxPQUFPLENBQUMsSUFBSSxDQUFDSSxLQUFLLENBQUNDLFdBQVcsQ0FBRSxHQUFFLElBQUksQ0FBQ0MsS0FBSyxHQUFHLE1BQU0sR0FBRyxFQUFHLGNBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFHLG9CQUFtQkgsRUFBRyxxQkFBb0IsRUFBRyxLQUFJLElBQUksQ0FBQ0MsS0FBSyxDQUFDRyxhQUFhLENBQUNqQixPQUFPLENBQUNrQixTQUFTLENBQUMsS0FBSyxDQUFDLENBQUUsRUFBQyxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbE47RUFDRixDQUFDO0FBQ0g7QUFFQSxTQUFTeEIsU0FBU0EsQ0FBQ0ssT0FBTyxFQUFFO0VBQzFCLENBQUMsQ0FBQyxFQUFFSixNQUFNLENBQUNhLGdCQUFnQixFQUFFVCxPQUFPLEVBQUVMLFNBQVMsRUFBRSxJQUFJLENBQUM7RUFDdEQsTUFBTXlCLE9BQU8sR0FBRyxDQUFDZCxnQkFBZ0IsQ0FBQ04sT0FBTyxDQUFDO0VBQzFDLE9BQU87SUFDTFcsSUFBSSxFQUFFUyxPQUFPO0lBQ2JSLE9BQU8sRUFBRUEsQ0FBQSxLQUFNO01BQ2IsTUFBTUMsRUFBRSxHQUFHTyxPQUFPLEdBQUcsSUFBSSxHQUFHLFFBQVE7TUFDcEMsT0FBTyxDQUFDLElBQUksQ0FBQ04sS0FBSyxDQUFDQyxXQUFXLENBQUUsR0FBRSxJQUFJLENBQUNDLEtBQUssR0FBRyxNQUFNLEdBQUcsRUFBRyxZQUFXLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRyxvQkFBbUJILEVBQUcsbUJBQWtCLEVBQUcsS0FBSSxJQUFJLENBQUNDLEtBQUssQ0FBQ0csYUFBYSxDQUFDakIsT0FBTyxDQUFDa0IsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFFLEVBQUMsQ0FBQyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzlNO0VBQ0YsQ0FBQztBQUNIIn0=