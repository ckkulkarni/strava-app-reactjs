{"version":3,"names":["Scalar","require","stringifyNumber","floatNaN","identify","value","default","tag","test","resolve","str","slice","toLowerCase","NaN","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","stringify","floatExp","format","parseFloat","replace","node","num","isFinite","toExponential","float","dot","indexOf","f","substring","length","minFractionDigits","exports"],"sources":["float.js"],"sourcesContent":["'use strict';\n\nvar Scalar = require('../../nodes/Scalar.js');\nvar stringifyNumber = require('../../stringify/stringifyNumber.js');\n\nconst floatNaN = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?\\.(?:inf|Inf|INF|nan|NaN|NAN)$/,\n    resolve: (str) => str.slice(-3).toLowerCase() === 'nan'\n        ? NaN\n        : str[0] === '-'\n            ? Number.NEGATIVE_INFINITY\n            : Number.POSITIVE_INFINITY,\n    stringify: stringifyNumber.stringifyNumber\n};\nconst floatExp = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'EXP',\n    test: /^[-+]?(?:[0-9][0-9_]*)?(?:\\.[0-9_]*)?[eE][-+]?[0-9]+$/,\n    resolve: (str) => parseFloat(str.replace(/_/g, '')),\n    stringify(node) {\n        const num = Number(node.value);\n        return isFinite(num) ? num.toExponential() : stringifyNumber.stringifyNumber(node);\n    }\n};\nconst float = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:[0-9][0-9_]*)?\\.[0-9_]*$/,\n    resolve(str) {\n        const node = new Scalar.Scalar(parseFloat(str.replace(/_/g, '')));\n        const dot = str.indexOf('.');\n        if (dot !== -1) {\n            const f = str.substring(dot + 1).replace(/_/g, '');\n            if (f[f.length - 1] === '0')\n                node.minFractionDigits = f.length;\n        }\n        return node;\n    },\n    stringify: stringifyNumber.stringifyNumber\n};\n\nexports.float = float;\nexports.floatExp = floatExp;\nexports.floatNaN = floatNaN;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAC7C,IAAIC,eAAe,GAAGD,OAAO,CAAC,oCAAoC,CAAC;AAEnE,MAAME,QAAQ,GAAG;EACbC,QAAQ,EAAEC,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ;EAC5CC,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,yBAAyB;EAC9BC,IAAI,EAAE,sCAAsC;EAC5CC,OAAO,EAAGC,GAAG,IAAKA,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,KAAK,KAAK,GACjDC,GAAG,GACHH,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,GACVI,MAAM,CAACC,iBAAiB,GACxBD,MAAM,CAACE,iBAAiB;EAClCC,SAAS,EAAEf,eAAe,CAACA;AAC/B,CAAC;AACD,MAAMgB,QAAQ,GAAG;EACbd,QAAQ,EAAEC,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ;EAC5CC,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,yBAAyB;EAC9BY,MAAM,EAAE,KAAK;EACbX,IAAI,EAAE,uDAAuD;EAC7DC,OAAO,EAAGC,GAAG,IAAKU,UAAU,CAACV,GAAG,CAACW,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;EACnDJ,SAASA,CAACK,IAAI,EAAE;IACZ,MAAMC,GAAG,GAAGT,MAAM,CAACQ,IAAI,CAACjB,KAAK,CAAC;IAC9B,OAAOmB,QAAQ,CAACD,GAAG,CAAC,GAAGA,GAAG,CAACE,aAAa,EAAE,GAAGvB,eAAe,CAACA,eAAe,CAACoB,IAAI,CAAC;EACtF;AACJ,CAAC;AACD,MAAMI,KAAK,GAAG;EACVtB,QAAQ,EAAEC,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ;EAC5CC,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,yBAAyB;EAC9BC,IAAI,EAAE,mCAAmC;EACzCC,OAAOA,CAACC,GAAG,EAAE;IACT,MAAMY,IAAI,GAAG,IAAItB,MAAM,CAACA,MAAM,CAACoB,UAAU,CAACV,GAAG,CAACW,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;IACjE,MAAMM,GAAG,GAAGjB,GAAG,CAACkB,OAAO,CAAC,GAAG,CAAC;IAC5B,IAAID,GAAG,KAAK,CAAC,CAAC,EAAE;MACZ,MAAME,CAAC,GAAGnB,GAAG,CAACoB,SAAS,CAACH,GAAG,GAAG,CAAC,CAAC,CAACN,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;MAClD,IAAIQ,CAAC,CAACA,CAAC,CAACE,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EACvBT,IAAI,CAACU,iBAAiB,GAAGH,CAAC,CAACE,MAAM;IACzC;IACA,OAAOT,IAAI;EACf,CAAC;EACDL,SAAS,EAAEf,eAAe,CAACA;AAC/B,CAAC;AAED+B,OAAO,CAACP,KAAK,GAAGA,KAAK;AACrBO,OAAO,CAACf,QAAQ,GAAGA,QAAQ;AAC3Be,OAAO,CAAC9B,QAAQ,GAAGA,QAAQ"}