d0d2448ff3987ab925498fa175b5cf64
"use strict";

var __values = void 0 && (void 0).__values || function (o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var CombinatorialGeneratedExpressionFactory_js_1 = __importDefault(require("./CombinatorialGeneratedExpressionFactory.js"));
var ParameterType_js_1 = __importDefault(require("./ParameterType.js"));
var ParameterTypeMatcher_js_1 = __importDefault(require("./ParameterTypeMatcher.js"));
var CucumberExpressionGenerator = /** @class */function () {
  function CucumberExpressionGenerator(parameterTypes) {
    this.parameterTypes = parameterTypes;
  }
  CucumberExpressionGenerator.prototype.generateExpressions = function (text) {
    var parameterTypeCombinations = [];
    var parameterTypeMatchers = this.createParameterTypeMatchers(text);
    var expressionTemplate = '';
    var pos = 0;
    var counter = 0;
    var _loop_1 = function () {
      var e_1, _a, e_2, _b;
      var matchingParameterTypeMatchers = [];
      try {
        for (var parameterTypeMatchers_1 = (e_1 = void 0, __values(parameterTypeMatchers)), parameterTypeMatchers_1_1 = parameterTypeMatchers_1.next(); !parameterTypeMatchers_1_1.done; parameterTypeMatchers_1_1 = parameterTypeMatchers_1.next()) {
          var parameterTypeMatcher = parameterTypeMatchers_1_1.value;
          var advancedParameterTypeMatcher = parameterTypeMatcher.advanceTo(pos);
          if (advancedParameterTypeMatcher.find) {
            matchingParameterTypeMatchers.push(advancedParameterTypeMatcher);
          }
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (parameterTypeMatchers_1_1 && !parameterTypeMatchers_1_1.done && (_a = parameterTypeMatchers_1.return)) _a.call(parameterTypeMatchers_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      if (matchingParameterTypeMatchers.length > 0) {
        matchingParameterTypeMatchers = matchingParameterTypeMatchers.sort(ParameterTypeMatcher_js_1.default.compare);
        // Find all the best parameter type matchers, they are all candidates.
        var bestParameterTypeMatcher_1 = matchingParameterTypeMatchers[0];
        var bestParameterTypeMatchers = matchingParameterTypeMatchers.filter(function (m) {
          return ParameterTypeMatcher_js_1.default.compare(m, bestParameterTypeMatcher_1) === 0;
        });
        // Build a list of parameter types without duplicates. The reason there
        // might be duplicates is that some parameter types have more than one regexp,
        // which means multiple ParameterTypeMatcher objects will have a reference to the
        // same ParameterType.
        // We're sorting the list so preferential parameter types are listed first.
        // Users are most likely to want these, so they should be listed at the top.
        var parameterTypes = [];
        try {
          for (var bestParameterTypeMatchers_1 = (e_2 = void 0, __values(bestParameterTypeMatchers)), bestParameterTypeMatchers_1_1 = bestParameterTypeMatchers_1.next(); !bestParameterTypeMatchers_1_1.done; bestParameterTypeMatchers_1_1 = bestParameterTypeMatchers_1.next()) {
            var parameterTypeMatcher = bestParameterTypeMatchers_1_1.value;
            if (parameterTypes.indexOf(parameterTypeMatcher.parameterType) === -1) {
              parameterTypes.push(parameterTypeMatcher.parameterType);
            }
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (bestParameterTypeMatchers_1_1 && !bestParameterTypeMatchers_1_1.done && (_b = bestParameterTypeMatchers_1.return)) _b.call(bestParameterTypeMatchers_1);
          } finally {
            if (e_2) throw e_2.error;
          }
        }
        parameterTypes = parameterTypes.sort(ParameterType_js_1.default.compare);
        parameterTypeCombinations.push(parameterTypes);
        expressionTemplate += escape(text.slice(pos, bestParameterTypeMatcher_1.start));
        expressionTemplate += "{{".concat(counter++, "}}");
        pos = bestParameterTypeMatcher_1.start + bestParameterTypeMatcher_1.group.length;
      } else {
        return "break";
      }
      if (pos >= text.length) {
        return "break";
      }
    };
    // eslint-disable-next-line no-constant-condition
    while (true) {
      var state_1 = _loop_1();
      if (state_1 === "break") break;
    }
    expressionTemplate += escape(text.slice(pos));
    return new CombinatorialGeneratedExpressionFactory_js_1.default(expressionTemplate, parameterTypeCombinations).generateExpressions();
  };
  CucumberExpressionGenerator.prototype.createParameterTypeMatchers = function (text) {
    var e_3, _a;
    var parameterMatchers = [];
    try {
      for (var _b = __values(this.parameterTypes()), _c = _b.next(); !_c.done; _c = _b.next()) {
        var parameterType = _c.value;
        if (parameterType.useForSnippets) {
          parameterMatchers = parameterMatchers.concat(CucumberExpressionGenerator.createParameterTypeMatchers2(parameterType, text));
        }
      }
    } catch (e_3_1) {
      e_3 = {
        error: e_3_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
      } finally {
        if (e_3) throw e_3.error;
      }
    }
    return parameterMatchers;
  };
  CucumberExpressionGenerator.createParameterTypeMatchers2 = function (parameterType, text) {
    return parameterType.regexpStrings.map(function (regexp) {
      return new ParameterTypeMatcher_js_1.default(parameterType, regexp, text);
    });
  };
  return CucumberExpressionGenerator;
}();
exports.default = CucumberExpressionGenerator;
function escape(s) {
  return s.replace(/\(/g, '\\(').replace(/{/g, '\\{').replace(/\//g, '\\/');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb21iaW5hdG9yaWFsR2VuZXJhdGVkRXhwcmVzc2lvbkZhY3RvcnlfanNfMSIsIl9faW1wb3J0RGVmYXVsdCIsInJlcXVpcmUiLCJQYXJhbWV0ZXJUeXBlX2pzXzEiLCJQYXJhbWV0ZXJUeXBlTWF0Y2hlcl9qc18xIiwiQ3VjdW1iZXJFeHByZXNzaW9uR2VuZXJhdG9yIiwicGFyYW1ldGVyVHlwZXMiLCJwcm90b3R5cGUiLCJnZW5lcmF0ZUV4cHJlc3Npb25zIiwidGV4dCIsInBhcmFtZXRlclR5cGVDb21iaW5hdGlvbnMiLCJwYXJhbWV0ZXJUeXBlTWF0Y2hlcnMiLCJjcmVhdGVQYXJhbWV0ZXJUeXBlTWF0Y2hlcnMiLCJleHByZXNzaW9uVGVtcGxhdGUiLCJwb3MiLCJjb3VudGVyIiwibWF0Y2hpbmdQYXJhbWV0ZXJUeXBlTWF0Y2hlcnMiLCJwYXJhbWV0ZXJUeXBlTWF0Y2hlcnNfMSIsImVfMSIsIl9fdmFsdWVzIiwicGFyYW1ldGVyVHlwZU1hdGNoZXJzXzFfMSIsIm5leHQiLCJkb25lIiwicGFyYW1ldGVyVHlwZU1hdGNoZXIiLCJ2YWx1ZSIsImFkdmFuY2VkUGFyYW1ldGVyVHlwZU1hdGNoZXIiLCJhZHZhbmNlVG8iLCJmaW5kIiwicHVzaCIsImxlbmd0aCIsInNvcnQiLCJkZWZhdWx0IiwiY29tcGFyZSIsImJlc3RQYXJhbWV0ZXJUeXBlTWF0Y2hlcl8xIiwiYmVzdFBhcmFtZXRlclR5cGVNYXRjaGVycyIsImZpbHRlciIsIm0iLCJiZXN0UGFyYW1ldGVyVHlwZU1hdGNoZXJzXzEiLCJlXzIiLCJiZXN0UGFyYW1ldGVyVHlwZU1hdGNoZXJzXzFfMSIsImluZGV4T2YiLCJwYXJhbWV0ZXJUeXBlIiwiZXNjYXBlIiwic2xpY2UiLCJzdGFydCIsImNvbmNhdCIsImdyb3VwIiwicGFyYW1ldGVyTWF0Y2hlcnMiLCJfYiIsIl9jIiwidXNlRm9yU25pcHBldHMiLCJjcmVhdGVQYXJhbWV0ZXJUeXBlTWF0Y2hlcnMyIiwicmVnZXhwU3RyaW5ncyIsIm1hcCIsInJlZ2V4cCIsInMiLCJyZXBsYWNlIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL0N1Y3VtYmVyRXhwcmVzc2lvbkdlbmVyYXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSw0Q0FBQSxHQUFBQyxlQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxrQkFBQSxHQUFBRixlQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSx5QkFBQSxHQUFBSCxlQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBRywyQkFBQTtFQUNFLFNBQUFBLDRCQUE2QkMsY0FBc0Q7SUFBdEQsS0FBQUEsY0FBYyxHQUFkQSxjQUFjO0VBQTJDO0VBRS9FRCwyQkFBQSxDQUFBRSxTQUFBLENBQUFDLG1CQUFtQixHQUExQixVQUEyQkMsSUFBWTtJQUNyQyxJQUFNQyx5QkFBeUIsR0FBeUMsRUFBRTtJQUMxRSxJQUFNQyxxQkFBcUIsR0FBRyxJQUFJLENBQUNDLDJCQUEyQixDQUFDSCxJQUFJLENBQUM7SUFDcEUsSUFBSUksa0JBQWtCLEdBQUcsRUFBRTtJQUMzQixJQUFJQyxHQUFHLEdBQUcsQ0FBQztJQUNYLElBQUlDLE9BQU8sR0FBRyxDQUFDOzs7TUFHYixJQUFJQyw2QkFBNkIsR0FBRyxFQUFFOztRQUV0QyxLQUFtQyxJQUFBQyx1QkFBQSxJQUFBQyxHQUFBLFdBQUFDLFFBQUEsQ0FBQVIscUJBQXFCLElBQUFTLHlCQUFBLEdBQUFILHVCQUFBLENBQUFJLElBQUEsS0FBQUQseUJBQUEsQ0FBQUUsSUFBQSxFQUFBRix5QkFBQSxHQUFBSCx1QkFBQSxDQUFBSSxJQUFBLElBQUU7VUFBckQsSUFBTUUsb0JBQW9CLEdBQUFILHlCQUFBLENBQUFJLEtBQUE7VUFDN0IsSUFBTUMsNEJBQTRCLEdBQUdGLG9CQUFvQixDQUFDRyxTQUFTLENBQUNaLEdBQUcsQ0FBQztVQUN4RSxJQUFJVyw0QkFBNEIsQ0FBQ0UsSUFBSSxFQUFFO1lBQ3JDWCw2QkFBNkIs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