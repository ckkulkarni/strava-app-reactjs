4c12ee204f90878d37b61efdc7758812
/**
 * The MIT License (MIT)
 * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>
 */

'use strict';

/**
 * A regexp-tree plugin to remove unnecessary groups.
 *
 * /(?:a)/ -> /a/
 */
function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  } else {
    return Array.from(arr);
  }
}
module.exports = {
  Group: function Group(path) {
    var node = path.node,
      parent = path.parent;
    var childPath = path.getChild();
    if (node.capturing || !childPath) {
      return;
    }

    // Don't optimize \1(?:0) to \10
    if (!hasAppropriateSiblings(path)) {
      return;
    }

    // Don't optimize /a(?:b|c)/ to /ab|c/
    // but /(?:b|c)/ to /b|c/ is ok
    if (childPath.node.type === 'Disjunction' && parent.type !== 'RegExp') {
      return;
    }

    // Don't optimize /(?:ab)+/ to /ab+/
    // but /(?:a)+/ to /a+/ is ok
    // and /(?:[a-d])+/ to /[a-d]+/ is ok too
    if (parent.type === 'Repetition' && childPath.node.type !== 'Char' && childPath.node.type !== 'CharacterClass') {
      return;
    }
    if (childPath.node.type === 'Alternative') {
      var parentPath = path.getParent();
      if (parentPath.node.type === 'Alternative') {
        // /abc(?:def)ghi/ When (?:def) is ungrouped its content must be merged with parent alternative

        parentPath.replace({
          type: 'Alternative',
          expressions: [].concat(_toConsumableArray(parent.expressions.slice(0, path.index)), _toConsumableArray(childPath.node.expressions), _toConsumableArray(parent.expressions.slice(path.index + 1)))
        });
      }
    } else {
      path.replace(childPath.node);
    }
  }
};
function hasAppropriateSiblings(path) {
  var parent = path.parent,
    index = path.index;
  if (parent.type !== 'Alternative') {
    return true;
  }
  var previousNode = parent.expressions[index - 1];
  if (previousNode == null) {
    return true;
  }

  // Don't optimized \1(?:0) to \10
  if (previousNode.type === 'Backreference' && previousNode.kind === 'number') {
    return false;
  }

  // Don't optimized \2(?:0) to \20
  if (previousNode.type === 'Char' && previousNode.kind === 'decimal') {
    return false;
  }
  return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJBcnJheSIsImlzQXJyYXkiLCJpIiwiYXJyMiIsImxlbmd0aCIsImZyb20iLCJtb2R1bGUiLCJleHBvcnRzIiwiR3JvdXAiLCJwYXRoIiwibm9kZSIsInBhcmVudCIsImNoaWxkUGF0aCIsImdldENoaWxkIiwiY2FwdHVyaW5nIiwiaGFzQXBwcm9wcmlhdGVTaWJsaW5ncyIsInR5cGUiLCJwYXJlbnRQYXRoIiwiZ2V0UGFyZW50IiwicmVwbGFjZSIsImV4cHJlc3Npb25zIiwiY29uY2F0Iiwic2xpY2UiLCJpbmRleCIsInByZXZpb3VzTm9kZSIsImtpbmQiXSwic291cmNlcyI6WyJ1bmdyb3VwLXRyYW5zZm9ybS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQgRG1pdHJ5IFNvc2huaWtvdiA8ZG1pdHJ5LnNvc2huaWtvdkBnbWFpbC5jb20+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgcmVnZXhwLXRyZWUgcGx1Z2luIHRvIHJlbW92ZSB1bm5lY2Vzc2FyeSBncm91cHMuXG4gKlxuICogLyg/OmEpLyAtPiAvYS9cbiAqL1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEdyb3VwOiBmdW5jdGlvbiBHcm91cChwYXRoKSB7XG4gICAgdmFyIG5vZGUgPSBwYXRoLm5vZGUsXG4gICAgICAgIHBhcmVudCA9IHBhdGgucGFyZW50O1xuXG4gICAgdmFyIGNoaWxkUGF0aCA9IHBhdGguZ2V0Q2hpbGQoKTtcblxuICAgIGlmIChub2RlLmNhcHR1cmluZyB8fCAhY2hpbGRQYXRoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRG9uJ3Qgb3B0aW1pemUgXFwxKD86MCkgdG8gXFwxMFxuICAgIGlmICghaGFzQXBwcm9wcmlhdGVTaWJsaW5ncyhwYXRoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIERvbid0IG9wdGltaXplIC9hKD86YnxjKS8gdG8gL2FifGMvXG4gICAgLy8gYnV0IC8oPzpifGMpLyB0byAvYnxjLyBpcyBva1xuICAgIGlmIChjaGlsZFBhdGgubm9kZS50eXBlID09PSAnRGlzanVuY3Rpb24nICYmIHBhcmVudC50eXBlICE9PSAnUmVnRXhwJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIERvbid0IG9wdGltaXplIC8oPzphYikrLyB0byAvYWIrL1xuICAgIC8vIGJ1dCAvKD86YSkrLyB0byAvYSsvIGlzIG9rXG4gICAgLy8gYW5kIC8oPzpbYS1kXSkrLyB0byAvW2EtZF0rLyBpcyBvayB0b29cbiAgICBpZiAocGFyZW50LnR5cGUgPT09ICdSZXBldGl0aW9uJyAmJiBjaGlsZFBhdGgubm9kZS50eXBlICE9PSAnQ2hhcicgJiYgY2hpbGRQYXRoLm5vZGUudHlwZSAhPT0gJ0NoYXJhY3RlckNsYXNzJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjaGlsZFBhdGgubm9kZS50eXBlID09PSAnQWx0ZXJuYXRpdmUnKSB7XG4gICAgICB2YXIgcGFyZW50UGF0aCA9IHBhdGguZ2V0UGFyZW50KCk7XG4gICAgICBpZiAocGFyZW50UGF0aC5ub2RlLnR5cGUgPT09ICdBbHRlcm5hdGl2ZScpIHtcbiAgICAgICAgLy8gL2FiYyg/OmRlZilnaGkvIFdoZW4gKD86ZGVmKSBpcyB1bmdyb3VwZWQgaXRzIGNvbnRlbnQgbXVzdCBiZSBtZXJnZWQgd2l0aCBwYXJlbnQgYWx0ZXJuYXRpdmVcblxuICAgICAgICBwYXJlbnRQYXRoLnJlcGxhY2Uoe1xuICAgICAgICAgIHR5cGU6ICdBbHRlcm5hdGl2ZScsXG4gICAgICAgICAgZXhwcmVzc2lvbnM6IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocGFyZW50LmV4cHJlc3Npb25zLnNsaWNlKDAsIHBhdGguaW5kZXgpKSwgX3RvQ29uc3VtYWJsZUFycmF5KGNoaWxkUGF0aC5ub2RlLmV4cHJlc3Npb25zKSwgX3RvQ29uc3VtYWJsZUFycmF5KHBhcmVudC5leHByZXNzaW9ucy5zbGljZShwYXRoLmluZGV4ICsgMSkpKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGF0aC5yZXBsYWNlKGNoaWxkUGF0aC5ub2RlKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGhhc0FwcHJvcHJpYXRlU2libGluZ3MocGF0aCkge1xuICB2YXIgcGFyZW50ID0gcGF0aC5wYXJlbnQsXG4gICAgICBpbmRleCA9IHBhdGguaW5kZXg7XG5cblxuICBpZiAocGFyZW50LnR5cGUgIT09ICdBbHRlcm5hdGl2ZScpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBwcmV2aW91c05vZGUgPSBwYXJlbnQuZXhwcmVzc2lvbnNbaW5kZXggLSAxXTtcbiAgaWYgKHByZXZpb3VzTm9kZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBEb24ndCBvcHRpbWl6ZWQgXFwxKD86MCkgdG8gXFwxMFxuICBpZiAocHJldmlvdXNOb2RlLnR5cGUgPT09ICdCYWNrcmVmZXJlbmNlJyAmJiBwcmV2aW91c05vZGUua2luZCA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBEb24ndCBvcHRpbWl6ZWQgXFwyKD86MCkgdG8gXFwyMFxuICBpZiAocHJldmlvdXNOb2RlLnR5cGUgPT09ICdDaGFyJyAmJiBwcmV2aW91c05vZGUua2luZCA9PT0gJ2RlY2ltYWwnKSB7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