6deb4cf31f292a68d3f87c0715af9931
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseIsoDate;

/* eslint-disable */

/**
 *
 * Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>
 * NON-CONFORMANT EDITION.
 * © 2011 Colin Snover <http://zetafleet.com>
 * Released under MIT license.
 */
//              1 YYYY                 2 MM        3 DD              4 HH     5 mm        6 ss            7 msec         8 Z 9 ±    10 tzHH    11 tzmm
var isoReg = /^(\d{4}|[+\-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,\.](\d{1,}))?)?(?:(Z)|([+\-])(\d{2})(?::?(\d{2}))?)?)?$/;
function parseIsoDate(date) {
  var numericKeys = [1, 4, 5, 6, 7, 10, 11],
    minutesOffset = 0,
    timestamp,
    struct;
  if (struct = isoReg.exec(date)) {
    // avoid NaN timestamps caused by “undefined” values being passed to Date.UTC
    for (var i = 0, k; k = numericKeys[i]; ++i) struct[k] = +struct[k] || 0; // allow undefined days and months

    struct[2] = (+struct[2] || 1) - 1;
    struct[3] = +struct[3] || 1; // allow arbitrary sub-second precision beyond milliseconds

    struct[7] = struct[7] ? String(struct[7]).substr(0, 3) : 0; // timestamps without timezone identifiers should be considered local time

    if ((struct[8] === undefined || struct[8] === '') && (struct[9] === undefined || struct[9] === '')) timestamp = +new Date(struct[1], struct[2], struct[3], struct[4], struct[5], struct[6], struct[7]);else {
      if (struct[8] !== 'Z' && struct[9] !== undefined) {
        minutesOffset = struct[10] * 60 + struct[11];
        if (struct[9] === '+') minutesOffset = 0 - minutesOffset;
      }
      timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
    }
  } else timestamp = Date.parse ? Date.parse(date) : NaN;
  return timestamp;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJwYXJzZUlzb0RhdGUiLCJpc29SZWciLCJkYXRlIiwibnVtZXJpY0tleXMiLCJtaW51dGVzT2Zmc2V0IiwidGltZXN0YW1wIiwic3RydWN0IiwiZXhlYyIsImkiLCJrIiwiU3RyaW5nIiwic3Vic3RyIiwidW5kZWZpbmVkIiwiRGF0ZSIsIlVUQyIsInBhcnNlIiwiTmFOIl0sInNvdXJjZXMiOlsiaXNvZGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHBhcnNlSXNvRGF0ZTtcblxuLyogZXNsaW50LWRpc2FibGUgKi9cblxuLyoqXG4gKlxuICogRGF0ZS5wYXJzZSB3aXRoIHByb2dyZXNzaXZlIGVuaGFuY2VtZW50IGZvciBJU08gODYwMSA8aHR0cHM6Ly9naXRodWIuY29tL2Nzbm92ZXIvanMtaXNvODYwMT5cbiAqIE5PTi1DT05GT1JNQU5UIEVESVRJT04uXG4gKiDCqSAyMDExIENvbGluIFNub3ZlciA8aHR0cDovL3pldGFmbGVldC5jb20+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqL1xuLy8gICAgICAgICAgICAgIDEgWVlZWSAgICAgICAgICAgICAgICAgMiBNTSAgICAgICAgMyBERCAgICAgICAgICAgICAgNCBISCAgICAgNSBtbSAgICAgICAgNiBzcyAgICAgICAgICAgIDcgbXNlYyAgICAgICAgIDggWiA5IMKxICAgIDEwIHR6SEggICAgMTEgdHptbVxudmFyIGlzb1JlZyA9IC9eKFxcZHs0fXxbK1xcLV1cXGR7Nn0pKD86LT8oXFxkezJ9KSg/Oi0/KFxcZHsyfSkpPyk/KD86WyBUXT8oXFxkezJ9KTo/KFxcZHsyfSkoPzo6PyhcXGR7Mn0pKD86WyxcXC5dKFxcZHsxLH0pKT8pPyg/OihaKXwoWytcXC1dKShcXGR7Mn0pKD86Oj8oXFxkezJ9KSk/KT8pPyQvO1xuXG5mdW5jdGlvbiBwYXJzZUlzb0RhdGUoZGF0ZSkge1xuICB2YXIgbnVtZXJpY0tleXMgPSBbMSwgNCwgNSwgNiwgNywgMTAsIDExXSxcbiAgICAgIG1pbnV0ZXNPZmZzZXQgPSAwLFxuICAgICAgdGltZXN0YW1wLFxuICAgICAgc3RydWN0O1xuXG4gIGlmIChzdHJ1Y3QgPSBpc29SZWcuZXhlYyhkYXRlKSkge1xuICAgIC8vIGF2b2lkIE5hTiB0aW1lc3RhbXBzIGNhdXNlZCBieSDigJx1bmRlZmluZWTigJ0gdmFsdWVzIGJlaW5nIHBhc3NlZCB0byBEYXRlLlVUQ1xuICAgIGZvciAodmFyIGkgPSAwLCBrOyBrID0gbnVtZXJpY0tleXNbaV07ICsraSkgc3RydWN0W2tdID0gK3N0cnVjdFtrXSB8fCAwOyAvLyBhbGxvdyB1bmRlZmluZWQgZGF5cyBhbmQgbW9udGhzXG5cblxuICAgIHN0cnVjdFsyXSA9ICgrc3RydWN0WzJdIHx8IDEpIC0gMTtcbiAgICBzdHJ1Y3RbM10gPSArc3RydWN0WzNdIHx8IDE7IC8vIGFsbG93IGFyYml0cmFyeSBzdWItc2Vjb25kIHByZWNpc2lvbiBiZXlvbmQgbWlsbGlzZWNvbmRzXG5cbiAgICBzdHJ1Y3RbN10gPSBzdHJ1Y3RbN10gPyBTdHJpbmcoc3RydWN0WzddKS5zdWJzdHIoMCwgMykgOiAwOyAvLyB0aW1lc3RhbXBzIHdpdGhvdXQgdGltZXpvbmUgaWRlbnRpZmllcnMgc2hvdWxkIGJlIGNvbnNpZGVyZWQgbG9jYWwgdGltZVxuXG4gICAgaWYgKChzdHJ1Y3RbOF0gPT09IHVuZGVmaW5lZCB8fCBzdHJ1Y3RbOF0gPT09ICcnKSAmJiAoc3RydWN0WzldID09PSB1bmRlZmluZWQgfHwgc3RydWN0WzldID09PSAnJykpIHRpbWVzdGFtcCA9ICtuZXcgRGF0ZShzdHJ1Y3RbMV0sIHN0cnVjdFsyXSwgc3RydWN0WzNdLCBzdHJ1Y3RbNF0sIHN0cnVjdFs1XSwgc3RydWN0WzZdLCBzdHJ1Y3RbN10pO2Vsc2Uge1xuICAgICAgaWYgKHN0cnVjdFs4XSAhPT0gJ1onICYmIHN0cnVjdFs5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1pbnV0ZXNPZmZzZXQgPSBzdHJ1Y3RbMTBdICogNjAgKyBzdHJ1Y3RbMTFdO1xuICAgICAgICBpZiAoc3RydWN0WzldID09PSAnKycpIG1pbnV0ZXNPZmZzZXQgPSAwIC0gbWludXRlc09mZnNldDtcbiAgICAgIH1cblxuICAgICAgdGltZXN0YW1wID0gRGF0ZS5VVEMoc3RydWN0WzFdLCBzdHJ1Y3RbMl0sIHN0cnVjdFszXSwgc3RydWN0WzRdLCBzdHJ1Y3RbNV0gKyBtaW51dGVzT2Zmc2V0LCBzdHJ1Y3RbNl0sIHN0cnVjdFs3XSk7XG4gICAgfVxuICB9IGVsc2UgdGltZXN0YW1wID0gRGF0ZS5wYXJzZSA/IERhdGUucGFyc2UoZGF0ZSkgOiBOYU47XG5cbiAgcmV0dXJuIHRpbWVzdGFtcDtcbn0iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxPQUFPLEdBQUdDLFlBQVk7O0FBRTlCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQyxNQUFNLEdBQUcsaUpBQWlKO0FBRTlKLFNBQVNELFlBQVlBLENBQUNFLElBQUksRUFBRTtFQUMxQixJQUFJQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDckNDLGFBQWEsR0FBRyxDQUFDO0lBQ2pCQyxTQUFTO0lBQ1RDLE1BQU07RUFFVixJQUFJQSxNQUFNLEdBQUdMLE1BQU0sQ0FBQ00sSUFBSSxDQUFDTCxJQUFJLENBQUMsRUFBRTtJQUM5QjtJQUNBLEtBQUssSUFBSU0sQ0FBQyxHQUFHLENBQUMsRUFBRUMsQ0FBQyxFQUFFQSxDQUFDLEdBQUdOLFdBQVcsQ0FBQ0ssQ0FBQyxDQUFDLEVBQUUsRUFBRUEsQ0FBQyxFQUFFRixNQUFNLENBQUNHLENBQUMsQ0FBQyxHQUFHLENBQUNILE1BQU0sQ0FBQ0csQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7O0lBR3pFSCxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDQSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDakNBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDQSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7O0lBRTdCQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUdBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBR0ksTUFBTSxDQUFDSixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ0ssTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzs7SUFFNUQsSUFBSSxDQUFDTCxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUtNLFNBQVMsSUFBSU4sTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsTUFBTUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLTSxTQUFTLElBQUlOLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRUQsU0FBUyxHQUFHLENBQUMsSUFBSVEsSUFBSSxDQUFDUCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUVBLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUVBLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFQSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLO01BQzFNLElBQUlBLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUlBLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBS00sU0FBUyxFQUFFO1FBQ2hEUixhQUFhLEdBQUdFLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUdBLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDNUMsSUFBSUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRUYsYUFBYSxHQUFHLENBQUMsR0FBR0EsYUFBYTtNQUMxRDtNQUVBQyxTQUFTLEdBQUdRLElBQUksQ0FBQ0MsR0FBRyxDQUFDUixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUVBLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUVBLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBR0YsYUFBYSxFQUFFRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUVBLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuSDtFQUNGLENBQUMsTUFBTUQsU0FBUyxHQUFHUSxJQUFJLENBQUNFLEtBQUssR0FBR0YsSUFBSSxDQUFDRSxLQUFLLENBQUNiLElBQUksQ0FBQyxHQUFHYyxHQUFHO0VBRXRELE9BQU9YLFNBQVM7QUFDbEIifQ==