a1ae83a5b0071fb83c1e42f104a22ec4
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
const chalk_1 = __importDefault(require("chalk"));
const supports_color_1 = require("supports-color");
const value_checker_1 = require("../value_checker");
function getColorFns(stream, env, enabled) {
  const support = detectSupport(stream, env, enabled);
  if (support) {
    const chalkInstance = new chalk_1.default.Instance(support);
    return {
      forStatus(status) {
        return {
          AMBIGUOUS: chalkInstance.red.bind(chalk_1.default),
          FAILED: chalkInstance.red.bind(chalk_1.default),
          PASSED: chalkInstance.green.bind(chalk_1.default),
          PENDING: chalkInstance.yellow.bind(chalk_1.default),
          SKIPPED: chalkInstance.cyan.bind(chalk_1.default),
          UNDEFINED: chalkInstance.yellow.bind(chalk_1.default),
          UNKNOWN: chalkInstance.yellow.bind(chalk_1.default)
        }[status];
      },
      location: chalkInstance.gray.bind(chalk_1.default),
      tag: chalkInstance.cyan.bind(chalk_1.default),
      diffAdded: chalkInstance.green.bind(chalk_1.default),
      diffRemoved: chalkInstance.red.bind(chalk_1.default),
      errorMessage: chalkInstance.red.bind(chalk_1.default),
      errorStack: chalkInstance.grey.bind(chalk_1.default)
    };
  } else {
    return {
      forStatus(_status) {
        return x => x;
      },
      location: x => x,
      tag: x => x,
      diffAdded: x => x,
      diffRemoved: x => x,
      errorMessage: x => x,
      errorStack: x => x
    };
  }
}
exports.default = getColorFns;
function detectSupport(stream, env, enabled) {
  const support = (0, supports_color_1.supportsColor)(stream);
  // if we find FORCE_COLOR, we can let the supports-color library handle that
  if ('FORCE_COLOR' in env || (0, value_checker_1.doesNotHaveValue)(enabled)) {
    return support;
  }
  return enabled ? support || {
    level: 1
  } : false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjaGFsa18xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInN1cHBvcnRzX2NvbG9yXzEiLCJ2YWx1ZV9jaGVja2VyXzEiLCJnZXRDb2xvckZucyIsInN0cmVhbSIsImVudiIsImVuYWJsZWQiLCJzdXBwb3J0IiwiZGV0ZWN0U3VwcG9ydCIsImNoYWxrSW5zdGFuY2UiLCJkZWZhdWx0IiwiSW5zdGFuY2UiLCJmb3JTdGF0dXMiLCJzdGF0dXMiLCJBTUJJR1VPVVMiLCJyZWQiLCJiaW5kIiwiRkFJTEVEIiwiUEFTU0VEIiwiZ3JlZW4iLCJQRU5ESU5HIiwieWVsbG93IiwiU0tJUFBFRCIsImN5YW4iLCJVTkRFRklORUQiLCJVTktOT1dOIiwibG9jYXRpb24iLCJncmF5IiwidGFnIiwiZGlmZkFkZGVkIiwiZGlmZlJlbW92ZWQiLCJlcnJvck1lc3NhZ2UiLCJlcnJvclN0YWNrIiwiZ3JleSIsIl9zdGF0dXMiLCJ4IiwiZXhwb3J0cyIsInN1cHBvcnRzQ29sb3IiLCJkb2VzTm90SGF2ZVZhbHVlIiwibGV2ZWwiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvZm9ybWF0dGVyL2dldF9jb2xvcl9mbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJ1xuaW1wb3J0IHsgQ29sb3JJbmZvLCBzdXBwb3J0c0NvbG9yIH0gZnJvbSAnc3VwcG9ydHMtY29sb3InXG5pbXBvcnQgeyBUZXN0U3RlcFJlc3VsdFN0YXR1cyB9IGZyb20gJ0BjdWN1bWJlci9tZXNzYWdlcydcbmltcG9ydCB7IFdyaXRhYmxlIH0gZnJvbSAnc3RyZWFtJ1xuaW1wb3J0IHsgZG9lc05vdEhhdmVWYWx1ZSB9IGZyb20gJy4uL3ZhbHVlX2NoZWNrZXInXG5cbmV4cG9ydCB0eXBlIElDb2xvckZuID0gKHRleHQ6IHN0cmluZykgPT4gc3RyaW5nXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbG9yRm5zIHtcbiAgZm9yU3RhdHVzOiAoc3RhdHVzOiBUZXN0U3RlcFJlc3VsdFN0YXR1cykgPT4gSUNvbG9yRm5cbiAgbG9jYXRpb246IElDb2xvckZuXG4gIHRhZzogSUNvbG9yRm5cbiAgZGlmZkFkZGVkOiBJQ29sb3JGblxuICBkaWZmUmVtb3ZlZDogSUNvbG9yRm5cbiAgZXJyb3JNZXNzYWdlOiBJQ29sb3JGblxuICBlcnJvclN0YWNrOiBJQ29sb3JGblxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDb2xvckZucyhcbiAgc3RyZWFtOiBXcml0YWJsZSxcbiAgZW52OiBOb2RlSlMuUHJvY2Vzc0VudixcbiAgZW5hYmxlZD86IGJvb2xlYW5cbik6IElDb2xvckZucyB7XG4gIGNvbnN0IHN1cHBvcnQ6IENvbG9ySW5mbyA9IGRldGVjdFN1cHBvcnQoc3RyZWFtLCBlbnYsIGVuYWJsZWQpXG4gIGlmIChzdXBwb3J0KSB7XG4gICAgY29uc3QgY2hhbGtJbnN0YW5jZSA9IG5ldyBjaGFsay5JbnN0YW5jZShzdXBwb3J0KVxuICAgIHJldHVybiB7XG4gICAgICBmb3JTdGF0dXMoc3RhdHVzOiBUZXN0U3RlcFJlc3VsdFN0YXR1cykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIEFNQklHVU9VUzogY2hhbGtJbnN0YW5jZS5yZWQuYmluZChjaGFsayksXG4gICAgICAgICAgRkFJTEVEOiBjaGFsa0luc3RhbmNlLnJlZC5iaW5kKGNoYWxrKSxcbiAgICAgICAgICBQQVNTRUQ6IGNoYWxrSW5zdGFuY2UuZ3JlZW4uYmluZChjaGFsayksXG4gICAgICAgICAgUEVORElORzogY2hhbGtJbnN0YW5jZS55ZWxsb3cuYmluZChjaGFsayksXG4gICAgICAgICAgU0tJUFBFRDogY2hhbGtJbnN0YW5jZS5jeWFuLmJpbmQoY2hhbGspLFxuICAgICAgICAgIFVOREVGSU5FRDogY2hhbGtJbnN0YW5jZS55ZWxsb3cuYmluZChjaGFsayksXG4gICAgICAgICAgVU5LTk9XTjogY2hhbGtJbnN0YW5jZS55ZWxsb3cuYmluZChjaGFsayksXG4gICAgICAgIH1bc3RhdHVzXVxuICAgICAgfSxcbiAgICAgIGxvY2F0aW9uOiBjaGFsa0luc3RhbmNlLmdyYXkuYmluZChjaGFsayksXG4gICAgICB0YWc6IGNoYWxrSW5zdGFuY2UuY3lhbi5iaW5kKGNoYWxrKSxcbiAgICAgIGRpZmZBZGRlZDogY2hhbGtJbnN0YW5jZS5ncmVlbi5iaW5kKGNoYWxrKSxcbiAgICAgIGRpZmZSZW1vdmVkOiBjaGFsa0luc3RhbmNlLnJlZC5iaW5kKGNoYWxrKSxcbiAgICAgIGVycm9yTWVzc2FnZTogY2hhbGtJbnN0YW5jZS5yZWQuYmluZChjaGFsayksXG4gICAgICBlcnJvclN0YWNrOiBjaGFsa0luc3RhbmNlLmdyZXkuYmluZChjaGFsayksXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICBmb3JTdGF0dXMoX3N0YXR1czogVGVzdFN0ZXBSZXN1bHRTdGF0dXMpIHtcbiAgICAgICAgcmV0dXJuICh4KSA9PiB4XG4gICAgICB9LFxuICAgICAgbG9jYXRpb246ICh4KSA9PiB4LFxuICAgICAgdGFnOiAoeCkgPT4geCxcbiAgICAgIGRpZmZBZGRlZDogKHgpID0+IHgsXG4gICAgICBkaWZmUmVtb3ZlZDogKHgpID0+IHgsXG4gICAgICBlcnJvck1lc3NhZ2U6ICh4KSA9PiB4LFxuICAgICAgZXJyb3JTdGFjazogKHgpID0+IHgsXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRldGVjdFN1cHBvcnQoXG4gIHN0cmVhbTogV3JpdGFibGUsXG4gIGVudjogTm9kZUpTLlByb2Nlc3NFbnYsXG4gIGVuYWJsZWQ/OiBib29sZWFuXG4pOiBDb2xvckluZm8ge1xuICBjb25zdCBzdXBwb3J0OiBDb2xvckluZm8gPSBzdXBwb3J0c0NvbG9yKHN0cmVhbSlcbiAgLy8gaWYgd2UgZmluZCBGT1JDRV9DT0xPUiwgd2UgY2FuIGxldCB0aGUgc3VwcG9ydHMtY29sb3IgbGlicmFyeSBoYW5kbGUgdGhhdFxuICBpZiAoJ0ZPUkNFX0NPTE9SJyBpbiBlbnYgfHwgZG9lc05vdEhhdmVWYWx1ZShlbmFibGVkKSkge1xuICAgIHJldHVybiBzdXBwb3J0XG4gIH1cbiAgcmV0dXJuIGVuYWJsZWQgPyBzdXBwb3J0IHx8IHsgbGV2ZWw6IDEgfSA6IGZhbHNlXG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxNQUFBQSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUNBLE1BQUFDLGdCQUFBLEdBQUFELE9BQUE7QUFHQSxNQUFBRSxlQUFBLEdBQUFGLE9BQUE7QUFjQSxTQUF3QkcsV0FBV0EsQ0FDakNDLE1BQWdCLEVBQ2hCQyxHQUFzQixFQUN0QkMsT0FBaUI7RUFFakIsTUFBTUMsT0FBTyxHQUFjQyxhQUFhLENBQUNKLE1BQU0sRUFBRUMsR0FBRyxFQUFFQyxPQUFPLENBQUM7RUFDOUQsSUFBSUMsT0FBTyxFQUFFO0lBQ1gsTUFBTUUsYUFBYSxHQUFHLElBQUlYLE9BQUEsQ0FBQVksT0FBSyxDQUFDQyxRQUFRLENBQUNKLE9BQU8sQ0FBQztJQUNqRCxPQUFPO01BQ0xLLFNBQVNBLENBQUNDLE1BQTRCO1FBQ3BDLE9BQU87VUFDTEMsU0FBUyxFQUFFTCxhQUFhLENBQUNNLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDbEIsT0FBQSxDQUFBWSxPQUFLLENBQUM7VUFDeENPLE1BQU0sRUFBRVIsYUFBYSxDQUFDTSxHQUFHLENBQUNDLElBQUksQ0FBQ2xCLE9BQUEsQ0FBQVksT0FBSyxDQUFDO1VBQ3JDUSxNQUFNLEVBQUVULGFBQWEsQ0FBQ1UsS0FBSyxDQUFDSCxJQUFJLENBQUNsQixPQUFBLENBQUFZLE9BQUssQ0FBQztVQUN2Q1UsT0FBTyxFQUFFWCxhQUFhLENBQUNZLE1BQU0sQ0FBQ0wsSUFBSSxDQUFDbEIsT0FBQSxDQUFBWSxPQUFLLENBQUM7VUFDekNZLE9BQU8sRUFBRWIsYUFBYSxDQUFDYyxJQUFJLENBQUNQLElBQUksQ0FBQ2xCLE9BQUEsQ0FBQVksT0FBSyxDQUFDO1VBQ3ZDYyxTQUFTLEVBQUVmLGFBQWEsQ0FBQ1ksTUFBTSxDQUFDTCxJQUFJLENBQUNsQixPQUFBLENBQUFZLE9BQUssQ0FBQztVQUMzQ2UsT0FBTyxFQUFFaEIsYUFBYSxDQUFDWSxNQUFNLENBQUNMLElBQUksQ0FBQ2xCLE9BQUEsQ0FBQVksT0FBSztTQUN6QyxDQUFDRyxNQUFNLENBQUM7TUFDWCxDQUFDO01BQ0RhLFFBQVEsRUFBRWpCLGFBQWEsQ0FBQ2tCLElBQUksQ0FBQ1gsSUFBSSxDQUFDbEIsT0FBQSxDQUFBWSxPQUFLLENBQUM7TUFDeENrQixHQUFHLEVBQUVuQixhQUFhLENBQUNjLElBQUksQ0FBQ1AsSUFBSSxDQUFDbEIsT0FBQSxDQUFBWSxPQUFLLENBQUM7TUFDbkNtQixTQUFTLEVBQUVwQixhQUFhLENBQUNVLEtBQUssQ0FBQ0gsSUFBSSxDQUFDbEIsT0FBQSxDQUFBWSxPQUFLLENBQUM7TUFDMUNvQixXQUFXLEVBQUVyQixhQUFhLENBQUNNLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDbEIsT0FBQSxDQUFBWSxPQUFLLENBQUM7TUFDMUNxQixZQUFZLEVBQUV0QixhQUFhLENBQUNNLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDbEIsT0FBQSxDQUFBWSxPQUFLLENBQUM7TUFDM0NzQixVQUFVLEVBQUV2QixhQUFhLENBQUN3QixJQUFJLENBQUNqQixJQUFJLENBQUNsQixPQUFBLENBQUFZLE9BQUs7S0FDMUM7R0FDRixNQUFNO0lBQ0wsT0FBTztNQUNMRSxTQUFTQSxDQUFDc0IsT0FBNkI7UUFDckMsT0FBUUMsQ0FBQyxJQUFLQSxDQUFDO01BQ2pCLENBQUM7TUFDRFQsUUFBUSxFQUFHUyxDQUFDLElBQUtBLENBQUM7TUFDbEJQLEdBQUcsRUFBR08sQ0FBQyxJQUFLQSxDQUFDO01BQ2JOLFNBQVMsRUFBR00sQ0FBQyxJQUFLQSxDQUFDO01BQ25CTCxXQUFXLEVBQUdLLENBQUMsSUFBS0EsQ0FBQztNQUNyQkosWUFBWSxFQUFHSSxDQUFDLElBQUtBLENBQUM7TUFDdEJILFVBQVUsRUFBR0csQ0FBQyxJQUFLQTtLQUNwQjs7QUFFTDtBQXhDQUMsT0FBQSxDQUFBMUIsT0FBQSxHQUFBUCxXQUFBO0FBMENBLFNBQVNLLGFBQWFBLENBQ3BCSixNQUFnQixFQUNoQkMsR0FBc0IsRUFDdEJDLE9BQWlCO0VBRWpCLE1BQU1DLE9BQU8sR0FBYyxJQUFBTixnQkFBQSxDQUFBb0MsYUFBYSxFQUFDakMsTUFBTSxDQUFDO0VBQ2hEO0VBQ0EsSUFBSSxhQUFhLElBQUlDLEdBQUcsSUFBSSxJQUFBSCxlQUFBLENBQUFvQyxnQkFBZ0IsRUFBQ2hDLE9BQU8sQ0FBQyxFQUFFO0lBQ3JELE9BQU9DLE9BQU87O0VBRWhCLE9BQU9ELE9BQU8sR0FBR0MsT0FBTyxJQUFJO0lBQUVnQyxLQUFLLEVBQUU7RUFBQyxDQUFFLEdBQUcsS0FBSztBQUNsRCJ9