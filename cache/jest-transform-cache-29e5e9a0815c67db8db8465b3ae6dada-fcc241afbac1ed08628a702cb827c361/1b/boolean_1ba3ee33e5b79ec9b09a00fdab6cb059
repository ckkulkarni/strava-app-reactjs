5a9462e1caf93f841272043506abb520
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create = create;
exports.default = void 0;
var _schema = _interopRequireDefault(require("./schema"));
var _locale = require("./locale");
var _isAbsent = _interopRequireDefault(require("./util/isAbsent"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function create() {
  return new BooleanSchema();
}
class BooleanSchema extends _schema.default {
  constructor() {
    super({
      type: 'boolean'
    });
    this.withMutation(() => {
      this.transform(function (value) {
        if (!this.isType(value)) {
          if (/^(true|1)$/i.test(String(value))) return true;
          if (/^(false|0)$/i.test(String(value))) return false;
        }
        return value;
      });
    });
  }
  _typeCheck(v) {
    if (v instanceof Boolean) v = v.valueOf();
    return typeof v === 'boolean';
  }
  isTrue(message = _locale.boolean.isValue) {
    return this.test({
      message,
      name: 'is-value',
      exclusive: true,
      params: {
        value: 'true'
      },
      test(value) {
        return (0, _isAbsent.default)(value) || value === true;
      }
    });
  }
  isFalse(message = _locale.boolean.isValue) {
    return this.test({
      message,
      name: 'is-value',
      exclusive: true,
      params: {
        value: 'false'
      },
      test(value) {
        return (0, _isAbsent.default)(value) || value === false;
      }
    });
  }
}
exports.default = BooleanSchema;
create.prototype = BooleanSchema.prototype;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNyZWF0ZSIsImRlZmF1bHQiLCJfc2NoZW1hIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfbG9jYWxlIiwiX2lzQWJzZW50Iiwib2JqIiwiX19lc01vZHVsZSIsIkJvb2xlYW5TY2hlbWEiLCJjb25zdHJ1Y3RvciIsInR5cGUiLCJ3aXRoTXV0YXRpb24iLCJ0cmFuc2Zvcm0iLCJpc1R5cGUiLCJ0ZXN0IiwiU3RyaW5nIiwiX3R5cGVDaGVjayIsInYiLCJCb29sZWFuIiwidmFsdWVPZiIsImlzVHJ1ZSIsIm1lc3NhZ2UiLCJib29sZWFuIiwiaXNWYWx1ZSIsIm5hbWUiLCJleGNsdXNpdmUiLCJwYXJhbXMiLCJpc0ZhbHNlIiwicHJvdG90eXBlIl0sInNvdXJjZXMiOlsiYm9vbGVhbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY3JlYXRlID0gY3JlYXRlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3NjaGVtYSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc2NoZW1hXCIpKTtcblxudmFyIF9sb2NhbGUgPSByZXF1aXJlKFwiLi9sb2NhbGVcIik7XG5cbnZhciBfaXNBYnNlbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvaXNBYnNlbnRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBjcmVhdGUoKSB7XG4gIHJldHVybiBuZXcgQm9vbGVhblNjaGVtYSgpO1xufVxuXG5jbGFzcyBCb29sZWFuU2NoZW1hIGV4dGVuZHMgX3NjaGVtYS5kZWZhdWx0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe1xuICAgICAgdHlwZTogJ2Jvb2xlYW4nXG4gICAgfSk7XG4gICAgdGhpcy53aXRoTXV0YXRpb24oKCkgPT4ge1xuICAgICAgdGhpcy50cmFuc2Zvcm0oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1R5cGUodmFsdWUpKSB7XG4gICAgICAgICAgaWYgKC9eKHRydWV8MSkkL2kudGVzdChTdHJpbmcodmFsdWUpKSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgaWYgKC9eKGZhbHNlfDApJC9pLnRlc3QoU3RyaW5nKHZhbHVlKSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgX3R5cGVDaGVjayh2KSB7XG4gICAgaWYgKHYgaW5zdGFuY2VvZiBCb29sZWFuKSB2ID0gdi52YWx1ZU9mKCk7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSAnYm9vbGVhbic7XG4gIH1cblxuICBpc1RydWUobWVzc2FnZSA9IF9sb2NhbGUuYm9vbGVhbi5pc1ZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMudGVzdCh7XG4gICAgICBtZXNzYWdlLFxuICAgICAgbmFtZTogJ2lzLXZhbHVlJyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICB2YWx1ZTogJ3RydWUnXG4gICAgICB9LFxuXG4gICAgICB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2lzQWJzZW50LmRlZmF1bHQpKHZhbHVlKSB8fCB2YWx1ZSA9PT0gdHJ1ZTtcbiAgICAgIH1cblxuICAgIH0pO1xuICB9XG5cbiAgaXNGYWxzZShtZXNzYWdlID0gX2xvY2FsZS5ib29sZWFuLmlzVmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy50ZXN0KHtcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBuYW1lOiAnaXMtdmFsdWUnLFxuICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIHZhbHVlOiAnZmFsc2UnXG4gICAgICB9LFxuXG4gICAgICB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2lzQWJzZW50LmRlZmF1bHQpKHZhbHVlKSB8fCB2YWx1ZSA9PT0gZmFsc2U7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEJvb2xlYW5TY2hlbWE7XG5jcmVhdGUucHJvdG90eXBlID0gQm9vbGVhblNjaGVtYS5wcm90b3R5cGU7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsTUFBTSxHQUFHQSxNQUFNO0FBQ3ZCRixPQUFPLENBQUNHLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFFeEIsSUFBSUMsT0FBTyxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRXpELElBQUlDLE9BQU8sR0FBR0QsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUVqQyxJQUFJRSxTQUFTLEdBQUdILHNCQUFzQixDQUFDQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUVsRSxTQUFTRCxzQkFBc0JBLENBQUNJLEdBQUcsRUFBRTtFQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFVLEdBQUdELEdBQUcsR0FBRztJQUFFTixPQUFPLEVBQUVNO0VBQUksQ0FBQztBQUFFO0FBRTlGLFNBQVNQLE1BQU1BLENBQUEsRUFBRztFQUNoQixPQUFPLElBQUlTLGFBQWEsRUFBRTtBQUM1QjtBQUVBLE1BQU1BLGFBQWEsU0FBU1AsT0FBTyxDQUFDRCxPQUFPLENBQUM7RUFDMUNTLFdBQVdBLENBQUEsRUFBRztJQUNaLEtBQUssQ0FBQztNQUNKQyxJQUFJLEVBQUU7SUFDUixDQUFDLENBQUM7SUFDRixJQUFJLENBQUNDLFlBQVksQ0FBQyxNQUFNO01BQ3RCLElBQUksQ0FBQ0MsU0FBUyxDQUFDLFVBQVVkLEtBQUssRUFBRTtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDZSxNQUFNLENBQUNmLEtBQUssQ0FBQyxFQUFFO1VBQ3ZCLElBQUksYUFBYSxDQUFDZ0IsSUFBSSxDQUFDQyxNQUFNLENBQUNqQixLQUFLLENBQUMsQ0FBQyxFQUFFLE9BQU8sSUFBSTtVQUNsRCxJQUFJLGNBQWMsQ0FBQ2dCLElBQUksQ0FBQ0MsTUFBTSxDQUFDakIsS0FBSyxDQUFDLENBQUMsRUFBRSxPQUFPLEtBQUs7UUFDdEQ7UUFFQSxPQUFPQSxLQUFLO01BQ2QsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0VBQ0o7RUFFQWtCLFVBQVVBLENBQUNDLENBQUMsRUFBRTtJQUNaLElBQUlBLENBQUMsWUFBWUMsT0FBTyxFQUFFRCxDQUFDLEdBQUdBLENBQUMsQ0FBQ0UsT0FBTyxFQUFFO0lBQ3pDLE9BQU8sT0FBT0YsQ0FBQyxLQUFLLFNBQVM7RUFDL0I7RUFFQUcsTUFBTUEsQ0FBQ0MsT0FBTyxHQUFHakIsT0FBTyxDQUFDa0IsT0FBTyxDQUFDQyxPQUFPLEVBQUU7SUFDeEMsT0FBTyxJQUFJLENBQUNULElBQUksQ0FBQztNQUNmTyxPQUFPO01BQ1BHLElBQUksRUFBRSxVQUFVO01BQ2hCQyxTQUFTLEVBQUUsSUFBSTtNQUNmQyxNQUFNLEVBQUU7UUFDTjVCLEtBQUssRUFBRTtNQUNULENBQUM7TUFFRGdCLElBQUlBLENBQUNoQixLQUFLLEVBQUU7UUFDVixPQUFPLENBQUMsQ0FBQyxFQUFFTyxTQUFTLENBQUNMLE9BQU8sRUFBRUYsS0FBSyxDQUFDLElBQUlBLEtBQUssS0FBSyxJQUFJO01BQ3hEO0lBRUYsQ0FBQyxDQUFDO0VBQ0o7RUFFQTZCLE9BQU9BLENBQUNOLE9BQU8sR0FBR2pCLE9BQU8sQ0FBQ2tCLE9BQU8sQ0FBQ0MsT0FBTyxFQUFFO0lBQ3pDLE9BQU8sSUFBSSxDQUFDVCxJQUFJLENBQUM7TUFDZk8sT0FBTztNQUNQRyxJQUFJLEVBQUUsVUFBVTtNQUNoQkMsU0FBUyxFQUFFLElBQUk7TUFDZkMsTUFBTSxFQUFFO1FBQ041QixLQUFLLEVBQUU7TUFDVCxDQUFDO01BRURnQixJQUFJQSxDQUFDaEIsS0FBSyxFQUFFO1FBQ1YsT0FBTyxDQUFDLENBQUMsRUFBRU8sU0FBUyxDQUFDTCxPQUFPLEVBQUVGLEtBQUssQ0FBQyxJQUFJQSxLQUFLLEtBQUssS0FBSztNQUN6RDtJQUVGLENBQUMsQ0FBQztFQUNKO0FBRUY7QUFFQUQsT0FBTyxDQUFDRyxPQUFPLEdBQUdRLGFBQWE7QUFDL0JULE1BQU0sQ0FBQzZCLFNBQVMsR0FBR3BCLGFBQWEsQ0FBQ29CLFNBQVMifQ==