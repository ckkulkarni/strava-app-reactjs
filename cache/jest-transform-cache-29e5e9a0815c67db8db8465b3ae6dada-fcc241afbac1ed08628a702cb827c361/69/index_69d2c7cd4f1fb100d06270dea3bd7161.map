{"version":3,"names":["randGen","require","module","exports","shuffle","array","seed","currentIndex","temporaryValue","randomIndex","rand","constructor","Array","Error","length","Math","floor"],"sources":["index.js"],"sourcesContent":["/*\n * Copyright 2013 AJ O'Neal\n * Copyright 2015 Tiancheng \"Timothy\" Gu\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict'\n\n/**\n * @file\n *\n * Implementation of the Fisher-Yates shuffle algorithm in JavaScript, with\n * the possibility of using a seed to ensure reproducibility.\n *\n * @module knuth-shuffle-seeded\n */\n\nvar randGen = require('seed-random')\n\n/**\n * Shuffle an array using the Fisher-Yates shuffle algorithm, aka Knuth\n * shuffle.\n *\n * Note that this function overwrites the initial array. As a result if you\n * would like to keep the original array intact, you have to copy the initial\n * array to a new array.\n *\n * Implementation derived from http://stackoverflow.com/questions/2450954/.\n *\n * @param {Array} array An array that is to be shuffled.\n * @param [seed=Math.random()] Seed for the shuffling operation. If\n *                             unspecified then a random value is used.\n * @return {Array} The resulting array.\n */\nmodule.exports = function shuffle(array, seed) {\n  var currentIndex\n    , temporaryValue\n    , randomIndex\n    , rand\n  if (seed == null) rand = randGen()\n  else              rand = randGen(seed)\n\n  if (array.constructor !== Array) throw new Error('Input is not an array')\n  currentIndex = array.length\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(rand() * (currentIndex --))\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex]\n    array[currentIndex] = array[randomIndex]\n    array[randomIndex] = temporaryValue\n  }\n\n  return array\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,SAASC,OAAOA,CAACC,KAAK,EAAEC,IAAI,EAAE;EAC7C,IAAIC,YAAY,EACZC,cAAc,EACdC,WAAW,EACXC,IAAI;EACR,IAAIJ,IAAI,IAAI,IAAI,EAAEI,IAAI,GAAGV,OAAO,EAAE,MAChBU,IAAI,GAAGV,OAAO,CAACM,IAAI,CAAC;EAEtC,IAAID,KAAK,CAACM,WAAW,KAAKC,KAAK,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EACzEN,YAAY,GAAGF,KAAK,CAACS,MAAM;;EAE3B;EACA,OAAO,CAAC,KAAKP,YAAY,EAAE;IACzB;IACAE,WAAW,GAAGM,IAAI,CAACC,KAAK,CAACN,IAAI,EAAE,GAAIH,YAAY,EAAI,CAAC;;IAEpD;IACAC,cAAc,GAAGH,KAAK,CAACE,YAAY,CAAC;IACpCF,KAAK,CAACE,YAAY,CAAC,GAAGF,KAAK,CAACI,WAAW,CAAC;IACxCJ,KAAK,CAACI,WAAW,CAAC,GAAGD,cAAc;EACrC;EAEA,OAAOH,KAAK;AACd,CAAC"}