6029555a37df00e0d0c09ec47942cfa1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.URL = exports.DNS = void 0;
exports.default = v35;
var _stringify = require("./stringify.js");
var _parse = _interopRequireDefault(require("./parse.js"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;
function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }
    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`

    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return (0, _stringify.unsafeStringify)(bytes);
  } // Function#name is not settable on some platforms (#270)

  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support

  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlVSTCIsIkROUyIsImRlZmF1bHQiLCJ2MzUiLCJfc3RyaW5naWZ5IiwicmVxdWlyZSIsIl9wYXJzZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwic3RyaW5nVG9CeXRlcyIsInN0ciIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiYnl0ZXMiLCJpIiwibGVuZ3RoIiwicHVzaCIsImNoYXJDb2RlQXQiLCJuYW1lIiwidmVyc2lvbiIsImhhc2hmdW5jIiwiZ2VuZXJhdGVVVUlEIiwibmFtZXNwYWNlIiwiYnVmIiwib2Zmc2V0IiwiX25hbWVzcGFjZSIsIlR5cGVFcnJvciIsIlVpbnQ4QXJyYXkiLCJzZXQiLCJ1bnNhZmVTdHJpbmdpZnkiLCJlcnIiXSwic291cmNlcyI6WyJ2MzUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlVSTCA9IGV4cG9ydHMuRE5TID0gdm9pZCAwO1xuZXhwb3J0cy5kZWZhdWx0ID0gdjM1O1xuXG52YXIgX3N0cmluZ2lmeSA9IHJlcXVpcmUoXCIuL3N0cmluZ2lmeS5qc1wiKTtcblxudmFyIF9wYXJzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcGFyc2UuanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cikge1xuICBzdHIgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgY29uc3QgYnl0ZXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGJ5dGVzLnB1c2goc3RyLmNoYXJDb2RlQXQoaSkpO1xuICB9XG5cbiAgcmV0dXJuIGJ5dGVzO1xufVxuXG5jb25zdCBETlMgPSAnNmJhN2I4MTAtOWRhZC0xMWQxLTgwYjQtMDBjMDRmZDQzMGM4JztcbmV4cG9ydHMuRE5TID0gRE5TO1xuY29uc3QgVVJMID0gJzZiYTdiODExLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnRzLlVSTCA9IFVSTDtcblxuZnVuY3Rpb24gdjM1KG5hbWUsIHZlcnNpb24sIGhhc2hmdW5jKSB7XG4gIGZ1bmN0aW9uIGdlbmVyYXRlVVVJRCh2YWx1ZSwgbmFtZXNwYWNlLCBidWYsIG9mZnNldCkge1xuICAgIHZhciBfbmFtZXNwYWNlO1xuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gc3RyaW5nVG9CeXRlcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lc3BhY2UgPSAoMCwgX3BhcnNlLmRlZmF1bHQpKG5hbWVzcGFjZSk7XG4gICAgfVxuXG4gICAgaWYgKCgoX25hbWVzcGFjZSA9IG5hbWVzcGFjZSkgPT09IG51bGwgfHwgX25hbWVzcGFjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25hbWVzcGFjZS5sZW5ndGgpICE9PSAxNikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdOYW1lc3BhY2UgbXVzdCBiZSBhcnJheS1saWtlICgxNiBpdGVyYWJsZSBpbnRlZ2VyIHZhbHVlcywgMC0yNTUpJyk7XG4gICAgfSAvLyBDb21wdXRlIGhhc2ggb2YgbmFtZXNwYWNlIGFuZCB2YWx1ZSwgUGVyIDQuM1xuICAgIC8vIEZ1dHVyZTogVXNlIHNwcmVhZCBzeW50YXggd2hlbiBzdXBwb3J0ZWQgb24gYWxsIHBsYXRmb3JtcywgZS5nLiBgYnl0ZXMgPVxuICAgIC8vIGhhc2hmdW5jKFsuLi5uYW1lc3BhY2UsIC4uLiB2YWx1ZV0pYFxuXG5cbiAgICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheSgxNiArIHZhbHVlLmxlbmd0aCk7XG4gICAgYnl0ZXMuc2V0KG5hbWVzcGFjZSk7XG4gICAgYnl0ZXMuc2V0KHZhbHVlLCBuYW1lc3BhY2UubGVuZ3RoKTtcbiAgICBieXRlcyA9IGhhc2hmdW5jKGJ5dGVzKTtcbiAgICBieXRlc1s2XSA9IGJ5dGVzWzZdICYgMHgwZiB8IHZlcnNpb247XG4gICAgYnl0ZXNbOF0gPSBieXRlc1s4XSAmIDB4M2YgfCAweDgwO1xuXG4gICAgaWYgKGJ1Zikge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICBidWZbb2Zmc2V0ICsgaV0gPSBieXRlc1tpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF9zdHJpbmdpZnkudW5zYWZlU3RyaW5naWZ5KShieXRlcyk7XG4gIH0gLy8gRnVuY3Rpb24jbmFtZSBpcyBub3Qgc2V0dGFibGUgb24gc29tZSBwbGF0Zm9ybXMgKCMyNzApXG5cblxuICB0cnkge1xuICAgIGdlbmVyYXRlVVVJRC5uYW1lID0gbmFtZTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gIH0gY2F0Y2ggKGVycikge30gLy8gRm9yIENvbW1vbkpTIGRlZmF1bHQgZXhwb3J0IHN1cHBvcnRcblxuXG4gIGdlbmVyYXRlVVVJRC5ETlMgPSBETlM7XG4gIGdlbmVyYXRlVVVJRC5VUkwgPSBVUkw7XG4gIHJldHVybiBnZW5lcmF0ZVVVSUQ7XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FB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