1ed1ff18a82d42efc8100ff78762df4b
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatUndefinedParameterType = exports.formatUndefinedParameterTypes = exports.formatIssue = exports.isIssue = exports.isWarning = exports.isFailure = void 0;
const indent_string_1 = __importDefault(require("indent-string"));
const test_case_attempt_formatter_1 = require("./test_case_attempt_formatter");
function isFailure(result, willBeRetried = false) {
  return result.status === 'AMBIGUOUS' || result.status === 'UNDEFINED' || result.status === 'FAILED' && !willBeRetried;
}
exports.isFailure = isFailure;
function isWarning(result, willBeRetried = false) {
  return result.status === 'PENDING' || result.status === 'FAILED' && willBeRetried;
}
exports.isWarning = isWarning;
function isIssue(result) {
  return isFailure(result) || isWarning(result);
}
exports.isIssue = isIssue;
function formatIssue({
  colorFns,
  number,
  snippetBuilder,
  testCaseAttempt,
  supportCodeLibrary,
  printAttachments = true
}) {
  const prefix = `${number.toString()}) `;
  const formattedTestCaseAttempt = (0, test_case_attempt_formatter_1.formatTestCaseAttempt)({
    colorFns,
    snippetBuilder,
    testCaseAttempt,
    supportCodeLibrary,
    printAttachments
  });
  const lines = formattedTestCaseAttempt.split('\n');
  const updatedLines = lines.map((line, index) => {
    if (index === 0) {
      return `${prefix}${line}`;
    }
    return (0, indent_string_1.default)(line, prefix.length);
  });
  return updatedLines.join('\n');
}
exports.formatIssue = formatIssue;
function formatUndefinedParameterTypes(undefinedParameterTypes) {
  const output = [`Undefined parameter types:\n\n`];
  const withLatest = {};
  undefinedParameterTypes.forEach(parameterType => {
    withLatest[parameterType.name] = parameterType;
  });
  output.push(Object.values(withLatest).map(parameterType => `- ${formatUndefinedParameterType(parameterType)}`).join('\n'));
  output.push('\n\n');
  return output.join('');
}
exports.formatUndefinedParameterTypes = formatUndefinedParameterTypes;
function formatUndefinedParameterType(parameterType) {
  return `"${parameterType.name}" e.g. \`${parameterType.expression}\``;
}
exports.formatUndefinedParameterType = formatUndefinedParameterType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbmRlbnRfc3RyaW5nXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZXF1aXJlIiwidGVzdF9jYXNlX2F0dGVtcHRfZm9ybWF0dGVyXzEiLCJpc0ZhaWx1cmUiLCJyZXN1bHQiLCJ3aWxsQmVSZXRyaWVkIiwic3RhdHVzIiwiZXhwb3J0cyIsImlzV2FybmluZyIsImlzSXNzdWUiLCJmb3JtYXRJc3N1ZSIsImNvbG9yRm5zIiwibnVtYmVyIiwic25pcHBldEJ1aWxkZXIiLCJ0ZXN0Q2FzZUF0dGVtcHQiLCJzdXBwb3J0Q29kZUxpYnJhcnkiLCJwcmludEF0dGFjaG1lbnRzIiwicHJlZml4IiwidG9TdHJpbmciLCJmb3JtYXR0ZWRUZXN0Q2FzZUF0dGVtcHQiLCJmb3JtYXRUZXN0Q2FzZUF0dGVtcHQiLCJsaW5lcyIsInNwbGl0IiwidXBkYXRlZExpbmVzIiwibWFwIiwibGluZSIsImluZGV4IiwiZGVmYXVsdCIsImxlbmd0aCIsImpvaW4iLCJmb3JtYXRVbmRlZmluZWRQYXJhbWV0ZXJUeXBlcyIsInVuZGVmaW5lZFBhcmFtZXRlclR5cGVzIiwib3V0cHV0Iiwid2l0aExhdGVzdCIsImZvckVhY2giLCJwYXJhbWV0ZXJUeXBlIiwibmFtZSIsInB1c2giLCJPYmplY3QiLCJ2YWx1ZXMiLCJmb3JtYXRVbmRlZmluZWRQYXJhbWV0ZXJUeXBlIiwiZXhwcmVzc2lvbiJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9mb3JtYXR0ZXIvaGVscGVycy9pc3N1ZV9oZWxwZXJzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpbmRlbnRTdHJpbmcgZnJvbSAnaW5kZW50LXN0cmluZydcbmltcG9ydCB7IGZvcm1hdFRlc3RDYXNlQXR0ZW1wdCB9IGZyb20gJy4vdGVzdF9jYXNlX2F0dGVtcHRfZm9ybWF0dGVyJ1xuaW1wb3J0ICogYXMgbWVzc2FnZXMgZnJvbSAnQGN1Y3VtYmVyL21lc3NhZ2VzJ1xuaW1wb3J0IHsgSUNvbG9yRm5zIH0gZnJvbSAnLi4vZ2V0X2NvbG9yX2ZucydcbmltcG9ydCBTdGVwRGVmaW5pdGlvblNuaXBwZXRCdWlsZGVyIGZyb20gJy4uL3N0ZXBfZGVmaW5pdGlvbl9zbmlwcGV0X2J1aWxkZXInXG5pbXBvcnQgeyBJU3VwcG9ydENvZGVMaWJyYXJ5IH0gZnJvbSAnLi4vLi4vc3VwcG9ydF9jb2RlX2xpYnJhcnlfYnVpbGRlci90eXBlcydcbmltcG9ydCB7IElUZXN0Q2FzZUF0dGVtcHQgfSBmcm9tICcuL2V2ZW50X2RhdGFfY29sbGVjdG9yJ1xuXG5leHBvcnQgZnVuY3Rpb24gaXNGYWlsdXJlKFxuICByZXN1bHQ6IG1lc3NhZ2VzLlRlc3RTdGVwUmVzdWx0LFxuICB3aWxsQmVSZXRyaWVkOiBib29sZWFuID0gZmFsc2Vcbik6IGJvb2xlYW4ge1xuICByZXR1cm4gKFxuICAgIHJlc3VsdC5zdGF0dXMgPT09ICdBTUJJR1VPVVMnIHx8XG4gICAgcmVzdWx0LnN0YXR1cyA9PT0gJ1VOREVGSU5FRCcgfHxcbiAgICAocmVzdWx0LnN0YXR1cyA9PT0gJ0ZBSUxFRCcgJiYgIXdpbGxCZVJldHJpZWQpXG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzV2FybmluZyhcbiAgcmVzdWx0OiBtZXNzYWdlcy5UZXN0U3RlcFJlc3VsdCxcbiAgd2lsbEJlUmV0cmllZDogYm9vbGVhbiA9IGZhbHNlXG4pOiBib29sZWFuIHtcbiAgcmV0dXJuIChcbiAgICByZXN1bHQuc3RhdHVzID09PSAnUEVORElORycgfHwgKHJlc3VsdC5zdGF0dXMgPT09ICdGQUlMRUQnICYmIHdpbGxCZVJldHJpZWQpXG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSXNzdWUocmVzdWx0OiBtZXNzYWdlcy5UZXN0U3RlcFJlc3VsdCk6IGJvb2xlYW4ge1xuICByZXR1cm4gaXNGYWlsdXJlKHJlc3VsdCkgfHwgaXNXYXJuaW5nKHJlc3VsdClcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRm9ybWF0SXNzdWVSZXF1ZXN0IHtcbiAgY29sb3JGbnM6IElDb2xvckZuc1xuICBudW1iZXI6IG51bWJlclxuICBzbmlwcGV0QnVpbGRlcjogU3RlcERlZmluaXRpb25TbmlwcGV0QnVpbGRlclxuICB0ZXN0Q2FzZUF0dGVtcHQ6IElUZXN0Q2FzZUF0dGVtcHRcbiAgc3VwcG9ydENvZGVMaWJyYXJ5OiBJU3VwcG9ydENvZGVMaWJyYXJ5XG4gIHByaW50QXR0YWNobWVudHM/OiBib29sZWFuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRJc3N1ZSh7XG4gIGNvbG9yRm5zLFxuICBudW1iZXIsXG4gIHNuaXBwZXRCdWlsZGVyLFxuICB0ZXN0Q2FzZUF0dGVtcHQsXG4gIHN1cHBvcnRDb2RlTGlicmFyeSxcbiAgcHJpbnRBdHRhY2htZW50cyA9IHRydWUsXG59OiBJRm9ybWF0SXNzdWVSZXF1ZXN0KTogc3RyaW5nIHtcbiAgY29uc3QgcHJlZml4ID0gYCR7bnVtYmVyLnRvU3RyaW5nKCl9KSBgXG4gIGNvbnN0IGZvcm1hdHRlZFRlc3RDYXNlQXR0ZW1wdCA9IGZvcm1hdFRlc3RDYXNlQXR0ZW1wdCh7XG4gICAgY29sb3JGbnMsXG4gICAgc25pcHBldEJ1aWxkZXIsXG4gICAgdGVzdENhc2VBdHRlbXB0LFxuICAgIHN1cHBvcnRDb2RlTGlicmFyeSxcbiAgICBwcmludEF0dGFjaG1lbnRzLFxuICB9KVxuICBjb25zdCBsaW5lcyA9IGZvcm1hdHRlZFRlc3RDYXNlQXR0ZW1wdC5zcGxpdCgnXFxuJylcbiAgY29uc3QgdXBkYXRlZExpbmVzID0gbGluZXMubWFwKChsaW5lLCBpbmRleCkgPT4ge1xuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGAke3ByZWZpeH0ke2xpbmV9YFxuICAgIH1cbiAgICByZXR1cm4gaW5kZW50U3RyaW5nKGxpbmUsIHByZWZpeC5sZW5ndGgpXG4gIH0pXG4gIHJldHVybiB1cGRhdGVkTGluZXMuam9pbignXFxuJylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFVuZGVmaW5lZFBhcmFtZXRlclR5cGVzKFxuICB1bmRlZmluZWRQYXJhbWV0ZXJUeXBlczogbWVzc2FnZXMuVW5kZWZpbmVkUGFyYW1ldGVyVHlwZVtdXG4pOiBzdHJpbmcge1xuICBjb25zdCBvdXRwdXQgPSBbYFVuZGVmaW5lZCBwYXJhbWV0ZXIgdHlwZXM6XFxuXFxuYF1cbiAgY29uc3Qgd2l0aExhdGVzdDogUmVjb3JkPHN0cmluZywgbWVzc2FnZXMuVW5kZWZpbmVkUGFyYW1ldGVyVHlwZT4gPSB7fVxuICB1bmRlZmluZWRQYXJhbWV0ZXJUeXBlcy5mb3JFYWNoKChwYXJhbWV0ZXJUeXBlKSA9PiB7XG4gICAgd2l0aExhdGVzdFtwYXJhbWV0ZXJUeXBlLm5hbWVdID0gcGFyYW1ldGVyVHlwZVxuICB9KVxuICBvdXRwdXQucHVzaChcbiAgICBPYmplY3QudmFsdWVzKHdpdGhMYXRlc3QpXG4gICAgICAubWFwKFxuICAgICAgICAocGFyYW1ldGVyVHlwZSkgPT4gYC0gJHtmb3JtYXRVbmRlZmluZWRQYXJhbWV0ZXJUeXBlKHBhcmFtZXRlclR5cGUpfWBcbiAgICAgIClcbiAgICAgIC5qb2luKCdcXG4nKVxuICApXG4gIG91dHB1dC5wdXNoKCdcXG5cXG4nKVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRVbmRlZmluZWRQYXJhbWV0ZXJUeXBlKFxuICBwYXJhbWV0ZXJUeXBlOiBtZXNzYWdlcy5VbmRlZmluZWRQYXJhbWV0ZXJUeXBlXG4pOiBzdHJpbmcge1xuICByZXR1cm4gYFwiJHtwYXJhbWV0ZXJUeXBlLm5hbWV9XCIgZS5nLiBcXGAke3BhcmFtZXRlclR5cGUuZXhwcmVzc2lvbn1cXGBgXG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsTUFBQUEsZUFBQSxHQUFBQyxlQUFBLENBQUFDLE9BQUE7QUFDQSxNQUFBQyw2QkFBQSxHQUFBRCxPQUFBO0FBT0EsU0FBZ0JFLFNBQVNBLENBQ3ZCQyxNQUErQixFQUMvQkMsYUFBQSxHQUF5QixLQUFLO0VBRTlCLE9BQ0VELE1BQU0sQ0FBQ0UsTUFBTSxLQUFLLFdBQVcs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