892132220823836017aafba8e2c205ec
"use strict";

// Generated by CoffeeScript 2.4.1
(function () {
  var NodeType, XMLDTDElement, XMLNode;
  XMLNode = require('./XMLNode');
  NodeType = require('./NodeType');

  // Represents an attribute
  module.exports = XMLDTDElement = class XMLDTDElement extends XMLNode {
    // Initializes a new instance of `XMLDTDElement`

    // `parent` the parent `XMLDocType` element
    // `name` element name
    // `value` element content (defaults to #PCDATA)
    constructor(parent, name, value) {
      super(parent);
      if (name == null) {
        throw new Error("Missing DTD element name. " + this.debugInfo());
      }
      if (!value) {
        value = '(#PCDATA)';
      }
      if (Array.isArray(value)) {
        value = '(' + value.join(',') + ')';
      }
      this.name = this.stringify.name(name);
      this.type = NodeType.ElementDeclaration;
      this.value = this.stringify.dtdElementValue(value);
    }

    // Converts the XML fragment to string

    // `options.pretty` pretty prints the result
    // `options.indent` indentation for pretty print
    // `options.offset` how many indentations to add to every line for pretty print
    // `options.newline` newline sequence for pretty print
    toString(options) {
      return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));
    }
  };
}).call(void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlVHlwZSIsIlhNTERUREVsZW1lbnQiLCJYTUxOb2RlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb25zdHJ1Y3RvciIsInBhcmVudCIsIm5hbWUiLCJ2YWx1ZSIsIkVycm9yIiwiZGVidWdJbmZvIiwiQXJyYXkiLCJpc0FycmF5Iiwiam9pbiIsInN0cmluZ2lmeSIsInR5cGUiLCJFbGVtZW50RGVjbGFyYXRpb24iLCJkdGRFbGVtZW50VmFsdWUiLCJ0b1N0cmluZyIsIm9wdGlvbnMiLCJ3cml0ZXIiLCJkdGRFbGVtZW50IiwiZmlsdGVyT3B0aW9ucyIsImNhbGwiXSwic291cmNlcyI6WyJYTUxEVERFbGVtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMi40LjFcbihmdW5jdGlvbigpIHtcbiAgdmFyIE5vZGVUeXBlLCBYTUxEVERFbGVtZW50LCBYTUxOb2RlO1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBOb2RlVHlwZSA9IHJlcXVpcmUoJy4vTm9kZVR5cGUnKTtcblxuICAvLyBSZXByZXNlbnRzIGFuIGF0dHJpYnV0ZVxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERUREVsZW1lbnQgPSBjbGFzcyBYTUxEVERFbGVtZW50IGV4dGVuZHMgWE1MTm9kZSB7XG4gICAgLy8gSW5pdGlhbGl6ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYFhNTERUREVsZW1lbnRgXG5cbiAgICAvLyBgcGFyZW50YCB0aGUgcGFyZW50IGBYTUxEb2NUeXBlYCBlbGVtZW50XG4gICAgLy8gYG5hbWVgIGVsZW1lbnQgbmFtZVxuICAgIC8vIGB2YWx1ZWAgZWxlbWVudCBjb250ZW50IChkZWZhdWx0cyB0byAjUENEQVRBKVxuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgIHN1cGVyKHBhcmVudCk7XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgRFREIGVsZW1lbnQgbmFtZS4gXCIgKyB0aGlzLmRlYnVnSW5mbygpKTtcbiAgICAgIH1cbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSAnKCNQQ0RBVEEpJztcbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9ICcoJyArIHZhbHVlLmpvaW4oJywnKSArICcpJztcbiAgICAgIH1cbiAgICAgIHRoaXMubmFtZSA9IHRoaXMuc3RyaW5naWZ5Lm5hbWUobmFtZSk7XG4gICAgICB0aGlzLnR5cGUgPSBOb2RlVHlwZS5FbGVtZW50RGVjbGFyYXRpb247XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5zdHJpbmdpZnkuZHRkRWxlbWVudFZhbHVlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0cyB0aGUgWE1MIGZyYWdtZW50IHRvIHN0cmluZ1xuXG4gICAgLy8gYG9wdGlvbnMucHJldHR5YCBwcmV0dHkgcHJpbnRzIHRoZSByZXN1bHRcbiAgICAvLyBgb3B0aW9ucy5pbmRlbnRgIGluZGVudGF0aW9uIGZvciBwcmV0dHkgcHJpbnRcbiAgICAvLyBgb3B0aW9ucy5vZmZzZXRgIGhvdyBtYW55IGluZGVudGF0aW9ucyB0byBhZGQgdG8gZXZlcnkgbGluZSBmb3IgcHJldHR5IHByaW50XG4gICAgLy8gYG9wdGlvbnMubmV3bGluZWAgbmV3bGluZSBzZXF1ZW5jZSBmb3IgcHJldHR5IHByaW50XG4gICAgdG9TdHJpbmcob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuZHRkRWxlbWVudCh0aGlzLCB0aGlzLm9wdGlvbnMud3JpdGVyLmZpbHRlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH1cblxuICB9O1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0EsQ0FBQyxZQUFXO0VBQ1YsSUFBSUEsUUFBUSxFQUFFQyxhQUFhLEVBQUVDLE9BQU87RUFFcENBLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFdBQVcsQ0FBQztFQUU5QkgsUUFBUSxHQUFHRyxPQUFPLENBQUMsWUFBWSxDQUFDOztFQUVoQztFQUNBQyxNQUFNLENBQUNDLE9BQU8sR0FBR0osYUFBYSxHQUFHLE1BQU1BLGFBQWEsU0FBU0MsT0FBTyxDQUFDO0lBQ25FOztJQUVBO0lBQ0E7SUFDQTtJQUNBSSxXQUFXQSxDQUFDQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFO01BQy9CLEtBQUssQ0FBQ0YsTUFBTSxDQUFDO01BQ2IsSUFBSUMsSUFBSSxJQUFJLElBQUksRUFBRTtRQUNoQixNQUFNLElBQUlFLEtBQUssQ0FBQyw0QkFBNEIsR0FBRyxJQUFJLENBQUNDLFNBQVMsRUFBRSxDQUFDO01BQ2xFO01BQ0EsSUFBSSxDQUFDRixLQUFLLEVBQUU7UUFDVkEsS0FBSyxHQUFHLFdBQVc7TUFDckI7TUFDQSxJQUFJRyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0osS0FBSyxDQUFDLEVBQUU7UUFDeEJBLEtBQUssR0FBRyxHQUFHLEdBQUdBLEtBQUssQ0FBQ0ssSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUc7TUFDckM7TUFDQSxJQUFJLENBQUNOLElBQUksR0FBRyxJQUFJLENBQUNPLFNBQVMsQ0FBQ1AsSUFBSSxDQUFDQSxJQUFJLENBQUM7TUFDckMsSUFBSSxDQUFDUSxJQUFJLEdBQUdoQixRQUFRLENBQUNpQixrQkFBa0I7TUFDdkMsSUFBSSxDQUFDUixLQUFLLEdBQUcsSUFBSSxDQUFDTSxTQUFTLENBQUNHLGVBQWUsQ0FBQ1QsS0FBSyxDQUFDO0lBQ3BEOztJQUVBOztJQUVBO0lBQ0E7SUFDQTtJQUNBO0lBQ0FVLFFBQVFBLENBQUNDLE9BQU8sRUFBRTtNQUNoQixPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLENBQUNDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDRixPQUFPLENBQUNDLE1BQU0sQ0FBQ0UsYUFBYSxDQUFDSCxPQUFPLENBQUMsQ0FBQztJQUN6RjtFQUVGLENBQUM7QUFFSCxDQUFDLEVBQUVJLElBQUksUUFBTSJ9