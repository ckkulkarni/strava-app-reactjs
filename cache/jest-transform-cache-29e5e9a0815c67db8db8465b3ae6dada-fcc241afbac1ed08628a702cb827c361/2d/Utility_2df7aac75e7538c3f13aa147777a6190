c991a89184e3912395b95e64739da4b3
"use strict";

// Generated by CoffeeScript 2.4.1
(function () {
  // Copies all enumerable own properties from `sources` to `target`
  var assign,
    getValue,
    isArray,
    isEmpty,
    isFunction,
    isObject,
    isPlainObject,
    hasProp = {}.hasOwnProperty;
  assign = function (target, ...sources) {
    var i, key, len, source;
    if (isFunction(Object.assign)) {
      Object.assign.apply(null, arguments);
    } else {
      for (i = 0, len = sources.length; i < len; i++) {
        source = sources[i];
        if (source != null) {
          for (key in source) {
            if (!hasProp.call(source, key)) continue;
            target[key] = source[key];
          }
        }
      }
    }
    return target;
  };

  // Determines if `val` is a Function object
  isFunction = function (val) {
    return !!val && Object.prototype.toString.call(val) === '[object Function]';
  };

  // Determines if `val` is an Object
  isObject = function (val) {
    var ref;
    return !!val && ((ref = typeof val) === 'function' || ref === 'object');
  };

  // Determines if `val` is an Array
  isArray = function (val) {
    if (isFunction(Array.isArray)) {
      return Array.isArray(val);
    } else {
      return Object.prototype.toString.call(val) === '[object Array]';
    }
  };

  // Determines if `val` is an empty Array or an Object with no own properties
  isEmpty = function (val) {
    var key;
    if (isArray(val)) {
      return !val.length;
    } else {
      for (key in val) {
        if (!hasProp.call(val, key)) continue;
        return false;
      }
      return true;
    }
  };

  // Determines if `val` is a plain Object
  isPlainObject = function (val) {
    var ctor, proto;
    return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && typeof ctor === 'function' && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);
  };

  // Gets the primitive value of an object
  getValue = function (obj) {
    if (isFunction(obj.valueOf)) {
      return obj.valueOf();
    } else {
      return obj;
    }
  };
  module.exports.assign = assign;
  module.exports.isFunction = isFunction;
  module.exports.isObject = isObject;
  module.exports.isArray = isArray;
  module.exports.isEmpty = isEmpty;
  module.exports.isPlainObject = isPlainObject;
  module.exports.getValue = getValue;
}).call(void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3NpZ24iLCJnZXRWYWx1ZSIsImlzQXJyYXkiLCJpc0VtcHR5IiwiaXNGdW5jdGlvbiIsImlzT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsImhhc1Byb3AiLCJoYXNPd25Qcm9wZXJ0eSIsInRhcmdldCIsInNvdXJjZXMiLCJpIiwia2V5IiwibGVuIiwic291cmNlIiwiT2JqZWN0IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJjYWxsIiwidmFsIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJyZWYiLCJBcnJheSIsImN0b3IiLCJwcm90byIsImdldFByb3RvdHlwZU9mIiwiY29uc3RydWN0b3IiLCJGdW5jdGlvbiIsIm9iaiIsInZhbHVlT2YiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiVXRpbGl0eS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDIuNC4xXG4oZnVuY3Rpb24oKSB7XG4gIC8vIENvcGllcyBhbGwgZW51bWVyYWJsZSBvd24gcHJvcGVydGllcyBmcm9tIGBzb3VyY2VzYCB0byBgdGFyZ2V0YFxuICB2YXIgYXNzaWduLCBnZXRWYWx1ZSwgaXNBcnJheSwgaXNFbXB0eSwgaXNGdW5jdGlvbiwgaXNPYmplY3QsIGlzUGxhaW5PYmplY3QsXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIGFzc2lnbiA9IGZ1bmN0aW9uKHRhcmdldCwgLi4uc291cmNlcykge1xuICAgIHZhciBpLCBrZXksIGxlbiwgc291cmNlO1xuICAgIGlmIChpc0Z1bmN0aW9uKE9iamVjdC5hc3NpZ24pKSB7XG4gICAgICBPYmplY3QuYXNzaWduLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHNvdXJjZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgc291cmNlID0gc291cmNlc1tpXTtcbiAgICAgICAgaWYgKHNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgICAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmVzIGlmIGB2YWxgIGlzIGEgRnVuY3Rpb24gb2JqZWN0XG4gIGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWwpIHtcbiAgICByZXR1cm4gISF2YWwgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lcyBpZiBgdmFsYCBpcyBhbiBPYmplY3RcbiAgaXNPYmplY3QgPSBmdW5jdGlvbih2YWwpIHtcbiAgICB2YXIgcmVmO1xuICAgIHJldHVybiAhIXZhbCAmJiAoKHJlZiA9IHR5cGVvZiB2YWwpID09PSAnZnVuY3Rpb24nIHx8IHJlZiA9PT0gJ29iamVjdCcpO1xuICB9O1xuXG4gIC8vIERldGVybWluZXMgaWYgYHZhbGAgaXMgYW4gQXJyYXlcbiAgaXNBcnJheSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIGlmIChpc0Z1bmN0aW9uKEFycmF5LmlzQXJyYXkpKSB7XG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgfVxuICB9O1xuXG4gIC8vIERldGVybWluZXMgaWYgYHZhbGAgaXMgYW4gZW1wdHkgQXJyYXkgb3IgYW4gT2JqZWN0IHdpdGggbm8gb3duIHByb3BlcnRpZXNcbiAgaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHZhciBrZXk7XG4gICAgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmV0dXJuICF2YWwubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGtleSBpbiB2YWwpIHtcbiAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwodmFsLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xuXG4gIC8vIERldGVybWluZXMgaWYgYHZhbGAgaXMgYSBwbGFpbiBPYmplY3RcbiAgaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHZhciBjdG9yLCBwcm90bztcbiAgICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiAocHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsKSkgJiYgKGN0b3IgPSBwcm90by5jb25zdHJ1Y3RvcikgJiYgKHR5cGVvZiBjdG9yID09PSAnZnVuY3Rpb24nKSAmJiAoY3RvciBpbnN0YW5jZW9mIGN0b3IpICYmIChGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChjdG9yKSA9PT0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoT2JqZWN0KSk7XG4gIH07XG5cbiAgLy8gR2V0cyB0aGUgcHJpbWl0aXZlIHZhbHVlIG9mIGFuIG9iamVjdFxuICBnZXRWYWx1ZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChpc0Z1bmN0aW9uKG9iai52YWx1ZU9mKSkge1xuICAgICAgcmV0dXJuIG9iai52YWx1ZU9mKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzLmFzc2lnbiA9IGFzc2lnbjtcblxuICBtb2R1bGUuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuICBtb2R1bGUuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG4gIG1vZHVsZS5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG4gIG1vZHVsZS5leHBvcnRzLmlzRW1wdHkgPSBpc0VtcHR5O1xuXG4gIG1vZHVsZS5leHBvcnRzLmlzUGxhaW5PYmplY3QgPSBpc1BsYWluT2JqZWN0O1xuXG4gIG1vZHVsZS5leHBvcnRzLmdldFZhbHVlID0gZ2V0VmFsdWU7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSxDQUFDLFlBQVc7RUFDVjtFQUNBLElBQUlBLE1BQU07SUFBRUMsUUFBUTtJQUFFQyxPQUFPO0lBQUVDLE9BQU87SUFBRUMsVUFBVTtJQUFFQyxRQUFRO0lBQUVDLGFBQWE7SUFDekVDLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQ0MsY0FBYztFQUU3QlIsTUFBTSxHQUFHLFNBQUFBLENBQVNTLE1BQU0sRUFBRSxHQUFHQyxPQUFPLEVBQUU7SUFDcEMsSUFBSUMsQ0FBQyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsTUFBTTtJQUN2QixJQUFJVixVQUFVLENBQUNXLE1BQU0sQ0FBQ2YsTUFBTSxDQUFDLEVBQUU7TUFDN0JlLE1BQU0sQ0FBQ2YsTUFBTSxDQUFDZ0IsS0FBSyxDQUFDLElBQUksRUFBRUMsU0FBUyxDQUFDO0lBQ3RDLENBQUMsTUFBTTtNQUNMLEtBQUtOLENBQUMsR0FBRyxDQUFDLEVBQUVFLEdBQUcsR0FBR0gsT0FBTyxDQUFDUSxNQUFNLEVBQUVQLENBQUMsR0FBR0UsR0FBRyxFQUFFRixDQUFDLEVBQUUsRUFBRTtRQUM5Q0csTUFBTSxHQUFHSixPQUFPLENBQUNDLENBQUMsQ0FBQztRQUNuQixJQUFJRyxNQUFNLElBQUksSUFBSSxFQUFFO1VBQ2xCLEtBQUtGLEdBQUcsSUFBSUUsTUFBTSxFQUFFO1lBQ2xCLElBQUksQ0FBQ1AsT0FBTyxDQUFDWSxJQUFJLENBQUNMLE1BQU0sRUFBRUYsR0FBRyxDQUFDLEVBQUU7WUFDaENILE1BQU0sQ0FBQ0csR0FBRyxDQUFDLEdBQUdFLE1BQU0sQ0FBQ0YsR0FBRyxDQUFDO1VBQzNC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