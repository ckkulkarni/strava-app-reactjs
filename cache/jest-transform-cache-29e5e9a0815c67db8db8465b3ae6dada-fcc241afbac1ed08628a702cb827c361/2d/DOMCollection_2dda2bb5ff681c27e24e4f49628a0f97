4eaf50b76a6dcfdeac264c541feaf1ab
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.test = exports.serialize = exports.default = void 0;
var _collections = require('../collections');

/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* eslint-disable local/ban-types-eventually */
const SPACE = ' ';
const OBJECT_NAMES = ['DOMStringMap', 'NamedNodeMap'];
const ARRAY_REGEXP = /^(HTML\w*Collection|NodeList)$/;
const testName = name => OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name);
const test = val => val && val.constructor && !!val.constructor.name && testName(val.constructor.name);
exports.test = test;
const isNamedNodeMap = collection => collection.constructor.name === 'NamedNodeMap';
const serialize = (collection, config, indentation, depth, refs, printer) => {
  const name = collection.constructor.name;
  if (++depth > config.maxDepth) {
    return '[' + name + ']';
  }
  return (config.min ? '' : name + SPACE) + (OBJECT_NAMES.indexOf(name) !== -1 ? '{' + (0, _collections.printObjectProperties)(isNamedNodeMap(collection) ? Array.from(collection).reduce((props, attribute) => {
    props[attribute.name] = attribute.value;
    return props;
  }, {}) : {
    ...collection
  }, config, indentation, depth, refs, printer) + '}' : '[' + (0, _collections.printListItems)(Array.from(collection), config, indentation, depth, refs, printer) + ']');
};
exports.serialize = serialize;
const plugin = {
  serialize,
  test
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRlc3QiLCJzZXJpYWxpemUiLCJkZWZhdWx0IiwiX2NvbGxlY3Rpb25zIiwicmVxdWlyZSIsIlNQQUNFIiwiT0JKRUNUX05BTUVTIiwiQVJSQVlfUkVHRVhQIiwidGVzdE5hbWUiLCJuYW1lIiwiaW5kZXhPZiIsInZhbCIsImNvbnN0cnVjdG9yIiwiaXNOYW1lZE5vZGVNYXAiLCJjb2xsZWN0aW9uIiwiY29uZmlnIiwiaW5kZW50YXRpb24iLCJkZXB0aCIsInJlZnMiLCJwcmludGVyIiwibWF4RGVwdGgiLCJtaW4iLCJwcmludE9iamVjdFByb3BlcnRpZXMiLCJBcnJheSIsImZyb20iLCJyZWR1Y2UiLCJwcm9wcyIsImF0dHJpYnV0ZSIsInByaW50TGlzdEl0ZW1zIiwicGx1Z2luIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJET01Db2xsZWN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnRlc3QgPSBleHBvcnRzLnNlcmlhbGl6ZSA9IGV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jb2xsZWN0aW9ucyA9IHJlcXVpcmUoJy4uL2NvbGxlY3Rpb25zJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgbG9jYWwvYmFuLXR5cGVzLWV2ZW50dWFsbHkgKi9cbmNvbnN0IFNQQUNFID0gJyAnO1xuY29uc3QgT0JKRUNUX05BTUVTID0gWydET01TdHJpbmdNYXAnLCAnTmFtZWROb2RlTWFwJ107XG5jb25zdCBBUlJBWV9SRUdFWFAgPSAvXihIVE1MXFx3KkNvbGxlY3Rpb258Tm9kZUxpc3QpJC87XG5cbmNvbnN0IHRlc3ROYW1lID0gbmFtZSA9PlxuICBPQkpFQ1RfTkFNRVMuaW5kZXhPZihuYW1lKSAhPT0gLTEgfHwgQVJSQVlfUkVHRVhQLnRlc3QobmFtZSk7XG5cbmNvbnN0IHRlc3QgPSB2YWwgPT5cbiAgdmFsICYmXG4gIHZhbC5jb25zdHJ1Y3RvciAmJlxuICAhIXZhbC5jb25zdHJ1Y3Rvci5uYW1lICYmXG4gIHRlc3ROYW1lKHZhbC5jb25zdHJ1Y3Rvci5uYW1lKTtcblxuZXhwb3J0cy50ZXN0ID0gdGVzdDtcblxuY29uc3QgaXNOYW1lZE5vZGVNYXAgPSBjb2xsZWN0aW9uID0+XG4gIGNvbGxlY3Rpb24uY29uc3RydWN0b3IubmFtZSA9PT0gJ05hbWVkTm9kZU1hcCc7XG5cbmNvbnN0IHNlcmlhbGl6ZSA9IChjb2xsZWN0aW9uLCBjb25maWcsIGluZGVudGF0aW9uLCBkZXB0aCwgcmVmcywgcHJpbnRlcikgPT4ge1xuICBjb25zdCBuYW1lID0gY29sbGVjdGlvbi5jb25zdHJ1Y3Rvci5uYW1lO1xuXG4gIGlmICgrK2RlcHRoID4gY29uZmlnLm1heERlcHRoKSB7XG4gICAgcmV0dXJuICdbJyArIG5hbWUgKyAnXSc7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIChjb25maWcubWluID8gJycgOiBuYW1lICsgU1BBQ0UpICtcbiAgICAoT0JKRUNUX05BTUVTLmluZGV4T2YobmFtZSkgIT09IC0xXG4gICAgICA/ICd7JyArXG4gICAgICAgICgwLCBfY29sbGVjdGlvbnMucHJpbnRPYmplY3RQcm9wZXJ0aWVzKShcbiAgICAgICAgICBpc05hbWVkTm9kZU1hcChjb2xsZWN0aW9uKVxuICAgICAgICAgICAgPyBBcnJheS5mcm9tKGNvbGxlY3Rpb24pLnJlZHVjZSgocHJvcHMsIGF0dHJpYnV0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHByb3BzW2F0dHJpYnV0ZS5uYW1lXSA9IGF0dHJpYnV0ZS52YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHM7XG4gICAgICAgICAgICAgIH0sIHt9KVxuICAgICAgICAgICAgOiB7Li4uY29sbGVjdGlvbn0sXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIGluZGVudGF0aW9uLFxuICAgICAgICAgIGRlcHRoLFxuICAgICAgICAgIHJlZnMsXG4gICAgICAgICAgcHJpbnRlclxuICAgICAgICApICtcbiAgICAgICAgJ30nXG4gICAgICA6ICdbJyArXG4gICAgICAgICgwLCBfY29sbGVjdGlvbnMucHJpbnRMaXN0SXRlbXMpKFxuICAgICAgICAgIEFycmF5LmZyb20oY29sbGVjdGlvbiksXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIGluZGVudGF0aW9uLFxuICAgICAgICAgIGRlcHRoLFxuICAgICAgICAgIHJlZnMsXG4gICAgICAgICAgcHJpbnRlclxuICAgICAgICApICtcbiAgICAgICAgJ10nKVxuICApO1xufTtcblxuZXhwb3J0cy5zZXJpYWxpemUgPSBzZXJpYWxpemU7XG5jb25zdCBwbHVnaW4gPSB7XG4gIHNlcmlhbGl6ZSxcbiAgdGVzdFxufTtcbnZhciBfZGVmYXVsdCA9IHBsdWdpbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsSUFBSSxHQUFHRixPQUFPLENBQUNHLFNBQVMsR0FBR0gsT0FBTyxDQUFDSSxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBRTNELElBQUlDLFlBQVksR0FBR0MsT0FBTyxDQUFDLGdCQUFnQixD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