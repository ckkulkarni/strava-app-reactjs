{"version":3,"names":["helpers_1","require","_1","__importDefault","progress_1","value_checker_1","issue_helpers_1","time_1","ProgressBarFormatter","default","constructor","options","eventBroadcaster","on","parseEnvelope","bind","numberOfSteps","issueCount","incrementStepCount","pickleId","pickle","eventDataCollector","getPickle","steps","length","initializeProgressBar","doesHaveValue","progressBar","clear","incomplete","stream","total","width","valueOrDefault","columns","logProgress","testStepId","testCaseStartedId","testCase","getTestCaseAttempt","testStep","testSteps","find","s","id","pickleStepId","tick","logUndefinedParametertype","parameterType","log","formatUndefinedParameterType","logErrorIfNeeded","testCaseFinished","worstTestStepResult","isIssue","testCaseAttempt","interrupt","formatIssue","colorFns","number","snippetBuilder","supportCodeLibrary","printAttachments","willBeRetried","stepsToRetry","logSummary","testRunFinished","testRunDuration","durationBetweenTimestamps","testRunStarted","timestamp","formatSummary","testCaseAttempts","getTestCaseAttempts","envelope","undefinedParameterType","testStepStarted","testStepFinished","exports","documentation"],"sources":["../../src/formatter/progress_bar_formatter.ts"],"sourcesContent":["import { formatIssue, formatSummary, isIssue } from './helpers'\nimport Formatter, { IFormatterOptions } from './'\nimport ProgressBar from 'progress'\nimport { WriteStream as TtyWriteStream } from 'tty'\nimport * as messages from '@cucumber/messages'\nimport { doesHaveValue, valueOrDefault } from '../value_checker'\nimport { formatUndefinedParameterType } from './helpers/issue_helpers'\nimport { durationBetweenTimestamps } from '../time'\n\n// Inspired by https://github.com/thekompanee/fuubar and https://github.com/martinciu/fuubar-cucumber\nexport default class ProgressBarFormatter extends Formatter {\n  private numberOfSteps: number\n  private testRunStarted: messages.TestRunStarted\n  private issueCount: number\n  public progressBar: ProgressBar\n  public static readonly documentation: string =\n    'Similar to the Progress Formatter, but provides a real-time updating progress bar based on the total number of steps to be executed in the test run'\n\n  constructor(options: IFormatterOptions) {\n    super(options)\n    options.eventBroadcaster.on('envelope', this.parseEnvelope.bind(this))\n    this.numberOfSteps = 0\n    this.issueCount = 0\n  }\n\n  incrementStepCount(pickleId: string): void {\n    const pickle = this.eventDataCollector.getPickle(pickleId)\n    this.numberOfSteps += pickle.steps.length\n  }\n\n  initializeProgressBar(): void {\n    if (doesHaveValue(this.progressBar)) {\n      return\n    }\n    this.progressBar = new ProgressBar(':current/:total steps [:bar] ', {\n      clear: true,\n      incomplete: ' ',\n      stream: this.stream,\n      total: this.numberOfSteps,\n      width: valueOrDefault((this.stream as TtyWriteStream).columns, 80),\n    })\n  }\n\n  logProgress({\n    testStepId,\n    testCaseStartedId,\n  }: messages.TestStepFinished): void {\n    const { testCase } =\n      this.eventDataCollector.getTestCaseAttempt(testCaseStartedId)\n    const testStep = testCase.testSteps.find((s) => s.id === testStepId)\n    if (doesHaveValue(testStep.pickleStepId)) {\n      this.progressBar.tick()\n    }\n  }\n\n  logUndefinedParametertype(\n    parameterType: messages.UndefinedParameterType\n  ): void {\n    this.log(\n      `Undefined parameter type: ${formatUndefinedParameterType(\n        parameterType\n      )}\\n`\n    )\n  }\n\n  logErrorIfNeeded(testCaseFinished: messages.TestCaseFinished): void {\n    const { worstTestStepResult } = this.eventDataCollector.getTestCaseAttempt(\n      testCaseFinished.testCaseStartedId\n    )\n    if (isIssue(worstTestStepResult)) {\n      this.issueCount += 1\n      const testCaseAttempt = this.eventDataCollector.getTestCaseAttempt(\n        testCaseFinished.testCaseStartedId\n      )\n      this.progressBar.interrupt(\n        formatIssue({\n          colorFns: this.colorFns,\n          number: this.issueCount,\n          snippetBuilder: this.snippetBuilder,\n          supportCodeLibrary: this.supportCodeLibrary,\n          testCaseAttempt,\n          printAttachments: this.printAttachments,\n        })\n      )\n      if (testCaseFinished.willBeRetried) {\n        const stepsToRetry = testCaseAttempt.pickle.steps.length\n        this.progressBar.tick(-stepsToRetry)\n      }\n    }\n  }\n\n  logSummary(testRunFinished: messages.TestRunFinished): void {\n    const testRunDuration = durationBetweenTimestamps(\n      this.testRunStarted.timestamp,\n      testRunFinished.timestamp\n    )\n    this.log(\n      formatSummary({\n        colorFns: this.colorFns,\n        testCaseAttempts: this.eventDataCollector.getTestCaseAttempts(),\n        testRunDuration,\n      })\n    )\n  }\n\n  parseEnvelope(envelope: messages.Envelope): void {\n    if (doesHaveValue(envelope.undefinedParameterType)) {\n      this.logUndefinedParametertype(envelope.undefinedParameterType)\n    } else if (doesHaveValue(envelope.testCase)) {\n      this.incrementStepCount(envelope.testCase.pickleId)\n    } else if (doesHaveValue(envelope.testStepStarted)) {\n      this.initializeProgressBar()\n    } else if (doesHaveValue(envelope.testStepFinished)) {\n      this.logProgress(envelope.testStepFinished)\n    } else if (doesHaveValue(envelope.testCaseFinished)) {\n      this.logErrorIfNeeded(envelope.testCaseFinished)\n    } else if (doesHaveValue(envelope.testRunStarted)) {\n      this.testRunStarted = envelope.testRunStarted\n    } else if (doesHaveValue(envelope.testRunFinished)) {\n      this.logSummary(envelope.testRunFinished)\n    }\n  }\n}\n"],"mappings":"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"}