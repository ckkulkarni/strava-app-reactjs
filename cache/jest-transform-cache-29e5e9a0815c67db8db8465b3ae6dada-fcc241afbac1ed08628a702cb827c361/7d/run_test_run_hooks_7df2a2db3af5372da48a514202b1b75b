105485aef06e35a1fa53e6070c8c244d
"use strict";

var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeRunTestRunHooks = void 0;
const user_code_runner_1 = __importDefault(require("../user_code_runner"));
const verror_1 = __importDefault(require("verror"));
const helpers_1 = require("../formatter/helpers");
const value_checker_1 = require("../value_checker");
const makeRunTestRunHooks = (dryRun, defaultTimeout, errorMessage) => dryRun ? async () => {} : async (definitions, name) => {
  for (const hookDefinition of definitions) {
    const {
      error
    } = await user_code_runner_1.default.run({
      argsArray: [],
      fn: hookDefinition.code,
      thisArg: null,
      timeoutInMilliseconds: (0, value_checker_1.valueOrDefault)(hookDefinition.options.timeout, defaultTimeout)
    });
    if ((0, value_checker_1.doesHaveValue)(error)) {
      const location = (0, helpers_1.formatLocation)(hookDefinition);
      throw new verror_1.default(error, errorMessage(name, location));
    }
  }
};
exports.makeRunTestRunHooks = makeRunTestRunHooks;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VyX2NvZGVfcnVubmVyXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZXF1aXJlIiwidmVycm9yXzEiLCJoZWxwZXJzXzEiLCJ2YWx1ZV9jaGVja2VyXzEiLCJtYWtlUnVuVGVzdFJ1bkhvb2tzIiwiZHJ5UnVuIiwiZGVmYXVsdFRpbWVvdXQiLCJlcnJvck1lc3NhZ2UiLCJkZWZpbml0aW9ucyIsIm5hbWUiLCJob29rRGVmaW5pdGlvbiIsImVycm9yIiwiZGVmYXVsdCIsInJ1biIsImFyZ3NBcnJheSIsImZuIiwiY29kZSIsInRoaXNBcmciLCJ0aW1lb3V0SW5NaWxsaXNlY29uZHMiLCJ2YWx1ZU9yRGVmYXVsdCIsIm9wdGlvbnMiLCJ0aW1lb3V0IiwiZG9lc0hhdmVWYWx1ZSIsImxvY2F0aW9uIiwiZm9ybWF0TG9jYXRpb24iLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3J1bnRpbWUvcnVuX3Rlc3RfcnVuX2hvb2tzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVc2VyQ29kZVJ1bm5lciBmcm9tICcuLi91c2VyX2NvZGVfcnVubmVyJ1xuaW1wb3J0IFZFcnJvciBmcm9tICd2ZXJyb3InXG5pbXBvcnQgeyBmb3JtYXRMb2NhdGlvbiB9IGZyb20gJy4uL2Zvcm1hdHRlci9oZWxwZXJzJ1xuaW1wb3J0IHsgZG9lc0hhdmVWYWx1ZSwgdmFsdWVPckRlZmF1bHQgfSBmcm9tICcuLi92YWx1ZV9jaGVja2VyJ1xuaW1wb3J0IFRlc3RSdW5Ib29rRGVmaW5pdGlvbiBmcm9tICcuLi9tb2RlbHMvdGVzdF9ydW5faG9va19kZWZpbml0aW9uJ1xuXG5leHBvcnQgdHlwZSBSdW5zVGVzdFJ1bkhvb2tzID0gKFxuICBkZWZpbml0aW9uczogVGVzdFJ1bkhvb2tEZWZpbml0aW9uW10sXG4gIG5hbWU6IHN0cmluZ1xuKSA9PiBQcm9taXNlPHZvaWQ+XG5cbmV4cG9ydCBjb25zdCBtYWtlUnVuVGVzdFJ1bkhvb2tzID0gKFxuICBkcnlSdW46IGJvb2xlYW4sXG4gIGRlZmF1bHRUaW1lb3V0OiBudW1iZXIsXG4gIGVycm9yTWVzc2FnZTogKG5hbWU6IHN0cmluZywgbG9jYXRpb246IHN0cmluZykgPT4gc3RyaW5nXG4pOiBSdW5zVGVzdFJ1bkhvb2tzID0+XG4gIGRyeVJ1blxuICAgID8gYXN5bmMgKCkgPT4ge31cbiAgICA6IGFzeW5jIChkZWZpbml0aW9ucywgbmFtZSkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGhvb2tEZWZpbml0aW9uIG9mIGRlZmluaXRpb25zKSB7XG4gICAgICAgICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgVXNlckNvZGVSdW5uZXIucnVuKHtcbiAgICAgICAgICAgIGFyZ3NBcnJheTogW10sXG4gICAgICAgICAgICBmbjogaG9va0RlZmluaXRpb24uY29kZSxcbiAgICAgICAgICAgIHRoaXNBcmc6IG51bGwsXG4gICAgICAgICAgICB0aW1lb3V0SW5NaWxsaXNlY29uZHM6IHZhbHVlT3JEZWZhdWx0KFxuICAgICAgICAgICAgICBob29rRGVmaW5pdGlvbi5vcHRpb25zLnRpbWVvdXQsXG4gICAgICAgICAgICAgIGRlZmF1bHRUaW1lb3V0XG4gICAgICAgICAgICApLFxuICAgICAgICAgIH0pXG4gICAgICAgICAgaWYgKGRvZXNIYXZlVmFsdWUoZXJyb3IpKSB7XG4gICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGZvcm1hdExvY2F0aW9uKGhvb2tEZWZpbml0aW9uKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFZFcnJvcihlcnJvciwgZXJyb3JNZXNzYWdlKG5hbWUsIGxvY2F0aW9uKSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFBQSxrQkFBQSxHQUFBQyxlQUFBLENBQUFDLE9BQUE7QUFDQSxNQUFBQyxRQUFBLEdBQUFGLGVBQUEsQ0FBQUMsT0FBQTtBQUNBLE1BQUFFLFNBQUEsR0FBQUYsT0FBQTtBQUNBLE1BQUFHLGVBQUEsR0FBQUgsT0FBQTtBQVFPLE1BQU1JLG1CQUFtQixHQUFHQSxDQUNqQ0MsTUFBZSxFQUNmQyxjQUFzQixFQUN0QkMsWUFBd0QsS0FFeERGLE1BQU0sR0FDRixZQUFXLENBQUUsQ0FBQyxHQUNkLE9BQU9HLFdBQVcsRUFBRUMsSUFBSSxLQUFJO0VBQzFCLEtBQUssTUFBTUMsY0FBYyxJQUFJRixXQUFXLEVBQUU7SUFDeEMsTUFBTTtNQUFFRztJQUFLLENBQUUsR0FBRyxNQUFNYixrQkFBQSxDQUFBYyxPQUFjLENBQUNDLEdBQUcsQ0FBQztNQUN6Q0MsU0FBUyxFQUFFLEVBQUU7TUFDYkMsRUFBRSxFQUFFTCxjQUFjLENBQUNNLElBQUk7TUFDdkJDLE9BQU8sRUFBRSxJQUFJO01BQ2JDLHFCQUFxQixFQUFFLElBQUFmLGVBQUEsQ0FBQWdCLGNBQWMsRUFDbkNULGNBQWMsQ0FBQ1UsT0FBTyxDQUFDQyxPQUFPLEVBQzlCZixjQUFjO0tBRWpCLENBQUM7SUFDRixJQUFJLElBQUFILGVBQUEsQ0FBQW1CLGFBQWEsRUFBQ1gsS0FBSyxDQUFDLEVBQUU7TUFDeEIsTUFBTVksUUFBUSxHQUFHLElBQUFyQixTQUFBLENBQUFzQixjQUFjLEVBQUNkLGNBQWMsQ0FBQztNQUMvQyxNQUFNLElBQUlULFFBQUEsQ0FBQVcsT0FBTSxDQUFDRCxLQUFLLEVBQUVKLFlBQVksQ0FBQ0UsSUFBSSxFQUFFYyxRQUFRLENBQUMsQ0FBQzs7O0FBRzNELENBQUM7QUF2Qk1FLE9BQUEsQ0FBQXJCLG1CQUFtQixHQUFBQSxtQkFBQSJ9