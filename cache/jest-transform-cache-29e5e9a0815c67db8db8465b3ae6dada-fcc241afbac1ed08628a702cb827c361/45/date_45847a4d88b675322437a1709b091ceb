8debc23fb619401d7ac338f792949e46
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create = create;
exports.default = void 0;
var _isodate = _interopRequireDefault(require("./util/isodate"));
var _locale = require("./locale");
var _isAbsent = _interopRequireDefault(require("./util/isAbsent"));
var _Reference = _interopRequireDefault(require("./Reference"));
var _schema = _interopRequireDefault(require("./schema"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

// @ts-ignore
let invalidDate = new Date('');
let isDate = obj => Object.prototype.toString.call(obj) === '[object Date]';
function create() {
  return new DateSchema();
}
class DateSchema extends _schema.default {
  constructor() {
    super({
      type: 'date'
    });
    this.withMutation(() => {
      this.transform(function (value) {
        if (this.isType(value)) return value;
        value = (0, _isodate.default)(value); // 0 is a valid timestamp equivalent to 1970-01-01T00:00:00Z(unix epoch) or before.

        return !isNaN(value) ? new Date(value) : invalidDate;
      });
    });
  }
  _typeCheck(v) {
    return isDate(v) && !isNaN(v.getTime());
  }
  prepareParam(ref, name) {
    let param;
    if (!_Reference.default.isRef(ref)) {
      let cast = this.cast(ref);
      if (!this._typeCheck(cast)) throw new TypeError(`\`${name}\` must be a Date or a value that can be \`cast()\` to a Date`);
      param = cast;
    } else {
      param = ref;
    }
    return param;
  }
  min(min, message = _locale.date.min) {
    let limit = this.prepareParam(min, 'min');
    return this.test({
      message,
      name: 'min',
      exclusive: true,
      params: {
        min
      },
      test(value) {
        return (0, _isAbsent.default)(value) || value >= this.resolve(limit);
      }
    });
  }
  max(max, message = _locale.date.max) {
    let limit = this.prepareParam(max, 'max');
    return this.test({
      message,
      name: 'max',
      exclusive: true,
      params: {
        max
      },
      test(value) {
        return (0, _isAbsent.default)(value) || value <= this.resolve(limit);
      }
    });
  }
}
exports.default = DateSchema;
DateSchema.INVALID_DATE = invalidDate;
create.prototype = DateSchema.prototype;
create.INVALID_DATE = invalidDate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNyZWF0ZSIsImRlZmF1bHQiLCJfaXNvZGF0ZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2xvY2FsZSIsIl9pc0Fic2VudCIsIl9SZWZlcmVuY2UiLCJfc2NoZW1hIiwib2JqIiwiX19lc01vZHVsZSIsImludmFsaWREYXRlIiwiRGF0ZSIsImlzRGF0ZSIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsIkRhdGVTY2hlbWEiLCJjb25zdHJ1Y3RvciIsInR5cGUiLCJ3aXRoTXV0YXRpb24iLCJ0cmFuc2Zvcm0iLCJpc1R5cGUiLCJpc05hTiIsIl90eXBlQ2hlY2siLCJ2IiwiZ2V0VGltZSIsInByZXBhcmVQYXJhbSIsInJlZiIsIm5hbWUiLCJwYXJhbSIsImlzUmVmIiwiY2FzdCIsIlR5cGVFcnJvciIsIm1pbiIsIm1lc3NhZ2UiLCJkYXRlIiwibGltaXQiLCJ0ZXN0IiwiZXhjbHVzaXZlIiwicGFyYW1zIiwicmVzb2x2ZSIsIm1heCIsIklOVkFMSURfREFURSJdLCJzb3VyY2VzIjpbImRhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNyZWF0ZSA9IGNyZWF0ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pc29kYXRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlsL2lzb2RhdGVcIikpO1xuXG52YXIgX2xvY2FsZSA9IHJlcXVpcmUoXCIuL2xvY2FsZVwiKTtcblxudmFyIF9pc0Fic2VudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbC9pc0Fic2VudFwiKSk7XG5cbnZhciBfUmVmZXJlbmNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9SZWZlcmVuY2VcIikpO1xuXG52YXIgX3NjaGVtYSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc2NoZW1hXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gQHRzLWlnbm9yZVxubGV0IGludmFsaWREYXRlID0gbmV3IERhdGUoJycpO1xuXG5sZXQgaXNEYXRlID0gb2JqID0+IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBEYXRlXSc7XG5cbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlU2NoZW1hKCk7XG59XG5cbmNsYXNzIERhdGVTY2hlbWEgZXh0ZW5kcyBfc2NoZW1hLmRlZmF1bHQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7XG4gICAgICB0eXBlOiAnZGF0ZSdcbiAgICB9KTtcbiAgICB0aGlzLndpdGhNdXRhdGlvbigoKSA9PiB7XG4gICAgICB0aGlzLnRyYW5zZm9ybShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNUeXBlKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgICB2YWx1ZSA9ICgwLCBfaXNvZGF0ZS5kZWZhdWx0KSh2YWx1ZSk7IC8vIDAgaXMgYSB2YWxpZCB0aW1lc3RhbXAgZXF1aXZhbGVudCB0byAxOTcwLTAxLTAxVDAwOjAwOjAwWih1bml4IGVwb2NoKSBvciBiZWZvcmUuXG5cbiAgICAgICAgcmV0dXJuICFpc05hTih2YWx1ZSkgPyBuZXcgRGF0ZSh2YWx1ZSkgOiBpbnZhbGlkRGF0ZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgX3R5cGVDaGVjayh2KSB7XG4gICAgcmV0dXJuIGlzRGF0ZSh2KSAmJiAhaXNOYU4odi5nZXRUaW1lKCkpO1xuICB9XG5cbiAgcHJlcGFyZVBhcmFtKHJlZiwgbmFtZSkge1xuICAgIGxldCBwYXJhbTtcblxuICAgIGlmICghX1JlZmVyZW5jZS5kZWZhdWx0LmlzUmVmKHJlZikpIHtcbiAgICAgIGxldCBjYXN0ID0gdGhpcy5jYXN0KHJlZik7XG4gICAgICBpZiAoIXRoaXMuX3R5cGVDaGVjayhjYXN0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcihgXFxgJHtuYW1lfVxcYCBtdXN0IGJlIGEgRGF0ZSBvciBhIHZhbHVlIHRoYXQgY2FuIGJlIFxcYGNhc3QoKVxcYCB0byBhIERhdGVgKTtcbiAgICAgIHBhcmFtID0gY2FzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyYW0gPSByZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmFtO1xuICB9XG5cbiAgbWluKG1pbiwgbWVzc2FnZSA9IF9sb2NhbGUuZGF0ZS5taW4pIHtcbiAgICBsZXQgbGltaXQgPSB0aGlzLnByZXBhcmVQYXJhbShtaW4sICdtaW4nKTtcbiAgICByZXR1cm4gdGhpcy50ZXN0KHtcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBuYW1lOiAnbWluJyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBtaW5cbiAgICAgIH0sXG5cbiAgICAgIHRlc3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfaXNBYnNlbnQuZGVmYXVsdCkodmFsdWUpIHx8IHZhbHVlID49IHRoaXMucmVzb2x2ZShsaW1pdCk7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG4gIG1heChtYXgsIG1lc3NhZ2UgPSBfbG9jYWxlLmRhdGUubWF4KSB7XG4gICAgbGV0IGxpbWl0ID0gdGhpcy5wcmVwYXJlUGFyYW0obWF4LCAnbWF4Jyk7XG4gICAgcmV0dXJuIHRoaXMudGVzdCh7XG4gICAgICBtZXNzYWdlLFxuICAgICAgbmFtZTogJ21heCcsXG4gICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgbWF4XG4gICAgICB9LFxuXG4gICAgICB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2lzQWJzZW50LmRlZmF1bHQpKHZhbHVlKSB8fCB2YWx1ZSA8PSB0aGlzLnJlc29sdmUobGltaXQpO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cblxufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBEYXRlU2NoZW1hO1xuRGF0ZVNjaGVtYS5JTlZBTElEX0RBVEUgPSBpbnZhbGlkRGF0ZTtcbmNyZWF0ZS5wcm90b3R5cGUgPSBEYXRlU2NoZW1hLnByb3RvdHlwZTtcbmNyZWF0ZS5JTlZBTElEX0RBVEUgPSBpbnZhbGlkRGF0ZTsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxNQUFNLEdBQUdBLE1BQU07QUFDdkJGLE9BQU8sQ0FBQ0csT0FBTyxHQUFHLEtBQUssQ0FBQztBQUV4QixJQUFJQyxRQUFRLEdBQUdDLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUVoRSxJQUFJQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFFakMsSUFBSUUsU0FBUyxHQUFHSCxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFFbEUsSUFBSUcsVUFBVSxHQUFHSixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBRS9ELElBQUlJLE9BQU8sR0FBR0wsc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUV6RCxTQUFTRCxzQkFBc0JBLENBQUNNLEdBQUcsRUFBRTtFQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFVLEdBQUdELEdBQUcsR0FBRztJQUFFUixPQUFPLEVBQUVRO0VBQUksQ0FBQztBQUFFOztBQUU5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