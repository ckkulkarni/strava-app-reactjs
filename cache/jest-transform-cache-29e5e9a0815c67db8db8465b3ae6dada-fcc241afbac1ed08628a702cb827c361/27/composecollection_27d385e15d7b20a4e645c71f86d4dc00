0b295940d84db94f66073ca61b02c529
'use strict';

var Node = require('../nodes/Node.js');
var Scalar = require('../nodes/Scalar.js');
var resolveBlockMap = require('./resolve-block-map.js');
var resolveBlockSeq = require('./resolve-block-seq.js');
var resolveFlowCollection = require('./resolve-flow-collection.js');
function composeCollection(CN, ctx, token, tagToken, onError) {
  let coll;
  switch (token.type) {
    case 'block-map':
      {
        coll = resolveBlockMap.resolveBlockMap(CN, ctx, token, onError);
        break;
      }
    case 'block-seq':
      {
        coll = resolveBlockSeq.resolveBlockSeq(CN, ctx, token, onError);
        break;
      }
    case 'flow-collection':
      {
        coll = resolveFlowCollection.resolveFlowCollection(CN, ctx, token, onError);
        break;
      }
  }
  if (!tagToken) return coll;
  const tagName = ctx.directives.tagName(tagToken.source, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg));
  if (!tagName) return coll;
  // Cast needed due to: https://github.com/Microsoft/TypeScript/issues/3841
  const Coll = coll.constructor;
  if (tagName === '!' || tagName === Coll.tagName) {
    coll.tag = Coll.tagName;
    return coll;
  }
  const expType = Node.isMap(coll) ? 'map' : 'seq';
  let tag = ctx.schema.tags.find(t => t.collection === expType && t.tag === tagName);
  if (!tag) {
    const kt = ctx.schema.knownTags[tagName];
    if (kt && kt.collection === expType) {
      ctx.schema.tags.push(Object.assign({}, kt, {
        default: false
      }));
      tag = kt;
    } else {
      onError(tagToken, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${tagName}`, true);
      coll.tag = tagName;
      return coll;
    }
  }
  const res = tag.resolve(coll, msg => onError(tagToken, 'TAG_RESOLVE_FAILED', msg), ctx.options);
  const node = Node.isNode(res) ? res : new Scalar.Scalar(res);
  node.range = coll.range;
  node.tag = tagName;
  if (tag?.format) node.format = tag.format;
  return node;
}
exports.composeCollection = composeCollection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwicmVxdWlyZSIsIlNjYWxhciIsInJlc29sdmVCbG9ja01hcCIsInJlc29sdmVCbG9ja1NlcSIsInJlc29sdmVGbG93Q29sbGVjdGlvbiIsImNvbXBvc2VDb2xsZWN0aW9uIiwiQ04iLCJjdHgiLCJ0b2tlbiIsInRhZ1Rva2VuIiwib25FcnJvciIsImNvbGwiLCJ0eXBlIiwidGFnTmFtZSIsImRpcmVjdGl2ZXMiLCJzb3VyY2UiLCJtc2ciLCJDb2xsIiwiY29uc3RydWN0b3IiLCJ0YWciLCJleHBUeXBlIiwiaXNNYXAiLCJzY2hlbWEiLCJ0YWdzIiwiZmluZCIsInQiLCJjb2xsZWN0aW9uIiwia3QiLCJrbm93blRhZ3MiLCJwdXNoIiwiT2JqZWN0IiwiYXNzaWduIiwiZGVmYXVsdCIsInJlcyIsInJlc29sdmUiLCJvcHRpb25zIiwibm9kZSIsImlzTm9kZSIsInJhbmdlIiwiZm9ybWF0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImNvbXBvc2UtY29sbGVjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBOb2RlID0gcmVxdWlyZSgnLi4vbm9kZXMvTm9kZS5qcycpO1xudmFyIFNjYWxhciA9IHJlcXVpcmUoJy4uL25vZGVzL1NjYWxhci5qcycpO1xudmFyIHJlc29sdmVCbG9ja01hcCA9IHJlcXVpcmUoJy4vcmVzb2x2ZS1ibG9jay1tYXAuanMnKTtcbnZhciByZXNvbHZlQmxvY2tTZXEgPSByZXF1aXJlKCcuL3Jlc29sdmUtYmxvY2stc2VxLmpzJyk7XG52YXIgcmVzb2x2ZUZsb3dDb2xsZWN0aW9uID0gcmVxdWlyZSgnLi9yZXNvbHZlLWZsb3ctY29sbGVjdGlvbi5qcycpO1xuXG5mdW5jdGlvbiBjb21wb3NlQ29sbGVjdGlvbihDTiwgY3R4LCB0b2tlbiwgdGFnVG9rZW4sIG9uRXJyb3IpIHtcbiAgICBsZXQgY29sbDtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnYmxvY2stbWFwJzoge1xuICAgICAgICAgICAgY29sbCA9IHJlc29sdmVCbG9ja01hcC5yZXNvbHZlQmxvY2tNYXAoQ04sIGN0eCwgdG9rZW4sIG9uRXJyb3IpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnYmxvY2stc2VxJzoge1xuICAgICAgICAgICAgY29sbCA9IHJlc29sdmVCbG9ja1NlcS5yZXNvbHZlQmxvY2tTZXEoQ04sIGN0eCwgdG9rZW4sIG9uRXJyb3IpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnZmxvdy1jb2xsZWN0aW9uJzoge1xuICAgICAgICAgICAgY29sbCA9IHJlc29sdmVGbG93Q29sbGVjdGlvbi5yZXNvbHZlRmxvd0NvbGxlY3Rpb24oQ04sIGN0eCwgdG9rZW4sIG9uRXJyb3IpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0YWdUb2tlbilcbiAgICAgICAgcmV0dXJuIGNvbGw7XG4gICAgY29uc3QgdGFnTmFtZSA9IGN0eC5kaXJlY3RpdmVzLnRhZ05hbWUodGFnVG9rZW4uc291cmNlLCBtc2cgPT4gb25FcnJvcih0YWdUb2tlbiwgJ1RBR19SRVNPTFZFX0ZBSUxFRCcsIG1zZykpO1xuICAgIGlmICghdGFnTmFtZSlcbiAgICAgICAgcmV0dXJuIGNvbGw7XG4gICAgLy8gQ2FzdCBuZWVkZWQgZHVlIHRvOiBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzM4NDFcbiAgICBjb25zdCBDb2xsID0gY29sbC5jb25zdHJ1Y3RvcjtcbiAgICBpZiAodGFnTmFtZSA9PT0gJyEnIHx8IHRhZ05hbWUgPT09IENvbGwudGFnTmFtZSkge1xuICAgICAgICBjb2xsLnRhZyA9IENvbGwudGFnTmFtZTtcbiAgICAgICAgcmV0dXJuIGNvbGw7XG4gICAgfVxuICAgIGNvbnN0IGV4cFR5cGUgPSBOb2RlLmlzTWFwKGNvbGwpID8gJ21hcCcgOiAnc2VxJztcbiAgICBsZXQgdGFnID0gY3R4LnNjaGVtYS50YWdzLmZpbmQodCA9PiB0LmNvbGxlY3Rpb24gPT09IGV4cFR5cGUgJiYgdC50YWcgPT09IHRhZ05hbWUpO1xuICAgIGlmICghdGFnKSB7XG4gICAgICAgIGNvbnN0IGt0ID0gY3R4LnNjaGVtYS5rbm93blRhZ3NbdGFnTmFtZV07XG4gICAgICAgIGlmIChrdCAmJiBrdC5jb2xsZWN0aW9uID09PSBleHBUeXBlKSB7XG4gICAgICAgICAgICBjdHguc2NoZW1hLnRhZ3MucHVzaChPYmplY3QuYXNzaWduKHt9LCBrdCwgeyBkZWZhdWx0OiBmYWxzZSB9KSk7XG4gICAgICAgICAgICB0YWcgPSBrdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9uRXJyb3IodGFnVG9rZW4sICdUQUdfUkVTT0xWRV9GQUlMRUQnLCBgVW5yZXNvbHZlZCB0YWc6ICR7dGFnTmFtZX1gLCB0cnVlKTtcbiAgICAgICAgICAgIGNvbGwudGFnID0gdGFnTmFtZTtcbiAgICAgICAgICAgIHJldHVybiBjb2xsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IHRhZy5yZXNvbHZlKGNvbGwsIG1zZyA9PiBvbkVycm9yKHRhZ1Rva2VuLCAnVEFHX1JFU09MVkVfRkFJTEVEJywgbXNnKSwgY3R4Lm9wdGlvbnMpO1xuICAgIGNvbnN0IG5vZGUgPSBOb2RlLmlzTm9kZShyZXMpXG4gICAgICAgID8gcmVzXG4gICAgICAgIDogbmV3IFNjYWxhci5TY2FsYXIocmVzKTtcbiAgICBub2RlLnJhbmdlID0gY29sbC5yYW5nZTtcbiAgICBub2RlLnRhZyA9IHRhZ05hbWU7XG4gICAgaWYgKHRhZz8uZm9ybWF0KVxuICAgICAgICBub2RlLmZvcm1hdCA9IHRhZy5mb3JtYXQ7XG4gICAgcmV0dXJuIG5vZGU7XG59XG5cbmV4cG9ydHMuY29tcG9zZUNvbGxlY3Rpb24gPSBjb21wb3NlQ29sbGVjdGlvbjtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFB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