55f10492d944166ef9711e8afcb36b5b
/**
 * The MIT License (MIT)
 * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>
 */

'use strict';

/**
 * A regexp-tree plugin to merge class ranges.
 *
 * [a-ec] -> [a-e]
 * [a-ec-e] -> [a-e]
 * [\w\da-f] -> [\w]
 * [abcdef] -> [a-f]
 */
module.exports = {
  _hasIUFlags: false,
  init: function init(ast) {
    this._hasIUFlags = ast.flags.includes('i') && ast.flags.includes('u');
  },
  CharacterClass: function CharacterClass(path) {
    var node = path.node;
    var expressions = node.expressions;
    var metas = [];
    // Extract metas
    expressions.forEach(function (expression) {
      if (isMeta(expression)) {
        metas.push(expression.value);
      }
    });
    expressions.sort(sortCharClass);
    for (var i = 0; i < expressions.length; i++) {
      var expression = expressions[i];
      if (fitsInMetas(expression, metas, this._hasIUFlags) || combinesWithPrecedingClassRange(expression, expressions[i - 1]) || combinesWithFollowingClassRange(expression, expressions[i + 1])) {
        expressions.splice(i, 1);
        i--;
      } else {
        var nbMergedChars = charCombinesWithPrecedingChars(expression, i, expressions);
        expressions.splice(i - nbMergedChars + 1, nbMergedChars);
        i -= nbMergedChars;
      }
    }
  }
};

/**
 * Sorts expressions in char class in the following order:
 * - meta chars, ordered alphabetically by value
 * - chars (except `control` kind) and class ranges, ordered alphabetically (`from` char is used for class ranges)
 * - if ambiguous, class range comes before char
 * - if ambiguous between two class ranges, orders alphabetically by `to` char
 * - control chars, ordered alphabetically by value
 * @param {Object} a - Left Char or ClassRange node
 * @param {Object} b - Right Char or ClassRange node
 * @returns {number}
 */
function sortCharClass(a, b) {
  var aValue = getSortValue(a);
  var bValue = getSortValue(b);
  if (aValue === bValue) {
    // We want ClassRange before Char
    // [bb-d] -> [b-db]
    if (a.type === 'ClassRange' && b.type !== 'ClassRange') {
      return -1;
    }
    if (b.type === 'ClassRange' && a.type !== 'ClassRange') {
      return 1;
    }
    if (a.type === 'ClassRange' && b.type === 'ClassRange') {
      return getSortValue(a.to) - getSortValue(b.to);
    }
    if (isMeta(a) && isMeta(b) || isControl(a) && isControl(b)) {
      return a.value < b.value ? -1 : 1;
    }
  }
  return aValue - bValue;
}

/**
 * @param {Object} expression - Char or ClassRange node
 * @returns {number}
 */
function getSortValue(expression) {
  if (expression.type === 'Char') {
    if (expression.value === '-') {
      return Infinity;
    }
    if (expression.kind === 'control') {
      return Infinity;
    }
    if (expression.kind === 'meta' && isNaN(expression.codePoint)) {
      return -1;
    }
    return expression.codePoint;
  }
  // ClassRange
  return expression.from.codePoint;
}

/**
 * Checks if a node is a meta char from the set \d\w\s\D\W\S
 * @param {Object} expression - Char or ClassRange node
 * @param {?string} value
 * @returns {boolean}
 */
function isMeta(expression) {
  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return expression.type === 'Char' && expression.kind === 'meta' && (value ? expression.value === value : /^\\[dws]$/i.test(expression.value));
}

/**
 * @param {Object} expression - Char or ClassRange node
 * @returns {boolean}
 */
function isControl(expression) {
  return expression.type === 'Char' && expression.kind === 'control';
}

/**
 * @param {Object} expression - Char or ClassRange node
 * @param {string[]} metas - Array of meta chars, e.g. ["\\w", "\\s"]
 * @param {boolean} hasIUFlags
 * @returns {boolean}
 */
function fitsInMetas(expression, metas, hasIUFlags) {
  for (var i = 0; i < metas.length; i++) {
    if (fitsInMeta(expression, metas[i], hasIUFlags)) {
      return true;
    }
  }
  return false;
}

/**
 * @param {Object} expression - Char or ClassRange node
 * @param {string} meta - e.g. "\\w"
 * @param {boolean} hasIUFlags
 * @returns {boolean}
 */
function fitsInMeta(expression, meta, hasIUFlags) {
  if (expression.type === 'ClassRange') {
    return fitsInMeta(expression.from, meta, hasIUFlags) && fitsInMeta(expression.to, meta, hasIUFlags);
  }

  // Special cases:
  // \S contains \w and \d
  if (meta === '\\S' && (isMeta(expression, '\\w') || isMeta(expression, '\\d'))) {
    return true;
  }
  // \D contains \W and \s
  if (meta === '\\D' && (isMeta(expression, '\\W') || isMeta(expression, '\\s'))) {
    return true;
  }
  // \w contains \d
  if (meta === '\\w' && isMeta(expression, '\\d')) {
    return true;
  }
  // \W contains \s
  if (meta === '\\W' && isMeta(expression, '\\s')) {
    return true;
  }
  if (expression.type !== 'Char' || isNaN(expression.codePoint)) {
    return false;
  }
  if (meta === '\\s') {
    return fitsInMetaS(expression);
  }
  if (meta === '\\S') {
    return !fitsInMetaS(expression);
  }
  if (meta === '\\d') {
    return fitsInMetaD(expression);
  }
  if (meta === '\\D') {
    return !fitsInMetaD(expression);
  }
  if (meta === '\\w') {
    return fitsInMetaW(expression, hasIUFlags);
  }
  if (meta === '\\W') {
    return !fitsInMetaW(expression, hasIUFlags);
  }
  return false;
}

/**
 * @param {Object} expression - Char node with codePoint
 * @returns {boolean}
 */
function fitsInMetaS(expression) {
  return expression.codePoint === 0x0009 ||
  // \t
  expression.codePoint === 0x000a ||
  // \n
  expression.codePoint === 0x000b ||
  // \v
  expression.codePoint === 0x000c ||
  // \f
  expression.codePoint === 0x000d ||
  // \r
  expression.codePoint === 0x0020 ||
  // space
  expression.codePoint === 0x00a0 ||
  // nbsp
  expression.codePoint === 0x1680 ||
  // part of Zs
  expression.codePoint >= 0x2000 && expression.codePoint <= 0x200a ||
  // part of Zs
  expression.codePoint === 0x2028 ||
  // line separator
  expression.codePoint === 0x2029 ||
  // paragraph separator
  expression.codePoint === 0x202f ||
  // part of Zs
  expression.codePoint === 0x205f ||
  // part of Zs
  expression.codePoint === 0x3000 ||
  // part of Zs
  expression.codePoint === 0xfeff; // zwnbsp
}

/**
 * @param {Object} expression - Char node with codePoint
 * @returns {boolean}
 */
function fitsInMetaD(expression) {
  return expression.codePoint >= 0x30 && expression.codePoint <= 0x39; // 0-9
}

/**
 * @param {Object} expression - Char node with codePoint
 * @param {boolean} hasIUFlags
 * @returns {boolean}
 */
function fitsInMetaW(expression, hasIUFlags) {
  return fitsInMetaD(expression) || expression.codePoint >= 0x41 && expression.codePoint <= 0x5a ||
  // A-Z
  expression.codePoint >= 0x61 && expression.codePoint <= 0x7a ||
  // a-z
  expression.value === '_' || hasIUFlags && (expression.codePoint === 0x017f || expression.codePoint === 0x212a);
}

/**
 * @param {Object} expression - Char or ClassRange node
 * @param {Object} classRange - Char or ClassRange node
 * @returns {boolean}
 */
function combinesWithPrecedingClassRange(expression, classRange) {
  if (classRange && classRange.type === 'ClassRange') {
    if (fitsInClassRange(expression, classRange)) {
      // [a-gc] -> [a-g]
      // [a-gc-e] -> [a-g]
      return true;
    } else if (
    // We only want \w chars or char codes to keep readability
    isMetaWCharOrCode(expression) && classRange.to.codePoint === expression.codePoint - 1) {
      // [a-de] -> [a-e]
      classRange.to = expression;
      return true;
    } else if (expression.type === 'ClassRange' && expression.from.codePoint <= classRange.to.codePoint + 1 && expression.to.codePoint >= classRange.from.codePoint - 1) {
      // [a-db-f] -> [a-f]
      // [b-fa-d] -> [a-f]
      // [a-cd-f] -> [a-f]
      if (expression.from.codePoint < classRange.from.codePoint) {
        classRange.from = expression.from;
      }
      if (expression.to.codePoint > classRange.to.codePoint) {
        classRange.to = expression.to;
      }
      return true;
    }
  }
  return false;
}

/**
 * @param {Object} expression - Char or ClassRange node
 * @param {Object} classRange - Char or ClassRange node
 * @returns {boolean}
 */
function combinesWithFollowingClassRange(expression, classRange) {
  if (classRange && classRange.type === 'ClassRange') {
    // Considering the elements were ordered alphabetically,
    // there is only one case to handle
    // [ab-e] -> [a-e]
    if (
    // We only want \w chars or char codes to keep readability
    isMetaWCharOrCode(expression) && classRange.from.codePoint === expression.codePoint + 1) {
      classRange.from = expression;
      return true;
    }
  }
  return false;
}

/**
 * @param {Object} expression - Char or ClassRange node
 * @param {Object} classRange - ClassRange node
 * @returns {boolean}
 */
function fitsInClassRange(expression, classRange) {
  if (expression.type === 'Char' && isNaN(expression.codePoint)) {
    return false;
  }
  if (expression.type === 'ClassRange') {
    return fitsInClassRange(expression.from, classRange) && fitsInClassRange(expression.to, classRange);
  }
  return expression.codePoint >= classRange.from.codePoint && expression.codePoint <= classRange.to.codePoint;
}

/**
 * @param {Object} expression - Char or ClassRange node
 * @param {Number} index
 * @param {Object[]} expressions - expressions in CharClass
 * @returns {number} - Number of characters combined with expression
 */
function charCombinesWithPrecedingChars(expression, index, expressions) {
  // We only want \w chars or char codes to keep readability
  if (!isMetaWCharOrCode(expression)) {
    return 0;
  }
  var nbMergedChars = 0;
  while (index > 0) {
    var currentExpression = expressions[index];
    var precedingExpresion = expressions[index - 1];
    if (isMetaWCharOrCode(precedingExpresion) && precedingExpresion.codePoint === currentExpression.codePoint - 1) {
      nbMergedChars++;
      index--;
    } else {
      break;
    }
  }
  if (nbMergedChars > 1) {
    expressions[index] = {
      type: 'ClassRange',
      from: expressions[index],
      to: expression
    };
    return nbMergedChars;
  }
  return 0;
}
function isMetaWCharOrCode(expression) {
  return expression && expression.type === 'Char' && !isNaN(expression.codePoint) && (fitsInMetaW(expression, false) || expression.kind === 'unicode' || expression.kind === 'hex' || expression.kind === 'oct' || expression.kind === 'decimal');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiX2hhc0lVRmxhZ3MiLCJpbml0IiwiYXN0IiwiZmxhZ3MiLCJpbmNsdWRlcyIsIkNoYXJhY3RlckNsYXNzIiwicGF0aCIsIm5vZGUiLCJleHByZXNzaW9ucyIsIm1ldGFzIiwiZm9yRWFjaCIsImV4cHJlc3Npb24iLCJpc01ldGEiLCJwdXNoIiwidmFsdWUiLCJzb3J0Iiwic29ydENoYXJDbGFzcyIsImkiLCJsZW5ndGgiLCJmaXRzSW5NZXRhcyIsImNvbWJpbmVzV2l0aFByZWNlZGluZ0NsYXNzUmFuZ2UiLCJjb21iaW5lc1dpdGhGb2xsb3dpbmdDbGFzc1JhbmdlIiwic3BsaWNlIiwibmJNZXJnZWRDaGFycyIsImNoYXJDb21iaW5lc1dpdGhQcmVjZWRpbmdDaGFycyIsImEiLCJiIiwiYVZhbHVlIiwiZ2V0U29ydFZhbHVlIiwiYlZhbHVlIiwidHlwZSIsInRvIiwiaXNDb250cm9sIiwiSW5maW5pdHkiLCJraW5kIiwiaXNOYU4iLCJjb2RlUG9pbnQiLCJmcm9tIiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwidGVzdCIsImhhc0lVRmxhZ3MiLCJmaXRzSW5NZXRhIiwibWV0YSIsImZpdHNJbk1ldGFTIiwiZml0c0luTWV0YUQiLCJmaXRzSW5NZXRhVyIsImNsYXNzUmFuZ2UiLCJmaXRzSW5DbGFzc1JhbmdlIiwiaXNNZXRhV0NoYXJPckNvZGUiLCJpbmRleCIsImN1cnJlbnRFeHByZXNzaW9uIiwicHJlY2VkaW5nRXhwcmVzaW9uIl0sInNvdXJjZXMiOlsiY2hhci1jbGFzcy1jbGFzc3Jhbmdlcy1tZXJnZS10cmFuc2Zvcm0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50IERtaXRyeSBTb3Nobmlrb3YgPGRtaXRyeS5zb3Nobmlrb3ZAZ21haWwuY29tPlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIHJlZ2V4cC10cmVlIHBsdWdpbiB0byBtZXJnZSBjbGFzcyByYW5nZXMuXG4gKlxuICogW2EtZWNdIC0+IFthLWVdXG4gKiBbYS1lYy1lXSAtPiBbYS1lXVxuICogW1xcd1xcZGEtZl0gLT4gW1xcd11cbiAqIFthYmNkZWZdIC0+IFthLWZdXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIF9oYXNJVUZsYWdzOiBmYWxzZSxcbiAgaW5pdDogZnVuY3Rpb24gaW5pdChhc3QpIHtcbiAgICB0aGlzLl9oYXNJVUZsYWdzID0gYXN0LmZsYWdzLmluY2x1ZGVzKCdpJykgJiYgYXN0LmZsYWdzLmluY2x1ZGVzKCd1Jyk7XG4gIH0sXG4gIENoYXJhY3RlckNsYXNzOiBmdW5jdGlvbiBDaGFyYWN0ZXJDbGFzcyhwYXRoKSB7XG4gICAgdmFyIG5vZGUgPSBwYXRoLm5vZGU7XG5cbiAgICB2YXIgZXhwcmVzc2lvbnMgPSBub2RlLmV4cHJlc3Npb25zO1xuXG4gICAgdmFyIG1ldGFzID0gW107XG4gICAgLy8gRXh0cmFjdCBtZXRhc1xuICAgIGV4cHJlc3Npb25zLmZvckVhY2goZnVuY3Rpb24gKGV4cHJlc3Npb24pIHtcbiAgICAgIGlmIChpc01ldGEoZXhwcmVzc2lvbikpIHtcbiAgICAgICAgbWV0YXMucHVzaChleHByZXNzaW9uLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGV4cHJlc3Npb25zLnNvcnQoc29ydENoYXJDbGFzcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cHJlc3Npb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb25zW2ldO1xuICAgICAgaWYgKGZpdHNJbk1ldGFzKGV4cHJlc3Npb24sIG1ldGFzLCB0aGlzLl9oYXNJVUZsYWdzKSB8fCBjb21iaW5lc1dpdGhQcmVjZWRpbmdDbGFzc1JhbmdlKGV4cHJlc3Npb24sIGV4cHJlc3Npb25zW2kgLSAxXSkgfHwgY29tYmluZXNXaXRoRm9sbG93aW5nQ2xhc3NSYW5nZShleHByZXNzaW9uLCBleHByZXNzaW9uc1tpICsgMV0pKSB7XG4gICAgICAgIGV4cHJlc3Npb25zLnNwbGljZShpLCAxKTtcbiAgICAgICAgaS0tO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG5iTWVyZ2VkQ2hhcnMgPSBjaGFyQ29tYmluZXNXaXRoUHJlY2VkaW5nQ2hhcnMoZXhwcmVzc2lvbiwgaSwgZXhwcmVzc2lvbnMpO1xuICAgICAgICBleHByZXNzaW9ucy5zcGxpY2UoaSAtIG5iTWVyZ2VkQ2hhcnMgKyAxLCBuYk1lcmdlZENoYXJzKTtcbiAgICAgICAgaSAtPSBuYk1lcmdlZENoYXJzO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBTb3J0cyBleHByZXNzaW9ucyBpbiBjaGFyIGNsYXNzIGluIHRoZSBmb2xsb3dpbmcgb3JkZXI6XG4gKiAtIG1ldGEgY2hhcnMsIG9yZGVyZWQgYWxwaGFiZXRpY2FsbHkgYnkgdmFsdWVcbiAqIC0gY2hhcnMgKGV4Y2VwdCBgY29udHJvbGAga2luZCkgYW5kIGNsYXNzIHJhbmdlcywgb3JkZXJlZCBhbHBoYWJldGljYWxseSAoYGZyb21gIGNoYXIgaXMgdXNlZCBmb3IgY2xhc3MgcmFuZ2VzKVxuICogLSBpZiBhbWJpZ3VvdXMsIGNsYXNzIHJhbmdlIGNvbWVzIGJlZm9yZSBjaGFyXG4gKiAtIGlmIGFtYmlndW91cyBiZXR3ZWVuIHR3byBjbGFzcyByYW5nZXMsIG9yZGVycyBhbHBoYWJldGljYWxseSBieSBgdG9gIGNoYXJcbiAqIC0gY29udHJvbCBjaGFycywgb3JkZXJlZCBhbHBoYWJldGljYWxseSBieSB2YWx1ZVxuICogQHBhcmFtIHtPYmplY3R9IGEgLSBMZWZ0IENoYXIgb3IgQ2xhc3NSYW5nZSBub2RlXG4gKiBAcGFyYW0ge09iamVjdH0gYiAtIFJpZ2h0IENoYXIgb3IgQ2xhc3NSYW5nZSBub2RlXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBzb3J0Q2hhckNsYXNzKGEsIGIpIHtcbiAgdmFyIGFWYWx1ZSA9IGdldFNvcnRWYWx1ZShhKTtcbiAgdmFyIGJWYWx1ZSA9IGdldFNvcnRWYWx1ZShiKTtcblxuICBpZiAoYVZhbHVlID09PSBiVmFsdWUpIHtcbiAgICAvLyBXZSB3YW50IENsYXNzUmFuZ2UgYmVmb3JlIENoYXJcbiAgICAvLyBbYmItZF0gLT4gW2ItZGJdXG4gICAgaWYgKGEudHlwZSA9PT0gJ0NsYXNzUmFuZ2UnICYmIGIudHlwZSAhPT0gJ0NsYXNzUmFuZ2UnKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmIChiLnR5cGUgPT09ICdDbGFzc1JhbmdlJyAmJiBhLnR5cGUgIT09ICdDbGFzc1JhbmdlJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGlmIChhLnR5cGUgPT09ICdDbGFzc1JhbmdlJyAmJiBiLnR5cGUgPT09ICdDbGFzc1JhbmdlJykge1xuICAgICAgcmV0dXJuIGdldFNvcnRWYWx1ZShhLnRvKSAtIGdldFNvcnRWYWx1ZShiLnRvKTtcbiAgICB9XG4gICAgaWYgKGlzTWV0YShhKSAmJiBpc01ldGEoYikgfHwgaXNDb250cm9sKGEpICYmIGlzQ29udHJvbChiKSkge1xuICAgICAgcmV0dXJuIGEudmFsdWUgPCBiLnZhbHVlID8gLTEgOiAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYVZhbHVlIC0gYlZhbHVlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBleHByZXNzaW9uIC0gQ2hhciBvciBDbGFzc1JhbmdlIG5vZGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGdldFNvcnRWYWx1ZShleHByZXNzaW9uKSB7XG4gIGlmIChleHByZXNzaW9uLnR5cGUgPT09ICdDaGFyJykge1xuICAgIGlmIChleHByZXNzaW9uLnZhbHVlID09PSAnLScpIHtcbiAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICB9XG4gICAgaWYgKGV4cHJlc3Npb24ua2luZCA9PT0gJ2NvbnRyb2wnKSB7XG4gICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgfVxuICAgIGlmIChleHByZXNzaW9uLmtpbmQgPT09ICdtZXRhJyAmJiBpc05hTihleHByZXNzaW9uLmNvZGVQb2ludCkpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgcmV0dXJuIGV4cHJlc3Npb24uY29kZVBvaW50O1xuICB9XG4gIC8vIENsYXNzUmFuZ2VcbiAgcmV0dXJuIGV4cHJlc3Npb24uZnJvbS5jb2RlUG9pbnQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbm9kZSBpcyBhIG1ldGEgY2hhciBmcm9tIHRoZSBzZXQgXFxkXFx3XFxzXFxEXFxXXFxTXG4gKiBAcGFyYW0ge09iamVjdH0gZXhwcmVzc2lvbiAtIENoYXIgb3IgQ2xhc3NSYW5nZSBub2RlXG4gKiBAcGFyYW0gez9zdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNZXRhKGV4cHJlc3Npb24pIHtcbiAgdmFyIHZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuXG4gIHJldHVybiBleHByZXNzaW9uLnR5cGUgPT09ICdDaGFyJyAmJiBleHByZXNzaW9uLmtpbmQgPT09ICdtZXRhJyAmJiAodmFsdWUgPyBleHByZXNzaW9uLnZhbHVlID09PSB2YWx1ZSA6IC9eXFxcXFtkd3NdJC9pLnRlc3QoZXhwcmVzc2lvbi52YWx1ZSkpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBleHByZXNzaW9uIC0gQ2hhciBvciBDbGFzc1JhbmdlIG5vZGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0NvbnRyb2woZXhwcmVzc2lvbikge1xuICByZXR1cm4gZXhwcmVzc2lvbi50eXBlID09PSAnQ2hhcicgJiYgZXhwcmVzc2lvbi5raW5kID09PSAnY29udHJvbCc7XG59XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IGV4cHJlc3Npb24gLSBDaGFyIG9yIENsYXNzUmFuZ2Ugbm9kZVxuICogQHBhcmFtIHtzdHJpbmdbXX0gbWV0YXMgLSBBcnJheSBvZiBtZXRhIGNoYXJzLCBlLmcuIFtcIlxcXFx3XCIsIFwiXFxcXHNcIl1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFzSVVGbGFnc1xuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGZpdHNJbk1ldGFzKGV4cHJlc3Npb24sIG1ldGFzLCBoYXNJVUZsYWdzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWV0YXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZml0c0luTWV0YShleHByZXNzaW9uLCBtZXRhc1tpXSwgaGFzSVVGbGFncykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IGV4cHJlc3Npb24gLSBDaGFyIG9yIENsYXNzUmFuZ2Ugbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IG1ldGEgLSBlLmcuIFwiXFxcXHdcIlxuICogQHBhcmFtIHtib29sZWFufSBoYXNJVUZsYWdzXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gZml0c0luTWV0YShleHByZXNzaW9uLCBtZXRhLCBoYXNJVUZsYWdzKSB7XG4gIGlmIChleHByZXNzaW9uLnR5cGUgPT09ICdDbGFzc1JhbmdlJykge1xuICAgIHJldHVybiBmaXRzSW5NZXRhKGV4cHJlc3Npb24uZnJvbSwgbWV0YSwgaGFzSVVGbGFncykgJiYgZml0c0luTWV0YShleHByZXNzaW9uLnRvLCBtZXRhLCBoYXNJVUZsYWdzKTtcbiAgfVxuXG4gIC8vIFNwZWNpYWwgY2FzZXM6XG4gIC8vIFxcUyBjb250YWlucyBcXHcgYW5kIFxcZFxuICBpZiAobWV0YSA9PT0gJ1xcXFxTJyAmJiAoaXNNZXRhKGV4cHJlc3Npb24sICdcXFxcdycpIHx8IGlzTWV0YShleHByZXNzaW9uLCAnXFxcXGQnKSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBcXEQgY29udGFpbnMgXFxXIGFuZCBcXHNcbiAgaWYgKG1ldGEgPT09ICdcXFxcRCcgJiYgKGlzTWV0YShleHByZXNzaW9uLCAnXFxcXFcnKSB8fCBpc01ldGEoZXhwcmVzc2lvbiwgJ1xcXFxzJykpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gXFx3IGNvbnRhaW5zIFxcZFxuICBpZiAobWV0YSA9PT0gJ1xcXFx3JyAmJiBpc01ldGEoZXhwcmVzc2lvbiwgJ1xcXFxkJykpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBcXFcgY29udGFpbnMgXFxzXG4gIGlmIChtZXRhID09PSAnXFxcXFcnICYmIGlzTWV0YShleHByZXNzaW9uLCAnXFxcXHMnKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGV4cHJlc3Npb24udHlwZSAhPT0gJ0NoYXInIHx8IGlzTmFOKGV4cHJlc3Npb24uY29kZVBvaW50KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChtZXRhID09PSAnXFxcXHMnKSB7XG4gICAgcmV0dXJuIGZpdHNJbk1ldGFTKGV4cHJlc3Npb24pO1xuICB9XG4gIGlmIChtZXRhID09PSAnXFxcXFMnKSB7XG4gICAgcmV0dXJuICFmaXRzSW5NZXRhUyhleHByZXNzaW9uKTtcbiAgfVxuICBpZiAobWV0YSA9PT0gJ1xcXFxkJykge1xuICAgIHJldHVybiBmaXRzSW5NZXRhRChleHByZXNzaW9uKTtcbiAgfVxuICBpZiAobWV0YSA9PT0gJ1xcXFxEJykge1xuICAgIHJldHVybiAhZml0c0luTWV0YUQoZXhwcmVzc2lvbik7XG4gIH1cbiAgaWYgKG1ldGEgPT09ICdcXFxcdycpIHtcbiAgICByZXR1cm4gZml0c0luTWV0YVcoZXhwcmVzc2lvbiwgaGFzSVVGbGFncyk7XG4gIH1cbiAgaWYgKG1ldGEgPT09ICdcXFxcVycpIHtcbiAgICByZXR1cm4gIWZpdHNJbk1ldGFXKGV4cHJlc3Npb24sIGhhc0lVRmxhZ3MpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gZXhwcmVzc2lvbiAtIENoYXIgbm9kZSB3aXRoIGNvZGVQb2ludFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGZpdHNJbk1ldGFTKGV4cHJlc3Npb24pIHtcbiAgcmV0dXJuIGV4cHJlc3Npb24uY29kZVBvaW50ID09PSAweDAwMDkgfHwgLy8gXFx0XG4gIGV4cHJlc3Npb24uY29kZVBvaW50ID09PSAweDAwMGEgfHwgLy8gXFxuXG4gIGV4cHJlc3Npb24uY29kZVBvaW50ID09PSAweDAwMGIgfHwgLy8gXFx2XG4gIGV4cHJlc3Npb24uY29kZVBvaW50ID09PSAweDAwMGMgfHwgLy8gXFxmXG4gIGV4cHJlc3Npb24uY29kZVBvaW50ID09PSAweDAwMGQgfHwgLy8gXFxyXG4gIGV4cHJlc3Npb24uY29kZVBvaW50ID09PSAweDAwMjAgfHwgLy8gc3BhY2VcbiAgZXhwcmVzc2lvbi5jb2RlUG9pbnQgPT09IDB4MDBhMCB8fCAvLyBuYnNwXG4gIGV4cHJlc3Npb24uY29kZVBvaW50ID09PSAweDE2ODAgfHwgLy8gcGFydCBvZiBac1xuICBleHByZXNzaW9uLmNvZGVQb2ludCA+PSAweDIwMDAgJiYgZXhwcmVzc2lvbi5jb2RlUG9pbnQgPD0gMHgyMDBhIHx8IC8vIHBhcnQgb2YgWnNcbiAgZXhwcmVzc2lvbi5jb2RlUG9pbnQgPT09IDB4MjAyOCB8fCAvLyBsaW5lIHNlcGFyYXRvclxuICBleHByZXNzaW9uLmNvZGVQb2ludCA9PT0gMHgyMDI5IHx8IC8vIHBhcmFncmFwaCBzZXBhcmF0b3JcbiAgZXhwcmVzc2lvbi5jb2RlUG9pbnQgPT09IDB4MjAyZiB8fCAvLyBwYXJ0IG9mIFpzXG4gIGV4cHJlc3Npb24uY29kZVBvaW50ID09PSAweDIwNWYgfHwgLy8gcGFydCBvZiBac1xuICBleHByZXNzaW9uLmNvZGVQb2ludCA9PT0gMHgzMDAwIHx8IC8vIHBhcnQgb2YgWnNcbiAgZXhwcmVzc2lvbi5jb2RlUG9pbnQgPT09IDB4ZmVmZjsgLy8genduYnNwXG59XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IGV4cHJlc3Npb24gLSBDaGFyIG5vZGUgd2l0aCBjb2RlUG9pbnRcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBmaXRzSW5NZXRhRChleHByZXNzaW9uKSB7XG4gIHJldHVybiBleHByZXNzaW9uLmNvZGVQb2ludCA+PSAweDMwICYmIGV4cHJlc3Npb24uY29kZVBvaW50IDw9IDB4Mzk7IC8vIDAtOVxufVxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBleHByZXNzaW9uIC0gQ2hhciBub2RlIHdpdGggY29kZVBvaW50XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGhhc0lVRmxhZ3NcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBmaXRzSW5NZXRhVyhleHByZXNzaW9uLCBoYXNJVUZsYWdzKSB7XG4gIHJldHVybiBmaXRzSW5NZXRhRChleHByZXNzaW9uKSB8fCBleHByZXNzaW9uLmNvZGVQb2ludCA+PSAweDQxICYmIGV4cHJlc3Npb24uY29kZVBvaW50IDw9IDB4NWEgfHwgLy8gQS1aXG4gIGV4cHJlc3Npb24uY29kZVBvaW50ID49IDB4NjEgJiYgZXhwcmVzc2lvbi5jb2RlUG9pbnQgPD0gMHg3YSB8fCAvLyBhLXpcbiAgZXhwcmVzc2lvbi52YWx1ZSA9PT0gJ18nIHx8IGhhc0lVRmxhZ3MgJiYgKGV4cHJlc3Npb24uY29kZVBvaW50ID09PSAweDAxN2YgfHwgZXhwcmVzc2lvbi5jb2RlUG9pbnQgPT09IDB4MjEyYSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IGV4cHJlc3Npb24gLSBDaGFyIG9yIENsYXNzUmFuZ2Ugbm9kZVxuICogQHBhcmFtIHtPYmplY3R9IGNsYXNzUmFuZ2UgLSBDaGFyIG9yIENsYXNzUmFuZ2Ugbm9kZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGNvbWJpbmVzV2l0aFByZWNlZGluZ0NsYXNzUmFuZ2UoZXhwcmVzc2lvbiwgY2xhc3NSYW5nZSkge1xuICBpZiAoY2xhc3NSYW5nZSAmJiBjbGFzc1JhbmdlLnR5cGUgPT09ICdDbGFzc1JhbmdlJykge1xuICAgIGlmIChmaXRzSW5DbGFzc1JhbmdlKGV4cHJlc3Npb24sIGNsYXNzUmFuZ2UpKSB7XG4gICAgICAvLyBbYS1nY10gLT4gW2EtZ11cbiAgICAgIC8vIFthLWdjLWVdIC0+IFthLWddXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKFxuICAgIC8vIFdlIG9ubHkgd2FudCBcXHcgY2hhcnMgb3IgY2hhciBjb2RlcyB0byBrZWVwIHJlYWRhYmlsaXR5XG4gICAgaXNNZXRhV0NoYXJPckNvZGUoZXhwcmVzc2lvbikgJiYgY2xhc3NSYW5nZS50by5jb2RlUG9pbnQgPT09IGV4cHJlc3Npb24uY29kZVBvaW50IC0gMSkge1xuICAgICAgLy8gW2EtZGVdIC0+IFthLWVdXG4gICAgICBjbGFzc1JhbmdlLnRvID0gZXhwcmVzc2lvbjtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoZXhwcmVzc2lvbi50eXBlID09PSAnQ2xhc3NSYW5nZScgJiYgZXhwcmVzc2lvbi5mcm9tLmNvZGVQb2ludCA8PSBjbGFzc1JhbmdlLnRvLmNvZGVQb2ludCArIDEgJiYgZXhwcmVzc2lvbi50by5jb2RlUG9pbnQgPj0gY2xhc3NSYW5nZS5mcm9tLmNvZGVQb2ludCAtIDEpIHtcbiAgICAgIC8vIFthLWRiLWZdIC0+IFthLWZdXG4gICAgICAvLyBbYi1mYS1kXSAtPiBbYS1mXVxuICAgICAgLy8gW2EtY2QtZl0gLT4gW2EtZl1cbiAgICAgIGlmIChleHByZXNzaW9uLmZyb20uY29kZVBvaW50IDwgY2xhc3NSYW5nZS5mcm9tLmNvZGVQb2ludCkge1xuICAgICAgICBjbGFzc1JhbmdlLmZyb20gPSBleHByZXNzaW9uLmZyb207XG4gICAgICB9XG4gICAgICBpZiAoZXhwcmVzc2lvbi50by5jb2RlUG9pbnQgPiBjbGFzc1JhbmdlLnRvLmNvZGVQb2ludCkge1xuICAgICAgICBjbGFzc1JhbmdlLnRvID0gZXhwcmVzc2lvbi50bztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IGV4cHJlc3Npb24gLSBDaGFyIG9yIENsYXNzUmFuZ2Ugbm9kZVxuICogQHBhcmFtIHtPYmplY3R9IGNsYXNzUmFuZ2UgLSBDaGFyIG9yIENsYXNzUmFuZ2Ugbm9kZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGNvbWJpbmVzV2l0aEZvbGxvd2luZ0NsYXNzUmFuZ2UoZXhwcmVzc2lvbiwgY2xhc3NSYW5nZSkge1xuICBpZiAoY2xhc3NSYW5nZSAmJiBjbGFzc1JhbmdlLnR5cGUgPT09ICdDbGFzc1JhbmdlJykge1xuICAgIC8vIENvbnNpZGVyaW5nIHRoZSBlbGVtZW50cyB3ZXJlIG9yZGVyZWQgYWxwaGFiZXRpY2FsbHksXG4gICAgLy8gdGhlcmUgaXMgb25seSBvbmUgY2FzZSB0byBoYW5kbGVcbiAgICAvLyBbYWItZV0gLT4gW2EtZV1cbiAgICBpZiAoXG4gICAgLy8gV2Ugb25seSB3YW50IFxcdyBjaGFycyBvciBjaGFyIGNvZGVzIHRvIGtlZXAgcmVhZGFiaWxpdHlcbiAgICBpc01ldGFXQ2hhck9yQ29kZShleHByZXNzaW9uKSAmJiBjbGFzc1JhbmdlLmZyb20uY29kZVBvaW50ID09PSBleHByZXNzaW9uLmNvZGVQb2ludCArIDEpIHtcbiAgICAgIGNsYXNzUmFuZ2UuZnJvbSA9IGV4cHJlc3Npb247XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IGV4cHJlc3Npb24gLSBDaGFyIG9yIENsYXNzUmFuZ2Ugbm9kZVxuICogQHBhcmFtIHtPYmplY3R9IGNsYXNzUmFuZ2UgLSBDbGFzc1JhbmdlIG5vZGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBmaXRzSW5DbGFzc1JhbmdlKGV4cHJlc3Npb24sIGNsYXNzUmFuZ2UpIHtcbiAgaWYgKGV4cHJlc3Npb24udHlwZSA9PT0gJ0NoYXInICYmIGlzTmFOKGV4cHJlc3Npb24uY29kZVBvaW50KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZXhwcmVzc2lvbi50eXBlID09PSAnQ2xhc3NSYW5nZScpIHtcbiAgICByZXR1cm4gZml0c0luQ2xhc3NSYW5nZShleHByZXNzaW9uLmZyb20sIGNsYXNzUmFuZ2UpICYmIGZpdHNJbkNsYXNzUmFuZ2UoZXhwcmVzc2lvbi50bywgY2xhc3NSYW5nZSk7XG4gIH1cbiAgcmV0dXJuIGV4cHJlc3Npb24uY29kZVBvaW50ID49IGNsYXNzUmFuZ2UuZnJvbS5jb2RlUG9pbnQgJiYgZXhwcmVzc2lvbi5jb2RlUG9pbnQgPD0gY2xhc3NSYW5nZS50by5jb2RlUG9pbnQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IGV4cHJlc3Npb24gLSBDaGFyIG9yIENsYXNzUmFuZ2Ugbm9kZVxuICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge09iamVjdFtdfSBleHByZXNzaW9ucyAtIGV4cHJlc3Npb25zIGluIENoYXJDbGFzc1xuICogQHJldHVybnMge251bWJlcn0gLSBOdW1iZXIgb2YgY2hhcmFjdGVycyBjb21iaW5lZCB3aXRoIGV4cHJlc3Npb25cbiAqL1xuZnVuY3Rpb24gY2hhckNvbWJpbmVzV2l0aFByZWNlZGluZ0NoYXJzKGV4cHJlc3Npb24sIGluZGV4LCBleHByZXNzaW9ucykge1xuICAvLyBXZSBvbmx5IHdhbnQgXFx3IGNoYXJzIG9yIGNoYXIgY29kZXMgdG8ga2VlcCByZWFkYWJpbGl0eVxuICBpZiAoIWlzTWV0YVdDaGFyT3JDb2RlKGV4cHJlc3Npb24pKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgdmFyIG5iTWVyZ2VkQ2hhcnMgPSAwO1xuICB3aGlsZSAoaW5kZXggPiAwKSB7XG4gICAgdmFyIGN1cnJlbnRFeHByZXNzaW9uID0gZXhwcmVzc2lvbnNbaW5kZXhdO1xuICAgIHZhciBwcmVjZWRpbmdFeHByZXNpb24gPSBleHByZXNzaW9uc1tpbmRleCAtIDFdO1xuICAgIGlmIChpc01ldGFXQ2hhck9yQ29kZShwcmVjZWRpbmdFeHByZXNpb24pICYmIHByZWNlZGluZ0V4cHJlc2lvbi5jb2RlUG9pbnQgPT09IGN1cnJlbnRFeHByZXNzaW9uLmNvZGVQb2ludCAtIDEpIHtcbiAgICAgIG5iTWVyZ2VkQ2hhcnMrKztcbiAgICAgIGluZGV4LS07XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChuYk1lcmdlZENoYXJzID4gMSkge1xuICAgIGV4cHJlc3Npb25zW2luZGV4XSA9IHtcbiAgICAgIHR5cGU6ICdDbGFzc1JhbmdlJyxcbiAgICAgIGZyb206IGV4cHJlc3Npb25zW2luZGV4XSxcbiAgICAgIHRvOiBleHByZXNzaW9uXG4gICAgfTtcbiAgICByZXR1cm4gbmJNZXJnZWRDaGFycztcbiAgfVxuICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gaXNNZXRhV0NoYXJPckNvZGUoZXhwcmVzc2lvbikge1xuICByZXR1cm4gZXhwcmVzc2lvbiAmJiBleHByZXNzaW9uLnR5cGUgPT09ICdDaGFyJyAmJiAhaXNOYU4oZXhwcmVzc2lvbi5jb2RlUG9pbnQpICYmIChmaXRzSW5NZXRhVyhleHByZXNzaW9uLCBmYWxzZSkgfHwgZXhwcmVzc2lvbi5raW5kID09PSAndW5pY29kZScgfHwgZXhwcmVzc2lvbi5raW5kID09PSAnaGV4JyB8fCBleHByZXNzaW9uLmtpbmQgPT09ICdvY3QnIHx8IGV4cHJlc3Npb24ua2luZCA9PT0gJ2RlY2ltYWwnKTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFlBQVk7O0FBRVo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBQSxNQUFNLENBQUNDLE9B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