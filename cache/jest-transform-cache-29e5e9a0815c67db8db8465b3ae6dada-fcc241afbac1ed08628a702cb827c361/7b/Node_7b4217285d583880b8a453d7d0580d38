e1cbc004a78ba65a5bd1b614fca3b69c
'use strict';

const ALIAS = Symbol.for('yaml.alias');
const DOC = Symbol.for('yaml.document');
const MAP = Symbol.for('yaml.map');
const PAIR = Symbol.for('yaml.pair');
const SCALAR = Symbol.for('yaml.scalar');
const SEQ = Symbol.for('yaml.seq');
const NODE_TYPE = Symbol.for('yaml.node.type');
const isAlias = node => !!node && typeof node === 'object' && node[NODE_TYPE] === ALIAS;
const isDocument = node => !!node && typeof node === 'object' && node[NODE_TYPE] === DOC;
const isMap = node => !!node && typeof node === 'object' && node[NODE_TYPE] === MAP;
const isPair = node => !!node && typeof node === 'object' && node[NODE_TYPE] === PAIR;
const isScalar = node => !!node && typeof node === 'object' && node[NODE_TYPE] === SCALAR;
const isSeq = node => !!node && typeof node === 'object' && node[NODE_TYPE] === SEQ;
function isCollection(node) {
  if (node && typeof node === 'object') switch (node[NODE_TYPE]) {
    case MAP:
    case SEQ:
      return true;
  }
  return false;
}
function isNode(node) {
  if (node && typeof node === 'object') switch (node[NODE_TYPE]) {
    case ALIAS:
    case MAP:
    case SCALAR:
    case SEQ:
      return true;
  }
  return false;
}
const hasAnchor = node => (isScalar(node) || isCollection(node)) && !!node.anchor;
class NodeBase {
  constructor(type) {
    Object.defineProperty(this, NODE_TYPE, {
      value: type
    });
  }
  /** Create a copy of this node.  */
  clone() {
    const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
    if (this.range) copy.range = this.range.slice();
    return copy;
  }
}
exports.ALIAS = ALIAS;
exports.DOC = DOC;
exports.MAP = MAP;
exports.NODE_TYPE = NODE_TYPE;
exports.NodeBase = NodeBase;
exports.PAIR = PAIR;
exports.SCALAR = SCALAR;
exports.SEQ = SEQ;
exports.hasAnchor = hasAnchor;
exports.isAlias = isAlias;
exports.isCollection = isCollection;
exports.isDocument = isDocument;
exports.isMap = isMap;
exports.isNode = isNode;
exports.isPair = isPair;
exports.isScalar = isScalar;
exports.isSeq = isSeq;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBTElBUyIsIlN5bWJvbCIsImZvciIsIkRPQyIsIk1BUCIsIlBBSVIiLCJTQ0FMQVIiLCJTRVEiLCJOT0RFX1RZUEUiLCJpc0FsaWFzIiwibm9kZSIsImlzRG9jdW1lbnQiLCJpc01hcCIsImlzUGFpciIsImlzU2NhbGFyIiwiaXNTZXEiLCJpc0NvbGxlY3Rpb24iLCJpc05vZGUiLCJoYXNBbmNob3IiLCJhbmNob3IiLCJOb2RlQmFzZSIsImNvbnN0cnVjdG9yIiwidHlwZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJjbG9uZSIsImNvcHkiLCJjcmVhdGUiLCJnZXRQcm90b3R5cGVPZiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJyYW5nZSIsInNsaWNlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIk5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBTElBUyA9IFN5bWJvbC5mb3IoJ3lhbWwuYWxpYXMnKTtcbmNvbnN0IERPQyA9IFN5bWJvbC5mb3IoJ3lhbWwuZG9jdW1lbnQnKTtcbmNvbnN0IE1BUCA9IFN5bWJvbC5mb3IoJ3lhbWwubWFwJyk7XG5jb25zdCBQQUlSID0gU3ltYm9sLmZvcigneWFtbC5wYWlyJyk7XG5jb25zdCBTQ0FMQVIgPSBTeW1ib2wuZm9yKCd5YW1sLnNjYWxhcicpO1xuY29uc3QgU0VRID0gU3ltYm9sLmZvcigneWFtbC5zZXEnKTtcbmNvbnN0IE5PREVfVFlQRSA9IFN5bWJvbC5mb3IoJ3lhbWwubm9kZS50eXBlJyk7XG5jb25zdCBpc0FsaWFzID0gKG5vZGUpID0+ICEhbm9kZSAmJiB0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcgJiYgbm9kZVtOT0RFX1RZUEVdID09PSBBTElBUztcbmNvbnN0IGlzRG9jdW1lbnQgPSAobm9kZSkgPT4gISFub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlW05PREVfVFlQRV0gPT09IERPQztcbmNvbnN0IGlzTWFwID0gKG5vZGUpID0+ICEhbm9kZSAmJiB0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcgJiYgbm9kZVtOT0RFX1RZUEVdID09PSBNQVA7XG5jb25zdCBpc1BhaXIgPSAobm9kZSkgPT4gISFub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlW05PREVfVFlQRV0gPT09IFBBSVI7XG5jb25zdCBpc1NjYWxhciA9IChub2RlKSA9PiAhIW5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnICYmIG5vZGVbTk9ERV9UWVBFXSA9PT0gU0NBTEFSO1xuY29uc3QgaXNTZXEgPSAobm9kZSkgPT4gISFub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlW05PREVfVFlQRV0gPT09IFNFUTtcbmZ1bmN0aW9uIGlzQ29sbGVjdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnKVxuICAgICAgICBzd2l0Y2ggKG5vZGVbTk9ERV9UWVBFXSkge1xuICAgICAgICAgICAgY2FzZSBNQVA6XG4gICAgICAgICAgICBjYXNlIFNFUTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzTm9kZShub2RlKSB7XG4gICAgaWYgKG5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnKVxuICAgICAgICBzd2l0Y2ggKG5vZGVbTk9ERV9UWVBFXSkge1xuICAgICAgICAgICAgY2FzZSBBTElBUzpcbiAgICAgICAgICAgIGNhc2UgTUFQOlxuICAgICAgICAgICAgY2FzZSBTQ0FMQVI6XG4gICAgICAgICAgICBjYXNlIFNFUTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmNvbnN0IGhhc0FuY2hvciA9IChub2RlKSA9PiAoaXNTY2FsYXIobm9kZSkgfHwgaXNDb2xsZWN0aW9uKG5vZGUpKSAmJiAhIW5vZGUuYW5jaG9yO1xuY2xhc3MgTm9kZUJhc2Uge1xuICAgIGNvbnN0cnVjdG9yKHR5cGUpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIE5PREVfVFlQRSwgeyB2YWx1ZTogdHlwZSB9KTtcbiAgICB9XG4gICAgLyoqIENyZWF0ZSBhIGNvcHkgb2YgdGhpcyBub2RlLiAgKi9cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgY29uc3QgY29weSA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0aGlzKSk7XG4gICAgICAgIGlmICh0aGlzLnJhbmdlKVxuICAgICAgICAgICAgY29weS5yYW5nZSA9IHRoaXMucmFuZ2Uuc2xpY2UoKTtcbiAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgfVxufVxuXG5leHBvcnRzLkFMSUFTID0gQUxJQVM7XG5leHBvcnRzLkRPQyA9IERPQztcbmV4cG9ydHMuTUFQID0gTUFQO1xuZXhwb3J0cy5OT0RFX1RZUEUgPSBOT0RFX1RZUEU7XG5leHBvcnRzLk5vZGVCYXNlID0gTm9kZUJhc2U7XG5leHBvcnRzLlBBSVIgPSBQQUlSO1xuZXhwb3J0cy5TQ0FMQVIgPSBTQ0FMQVI7XG5leHBvcnRzLlNFUSA9IFNFUTtcbmV4cG9ydHMuaGFzQW5jaG9yID0gaGFzQW5jaG9yO1xuZXhwb3J0cy5pc0FsaWFzID0gaXNBbGlhcztcbmV4cG9ydHMuaXNDb2xsZWN0aW9uID0gaXNDb2xsZWN0aW9uO1xuZXhwb3J0cy5pc0RvY3VtZW50ID0gaXNEb2N1bWVudDtcbmV4cG9ydHMuaXNNYXAgPSBpc01hcDtcbmV4cG9ydHMuaXNOb2RlID0gaXNOb2RlO1xuZXhwb3J0cy5pc1BhaXIgPSBpc1BhaXI7XG5leHBvcnRzLmlzU2NhbGFyID0gaXNTY2FsYXI7XG5leHBvcnRzLmlzU2VxID0gaXNTZXE7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosTUFBTUEs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