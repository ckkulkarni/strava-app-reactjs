6ad5a9c8c0e03efc8f0e98a694585248
"use strict";

// Generated by CoffeeScript 2.4.1
(function () {
  var XMLStringWriter, XMLWriterBase;
  XMLWriterBase = require('./XMLWriterBase');

  // Prints XML nodes as plain text
  module.exports = XMLStringWriter = class XMLStringWriter extends XMLWriterBase {
    // Initializes a new instance of `XMLStringWriter`

    // `options.pretty` pretty prints the result
    // `options.indent` indentation string
    // `options.newline` newline sequence
    // `options.offset` a fixed number of indentations to add to every line
    // `options.allowEmpty` do not self close empty element tags
    // 'options.dontPrettyTextNodes' if any text is present in node, don't indent or LF
    // `options.spaceBeforeSlash` add a space before the closing slash of empty elements
    constructor(options) {
      super(options);
    }
    document(doc, options) {
      var child, i, len, r, ref;
      options = this.filterOptions(options);
      r = '';
      ref = doc.children;
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        r += this.writeChildNode(child, options, 0);
      }
      // remove trailing newline
      if (options.pretty && r.slice(-options.newline.length) === options.newline) {
        r = r.slice(0, -options.newline.length);
      }
      return r;
    }
  };
}).call(void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJYTUxTdHJpbmdXcml0ZXIiLCJYTUxXcml0ZXJCYXNlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJkb2N1bWVudCIsImRvYyIsImNoaWxkIiwiaSIsImxlbiIsInIiLCJyZWYiLCJmaWx0ZXJPcHRpb25zIiwiY2hpbGRyZW4iLCJsZW5ndGgiLCJ3cml0ZUNoaWxkTm9kZSIsInByZXR0eSIsInNsaWNlIiwibmV3bGluZSIsImNhbGwiXSwic291cmNlcyI6WyJYTUxTdHJpbmdXcml0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAyLjQuMVxuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MU3RyaW5nV3JpdGVyLCBYTUxXcml0ZXJCYXNlO1xuXG4gIFhNTFdyaXRlckJhc2UgPSByZXF1aXJlKCcuL1hNTFdyaXRlckJhc2UnKTtcblxuICAvLyBQcmludHMgWE1MIG5vZGVzIGFzIHBsYWluIHRleHRcbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxTdHJpbmdXcml0ZXIgPSBjbGFzcyBYTUxTdHJpbmdXcml0ZXIgZXh0ZW5kcyBYTUxXcml0ZXJCYXNlIHtcbiAgICAvLyBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiBgWE1MU3RyaW5nV3JpdGVyYFxuXG4gICAgLy8gYG9wdGlvbnMucHJldHR5YCBwcmV0dHkgcHJpbnRzIHRoZSByZXN1bHRcbiAgICAvLyBgb3B0aW9ucy5pbmRlbnRgIGluZGVudGF0aW9uIHN0cmluZ1xuICAgIC8vIGBvcHRpb25zLm5ld2xpbmVgIG5ld2xpbmUgc2VxdWVuY2VcbiAgICAvLyBgb3B0aW9ucy5vZmZzZXRgIGEgZml4ZWQgbnVtYmVyIG9mIGluZGVudGF0aW9ucyB0byBhZGQgdG8gZXZlcnkgbGluZVxuICAgIC8vIGBvcHRpb25zLmFsbG93RW1wdHlgIGRvIG5vdCBzZWxmIGNsb3NlIGVtcHR5IGVsZW1lbnQgdGFnc1xuICAgIC8vICdvcHRpb25zLmRvbnRQcmV0dHlUZXh0Tm9kZXMnIGlmIGFueSB0ZXh0IGlzIHByZXNlbnQgaW4gbm9kZSwgZG9uJ3QgaW5kZW50IG9yIExGXG4gICAgLy8gYG9wdGlvbnMuc3BhY2VCZWZvcmVTbGFzaGAgYWRkIGEgc3BhY2UgYmVmb3JlIHRoZSBjbG9zaW5nIHNsYXNoIG9mIGVtcHR5IGVsZW1lbnRzXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgZG9jdW1lbnQoZG9jLCBvcHRpb25zKSB7XG4gICAgICB2YXIgY2hpbGQsIGksIGxlbiwgciwgcmVmO1xuICAgICAgb3B0aW9ucyA9IHRoaXMuZmlsdGVyT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIHIgPSAnJztcbiAgICAgIHJlZiA9IGRvYy5jaGlsZHJlbjtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjaGlsZCA9IHJlZltpXTtcbiAgICAgICAgciArPSB0aGlzLndyaXRlQ2hpbGROb2RlKGNoaWxkLCBvcHRpb25zLCAwKTtcbiAgICAgIH1cbiAgICAgIC8vIHJlbW92ZSB0cmFpbGluZyBuZXdsaW5lXG4gICAgICBpZiAob3B0aW9ucy5wcmV0dHkgJiYgci5zbGljZSgtb3B0aW9ucy5uZXdsaW5lLmxlbmd0aCkgPT09IG9wdGlvbnMubmV3bGluZSkge1xuICAgICAgICByID0gci5zbGljZSgwLCAtb3B0aW9ucy5uZXdsaW5lLmxlbmd0aCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG5cbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBLENBQUMsWUFBVztFQUNWLElBQUlBLGVBQWUsRUFBRUMsYUFBYTtFQUVsQ0EsYUFBYSxHQUFHQyxPQUFPLENBQUMsaUJBQWlCLENBQUM7O0VBRTFDO0VBQ0FDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHSixlQUFlLEdBQUcsTUFBTUEsZUFBZSxTQUFTQyxhQUFhLENBQUM7SUFDN0U7O0lBRUE7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQUksV0FBV0EsQ0FBQ0MsT0FBTyxFQUFFO01BQ25CLEtBQUssQ0FBQ0EsT0FBTyxDQUFDO0lBQ2hCO0lBRUFDLFFBQVFBLENBQUNDLEdBQUcsRUFBRUYsT0FBTyxFQUFFO01BQ3JCLElBQUlHLEtBQUssRUFBRUMsQ0FBQyxFQUFFQyxHQUFHLEVBQUVDLENBQUMsRUFBRUMsR0FBRztNQUN6QlAsT0FBTyxHQUFHLElBQUksQ0FBQ1EsYUFBYSxDQUFDUixPQUFPLENBQUM7TUFDckNNLENBQUMsR0FBRyxFQUFFO01BQ05DLEdBQUcsR0FBR0wsR0FBRyxDQUFDTyxRQUFRO01BQ2xCLEtBQUtMLENBQUMsR0FBRyxDQUFDLEVBQUVDLEdBQUcsR0FBR0UsR0FBRyxDQUFDRyxNQUFNLEVBQUVOLENBQUMsR0FBR0MsR0FBRyxFQUFFRCxDQUFDLEVBQUUsRUFBRTtRQUMxQ0QsS0FBSyxHQUFHSSxHQUFHLENBQUNILENBQUMsQ0FBQztRQUNkRSxDQUFDLElBQUksSUFBSSxDQUFDSyxjQUFjLENBQUNSLEtBQUssRUFBRUgsT0FBTyxFQUFFLENBQUMsQ0FBQztNQUM3QztNQUNBO01BQ0EsSUFBSUEsT0FBTyxDQUFDWSxNQUFNLElBQUlOLENBQUMsQ0FBQ08sS0FBSyxDQUFDLENBQUNiLE9BQU8sQ0FBQ2MsT0FBTyxDQUFDSixNQUFNLENBQUMsS0FBS1YsT0FBTyxDQUFDYyxPQUFPLEVBQUU7UUFDMUVSLENBQUMsR0FBR0EsQ0FBQyxDQUFDTyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUNiLE9BQU8sQ0FBQ2MsT0FBTyxDQUFDSixNQUFNLENBQUM7TUFDekM7TUFDQSxPQUFPSixDQUFDO0lBQ1Y7RUFFRixDQUFDO0FBRUgsQ0FBQyxFQUFFUyxJQUFJLFFBQU0ifQ==