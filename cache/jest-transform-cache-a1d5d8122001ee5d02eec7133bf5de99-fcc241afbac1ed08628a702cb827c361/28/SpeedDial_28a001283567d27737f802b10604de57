a78fb4f40f1e8b098d675f2687498a79
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _reactIs = require("react-is");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _clsx = _interopRequireDefault(require("clsx"));
var _base = require("@mui/base");
var _styled = _interopRequireDefault(require("../styles/styled"));
var _useThemeProps = _interopRequireDefault(require("../styles/useThemeProps"));
var _useTheme = _interopRequireDefault(require("../styles/useTheme"));
var _Zoom = _interopRequireDefault(require("../Zoom"));
var _Fab = _interopRequireDefault(require("../Fab"));
var _capitalize = _interopRequireDefault(require("../utils/capitalize"));
var _isMuiElement = _interopRequireDefault(require("../utils/isMuiElement"));
var _useForkRef = _interopRequireDefault(require("../utils/useForkRef"));
var _useControlled = _interopRequireDefault(require("../utils/useControlled"));
var _speedDialClasses = _interopRequireWildcard(require("./speedDialClasses"));
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["ref"],
  _excluded2 = ["ariaLabel", "FabProps", "children", "className", "direction", "hidden", "icon", "onBlur", "onClose", "onFocus", "onKeyDown", "onMouseEnter", "onMouseLeave", "onOpen", "open", "openIcon", "TransitionComponent", "transitionDuration", "TransitionProps"],
  _excluded3 = ["ref"];
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
const useUtilityClasses = ownerState => {
  const {
    classes,
    open,
    direction
  } = ownerState;
  const slots = {
    root: ['root', `direction${(0, _capitalize.default)(direction)}`],
    fab: ['fab'],
    actions: ['actions', !open && 'actionsClosed']
  };
  return (0, _base.unstable_composeClasses)(slots, _speedDialClasses.getSpeedDialUtilityClass, classes);
};
function getOrientation(direction) {
  if (direction === 'up' || direction === 'down') {
    return 'vertical';
  }
  if (direction === 'right' || direction === 'left') {
    return 'horizontal';
  }
  return undefined;
}
function clamp(value, min, max) {
  if (value < min) {
    return min;
  }
  if (value > max) {
    return max;
  }
  return value;
}
const dialRadius = 32;
const spacingActions = 16;
const SpeedDialRoot = (0, _styled.default)('div', {
  name: 'MuiSpeedDial',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, styles[`direction${(0, _capitalize.default)(ownerState.direction)}`]];
  }
})(({
  theme,
  ownerState
}) => (0, _extends2.default)({
  zIndex: (theme.vars || theme).zIndex.speedDial,
  display: 'flex',
  alignItems: 'center',
  pointerEvents: 'none'
}, ownerState.direction === 'up' && {
  flexDirection: 'column-reverse',
  [`& .${_speedDialClasses.default.actions}`]: {
    flexDirection: 'column-reverse',
    marginBottom: -dialRadius,
    paddingBottom: spacingActions + dialRadius
  }
}, ownerState.direction === 'down' && {
  flexDirection: 'column',
  [`& .${_speedDialClasses.default.actions}`]: {
    flexDirection: 'column',
    marginTop: -dialRadius,
    paddingTop: spacingActions + dialRadius
  }
}, ownerState.direction === 'left' && {
  flexDirection: 'row-reverse',
  [`& .${_speedDialClasses.default.actions}`]: {
    flexDirection: 'row-reverse',
    marginRight: -dialRadius,
    paddingRight: spacingActions + dialRadius
  }
}, ownerState.direction === 'right' && {
  flexDirection: 'row',
  [`& .${_speedDialClasses.default.actions}`]: {
    flexDirection: 'row',
    marginLeft: -dialRadius,
    paddingLeft: spacingActions + dialRadius
  }
}));
const SpeedDialFab = (0, _styled.default)(_Fab.default, {
  name: 'MuiSpeedDial',
  slot: 'Fab',
  overridesResolver: (props, styles) => styles.fab
})(() => ({
  pointerEvents: 'auto'
}));
const SpeedDialActions = (0, _styled.default)('div', {
  name: 'MuiSpeedDial',
  slot: 'Actions',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.actions, !ownerState.open && styles.actionsClosed];
  }
})(({
  ownerState
}) => (0, _extends2.default)({
  display: 'flex',
  pointerEvents: 'auto'
}, !ownerState.open && {
  transition: 'top 0s linear 0.2s',
  pointerEvents: 'none'
}));
const SpeedDial = /*#__PURE__*/React.forwardRef(function SpeedDial(inProps, ref) {
  const props = (0, _useThemeProps.default)({
    props: inProps,
    name: 'MuiSpeedDial'
  });
  const theme = (0, _useTheme.default)();
  const defaultTransitionDuration = {
    enter: theme.transitions.duration.enteringScreen,
    exit: theme.transitions.duration.leavingScreen
  };
  const {
      ariaLabel,
      FabProps: {
        ref: origDialButtonRef
      } = {},
      children: childrenProp,
      className,
      direction = 'up',
      hidden = false,
      icon,
      onBlur,
      onClose,
      onFocus,
      onKeyDown,
      onMouseEnter,
      onMouseLeave,
      onOpen,
      open: openProp,
      TransitionComponent = _Zoom.default,
      transitionDuration = defaultTransitionDuration,
      TransitionProps
    } = props,
    FabProps = (0, _objectWithoutPropertiesLoose2.default)(props.FabProps, _excluded),
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded2);
  const [open, setOpenState] = (0, _useControlled.default)({
    controlled: openProp,
    default: false,
    name: 'SpeedDial',
    state: 'open'
  });
  const ownerState = (0, _extends2.default)({}, props, {
    open,
    direction
  });
  const classes = useUtilityClasses(ownerState);
  const eventTimer = React.useRef();
  React.useEffect(() => {
    return () => {
      clearTimeout(eventTimer.current);
    };
  }, []);

  /**
   * an index in actions.current
   */
  const focusedAction = React.useRef(0);

  /**
   * pressing this key while the focus is on a child SpeedDialAction focuses
   * the next SpeedDialAction.
   * It is equal to the first arrow key pressed while focus is on the SpeedDial
   * that is not orthogonal to the direction.
   * @type {utils.ArrowKey?}
   */
  const nextItemArrowKey = React.useRef();

  /**
   * refs to the Button that have an action associated to them in this SpeedDial
   * [Fab, ...(SpeedDialActions > Button)]
   * @type {HTMLButtonElement[]}
   */
  const actions = React.useRef([]);
  actions.current = [actions.current[0]];
  const handleOwnFabRef = React.useCallback(fabFef => {
    actions.current[0] = fabFef;
  }, []);
  const handleFabRef = (0, _useForkRef.default)(origDialButtonRef, handleOwnFabRef);

  /**
   * creates a ref callback for the Button in a SpeedDialAction
   * Is called before the original ref callback for Button that was set in buttonProps
   *
   * @param dialActionIndex {number}
   * @param origButtonRef {React.RefObject?}
   */
  const createHandleSpeedDialActionButtonRef = (dialActionIndex, origButtonRef) => {
    return buttonRef => {
      actions.current[dialActionIndex + 1] = buttonRef;
      if (origButtonRef) {
        origButtonRef(buttonRef);
      }
    };
  };
  const handleKeyDown = event => {
    if (onKeyDown) {
      onKeyDown(event);
    }
    const key = event.key.replace('Arrow', '').toLowerCase();
    const {
      current: nextItemArrowKeyCurrent = key
    } = nextItemArrowKey;
    if (event.key === 'Escape') {
      setOpenState(false);
      actions.current[0].focus();
      if (onClose) {
        onClose(event, 'escapeKeyDown');
      }
      return;
    }
    if (getOrientation(key) === getOrientation(nextItemArrowKeyCurrent) && getOrientation(key) !== undefined) {
      event.preventDefault();
      const actionStep = key === nextItemArrowKeyCurrent ? 1 : -1;

      // stay within array indices
      const nextAction = clamp(focusedAction.current + actionStep, 0, actions.current.length - 1);
      actions.current[nextAction].focus();
      focusedAction.current = nextAction;
      nextItemArrowKey.current = nextItemArrowKeyCurrent;
    }
  };
  React.useEffect(() => {
    // actions were closed while navigation state was not reset
    if (!open) {
      focusedAction.current = 0;
      nextItemArrowKey.current = undefined;
    }
  }, [open]);
  const handleClose = event => {
    if (event.type === 'mouseleave' && onMouseLeave) {
      onMouseLeave(event);
    }
    if (event.type === 'blur' && onBlur) {
      onBlur(event);
    }
    clearTimeout(eventTimer.current);
    if (event.type === 'blur') {
      eventTimer.current = setTimeout(() => {
        setOpenState(false);
        if (onClose) {
          onClose(event, 'blur');
        }
      });
    } else {
      setOpenState(false);
      if (onClose) {
        onClose(event, 'mouseLeave');
      }
    }
  };
  const handleClick = event => {
    if (FabProps.onClick) {
      FabProps.onClick(event);
    }
    clearTimeout(eventTimer.current);
    if (open) {
      setOpenState(false);
      if (onClose) {
        onClose(event, 'toggle');
      }
    } else {
      setOpenState(true);
      if (onOpen) {
        onOpen(event, 'toggle');
      }
    }
  };
  const handleOpen = event => {
    if (event.type === 'mouseenter' && onMouseEnter) {
      onMouseEnter(event);
    }
    if (event.type === 'focus' && onFocus) {
      onFocus(event);
    }

    // When moving the focus between two items,
    // a chain if blur and focus event is triggered.
    // We only handle the last event.
    clearTimeout(eventTimer.current);
    if (!open) {
      // Wait for a future focus or click event
      eventTimer.current = setTimeout(() => {
        setOpenState(true);
        if (onOpen) {
          const eventMap = {
            focus: 'focus',
            mouseenter: 'mouseEnter'
          };
          onOpen(event, eventMap[event.type]);
        }
      });
    }
  };

  // Filter the label for valid id characters.
  const id = ariaLabel.replace(/^[^a-z]+|[^\w:.-]+/gi, '');
  const allItems = React.Children.toArray(childrenProp).filter(child => {
    if (process.env.NODE_ENV !== 'production') {
      if ((0, _reactIs.isFragment)(child)) {
        console.error(["MUI: The SpeedDial component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
      }
    }
    return /*#__PURE__*/React.isValidElement(child);
  });
  const children = allItems.map((child, index) => {
    const _child$props = child.props,
      {
        FabProps: {
          ref: origButtonRef
        } = {},
        tooltipPlacement: tooltipPlacementProp
      } = _child$props,
      ChildFabProps = (0, _objectWithoutPropertiesLoose2.default)(_child$props.FabProps, _excluded3);
    const tooltipPlacement = tooltipPlacementProp || (getOrientation(direction) === 'vertical' ? 'left' : 'top');
    return /*#__PURE__*/React.cloneElement(child, {
      FabProps: (0, _extends2.default)({}, ChildFabProps, {
        ref: createHandleSpeedDialActionButtonRef(index, origButtonRef)
      }),
      delay: 30 * (open ? index : allItems.length - index),
      open,
      tooltipPlacement,
      id: `${id}-action-${index}`
    });
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(SpeedDialRoot, (0, _extends2.default)({
    className: (0, _clsx.default)(classes.root, className),
    ref: ref,
    role: "presentation",
    onKeyDown: handleKeyDown,
    onBlur: handleClose,
    onFocus: handleOpen,
    onMouseEnter: handleOpen,
    onMouseLeave: handleClose,
    ownerState: ownerState
  }, other, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(TransitionComponent, (0, _extends2.default)({
      in: !hidden,
      timeout: transitionDuration,
      unmountOnExit: true
    }, TransitionProps, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(SpeedDialFab, (0, _extends2.default)({
        color: "primary",
        "aria-label": ariaLabel,
        "aria-haspopup": "true",
        "aria-expanded": open,
        "aria-controls": `${id}-actions`
      }, FabProps, {
        onClick: handleClick,
        className: (0, _clsx.default)(classes.fab, FabProps.className),
        ref: handleFabRef,
        ownerState: ownerState,
        children: /*#__PURE__*/React.isValidElement(icon) && (0, _isMuiElement.default)(icon, ['SpeedDialIcon']) ? /*#__PURE__*/React.cloneElement(icon, {
          open
        }) : icon
      }))
    })), /*#__PURE__*/(0, _jsxRuntime.jsx)(SpeedDialActions, {
      id: `${id}-actions`,
      role: "menu",
      "aria-orientation": getOrientation(direction),
      className: (0, _clsx.default)(classes.actions, !open && classes.actionsClosed),
      ownerState: ownerState,
      children: children
    })]
  }));
});
process.env.NODE_ENV !== "production" ? SpeedDial.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The aria-label of the button element.
   * Also used to provide the `id` for the `SpeedDial` element and its children.
   */
  ariaLabel: _propTypes.default.string.isRequired,
  /**
   * SpeedDialActions to display when the SpeedDial is `open`.
   */
  children: _propTypes.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,
  /**
   * @ignore
   */
  className: _propTypes.default.string,
  /**
   * The direction the actions open relative to the floating action button.
   * @default 'up'
   */
  direction: _propTypes.default.oneOf(['down', 'left', 'right', 'up']),
  /**
   * Props applied to the [`Fab`](/material-ui/api/fab/) element.
   * @default {}
   */
  FabProps: _propTypes.default.object,
  /**
   * If `true`, the SpeedDial is hidden.
   * @default false
   */
  hidden: _propTypes.default.bool,
  /**
   * The icon to display in the SpeedDial Fab. The `SpeedDialIcon` component
   * provides a default Icon with animation.
   */
  icon: _propTypes.default.node,
  /**
   * @ignore
   */
  onBlur: _propTypes.default.func,
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"toggle"`, `"blur"`, `"mouseLeave"`, `"escapeKeyDown"`.
   */
  onClose: _propTypes.default.func,
  /**
   * @ignore
   */
  onFocus: _propTypes.default.func,
  /**
   * @ignore
   */
  onKeyDown: _propTypes.default.func,
  /**
   * @ignore
   */
  onMouseEnter: _propTypes.default.func,
  /**
   * @ignore
   */
  onMouseLeave: _propTypes.default.func,
  /**
   * Callback fired when the component requests to be open.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"toggle"`, `"focus"`, `"mouseEnter"`.
   */
  onOpen: _propTypes.default.func,
  /**
   * If `true`, the component is shown.
   */
  open: _propTypes.default.bool,
  /**
   * The icon to display in the SpeedDial Fab when the SpeedDial is open.
   */
  openIcon: _propTypes.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Zoom
   */
  TransitionComponent: _propTypes.default.elementType,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  transitionDuration: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
    appear: _propTypes.default.number,
    enter: _propTypes.default.number,
    exit: _propTypes.default.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
   */
  TransitionProps: _propTypes.default.object
} : void 0;
var _default = SpeedDial;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiIsIl9leHRlbmRzMiIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcmVhY3RJcyIsIl9wcm9wVHlwZXMiLCJfY2xzeCIsIl9iYXNlIiwiX3N0eWxlZCIsIl91c2VUaGVtZVByb3BzIiwiX3VzZVRoZW1lIiwiX1pvb20iLCJfRmFiIiwiX2NhcGl0YWxpemUiLCJfaXNNdWlFbGVtZW50IiwiX3VzZUZvcmtSZWYiLCJfdXNlQ29udHJvbGxlZCIsIl9zcGVlZERpYWxDbGFzc2VzIiwiX2pzeFJ1bnRpbWUiLCJfZXhjbHVkZWQiLCJfZXhjbHVkZWQyIiwiX2V4Y2x1ZGVkMyIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJ1c2VVdGlsaXR5Q2xhc3NlcyIsIm93bmVyU3RhdGUiLCJjbGFzc2VzIiwib3BlbiIsImRpcmVjdGlvbiIsInNsb3RzIiwicm9vdCIsImZhYiIsImFjdGlvbnMiLCJ1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyIsImdldFNwZWVkRGlhbFV0aWxpdHlDbGFzcyIsImdldE9yaWVudGF0aW9uIiwidW5kZWZpbmVkIiwiY2xhbXAiLCJtaW4iLCJtYXgiLCJkaWFsUmFkaXVzIiwic3BhY2luZ0FjdGlvbnMiLCJTcGVlZERpYWxSb290IiwibmFtZSIsInNsb3QiLCJvdmVycmlkZXNSZXNvbHZlciIsInByb3BzIiwic3R5bGVzIiwidGhlbWUiLCJ6SW5kZXgiLCJ2YXJzIiwic3BlZWREaWFsIiwiZGlzcGxheSIsImFsaWduSXRlbXMiLCJwb2ludGVyRXZlbnRzIiwiZmxleERpcmVjdGlvbiIsIm1hcmdpbkJvdHRvbSIsInBhZGRpbmdCb3R0b20iLCJtYXJnaW5Ub3AiLCJwYWRkaW5nVG9wIiwibWFyZ2luUmlnaHQiLCJwYWRkaW5nUmlnaHQiLCJtYXJnaW5MZWZ0IiwicGFkZGluZ0xlZnQiLCJTcGVlZERpYWxGYWIiLCJTcGVlZERpYWxBY3Rpb25zIiwiYWN0aW9uc0Nsb3NlZCIsInRyYW5zaXRpb24iLCJTcGVlZERpYWwiLCJmb3J3YXJkUmVmIiwiaW5Qcm9wcyIsInJlZiIsImRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24iLCJlbnRlciIsInRyYW5zaXRpb25zIiwiZHVyYXRpb24iLCJlbnRlcmluZ1NjcmVlbiIsImV4aXQiLCJsZWF2aW5nU2NyZWVuIiwiYXJpYUxhYmVsIiwiRmFiUHJvcHMiLCJvcmlnRGlhbEJ1dHRvblJlZiIsImNoaWxkcmVuIiwiY2hpbGRyZW5Qcm9wIiwiY2xhc3NOYW1lIiwiaGlkZGVuIiwiaWNvbiIsIm9uQmx1ciIsIm9uQ2xvc2UiLCJvbkZvY3VzIiwib25LZXlEb3duIiwib25Nb3VzZUVudGVyIiwib25Nb3VzZUxlYXZlIiwib25PcGVuIiwib3BlblByb3AiLCJUcmFuc2l0aW9uQ29tcG9uZW50IiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiVHJhbnNpdGlvblByb3BzIiwib3RoZXIiLCJzZXRPcGVuU3RhdGUiLCJjb250cm9sbGVkIiwic3RhdGUiLCJldmVudFRpbWVyIiwidXNlUmVmIiwidXNlRWZmZWN0IiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudCIsImZvY3VzZWRBY3Rpb24iLCJuZXh0SXRlbUFycm93S2V5IiwiaGFuZGxlT3duRmFiUmVmIiwidXNlQ2FsbGJhY2siLCJmYWJGZWYiLCJoYW5kbGVGYWJSZWYiLCJjcmVhdGVIYW5kbGVTcGVlZERpYWxBY3Rpb25CdXR0b25SZWYiLCJkaWFsQWN0aW9uSW5kZXgiLCJvcmlnQnV0dG9uUmVmIiwiYnV0dG9uUmVmIiwiaGFuZGxlS2V5RG93biIsImV2ZW50IiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwibmV4dEl0ZW1BcnJvd0tleUN1cnJlbnQiLCJmb2N1cyIsInByZXZlbnREZWZhdWx0IiwiYWN0aW9uU3RlcCIsIm5leHRBY3Rpb24iLCJsZW5ndGgiLCJoYW5kbGVDbG9zZSIsInR5cGUiLCJzZXRUaW1lb3V0IiwiaGFuZGxlQ2xpY2siLCJvbkNsaWNrIiwiaGFuZGxlT3BlbiIsImV2ZW50TWFwIiwibW91c2VlbnRlciIsImlkIiwiYWxsSXRlbXMiLCJDaGlsZHJlbiIsInRvQXJyYXkiLCJmaWx0ZXIiLCJjaGlsZCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImlzRnJhZ21lbnQiLCJjb25zb2xlIiwiZXJyb3IiLCJqb2luIiwiaXNWYWxpZEVsZW1lbnQiLCJtYXAiLCJpbmRleCIsIl9jaGlsZCRwcm9wcyIsInRvb2x0aXBQbGFjZW1lbnQiLCJ0b29sdGlwUGxhY2VtZW50UHJvcCIsIkNoaWxkRmFiUHJvcHMiLCJjbG9uZUVsZW1lbnQiLCJkZWxheSIsImpzeHMiLCJyb2xlIiwianN4IiwiaW4iLCJ0aW1lb3V0IiwidW5tb3VudE9uRXhpdCIsImNvbG9yIiwicHJvcFR5cGVzIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsIm5vZGUiLCJvYmplY3QiLCJvbmVPZiIsImJvb2wiLCJmdW5jIiwib3Blbkljb24iLCJzeCIsIm9uZU9mVHlwZSIsImFycmF5T2YiLCJlbGVtZW50VHlwZSIsIm51bWJlciIsInNoYXBlIiwiYXBwZWFyIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJTcGVlZERpYWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9yZWFjdElzID0gcmVxdWlyZShcInJlYWN0LWlzXCIpO1xudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcbnZhciBfY2xzeCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsc3hcIikpO1xudmFyIF9iYXNlID0gcmVxdWlyZShcIkBtdWkvYmFzZVwiKTtcbnZhciBfc3R5bGVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3N0eWxlZFwiKSk7XG52YXIgX3VzZVRoZW1lUHJvcHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvdXNlVGhlbWVQcm9wc1wiKSk7XG52YXIgX3VzZVRoZW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3VzZVRoZW1lXCIpKTtcbnZhciBfWm9vbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1pvb21cIikpO1xudmFyIF9GYWIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9GYWJcIikpO1xudmFyIF9jYXBpdGFsaXplID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvY2FwaXRhbGl6ZVwiKSk7XG52YXIgX2lzTXVpRWxlbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2lzTXVpRWxlbWVudFwiKSk7XG52YXIgX3VzZUZvcmtSZWYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy91c2VGb3JrUmVmXCIpKTtcbnZhciBfdXNlQ29udHJvbGxlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3VzZUNvbnRyb2xsZWRcIikpO1xudmFyIF9zcGVlZERpYWxDbGFzc2VzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vc3BlZWREaWFsQ2xhc3Nlc1wiKSk7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJyZWZcIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJhcmlhTGFiZWxcIiwgXCJGYWJQcm9wc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlyZWN0aW9uXCIsIFwiaGlkZGVuXCIsIFwiaWNvblwiLCBcIm9uQmx1clwiLCBcIm9uQ2xvc2VcIiwgXCJvbkZvY3VzXCIsIFwib25LZXlEb3duXCIsIFwib25Nb3VzZUVudGVyXCIsIFwib25Nb3VzZUxlYXZlXCIsIFwib25PcGVuXCIsIFwib3BlblwiLCBcIm9wZW5JY29uXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcIlRyYW5zaXRpb25Qcm9wc1wiXSxcbiAgX2V4Y2x1ZGVkMyA9IFtcInJlZlwiXTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZUJhYmVsSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAobm9kZUludGVyb3ApIHsgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wOyB9KShub2RlSW50ZXJvcCk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHsgaWYgKCFub2RlSW50ZXJvcCAmJiBvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgb3BlbixcbiAgICBkaXJlY3Rpb25cbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGBkaXJlY3Rpb24keygwLCBfY2FwaXRhbGl6ZS5kZWZhdWx0KShkaXJlY3Rpb24pfWBdLFxuICAgIGZhYjogWydmYWInXSxcbiAgICBhY3Rpb25zOiBbJ2FjdGlvbnMnLCAhb3BlbiAmJiAnYWN0aW9uc0Nsb3NlZCddXG4gIH07XG4gIHJldHVybiAoMCwgX2Jhc2UudW5zdGFibGVfY29tcG9zZUNsYXNzZXMpKHNsb3RzLCBfc3BlZWREaWFsQ2xhc3Nlcy5nZXRTcGVlZERpYWxVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmZ1bmN0aW9uIGdldE9yaWVudGF0aW9uKGRpcmVjdGlvbikge1xuICBpZiAoZGlyZWN0aW9uID09PSAndXAnIHx8IGRpcmVjdGlvbiA9PT0gJ2Rvd24nKSB7XG4gICAgcmV0dXJuICd2ZXJ0aWNhbCc7XG4gIH1cbiAgaWYgKGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JyB8fCBkaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xuICAgIHJldHVybiAnaG9yaXpvbnRhbCc7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGNsYW1wKHZhbHVlLCBtaW4sIG1heCkge1xuICBpZiAodmFsdWUgPCBtaW4pIHtcbiAgICByZXR1cm4gbWluO1xuICB9XG4gIGlmICh2YWx1ZSA+IG1heCkge1xuICAgIHJldHVybiBtYXg7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuY29uc3QgZGlhbFJhZGl1cyA9IDMyO1xuY29uc3Qgc3BhY2luZ0FjdGlvbnMgPSAxNjtcbmNvbnN0IFNwZWVkRGlhbFJvb3QgPSAoMCwgX3N0eWxlZC5kZWZhdWx0KSgnZGl2Jywge1xuICBuYW1lOiAnTXVpU3BlZWREaWFsJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tgZGlyZWN0aW9uJHsoMCwgX2NhcGl0YWxpemUuZGVmYXVsdCkob3duZXJTdGF0ZS5kaXJlY3Rpb24pfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICB6SW5kZXg6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS56SW5kZXguc3BlZWREaWFsLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbn0sIG93bmVyU3RhdGUuZGlyZWN0aW9uID09PSAndXAnICYmIHtcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbi1yZXZlcnNlJyxcbiAgW2AmIC4ke19zcGVlZERpYWxDbGFzc2VzLmRlZmF1bHQuYWN0aW9uc31gXToge1xuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4tcmV2ZXJzZScsXG4gICAgbWFyZ2luQm90dG9tOiAtZGlhbFJhZGl1cyxcbiAgICBwYWRkaW5nQm90dG9tOiBzcGFjaW5nQWN0aW9ucyArIGRpYWxSYWRpdXNcbiAgfVxufSwgb3duZXJTdGF0ZS5kaXJlY3Rpb24gPT09ICdkb3duJyAmJiB7XG4gIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICBbYCYgLiR7X3NwZWVkRGlhbENsYXNzZXMuZGVmYXVsdC5hY3Rpb25zfWBdOiB7XG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgbWFyZ2luVG9wOiAtZGlhbFJhZGl1cyxcbiAgICBwYWRkaW5nVG9wOiBzcGFjaW5nQWN0aW9ucyArIGRpYWxSYWRpdXNcbiAgfVxufSwgb3duZXJTdGF0ZS5kaXJlY3Rpb24gPT09ICdsZWZ0JyAmJiB7XG4gIGZsZXhEaXJlY3Rpb246ICdyb3ctcmV2ZXJzZScsXG4gIFtgJiAuJHtfc3BlZWREaWFsQ2xhc3Nlcy5kZWZhdWx0LmFjdGlvbnN9YF06IHtcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93LXJldmVyc2UnLFxuICAgIG1hcmdpblJpZ2h0OiAtZGlhbFJhZGl1cyxcbiAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmdBY3Rpb25zICsgZGlhbFJhZGl1c1xuICB9XG59LCBvd25lclN0YXRlLmRpcmVjdGlvbiA9PT0gJ3JpZ2h0JyAmJiB7XG4gIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICBbYCYgLiR7X3NwZWVkRGlhbENsYXNzZXMuZGVmYXVsdC5hY3Rpb25zfWBdOiB7XG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgbWFyZ2luTGVmdDogLWRpYWxSYWRpdXMsXG4gICAgcGFkZGluZ0xlZnQ6IHNwYWNpbmdBY3Rpb25zICsgZGlhbFJhZGl1c1xuICB9XG59KSk7XG5jb25zdCBTcGVlZERpYWxGYWIgPSAoMCwgX3N0eWxlZC5kZWZhdWx0KShfRmFiLmRlZmF1bHQsIHtcbiAgbmFtZTogJ011aVNwZWVkRGlhbCcsXG4gIHNsb3Q6ICdGYWInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5mYWJcbn0pKCgpID0+ICh7XG4gIHBvaW50ZXJFdmVudHM6ICdhdXRvJ1xufSkpO1xuY29uc3QgU3BlZWREaWFsQWN0aW9ucyA9ICgwLCBfc3R5bGVkLmRlZmF1bHQpKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlTcGVlZERpYWwnLFxuICBzbG90OiAnQWN0aW9ucycsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuYWN0aW9ucywgIW93bmVyU3RhdGUub3BlbiAmJiBzdHlsZXMuYWN0aW9uc0Nsb3NlZF07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIHBvaW50ZXJFdmVudHM6ICdhdXRvJ1xufSwgIW93bmVyU3RhdGUub3BlbiAmJiB7XG4gIHRyYW5zaXRpb246ICd0b3AgMHMgbGluZWFyIDAuMnMnLFxuICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbn0pKTtcbmNvbnN0IFNwZWVkRGlhbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNwZWVkRGlhbChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSAoMCwgX3VzZVRoZW1lUHJvcHMuZGVmYXVsdCkoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlTcGVlZERpYWwnXG4gIH0pO1xuICBjb25zdCB0aGVtZSA9ICgwLCBfdXNlVGhlbWUuZGVmYXVsdCkoKTtcbiAgY29uc3QgZGVmYXVsdFRyYW5zaXRpb25EdXJhdGlvbiA9IHtcbiAgICBlbnRlcjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAgZXhpdDogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24ubGVhdmluZ1NjcmVlblxuICB9O1xuICBjb25zdCB7XG4gICAgICBhcmlhTGFiZWwsXG4gICAgICBGYWJQcm9wczoge1xuICAgICAgICByZWY6IG9yaWdEaWFsQnV0dG9uUmVmXG4gICAgICB9ID0ge30sXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5Qcm9wLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZGlyZWN0aW9uID0gJ3VwJyxcbiAgICAgIGhpZGRlbiA9IGZhbHNlLFxuICAgICAgaWNvbixcbiAgICAgIG9uQmx1cixcbiAgICAgIG9uQ2xvc2UsXG4gICAgICBvbkZvY3VzLFxuICAgICAgb25LZXlEb3duLFxuICAgICAgb25Nb3VzZUVudGVyLFxuICAgICAgb25Nb3VzZUxlYXZlLFxuICAgICAgb25PcGVuLFxuICAgICAgb3Blbjogb3BlblByb3AsXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gX1pvb20uZGVmYXVsdCxcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IGRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICBUcmFuc2l0aW9uUHJvcHNcbiAgICB9ID0gcHJvcHMsXG4gICAgRmFiUHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKHByb3BzLkZhYlByb3BzLCBfZXhjbHVkZWQpLFxuICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShwcm9wcywgX2V4Y2x1ZGVkMik7XG4gIGNvbnN0IFtvcGVuLCBzZXRPcGVuU3RhdGVdID0gKDAsIF91c2VDb250cm9sbGVkLmRlZmF1bHQpKHtcbiAgICBjb250cm9sbGVkOiBvcGVuUHJvcCxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICBuYW1lOiAnU3BlZWREaWFsJyxcbiAgICBzdGF0ZTogJ29wZW4nXG4gIH0pO1xuICBjb25zdCBvd25lclN0YXRlID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICBvcGVuLFxuICAgIGRpcmVjdGlvblxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBldmVudFRpbWVyID0gUmVhY3QudXNlUmVmKCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNsZWFyVGltZW91dChldmVudFRpbWVyLmN1cnJlbnQpO1xuICAgIH07XG4gIH0sIFtdKTtcblxuICAvKipcbiAgICogYW4gaW5kZXggaW4gYWN0aW9ucy5jdXJyZW50XG4gICAqL1xuICBjb25zdCBmb2N1c2VkQWN0aW9uID0gUmVhY3QudXNlUmVmKDApO1xuXG4gIC8qKlxuICAgKiBwcmVzc2luZyB0aGlzIGtleSB3aGlsZSB0aGUgZm9jdXMgaXMgb24gYSBjaGlsZCBTcGVlZERpYWxBY3Rpb24gZm9jdXNlc1xuICAgKiB0aGUgbmV4dCBTcGVlZERpYWxBY3Rpb24uXG4gICAqIEl0IGlzIGVxdWFsIHRvIHRoZSBmaXJzdCBhcnJvdyBrZXkgcHJlc3NlZCB3aGlsZSBmb2N1cyBpcyBvbiB0aGUgU3BlZWREaWFsXG4gICAqIHRoYXQgaXMgbm90IG9ydGhvZ29uYWwgdG8gdGhlIGRpcmVjdGlvbi5cbiAgICogQHR5cGUge3V0aWxzLkFycm93S2V5P31cbiAgICovXG4gIGNvbnN0IG5leHRJdGVtQXJyb3dLZXkgPSBSZWFjdC51c2VSZWYoKTtcblxuICAvKipcbiAgICogcmVmcyB0byB0aGUgQnV0dG9uIHRoYXQgaGF2ZSBhbiBhY3Rpb24gYXNzb2NpYXRlZCB0byB0aGVtIGluIHRoaXMgU3BlZWREaWFsXG4gICAqIFtGYWIsIC4uLihTcGVlZERpYWxBY3Rpb25zID4gQnV0dG9uKV1cbiAgICogQHR5cGUge0hUTUxCdXR0b25FbGVtZW50W119XG4gICAqL1xuICBjb25zdCBhY3Rpb25zID0gUmVhY3QudXNlUmVmKFtdKTtcbiAgYWN0aW9ucy5jdXJyZW50ID0gW2FjdGlvbnMuY3VycmVudFswXV07XG4gIGNvbnN0IGhhbmRsZU93bkZhYlJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZhYkZlZiA9PiB7XG4gICAgYWN0aW9ucy5jdXJyZW50WzBdID0gZmFiRmVmO1xuICB9LCBbXSk7XG4gIGNvbnN0IGhhbmRsZUZhYlJlZiA9ICgwLCBfdXNlRm9ya1JlZi5kZWZhdWx0KShvcmlnRGlhbEJ1dHRvblJlZiwgaGFuZGxlT3duRmFiUmVmKTtcblxuICAvKipcbiAgICogY3JlYXRlcyBhIHJlZiBjYWxsYmFjayBmb3IgdGhlIEJ1dHRvbiBpbiBhIFNwZWVkRGlhbEFjdGlvblxuICAgKiBJcyBjYWxsZWQgYmVmb3JlIHRoZSBvcmlnaW5hbCByZWYgY2FsbGJhY2sgZm9yIEJ1dHRvbiB0aGF0IHdhcyBzZXQgaW4gYnV0dG9uUHJvcHNcbiAgICpcbiAgICogQHBhcmFtIGRpYWxBY3Rpb25JbmRleCB7bnVtYmVyfVxuICAgKiBAcGFyYW0gb3JpZ0J1dHRvblJlZiB7UmVhY3QuUmVmT2JqZWN0P31cbiAgICovXG4gIGNvbnN0IGNyZWF0ZUhhbmRsZVNwZWVkRGlhbEFjdGlvbkJ1dHRvblJlZiA9IChkaWFsQWN0aW9uSW5kZXgsIG9yaWdCdXR0b25SZWYpID0+IHtcbiAgICByZXR1cm4gYnV0dG9uUmVmID0+IHtcbiAgICAgIGFjdGlvbnMuY3VycmVudFtkaWFsQWN0aW9uSW5kZXggKyAxXSA9IGJ1dHRvblJlZjtcbiAgICAgIGlmIChvcmlnQnV0dG9uUmVmKSB7XG4gICAgICAgIG9yaWdCdXR0b25SZWYoYnV0dG9uUmVmKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICBjb25zdCBoYW5kbGVLZXlEb3duID0gZXZlbnQgPT4ge1xuICAgIGlmIChvbktleURvd24pIHtcbiAgICAgIG9uS2V5RG93bihldmVudCk7XG4gICAgfVxuICAgIGNvbnN0IGtleSA9IGV2ZW50LmtleS5yZXBsYWNlKCdBcnJvdycsICcnKS50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IHtcbiAgICAgIGN1cnJlbnQ6IG5leHRJdGVtQXJyb3dLZXlDdXJyZW50ID0ga2V5XG4gICAgfSA9IG5leHRJdGVtQXJyb3dLZXk7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VzY2FwZScpIHtcbiAgICAgIHNldE9wZW5TdGF0ZShmYWxzZSk7XG4gICAgICBhY3Rpb25zLmN1cnJlbnRbMF0uZm9jdXMoKTtcbiAgICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICAgIG9uQ2xvc2UoZXZlbnQsICdlc2NhcGVLZXlEb3duJyk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChnZXRPcmllbnRhdGlvbihrZXkpID09PSBnZXRPcmllbnRhdGlvbihuZXh0SXRlbUFycm93S2V5Q3VycmVudCkgJiYgZ2V0T3JpZW50YXRpb24oa2V5KSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY29uc3QgYWN0aW9uU3RlcCA9IGtleSA9PT0gbmV4dEl0ZW1BcnJvd0tleUN1cnJlbnQgPyAxIDogLTE7XG5cbiAgICAgIC8vIHN0YXkgd2l0aGluIGFycmF5IGluZGljZXNcbiAgICAgIGNvbnN0IG5leHRBY3Rpb24gPSBjbGFtcChmb2N1c2VkQWN0aW9uLmN1cnJlbnQgKyBhY3Rpb25TdGVwLCAwLCBhY3Rpb25zLmN1cnJlbnQubGVuZ3RoIC0gMSk7XG4gICAgICBhY3Rpb25zLmN1cnJlbnRbbmV4dEFjdGlvbl0uZm9jdXMoKTtcbiAgICAgIGZvY3VzZWRBY3Rpb24uY3VycmVudCA9IG5leHRBY3Rpb247XG4gICAgICBuZXh0SXRlbUFycm93S2V5LmN1cnJlbnQgPSBuZXh0SXRlbUFycm93S2V5Q3VycmVudDtcbiAgICB9XG4gIH07XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gYWN0aW9ucyB3ZXJlIGNsb3NlZCB3aGlsZSBuYXZpZ2F0aW9uIHN0YXRlIHdhcyBub3QgcmVzZXRcbiAgICBpZiAoIW9wZW4pIHtcbiAgICAgIGZvY3VzZWRBY3Rpb24uY3VycmVudCA9IDA7XG4gICAgICBuZXh0SXRlbUFycm93S2V5LmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9LCBbb3Blbl0pO1xuICBjb25zdCBoYW5kbGVDbG9zZSA9IGV2ZW50ID0+IHtcbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ21vdXNlbGVhdmUnICYmIG9uTW91c2VMZWF2ZSkge1xuICAgICAgb25Nb3VzZUxlYXZlKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdibHVyJyAmJiBvbkJsdXIpIHtcbiAgICAgIG9uQmx1cihldmVudCk7XG4gICAgfVxuICAgIGNsZWFyVGltZW91dChldmVudFRpbWVyLmN1cnJlbnQpO1xuICAgIGlmIChldmVudC50eXBlID09PSAnYmx1cicpIHtcbiAgICAgIGV2ZW50VGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzZXRPcGVuU3RhdGUoZmFsc2UpO1xuICAgICAgICBpZiAob25DbG9zZSkge1xuICAgICAgICAgIG9uQ2xvc2UoZXZlbnQsICdibHVyJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRPcGVuU3RhdGUoZmFsc2UpO1xuICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgb25DbG9zZShldmVudCwgJ21vdXNlTGVhdmUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gZXZlbnQgPT4ge1xuICAgIGlmIChGYWJQcm9wcy5vbkNsaWNrKSB7XG4gICAgICBGYWJQcm9wcy5vbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gICAgY2xlYXJUaW1lb3V0KGV2ZW50VGltZXIuY3VycmVudCk7XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIHNldE9wZW5TdGF0ZShmYWxzZSk7XG4gICAgICBpZiAob25DbG9zZSkge1xuICAgICAgICBvbkNsb3NlKGV2ZW50LCAndG9nZ2xlJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldE9wZW5TdGF0ZSh0cnVlKTtcbiAgICAgIGlmIChvbk9wZW4pIHtcbiAgICAgICAgb25PcGVuKGV2ZW50LCAndG9nZ2xlJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVPcGVuID0gZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC50eXBlID09PSAnbW91c2VlbnRlcicgJiYgb25Nb3VzZUVudGVyKSB7XG4gICAgICBvbk1vdXNlRW50ZXIoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2ZvY3VzJyAmJiBvbkZvY3VzKSB7XG4gICAgICBvbkZvY3VzKGV2ZW50KTtcbiAgICB9XG5cbiAgICAvLyBXaGVuIG1vdmluZyB0aGUgZm9jdXMgYmV0d2VlbiB0d28gaXRlbXMsXG4gICAgLy8gYSBjaGFpbiBpZiBibHVyIGFuZCBmb2N1cyBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgLy8gV2Ugb25seSBoYW5kbGUgdGhlIGxhc3QgZXZlbnQuXG4gICAgY2xlYXJUaW1lb3V0KGV2ZW50VGltZXIuY3VycmVudCk7XG4gICAgaWYgKCFvcGVuKSB7XG4gICAgICAvLyBXYWl0IGZvciBhIGZ1dHVyZSBmb2N1cyBvciBjbGljayBldmVudFxuICAgICAgZXZlbnRUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNldE9wZW5TdGF0ZSh0cnVlKTtcbiAgICAgICAgaWYgKG9uT3Blbikge1xuICAgICAgICAgIGNvbnN0IGV2ZW50TWFwID0ge1xuICAgICAgICAgICAgZm9jdXM6ICdmb2N1cycsXG4gICAgICAgICAgICBtb3VzZWVudGVyOiAnbW91c2VFbnRlcidcbiAgICAgICAgICB9O1xuICAgICAgICAgIG9uT3BlbihldmVudCwgZXZlbnRNYXBbZXZlbnQudHlwZV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRmlsdGVyIHRoZSBsYWJlbCBmb3IgdmFsaWQgaWQgY2hhcmFjdGVycy5cbiAgY29uc3QgaWQgPSBhcmlhTGFiZWwucmVwbGFjZSgvXlteYS16XSt8W15cXHc6Li1dKy9naSwgJycpO1xuICBjb25zdCBhbGxJdGVtcyA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW5Qcm9wKS5maWx0ZXIoY2hpbGQgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoKDAsIF9yZWFjdElzLmlzRnJhZ21lbnQpKGNoaWxkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1VSTogVGhlIFNwZWVkRGlhbCBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKTtcbiAgfSk7XG4gIGNvbnN0IGNoaWxkcmVuID0gYWxsSXRlbXMubWFwKChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBfY2hpbGQkcHJvcHMgPSBjaGlsZC5wcm9wcyxcbiAgICAgIHtcbiAgICAgICAgRmFiUHJvcHM6IHtcbiAgICAgICAgICByZWY6IG9yaWdCdXR0b25SZWZcbiAgICAgICAgfSA9IHt9LFxuICAgICAgICB0b29sdGlwUGxhY2VtZW50OiB0b29sdGlwUGxhY2VtZW50UHJvcFxuICAgICAgfSA9IF9jaGlsZCRwcm9wcyxcbiAgICAgIENoaWxkRmFiUHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKF9jaGlsZCRwcm9wcy5GYWJQcm9wcywgX2V4Y2x1ZGVkMyk7XG4gICAgY29uc3QgdG9vbHRpcFBsYWNlbWVudCA9IHRvb2x0aXBQbGFjZW1lbnRQcm9wIHx8IChnZXRPcmllbnRhdGlvbihkaXJlY3Rpb24pID09PSAndmVydGljYWwnID8gJ2xlZnQnIDogJ3RvcCcpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICBGYWJQcm9wczogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgQ2hpbGRGYWJQcm9wcywge1xuICAgICAgICByZWY6IGNyZWF0ZUhhbmRsZVNwZWVkRGlhbEFjdGlvbkJ1dHRvblJlZihpbmRleCwgb3JpZ0J1dHRvblJlZilcbiAgICAgIH0pLFxuICAgICAgZGVsYXk6IDMwICogKG9wZW4gPyBpbmRleCA6IGFsbEl0ZW1zLmxlbmd0aCAtIGluZGV4KSxcbiAgICAgIG9wZW4sXG4gICAgICB0b29sdGlwUGxhY2VtZW50LFxuICAgICAgaWQ6IGAke2lkfS1hY3Rpb24tJHtpbmRleH1gXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3hzKShTcGVlZERpYWxSb290LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xzeC5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgcm9sZTogXCJwcmVzZW50YXRpb25cIixcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25CbHVyOiBoYW5kbGVDbG9zZSxcbiAgICBvbkZvY3VzOiBoYW5kbGVPcGVuLFxuICAgIG9uTW91c2VFbnRlcjogaGFuZGxlT3BlbixcbiAgICBvbk1vdXNlTGVhdmU6IGhhbmRsZUNsb3NlLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShUcmFuc2l0aW9uQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGluOiAhaGlkZGVuLFxuICAgICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgdW5tb3VudE9uRXhpdDogdHJ1ZVxuICAgIH0sIFRyYW5zaXRpb25Qcm9wcywge1xuICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShTcGVlZERpYWxGYWIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBjb2xvcjogXCJwcmltYXJ5XCIsXG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiBhcmlhTGFiZWwsXG4gICAgICAgIFwiYXJpYS1oYXNwb3B1cFwiOiBcInRydWVcIixcbiAgICAgICAgXCJhcmlhLWV4cGFuZGVkXCI6IG9wZW4sXG4gICAgICAgIFwiYXJpYS1jb250cm9sc1wiOiBgJHtpZH0tYWN0aW9uc2BcbiAgICAgIH0sIEZhYlByb3BzLCB7XG4gICAgICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrLFxuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xzeC5kZWZhdWx0KShjbGFzc2VzLmZhYiwgRmFiUHJvcHMuY2xhc3NOYW1lKSxcbiAgICAgICAgcmVmOiBoYW5kbGVGYWJSZWYsXG4gICAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoaWNvbikgJiYgKDAsIF9pc011aUVsZW1lbnQuZGVmYXVsdCkoaWNvbiwgWydTcGVlZERpYWxJY29uJ10pID8gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChpY29uLCB7XG4gICAgICAgICAgb3BlblxuICAgICAgICB9KSA6IGljb25cbiAgICAgIH0pKVxuICAgIH0pKSwgLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFNwZWVkRGlhbEFjdGlvbnMsIHtcbiAgICAgIGlkOiBgJHtpZH0tYWN0aW9uc2AsXG4gICAgICByb2xlOiBcIm1lbnVcIixcbiAgICAgIFwiYXJpYS1vcmllbnRhdGlvblwiOiBnZXRPcmllbnRhdGlvbihkaXJlY3Rpb24pLFxuICAgICAgY2xhc3NOYW1lOiAoMCwgX2Nsc3guZGVmYXVsdCkoY2xhc3Nlcy5hY3Rpb25zLCAhb3BlbiAmJiBjbGFzc2VzLmFjdGlvbnNDbG9zZWQpLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNwZWVkRGlhbC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBUaGUgYXJpYS1sYWJlbCBvZiB0aGUgYnV0dG9uIGVsZW1lbnQuXG4gICAqIEFsc28gdXNlZCB0byBwcm92aWRlIHRoZSBgaWRgIGZvciB0aGUgYFNwZWVkRGlhbGAgZWxlbWVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgKi9cbiAgYXJpYUxhYmVsOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBTcGVlZERpYWxBY3Rpb25zIHRvIGRpc3BsYXkgd2hlbiB0aGUgU3BlZWREaWFsIGlzIGBvcGVuYC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgZGlyZWN0aW9uIHRoZSBhY3Rpb25zIG9wZW4gcmVsYXRpdmUgdG8gdGhlIGZsb2F0aW5nIGFjdGlvbiBidXR0b24uXG4gICAqIEBkZWZhdWx0ICd1cCdcbiAgICovXG4gIGRpcmVjdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZG93bicsICdsZWZ0JywgJ3JpZ2h0JywgJ3VwJ10pLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BGYWJgXSgvbWF0ZXJpYWwtdWkvYXBpL2ZhYi8pIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBGYWJQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIFNwZWVkRGlhbCBpcyBoaWRkZW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBoaWRkZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheSBpbiB0aGUgU3BlZWREaWFsIEZhYi4gVGhlIGBTcGVlZERpYWxJY29uYCBjb21wb25lbnRcbiAgICogcHJvdmlkZXMgYSBkZWZhdWx0IEljb24gd2l0aCBhbmltYXRpb24uXG4gICAqL1xuICBpY29uOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gQ2FuIGJlOiBgXCJ0b2dnbGVcImAsIGBcImJsdXJcImAsIGBcIm1vdXNlTGVhdmVcImAsIGBcImVzY2FwZUtleURvd25cImAuXG4gICAqL1xuICBvbkNsb3NlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VFbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlTGVhdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIG9wZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcInRvZ2dsZVwiYCwgYFwiZm9jdXNcImAsIGBcIm1vdXNlRW50ZXJcImAuXG4gICAqL1xuICBvbk9wZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKi9cbiAgb3BlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IGluIHRoZSBTcGVlZERpYWwgRmFiIHdoZW4gdGhlIFNwZWVkRGlhbCBpcyBvcGVuLlxuICAgKi9cbiAgb3Blbkljb246IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsIF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sXSkpLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICogW0ZvbGxvdyB0aGlzIGd1aWRlXSgvbWF0ZXJpYWwtdWkvdHJhbnNpdGlvbnMvI3RyYW5zaXRpb25jb21wb25lbnQtcHJvcCkgdG8gbGVhcm4gbW9yZSBhYm91dCB0aGUgcmVxdWlyZW1lbnRzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgWm9vbVxuICAgKi9cbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqIEBkZWZhdWx0IHtcbiAgICogICBlbnRlcjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAqICAgZXhpdDogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24ubGVhdmluZ1NjcmVlbixcbiAgICogfVxuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIGFwcGVhcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcbiAgICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcbiAgICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXG4gIH0pXSksXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSB0cmFuc2l0aW9uIGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBlbGVtZW50IGlzIGJhc2VkIG9uIHRoaXMgW2BUcmFuc2l0aW9uYF0oaHR0cDovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3RyYW5zaXRpb24vKSBjb21wb25lbnQuXG4gICAqL1xuICBUcmFuc2l0aW9uUHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3Rcbn0gOiB2b2lkIDA7XG52YXIgX2RlZmF1bHQgPSBTcGVlZERpYWw7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQztBQUNwRkMsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDeEIsSUFBSUMsOEJBQThCLEdBQUdQLHNCQUFzQixDQUFDQyxPQUFPLENBQUMscURBQXFELENBQUMsQ0FBQztBQUMzSCxJQUFJTyxTQUFTLEdBQUdSLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUNqRixJQUFJUSxLQUFLLEdBQUdDLHVCQUF1QixDQUFDVCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDckQsSUFBSVUsUUFBUSxHQUFHVixPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ2xDLElBQUlXLFVBQVUsR0FBR1osc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUM5RCxJ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