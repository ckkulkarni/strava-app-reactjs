31ded7714a2608132113e3262453a0e1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveClass = toHaveClass;
var _utils = require("./utils");
function getExpectedClassNamesAndOptions(params) {
  const lastParam = params.pop();
  let expectedClassNames, options;
  if (typeof lastParam === 'object') {
    expectedClassNames = params;
    options = lastParam;
  } else {
    expectedClassNames = params.concat(lastParam);
    options = {
      exact: false
    };
  }
  return {
    expectedClassNames,
    options
  };
}
function splitClassNames(str) {
  if (!str) {
    return [];
  }
  return str.split(/\s+/).filter(s => s.length > 0);
}
function isSubset(subset, superset) {
  return subset.every(item => superset.includes(item));
}
function toHaveClass(htmlElement, ...params) {
  (0, _utils.checkHtmlElement)(htmlElement, toHaveClass, this);
  const {
    expectedClassNames,
    options
  } = getExpectedClassNamesAndOptions(params);
  const received = splitClassNames(htmlElement.getAttribute('class'));
  const expected = expectedClassNames.reduce((acc, className) => acc.concat(splitClassNames(className)), []);
  if (options.exact) {
    return {
      pass: isSubset(expected, received) && expected.length === received.length,
      message: () => {
        const to = this.isNot ? 'not to' : 'to';
        return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveClass`, 'element', this.utils.printExpected(expected.join(' '))), `Expected the element ${to} have EXACTLY defined classes`, expected.join(' '), 'Received', received.join(' '));
      }
    };
  }
  return expected.length > 0 ? {
    pass: isSubset(expected, received),
    message: () => {
      const to = this.isNot ? 'not to' : 'to';
      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveClass`, 'element', this.utils.printExpected(expected.join(' '))), `Expected the element ${to} have class`, expected.join(' '), 'Received', received.join(' '));
    }
  } : {
    pass: this.isNot ? received.length > 0 : false,
    message: () => this.isNot ? (0, _utils.getMessage)(this, this.utils.matcherHint('.not.toHaveClass', 'element', ''), 'Expected the element to have classes', '(none)', 'Received', received.join(' ')) : [this.utils.matcherHint(`.toHaveClass`, 'element'), 'At least one expected class must be provided.'].join('\n')
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvSGF2ZUNsYXNzIiwiX3V0aWxzIiwicmVxdWlyZSIsImdldEV4cGVjdGVkQ2xhc3NOYW1lc0FuZE9wdGlvbnMiLCJwYXJhbXMiLCJsYXN0UGFyYW0iLCJwb3AiLCJleHBlY3RlZENsYXNzTmFtZXMiLCJvcHRpb25zIiwiY29uY2F0IiwiZXhhY3QiLCJzcGxpdENsYXNzTmFtZXMiLCJzdHIiLCJzcGxpdCIsImZpbHRlciIsInMiLCJsZW5ndGgiLCJpc1N1YnNldCIsInN1YnNldCIsInN1cGVyc2V0IiwiZXZlcnkiLCJpdGVtIiwiaW5jbHVkZXMiLCJodG1sRWxlbWVudCIsImNoZWNrSHRtbEVsZW1lbnQiLCJyZWNlaXZlZCIsImdldEF0dHJpYnV0ZSIsImV4cGVjdGVkIiwicmVkdWNlIiwiYWNjIiwiY2xhc3NOYW1lIiwicGFzcyIsIm1lc3NhZ2UiLCJ0byIsImlzTm90IiwiZ2V0TWVzc2FnZSIsInV0aWxzIiwibWF0Y2hlckhpbnQiLCJwcmludEV4cGVjdGVkIiwiam9pbiJdLCJzb3VyY2VzIjpbInRvLWhhdmUtY2xhc3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnRvSGF2ZUNsYXNzID0gdG9IYXZlQ2xhc3M7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxuZnVuY3Rpb24gZ2V0RXhwZWN0ZWRDbGFzc05hbWVzQW5kT3B0aW9ucyhwYXJhbXMpIHtcbiAgY29uc3QgbGFzdFBhcmFtID0gcGFyYW1zLnBvcCgpO1xuICBsZXQgZXhwZWN0ZWRDbGFzc05hbWVzLCBvcHRpb25zO1xuXG4gIGlmICh0eXBlb2YgbGFzdFBhcmFtID09PSAnb2JqZWN0Jykge1xuICAgIGV4cGVjdGVkQ2xhc3NOYW1lcyA9IHBhcmFtcztcbiAgICBvcHRpb25zID0gbGFzdFBhcmFtO1xuICB9IGVsc2Uge1xuICAgIGV4cGVjdGVkQ2xhc3NOYW1lcyA9IHBhcmFtcy5jb25jYXQobGFzdFBhcmFtKTtcbiAgICBvcHRpb25zID0ge1xuICAgICAgZXhhY3Q6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXhwZWN0ZWRDbGFzc05hbWVzLFxuICAgIG9wdGlvbnNcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3BsaXRDbGFzc05hbWVzKHN0cikge1xuICBpZiAoIXN0cikge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHJldHVybiBzdHIuc3BsaXQoL1xccysvKS5maWx0ZXIocyA9PiBzLmxlbmd0aCA+IDApO1xufVxuXG5mdW5jdGlvbiBpc1N1YnNldChzdWJzZXQsIHN1cGVyc2V0KSB7XG4gIHJldHVybiBzdWJzZXQuZXZlcnkoaXRlbSA9PiBzdXBlcnNldC5pbmNsdWRlcyhpdGVtKSk7XG59XG5cbmZ1bmN0aW9uIHRvSGF2ZUNsYXNzKGh0bWxFbGVtZW50LCAuLi5wYXJhbXMpIHtcbiAgKDAsIF91dGlscy5jaGVja0h0bWxFbGVtZW50KShodG1sRWxlbWVudCwgdG9IYXZlQ2xhc3MsIHRoaXMpO1xuICBjb25zdCB7XG4gICAgZXhwZWN0ZWRDbGFzc05hbWVzLFxuICAgIG9wdGlvbnNcbiAgfSA9IGdldEV4cGVjdGVkQ2xhc3NOYW1lc0FuZE9wdGlvbnMocGFyYW1zKTtcbiAgY29uc3QgcmVjZWl2ZWQgPSBzcGxpdENsYXNzTmFtZXMoaHRtbEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpKTtcbiAgY29uc3QgZXhwZWN0ZWQgPSBleHBlY3RlZENsYXNzTmFtZXMucmVkdWNlKChhY2MsIGNsYXNzTmFtZSkgPT4gYWNjLmNvbmNhdChzcGxpdENsYXNzTmFtZXMoY2xhc3NOYW1lKSksIFtdKTtcblxuICBpZiAob3B0aW9ucy5leGFjdCkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXNzOiBpc1N1YnNldChleHBlY3RlZCwgcmVjZWl2ZWQpICYmIGV4cGVjdGVkLmxlbmd0aCA9PT0gcmVjZWl2ZWQubGVuZ3RoLFxuICAgICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgICBjb25zdCB0byA9IHRoaXMuaXNOb3QgPyAnbm90IHRvJyA6ICd0byc7XG4gICAgICAgIHJldHVybiAoMCwgX3V0aWxzLmdldE1lc3NhZ2UpKHRoaXMsIHRoaXMudXRpbHMubWF0Y2hlckhpbnQoYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0hhdmVDbGFzc2AsICdlbGVtZW50JywgdGhpcy51dGlscy5wcmludEV4cGVjdGVkKGV4cGVjdGVkLmpvaW4oJyAnKSkpLCBgRXhwZWN0ZWQgdGhlIGVsZW1lbnQgJHt0b30gaGF2ZSBFWEFDVExZIGRlZmluZWQgY2xhc3Nlc2AsIGV4cGVjdGVkLmpvaW4oJyAnKSwgJ1JlY2VpdmVkJywgcmVjZWl2ZWQuam9pbignICcpKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGV4cGVjdGVkLmxlbmd0aCA+IDAgPyB7XG4gICAgcGFzczogaXNTdWJzZXQoZXhwZWN0ZWQsIHJlY2VpdmVkKSxcbiAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICBjb25zdCB0byA9IHRoaXMuaXNOb3QgPyAnbm90IHRvJyA6ICd0byc7XG4gICAgICByZXR1cm4gKDAsIF91dGlscy5nZXRNZXNzYWdlKSh0aGlzLCB0aGlzLnV0aWxzLm1hdGNoZXJIaW50KGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9IYXZlQ2xhc3NgLCAnZWxlbWVudCcsIHRoaXMudXRpbHMucHJpbnRFeHBlY3RlZChleHBlY3RlZC5qb2luKCcgJykpKSwgYEV4cGVjdGVkIHRoZSBlbGVtZW50ICR7dG99IGhhdmUgY2xhc3NgLCBleHBlY3RlZC5qb2luKCcgJyksICdSZWNlaXZlZCcsIHJlY2VpdmVkLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9IDoge1xuICAgIHBhc3M6IHRoaXMuaXNOb3QgPyByZWNlaXZlZC5sZW5ndGggPiAwIDogZmFsc2UsXG4gICAgbWVzc2FnZTogKCkgPT4gdGhpcy5pc05vdCA/ICgwLCBfdXRpbHMuZ2V0TWVzc2FnZSkodGhpcywgdGhpcy51dGlscy5tYXRjaGVySGludCgnLm5vdC50b0hhdmVDbGFzcycsICdlbGVtZW50JywgJycpLCAnRXhwZWN0ZWQgdGhlIGVsZW1lbnQgdG8gaGF2ZSBjbGFzc2VzJywgJyhub25lKScsICdSZWNlaXZlZCcsIHJlY2VpdmVkLmpvaW4oJyAnKSkgOiBbdGhpcy51dGlscy5tYXRjaGVySGludChgLnRvSGF2ZUNsYXNzYCwgJ2VsZW1lbnQnKSwgJ0F0IGxlYXN0IG9uZSBleHBlY3RlZCBjbGFzcyBtdXN0IGJlIHByb3ZpZGVkLiddLmpvaW4oJ1xcbicpXG4gIH07XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsV0FBVyxHQUFHQSxXQUFXO0FBRWpDLElBQUlDLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUUvQixTQUFTQywrQkFBK0JBLENBQUNDLE1BQU0sRUFBRTtFQUMvQyxNQUFNQyxTQUFTLEdBQUdELE1BQU0sQ0FBQ0UsR0FBRyxFQUFFO0VBQzlCLElBQUlDLGtCQUFrQixFQUFFQyxPQUFPO0VBRS9CLElBQUksT0FBT0gsU0FBUyxLQUFLLFFBQVEsRUFBRTtJQUNqQ0Usa0JBQWtCLEdBQUdILE1BQU07SUFDM0JJLE9BQU8sR0FBR0gsU0FBUztFQUNyQixDQUFDLE1BQU07SUFDTEUsa0JBQWtCLEdBQUdILE1BQU0sQ0FBQ0ssTUFBTSxDQUFDSixTQUFTLENBQUM7SUFDN0NHLE9BQU8sR0FBRztNQUNSRSxLQUFLLEVBQUU7SUFDVCxDQUFDO0VBQ0g7RUFFQSxPQUFPO0lBQ0xILGtCQUFrQjtJQUNsQkM7RUFDRixDQUFDO0FBQ0g7QUFFQSxTQUFTRyxlQUFl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