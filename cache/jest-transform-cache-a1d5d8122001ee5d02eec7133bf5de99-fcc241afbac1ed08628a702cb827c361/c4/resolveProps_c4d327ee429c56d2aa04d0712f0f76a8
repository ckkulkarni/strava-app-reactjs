8a4e2fd81c5d8356c50d04d0347ce01b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resolveProps;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
/**
 * Add keys, values of `defaultProps` that does not exist in `props`
 * @param {object} defaultProps
 * @param {object} props
 * @returns {object} resolved props
 */
function resolveProps(defaultProps, props) {
  const output = (0, _extends2.default)({}, props);
  Object.keys(defaultProps).forEach(propName => {
    if (propName.toString().match(/^(components|slots)$/)) {
      output[propName] = (0, _extends2.default)({}, defaultProps[propName], output[propName]);
    } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
      const defaultSlotProps = defaultProps[propName] || {};
      const slotProps = props[propName];
      output[propName] = {};
      if (!slotProps || !Object.keys(slotProps)) {
        // Reduce the iteration if the slot props is empty
        output[propName] = defaultSlotProps;
      } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
        // Reduce the iteration if the default slot props is empty
        output[propName] = slotProps;
      } else {
        output[propName] = (0, _extends2.default)({}, slotProps);
        Object.keys(defaultSlotProps).forEach(slotPropName => {
          output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
        });
      }
    } else if (output[propName] === undefined) {
      output[propName] = defaultProps[propName];
    }
  });
  return output;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsInJlc29sdmVQcm9wcyIsIl9leHRlbmRzMiIsImRlZmF1bHRQcm9wcyIsInByb3BzIiwib3V0cHV0Iiwia2V5cyIsImZvckVhY2giLCJwcm9wTmFtZSIsInRvU3RyaW5nIiwibWF0Y2giLCJkZWZhdWx0U2xvdFByb3BzIiwic2xvdFByb3BzIiwic2xvdFByb3BOYW1lIiwidW5kZWZpbmVkIl0sInNvdXJjZXMiOlsicmVzb2x2ZVByb3BzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSByZXNvbHZlUHJvcHM7XG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcbi8qKlxuICogQWRkIGtleXMsIHZhbHVlcyBvZiBgZGVmYXVsdFByb3BzYCB0aGF0IGRvZXMgbm90IGV4aXN0IGluIGBwcm9wc2BcbiAqIEBwYXJhbSB7b2JqZWN0fSBkZWZhdWx0UHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICogQHJldHVybnMge29iamVjdH0gcmVzb2x2ZWQgcHJvcHNcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVByb3BzKGRlZmF1bHRQcm9wcywgcHJvcHMpIHtcbiAgY29uc3Qgb3V0cHV0ID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMpO1xuICBPYmplY3Qua2V5cyhkZWZhdWx0UHJvcHMpLmZvckVhY2gocHJvcE5hbWUgPT4ge1xuICAgIGlmIChwcm9wTmFtZS50b1N0cmluZygpLm1hdGNoKC9eKGNvbXBvbmVudHN8c2xvdHMpJC8pKSB7XG4gICAgICBvdXRwdXRbcHJvcE5hbWVdID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgZGVmYXVsdFByb3BzW3Byb3BOYW1lXSwgb3V0cHV0W3Byb3BOYW1lXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wTmFtZS50b1N0cmluZygpLm1hdGNoKC9eKGNvbXBvbmVudHNQcm9wc3xzbG90UHJvcHMpJC8pKSB7XG4gICAgICBjb25zdCBkZWZhdWx0U2xvdFByb3BzID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXSB8fCB7fTtcbiAgICAgIGNvbnN0IHNsb3RQcm9wcyA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSB7fTtcbiAgICAgIGlmICghc2xvdFByb3BzIHx8ICFPYmplY3Qua2V5cyhzbG90UHJvcHMpKSB7XG4gICAgICAgIC8vIFJlZHVjZSB0aGUgaXRlcmF0aW9uIGlmIHRoZSBzbG90IHByb3BzIGlzIGVtcHR5XG4gICAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBkZWZhdWx0U2xvdFByb3BzO1xuICAgICAgfSBlbHNlIGlmICghZGVmYXVsdFNsb3RQcm9wcyB8fCAhT2JqZWN0LmtleXMoZGVmYXVsdFNsb3RQcm9wcykpIHtcbiAgICAgICAgLy8gUmVkdWNlIHRoZSBpdGVyYXRpb24gaWYgdGhlIGRlZmF1bHQgc2xvdCBwcm9wcyBpcyBlbXB0eVxuICAgICAgICBvdXRwdXRbcHJvcE5hbWVdID0gc2xvdFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHNsb3RQcm9wcyk7XG4gICAgICAgIE9iamVjdC5rZXlzKGRlZmF1bHRTbG90UHJvcHMpLmZvckVhY2goc2xvdFByb3BOYW1lID0+IHtcbiAgICAgICAgICBvdXRwdXRbcHJvcE5hbWVdW3Nsb3RQcm9wTmFtZV0gPSByZXNvbHZlUHJvcHMoZGVmYXVsdFNsb3RQcm9wc1tzbG90UHJvcE5hbWVdLCBzbG90UHJvcHNbc2xvdFByb3BOYW1lXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3V0cHV0W3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBvdXRwdXRbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxzQkFBc0IsR0FBR0MsT0FBTyxDQUFDLDhDQUE4QyxDQUFDO0FBQ3BGQyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHQyxZQUFZO0FBQzlCLElBQUlDLFNBQVMsR0FBR1Isc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNNLFlBQVlBLENBQUNFLFlBQVksRUFBRUMsS0FBSyxFQUFFO0VBQ3pDLE1BQU1DLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRUgsU0FBUyxDQUFDRixPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUVJLEtBQUssQ0FBQztFQUNoRFIsTUFBTSxDQUFDVSxJQUFJLENBQUNILFlBQVksQ0FBQyxDQUFDSSxPQUFPLENBQUNDLFFBQVEsSUFBSTtJQUM1QyxJQUFJQSxRQUFRLENBQUNDLFFBQVEsRUFBRSxDQUFDQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsRUFBRTtNQUNyREwsTUFBTSxDQUFDRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRU4sU0FBUyxDQUFDRixPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUVHLFlBQVksQ0FBQ0ssUUFBUSxDQUFDLEVBQUVILE1BQU0sQ0FBQ0csUUFBUSxDQUFDLENBQUM7SUFDekYsQ0FBQyxNQUFNLElBQUlBLFFBQVEsQ0FBQ0MsUUFBUSxFQUFFLENBQUNDLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxFQUFFO01BQ3JFLE1BQU1DLGdCQUFnQixHQUFHUixZQUFZLENBQUNLLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztNQUNyRCxNQUFNSSxTQUFTLEdBQUdSLEtBQUssQ0FBQ0ksUUFBUSxDQUFDO01BQ2pDSCxNQUFNLENBQUNHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztNQUNyQixJQUFJLENBQUNJLFNBQVMsSUFBSSxDQUFDaEIsTUFBTSxDQUFDVSxJQUFJLENBQUNNLFNBQVMsQ0FBQyxFQUFFO1FBQ3pDO1FBQ0FQLE1BQU0sQ0FBQ0csUUFBUSxDQUFDLEdBQUdHLGdCQUFnQjtNQUNyQyxDQUFDLE1BQU0sSUFBSSxDQUFDQSxnQkFBZ0IsSUFBSSxDQUFDZixNQUFNLENBQUNVLElBQUksQ0FBQ0ssZ0JBQWdCLENBQUMsRUFBRTtRQUM5RDtRQUNBTixNQUFNLENBQUNHLFFBQVEsQ0FBQyxHQUFHSSxTQUFTO01BQzlCLENBQUMsTUFBTTtRQUNMUCxNQUFNLENBQUNHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFTixTQUFTLENBQUNGLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRVksU0FBUyxDQUFDO1FBQ3hEaEIsTUFBTSxDQUFDVSxJQUFJLENBQUNLLGdCQUFnQixDQUFDLENBQUNKLE9BQU8sQ0FBQ00sWUFBWSxJQUFJO1VBQ3BEUixNQUFNLENBQUNHLFFBQVEsQ0FBQyxDQUFDSyxZQUFZLENBQUMsR0FBR1osWUFBWSxDQUFDVSxnQkFBZ0IsQ0FBQ0UsWUFBWSxDQUFDLEVBQUVELFNBQVMsQ0FBQ0MsWUFBWSxDQUFDLENBQUM7UUFDeEcsQ0FBQyxDQUFDO01BQ0o7SUFDRixDQUFDLE1BQU0sSUFBSVIsTUFBTSxDQUFDRyxRQUFRLENBQUMsS0FBS00sU0FBUyxFQUFFO01BQ3pDVCxNQUFNLENBQUNHLFFBQVEsQ0FBQyxHQUFHTCxZQUFZLENBQUNLLFFBQVEsQ0FBQztJQUMzQztFQUNGLENBQUMsQ0FBQztFQUNGLE9BQU9ILE1BQU07QUFDZiJ9