9aa344728ef637b0ccc47df3d8bd5419
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Unstable_Grid = require("@mui/system/Unstable_Grid");
var _styles = require("../styles");
const Grid2 = (0, _Unstable_Grid.createGrid)({
  createStyledComponent: (0, _styles.styled)('div', {
    name: 'MuiGrid2',
    overridesResolver: (props, styles) => styles.root
  }),
  componentName: 'MuiGrid2',
  useThemeProps: inProps => (0, _styles.useThemeProps)({
    props: inProps,
    name: 'MuiGrid2'
  })
});
process.env.NODE_ENV !== "production" ? Grid2.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: _propTypes.default.node,
  /**
   * @ignore
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
} : void 0;
var _default = Grid2;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9wcm9wVHlwZXMiLCJfVW5zdGFibGVfR3JpZCIsIl9zdHlsZXMiLCJHcmlkMiIsImNyZWF0ZUdyaWQiLCJjcmVhdGVTdHlsZWRDb21wb25lbnQiLCJzdHlsZWQiLCJuYW1lIiwib3ZlcnJpZGVzUmVzb2x2ZXIiLCJwcm9wcyIsInN0eWxlcyIsInJvb3QiLCJjb21wb25lbnROYW1lIiwidXNlVGhlbWVQcm9wcyIsImluUHJvcHMiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJwcm9wVHlwZXMiLCJjaGlsZHJlbiIsIm5vZGUiLCJzeCIsIm9uZU9mVHlwZSIsImFycmF5T2YiLCJmdW5jIiwib2JqZWN0IiwiYm9vbCIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiR3JpZDIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG52YXIgX1Vuc3RhYmxlX0dyaWQgPSByZXF1aXJlKFwiQG11aS9zeXN0ZW0vVW5zdGFibGVfR3JpZFwiKTtcbnZhciBfc3R5bGVzID0gcmVxdWlyZShcIi4uL3N0eWxlc1wiKTtcbmNvbnN0IEdyaWQyID0gKDAsIF9VbnN0YWJsZV9HcmlkLmNyZWF0ZUdyaWQpKHtcbiAgY3JlYXRlU3R5bGVkQ29tcG9uZW50OiAoMCwgX3N0eWxlcy5zdHlsZWQpKCdkaXYnLCB7XG4gICAgbmFtZTogJ011aUdyaWQyJyxcbiAgICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG4gIH0pLFxuICBjb21wb25lbnROYW1lOiAnTXVpR3JpZDInLFxuICB1c2VUaGVtZVByb3BzOiBpblByb3BzID0+ICgwLCBfc3R5bGVzLnVzZVRoZW1lUHJvcHMpKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpR3JpZDInXG4gIH0pXG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEdyaWQyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzeDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsIF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sXSkpLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pXG59IDogdm9pZCAwO1xudmFyIF9kZWZhdWx0ID0gR3JpZDI7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQztBQUNwRkMsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDeEIsSUFBSUMsVUFBVSxHQUFHUCxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzlELElBQUlPLGNBQWMsR0FBR1AsT0FBTyxDQUFDLDJCQUEyQixDQUFDO0FBQ3pELElBQUlRLE9BQU8sR0FBR1IsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUNsQyxNQUFNUyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUVGLGNBQWMsQ0FBQ0csVUFBVSxFQUFFO0VBQzNDQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsRUFBRUgsT0FBTyxDQUFDSSxNQUFNLEVBQUUsS0FBSyxFQUFFO0lBQ2hEQyxJQUFJLEVBQUUsVUFBVTtJQUNoQkMsaUJBQWlCLEVBQUVBLENBQUNDLEtBQUssRUFBRUMsTUFBTSxLQUFLQSxNQUFNLENBQUNDO0VBQy9DLENBQUMsQ0FBQztFQUNGQyxhQUFhLEVBQUUsVUFBVTtFQUN6QkMsYUFBYSxFQUFFQyxPQUFPLElBQUksQ0FBQyxDQUFDLEVBQUVaLE9BQU8sQ0FBQ1csYUFBYSxFQUFFO0lBQ25ESixLQUFLLEVBQUVLLE9BQU87SUFDZFAsSUFBSSxFQUFFO0VBQ1IsQ0FBQztBQUNILENBQUMsQ0FBQztBQUNGUSxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsUUFBUSxLQUFLLFlBQVksR0FBR2QsS0FBSyxDQUFDZSxTQUFTLENBQUMseUJBQXlCO0VBQy9FO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUFDRjtBQUNBO0VBQ0VDLFFBQVEsRUFBRW5CLFVBQVUsQ0FBQ0QsT0FBTyxDQUFDcUIsSUFBSTtFQUNqQztBQUNGO0FBQ0E7RUFDRUMsRUFBRSxFQUFFckIsVUFBVSxDQUFDRCxPQUFPLENBQUN1QixTQUFTLENBQUMsQ0FBQ3RCLFVBQVUsQ0FBQ0QsT0FBTyxDQUFDd0IsT0FBTyxDQUFDdkIsVUFBVSxDQUFDRCxPQUFPLENBQUN1QixTQUFTLENBQUMsQ0FBQ3RCLFVBQVUsQ0FBQ0QsT0FBTyxDQUFDeUIsSUFBSSxFQUFFeEIsVUFBVSxDQUFDRCxPQUFPLENBQUMwQixNQUFNLEVBQUV6QixVQUFVLENBQUNELE9BQU8sQ0FBQzJCLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTFCLFVBQVUsQ0FBQ0QsT0FBTyxDQUFDeUIsSUFBSSxFQUFFeEIsVUFBVSxDQUFDRCxPQUFPLENBQUMwQixNQUFNLENBQUM7QUFDaE8sQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUNWLElBQUlFLFFBQVEsR0FBR3hCLEtBQUs7QUFDcEJOLE9BQU8sQ0FBQ0UsT0FBTyxHQUFHNEIsUUFBUSJ9