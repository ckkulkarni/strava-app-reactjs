46b58dad3b0745e80e8338d045a55b7b
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByTestId = exports.queryAllByTestId = exports.getByTestId = exports.getAllByTestId = exports.findByTestId = exports.findAllByTestId = void 0;
var _helpers = require("../helpers");
var _queryHelpers = require("../query-helpers");
var _allUtils = require("./all-utils");
const getTestIdAttribute = () => (0, _allUtils.getConfig)().testIdAttribute;
const queryAllByTestId = (...args) => {
  (0, _helpers.checkContainerType)(args[0]);
  return (0, _allUtils.queryAllByAttribute)(getTestIdAttribute(), ...args);
};
const getMultipleError = (c, id) => `Found multiple elements by: [${getTestIdAttribute()}="${id}"]`;
const getMissingError = (c, id) => `Unable to find an element by: [${getTestIdAttribute()}="${id}"]`;
const queryAllByTestIdWithSuggestions = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByTestId, queryAllByTestId.name, 'queryAll');
exports.queryAllByTestId = queryAllByTestIdWithSuggestions;
const [queryByTestId, getAllByTestId, getByTestId, findAllByTestId, findByTestId] = (0, _allUtils.buildQueries)(queryAllByTestId, getMultipleError, getMissingError);
exports.findByTestId = findByTestId;
exports.findAllByTestId = findAllByTestId;
exports.getByTestId = getByTestId;
exports.getAllByTestId = getAllByTestId;
exports.queryByTestId = queryByTestId;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXJ5QnlUZXN0SWQiLCJxdWVyeUFsbEJ5VGVzdElkIiwiZ2V0QnlUZXN0SWQiLCJnZXRBbGxCeVRlc3RJZCIsImZpbmRCeVRlc3RJZCIsImZpbmRBbGxCeVRlc3RJZCIsIl9oZWxwZXJzIiwicmVxdWlyZSIsIl9xdWVyeUhlbHBlcnMiLCJfYWxsVXRpbHMiLCJnZXRUZXN0SWRBdHRyaWJ1dGUiLCJnZXRDb25maWciLCJ0ZXN0SWRBdHRyaWJ1dGUiLCJhcmdzIiwiY2hlY2tDb250YWluZXJUeXBlIiwicXVlcnlBbGxCeUF0dHJpYnV0ZSIsImdldE11bHRpcGxlRXJyb3IiLCJjIiwiaWQiLCJnZXRNaXNzaW5nRXJyb3IiLCJxdWVyeUFsbEJ5VGVzdElkV2l0aFN1Z2dlc3Rpb25zIiwid3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbiIsIm5hbWUiLCJidWlsZFF1ZXJpZXMiXSwic291cmNlcyI6WyJ0ZXN0LWlkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5xdWVyeUJ5VGVzdElkID0gZXhwb3J0cy5xdWVyeUFsbEJ5VGVzdElkID0gZXhwb3J0cy5nZXRCeVRlc3RJZCA9IGV4cG9ydHMuZ2V0QWxsQnlUZXN0SWQgPSBleHBvcnRzLmZpbmRCeVRlc3RJZCA9IGV4cG9ydHMuZmluZEFsbEJ5VGVzdElkID0gdm9pZCAwO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xudmFyIF9hbGxVdGlscyA9IHJlcXVpcmUoXCIuL2FsbC11dGlsc1wiKTtcbmNvbnN0IGdldFRlc3RJZEF0dHJpYnV0ZSA9ICgpID0+ICgwLCBfYWxsVXRpbHMuZ2V0Q29uZmlnKSgpLnRlc3RJZEF0dHJpYnV0ZTtcbmNvbnN0IHF1ZXJ5QWxsQnlUZXN0SWQgPSAoLi4uYXJncykgPT4ge1xuICAoMCwgX2hlbHBlcnMuY2hlY2tDb250YWluZXJUeXBlKShhcmdzWzBdKTtcbiAgcmV0dXJuICgwLCBfYWxsVXRpbHMucXVlcnlBbGxCeUF0dHJpYnV0ZSkoZ2V0VGVzdElkQXR0cmlidXRlKCksIC4uLmFyZ3MpO1xufTtcbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSAoYywgaWQpID0+IGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyBieTogWyR7Z2V0VGVzdElkQXR0cmlidXRlKCl9PVwiJHtpZH1cIl1gO1xuY29uc3QgZ2V0TWlzc2luZ0Vycm9yID0gKGMsIGlkKSA9PiBgVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCBieTogWyR7Z2V0VGVzdElkQXR0cmlidXRlKCl9PVwiJHtpZH1cIl1gO1xuY29uc3QgcXVlcnlBbGxCeVRlc3RJZFdpdGhTdWdnZXN0aW9ucyA9ICgwLCBfcXVlcnlIZWxwZXJzLndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKHF1ZXJ5QWxsQnlUZXN0SWQsIHF1ZXJ5QWxsQnlUZXN0SWQubmFtZSwgJ3F1ZXJ5QWxsJyk7XG5leHBvcnRzLnF1ZXJ5QWxsQnlUZXN0SWQgPSBxdWVyeUFsbEJ5VGVzdElkV2l0aFN1Z2dlc3Rpb25zO1xuY29uc3QgW3F1ZXJ5QnlUZXN0SWQsIGdldEFsbEJ5VGVzdElkLCBnZXRCeVRlc3RJZCwgZmluZEFsbEJ5VGVzdElkLCBmaW5kQnlUZXN0SWRdID0gKDAsIF9hbGxVdGlscy5idWlsZFF1ZXJpZXMpKHF1ZXJ5QWxsQnlUZXN0SWQsIGdldE11bHRpcGxlRXJyb3IsIGdldE1pc3NpbmdFcnJvcik7XG5leHBvcnRzLmZpbmRCeVRlc3RJZCA9IGZpbmRCeVRlc3RJZDtcbmV4cG9ydHMuZmluZEFsbEJ5VGVzdElkID0gZmluZEFsbEJ5VGVzdElkO1xuZXhwb3J0cy5nZXRCeVRlc3RJZCA9IGdldEJ5VGVzdElkO1xuZXhwb3J0cy5nZXRBbGxCeVRlc3RJZCA9IGdldEFsbEJ5VGVzdElkO1xuZXhwb3J0cy5xdWVyeUJ5VGVzdElkID0gcXVlcnlCeVRlc3RJZDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxhQUFhLEdBQUdGLE9BQU8sQ0FBQ0csZ0JBQWdCLEdBQUdILE9BQU8sQ0FBQ0ksV0FBVyxHQUFHSixPQUFPLENBQUNLLGNBQWMsR0FBR0wsT0FBTyxDQUFDTSxZQUFZLEdBQUdOLE9BQU8sQ0FBQ08sZUFBZSxHQUFHLEtBQUssQ0FBQztBQUN6SixJQUFJQyxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDcEMsSUFBSUMsYUFBYSxHQUFHRCxPQUFPLENBQUMsa0JBQWtCLENBQUM7QUFDL0MsSUFBSUUsU0FBUyxHQUFHRixPQUFPLENBQUMsYUFBYSxDQUFDO0FBQ3RDLE1BQU1HLGtCQUFrQixHQUFHQSxDQUFBLEtBQU0sQ0FBQyxDQUFDLEVBQUVELFNBQVMsQ0FBQ0UsU0FBUyxHQUFHLENBQUNDLGVBQWU7QUFDM0UsTUFBTVgsZ0JBQWdCLEdBQUdBLENBQUMsR0FBR1ksSUFBSSxLQUFLO0VBQ3BDLENBQUMsQ0FBQyxFQUFFUCxRQUFRLENBQUNRLGtCQUFrQixFQUFFRCxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDekMsT0FBTyxDQUFDLENBQUMsRUFBRUosU0FBUyxDQUFDTSxtQkFBbUIsRUFBRUwsa0JBQWtCLEVBQUUsRUFBRSxHQUFHRyxJQUFJLENBQUM7QUFDMUUsQ0FBQztBQUNELE1BQU1HLGdCQUFnQixHQUFHQSxDQUFDQyxDQUFDLEVBQUVDLEVBQUUsS0FBTSxnQ0FBK0JSLGtCQUFrQixFQUFHLEtBQUlRLEVBQUcsSUFBRztBQUNuRyxNQUFNQyxlQUFlLEdBQUdBLENBQUNGLENBQUMsRUFBRUMsRUFBRSxLQUFNLGtDQUFpQ1Isa0JBQWtCLEVBQUcsS0FBSVEsRUFBRyxJQUFHO0FBQ3BHLE1BQU1FLCtCQUErQixHQUFHLENBQUMsQ0FBQyxFQUFFWixhQUFhLENBQUNhLDRCQUE0QixFQUFFcEIsZ0JBQWdCLEVBQUVBLGdCQUFnQixDQUFDcUIsSUFBSSxFQUFFLFVBQVUsQ0FBQztBQUM1SXhCLE9BQU8sQ0FBQ0csZ0JBQWdCLEdBQUdtQiwrQkFBK0I7QUFDMUQsTUFBTSxDQUFDcEIsYUFBYSxFQUFFRyxjQUFjLEVBQUVELFdBQVcsRUFBRUcsZUFBZSxFQUFFRCxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRUssU0FBUyxDQUFDYyxZQUFZLEVBQUV0QixnQkFBZ0IsRUFBRWUsZ0JBQWdCLEVBQUVHLGVBQWUsQ0FBQztBQUNwS3JCLE9BQU8sQ0FBQ00sWUFBWSxHQUFHQSxZQUFZO0FBQ25DTixPQUFPLENBQUNPLGVBQWUsR0FBR0EsZUFBZTtBQUN6Q1AsT0FBTyxDQUFDSSxXQUFXLEdBQUdBLFdBQVc7QUFDakNKLE9BQU8sQ0FBQ0ssY0FBYyxHQUFHQSxjQUFjO0FBQ3ZDTCxPQUFPLENBQUNFLGFBQWEsR0FBR0EsYUFBYSJ9