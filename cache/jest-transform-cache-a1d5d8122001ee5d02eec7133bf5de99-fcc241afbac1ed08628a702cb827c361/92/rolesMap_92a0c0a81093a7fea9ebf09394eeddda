ce7e23ed8f2e9ce0420bffa164a70237
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ariaAbstractRoles = _interopRequireDefault(require("./etc/roles/ariaAbstractRoles"));
var _ariaLiteralRoles = _interopRequireDefault(require("./etc/roles/ariaLiteralRoles"));
var _ariaDpubRoles = _interopRequireDefault(require("./etc/roles/ariaDpubRoles"));
var _ariaGraphicsRoles = _interopRequireDefault(require("./etc/roles/ariaGraphicsRoles"));
var _iterationDecorator = _interopRequireDefault(require("./util/iterationDecorator"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function F() {};
      return {
        s: F,
        n: function n() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function e(_e2) {
          throw _e2;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function s() {
      it = it.call(o);
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e3) {
      didErr = true;
      err = _e3;
    },
    f: function f() {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
var roles = [].concat(_ariaAbstractRoles.default, _ariaLiteralRoles.default, _ariaDpubRoles.default, _ariaGraphicsRoles.default);
roles.forEach(function (_ref) {
  var _ref2 = _slicedToArray(_ref, 2),
    roleDefinition = _ref2[1];
  // Conglomerate the properties
  var _iterator = _createForOfIteratorHelper(roleDefinition.superClass),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var superClassIter = _step.value;
      var _iterator2 = _createForOfIteratorHelper(superClassIter),
        _step2;
      try {
        var _loop = function _loop() {
          var superClassName = _step2.value;
          var superClassRoleTuple = roles.find(function (_ref3) {
            var _ref4 = _slicedToArray(_ref3, 1),
              name = _ref4[0];
            return name === superClassName;
          });
          if (superClassRoleTuple) {
            var superClassDefinition = superClassRoleTuple[1];
            for (var _i2 = 0, _Object$keys = Object.keys(superClassDefinition.props); _i2 < _Object$keys.length; _i2++) {
              var prop = _Object$keys[_i2];
              if (
              // $FlowIssue Accessing the hasOwnProperty on the Object prototype is fine.
              !Object.prototype.hasOwnProperty.call(roleDefinition.props, prop)) {
                Object.assign(roleDefinition.props, _defineProperty({}, prop, superClassDefinition.props[prop]));
              }
            }
          }
        };
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
});
var rolesMap = {
  entries: function entries() {
    return roles;
  },
  forEach: function forEach(fn) {
    var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var _iterator3 = _createForOfIteratorHelper(roles),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var _step3$value = _slicedToArray(_step3.value, 2),
          key = _step3$value[0],
          values = _step3$value[1];
        fn.call(thisArg, values, key, roles);
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  },
  get: function get(key) {
    var item = roles.find(function (tuple) {
      return tuple[0] === key ? true : false;
    });
    return item && item[1];
  },
  has: function has(key) {
    return !!rolesMap.get(key);
  },
  keys: function keys() {
    return roles.map(function (_ref5) {
      var _ref6 = _slicedToArray(_ref5, 1),
        key = _ref6[0];
      return key;
    });
  },
  values: function values() {
    return roles.map(function (_ref7) {
      var _ref8 = _slicedToArray(_ref7, 2),
        values = _ref8[1];
      return values;
    });
  }
};
var _default = (0, _iterationDecorator.default)(rolesMap, rolesMap.entries());
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfYXJpYUFic3RyYWN0Um9sZXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hcmlhTGl0ZXJhbFJvbGVzIiwiX2FyaWFEcHViUm9sZXMiLCJfYXJpYUdyYXBoaWNzUm9sZXMiLCJfaXRlcmF0aW9uRGVjb3JhdG9yIiwib2JqIiwiX19lc01vZHVsZSIsIl9kZWZpbmVQcm9wZXJ0eSIsImtleSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwibyIsImFsbG93QXJyYXlMaWtlIiwiaXQiLCJTeW1ib2wiLCJpdGVyYXRvciIsIkFycmF5IiwiaXNBcnJheSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsImxlbmd0aCIsImkiLCJGIiwicyIsIm4iLCJkb25lIiwiZSIsIl9lMiIsImYiLCJUeXBlRXJyb3IiLCJub3JtYWxDb21wbGV0aW9uIiwiZGlkRXJyIiwiZXJyIiwiY2FsbCIsInN0ZXAiLCJuZXh0IiwiX2UzIiwicmV0dXJuIiwiX3NsaWNlZFRvQXJyYXkiLCJhcnIiLCJfYXJyYXlXaXRoSG9sZXMiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfbm9uSXRlcmFibGVSZXN0IiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJsZW4iLCJhcnIyIiwiX2kiLCJfYXJyIiwiX24iLCJfZCIsIl9zIiwiX2UiLCJwdXNoIiwicm9sZXMiLCJjb25jYXQiLCJmb3JFYWNoIiwiX3JlZiIsIl9yZWYyIiwicm9sZURlZmluaXRpb24iLCJfaXRlcmF0b3IiLCJzdXBlckNsYXNzIiwiX3N0ZXAiLCJzdXBlckNsYXNzSXRlciIsIl9pdGVyYXRvcjIiLCJfc3RlcDIiLCJfbG9vcCIsInN1cGVyQ2xhc3NOYW1lIiwic3VwZXJDbGFzc1JvbGVUdXBsZSIsImZpbmQiLCJfcmVmMyIsIl9yZWY0Iiwic3VwZXJDbGFzc0RlZmluaXRpb24iLCJfaTIiLCJfT2JqZWN0JGtleXMiLCJrZXlzIiwicHJvcHMiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJhc3NpZ24iLCJyb2xlc01hcCIsImVudHJpZXMiLCJmbiIsInRoaXNBcmciLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJfaXRlcmF0b3IzIiwiX3N0ZXAzIiwiX3N0ZXAzJHZhbHVlIiwidmFsdWVzIiwiZ2V0IiwiaXRlbSIsInR1cGxlIiwiaGFzIiwibWFwIiwiX3JlZjUiLCJfcmVmNiIsIl9yZWY3IiwiX3JlZjgiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbInJvbGVzTWFwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9hcmlhQWJzdHJhY3RSb2xlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZXRjL3JvbGVzL2FyaWFBYnN0cmFjdFJvbGVzXCIpKTtcbnZhciBfYXJpYUxpdGVyYWxSb2xlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZXRjL3JvbGVzL2FyaWFMaXRlcmFsUm9sZXNcIikpO1xudmFyIF9hcmlhRHB1YlJvbGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9ldGMvcm9sZXMvYXJpYURwdWJSb2xlc1wiKSk7XG52YXIgX2FyaWFHcmFwaGljc1JvbGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9ldGMvcm9sZXMvYXJpYUdyYXBoaWNzUm9sZXNcIikpO1xudmFyIF9pdGVyYXRpb25EZWNvcmF0b3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWwvaXRlcmF0aW9uRGVjb3JhdG9yXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmICghaXQpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfSwgZTogZnVuY3Rpb24gZShfZTIpIHsgdGhyb3cgX2UyOyB9LCBmOiBGIH07IH0gdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9IHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgZGlkRXJyID0gZmFsc2UsIGVycjsgcmV0dXJuIHsgczogZnVuY3Rpb24gcygpIHsgaXQgPSBpdC5jYWxsKG8pOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgc3RlcCA9IGl0Lm5leHQoKTsgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTsgcmV0dXJuIHN0ZXA7IH0sIGU6IGZ1bmN0aW9uIGUoX2UzKSB7IGRpZEVyciA9IHRydWU7IGVyciA9IF9lMzsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0LnJldHVybiAhPSBudWxsKSBpdC5yZXR1cm4oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfVxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTsgaWYgKF9pID09IG51bGwpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfcywgX2U7IHRyeSB7IGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG52YXIgcm9sZXMgPSBbXS5jb25jYXQoX2FyaWFBYnN0cmFjdFJvbGVzLmRlZmF1bHQsIF9hcmlhTGl0ZXJhbFJvbGVzLmRlZmF1bHQsIF9hcmlhRHB1YlJvbGVzLmRlZmF1bHQsIF9hcmlhR3JhcGhpY3NSb2xlcy5kZWZhdWx0KTtcbnJvbGVzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgcm9sZURlZmluaXRpb24gPSBfcmVmMlsxXTtcbiAgLy8gQ29uZ2xvbWVyYXRlIHRoZSBwcm9wZXJ0aWVzXG4gIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihyb2xlRGVmaW5pdGlvbi5zdXBlckNsYXNzKSxcbiAgICBfc3RlcDtcbiAgdHJ5IHtcbiAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgdmFyIHN1cGVyQ2xhc3NJdGVyID0gX3N0ZXAudmFsdWU7XG4gICAgICB2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHN1cGVyQ2xhc3NJdGVyKSxcbiAgICAgICAgX3N0ZXAyO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoKSB7XG4gICAgICAgICAgdmFyIHN1cGVyQ2xhc3NOYW1lID0gX3N0ZXAyLnZhbHVlO1xuICAgICAgICAgIHZhciBzdXBlckNsYXNzUm9sZVR1cGxlID0gcm9sZXMuZmluZChmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgICAgICAgIHZhciBfcmVmNCA9IF9zbGljZWRUb0FycmF5KF9yZWYzLCAxKSxcbiAgICAgICAgICAgICAgbmFtZSA9IF9yZWY0WzBdO1xuICAgICAgICAgICAgcmV0dXJuIG5hbWUgPT09IHN1cGVyQ2xhc3NOYW1lO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChzdXBlckNsYXNzUm9sZVR1cGxlKSB7XG4gICAgICAgICAgICB2YXIgc3VwZXJDbGFzc0RlZmluaXRpb24gPSBzdXBlckNsYXNzUm9sZVR1cGxlWzFdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kyID0gMCwgX09iamVjdCRrZXlzID0gT2JqZWN0LmtleXMoc3VwZXJDbGFzc0RlZmluaXRpb24ucHJvcHMpOyBfaTIgPCBfT2JqZWN0JGtleXMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICAgICAgICB2YXIgcHJvcCA9IF9PYmplY3Qka2V5c1tfaTJdO1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIC8vICRGbG93SXNzdWUgQWNjZXNzaW5nIHRoZSBoYXNPd25Qcm9wZXJ0eSBvbiB0aGUgT2JqZWN0IHByb3RvdHlwZSBpcyBmaW5lLlxuICAgICAgICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJvbGVEZWZpbml0aW9uLnByb3BzLCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocm9sZURlZmluaXRpb24ucHJvcHMsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgcHJvcCwgc3VwZXJDbGFzc0RlZmluaXRpb24ucHJvcHNbcHJvcF0pKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICBfbG9vcCgpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yMi5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IyLmYoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9pdGVyYXRvci5lKGVycik7XG4gIH0gZmluYWxseSB7XG4gICAgX2l0ZXJhdG9yLmYoKTtcbiAgfVxufSk7XG52YXIgcm9sZXNNYXAgPSB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgcmV0dXJuIHJvbGVzO1xuICB9LFxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gICAgdmFyIHRoaXNBcmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7XG4gICAgdmFyIF9pdGVyYXRvcjMgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihyb2xlcyksXG4gICAgICBfc3RlcDM7XG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBfc3RlcDMkdmFsdWUgPSBfc2xpY2VkVG9BcnJheShfc3RlcDMudmFsdWUsIDIpLFxuICAgICAgICAgIGtleSA9IF9zdGVwMyR2YWx1ZVswXSxcbiAgICAgICAgICB2YWx1ZXMgPSBfc3RlcDMkdmFsdWVbMV07XG4gICAgICAgIGZuLmNhbGwodGhpc0FyZywgdmFsdWVzLCBrZXksIHJvbGVzKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvcjMuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IzLmYoKTtcbiAgICB9XG4gIH0sXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBpdGVtID0gcm9sZXMuZmluZChmdW5jdGlvbiAodHVwbGUpIHtcbiAgICAgIHJldHVybiB0dXBsZVswXSA9PT0ga2V5ID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH0pO1xuICAgIHJldHVybiBpdGVtICYmIGl0ZW1bMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgIHJldHVybiAhIXJvbGVzTWFwLmdldChrZXkpO1xuICB9LFxuICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgIHJldHVybiByb2xlcy5tYXAoZnVuY3Rpb24gKF9yZWY1KSB7XG4gICAgICB2YXIgX3JlZjYgPSBfc2xpY2VkVG9BcnJheShfcmVmNSwgMSksXG4gICAgICAgIGtleSA9IF9yZWY2WzBdO1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9KTtcbiAgfSxcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgcmV0dXJuIHJvbGVzLm1hcChmdW5jdGlvbiAoX3JlZjcpIHtcbiAgICAgIHZhciBfcmVmOCA9IF9zbGljZWRUb0FycmF5KF9yZWY3LCAyKSxcbiAgICAgICAgdmFsdWVzID0gX3JlZjhbMV07XG4gICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH0pO1xuICB9XG59O1xudmFyIF9kZWZhdWx0ID0gKDAsIF9pdGVyYXRpb25EZWNvcmF0b3IuZGVmYXVsdCkocm9sZXNNYXAsIHJvbGVzTWFwLmVudHJpZXMoKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLElBQUlDLGtCQUFrQixHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUM7QUFDekYsSUFBSUMs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