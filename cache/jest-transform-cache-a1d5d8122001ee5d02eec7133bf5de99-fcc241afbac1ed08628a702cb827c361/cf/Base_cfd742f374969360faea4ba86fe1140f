c4a32a37fa0aed457b856a4220223ccb
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _material = require("@mui/material");
var _axios = _interopRequireDefault(require("axios"));
var _formik = require("formik");
var _reactRouter = require("react-router");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Base = () => {
  const apiKey = process.env.REACT_APP_MOVIES_API_KEY;
  const [results, setResults] = (0, _react.useState)(null);
  const [selectedTab, setSelected] = (0, _react.useState)("movie");
  const navigation = (0, _reactRouter.useNavigate)();
  const formik = (0, _formik.useFormik)({
    initialValues: {
      search: "",
      season: 0,
      episode: 0
    },
    onSubmit: async values => {
      try {
        if (selectedTab === "movie") {
          const response = await _axios.default.get(`https://www.omdbapi.com/?t="${values.search}"&apiKey=${apiKey}`);
          console.log(response);
          setResults(response.data);
        } else if (selectedTab === "tv-show") {
          if (values.season > 0) {
            const response = await _axios.default.get(`https://www.omdbapi.com/?t="${values.search}"&Season=${values.season}&apiKey=${apiKey}`);
            console.log(response);
            setResults(response.data);
            if (values.season > 0 && values.episode > 0) {
              const response = await _axios.default.get(`https://www.omdbapi.com/?t="${values.search}"&Season=${values.season}&Episode=${values.episode}&apiKey=${apiKey}`);
              console.log(response);
              setResults(response.data);
            }
          } else {
            const response = await _axios.default.get(`https://www.omdbapi.com/?t="${values.search}"&apiKey=${apiKey}`);
            console.log(response);
            setResults(response.data);
          }
        }
      } catch (error) {
        console.error("Error fetching search results:", error);
      }
    }
  });
  const handleTabChange = (event, newValue) => {
    setSelected(newValue);
  };
  const handleNavigation = () => {
    navigation("/details", {
      state: results
    });
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "inputContainer"
  }, /*#__PURE__*/_react.default.createElement(_material.Box, {
    sx: {
      padding: "20px",
      textAlign: "center"
    }
  }, results && /*#__PURE__*/_react.default.createElement(_material.Box, null, /*#__PURE__*/_react.default.createElement(_material.Card, {
    sx: {
      maxWidth: "400px",
      margin: "0 auto",
      boxShadow: "0px 4px 8px rgba(0, 0, 0, 0.1)",
      borderRadius: "16px",
      backgroundColor: "#f3f3f3",
      cursor: "pointer"
    },
    onClick: handleNavigation
  }, /*#__PURE__*/_react.default.createElement(_material.CardMedia, {
    component: "img",
    alt: results.Title,
    sx: {
      height: "200px",
      borderRadius: "16px",
      p: 2
    },
    image: results.Poster
  }), /*#__PURE__*/_react.default.createElement(_material.CardContent, null, /*#__PURE__*/_react.default.createElement(_material.Box, null, /*#__PURE__*/_react.default.createElement(_material.Typography, {
    gutterBottom: true,
    variant: "h5",
    component: "div"
  }, results.Title, " (", results.Year, ")"), /*#__PURE__*/_react.default.createElement(_material.Typography, {
    gutterBottom: true,
    variant: "h5",
    component: "div"
  }, "Rating: ", results.Rated))))), /*#__PURE__*/_react.default.createElement(_material.Box, {
    sx: {
      borderTop: 1,
      borderBottom: 1,
      borderColor: "divider"
    }
  }, /*#__PURE__*/_react.default.createElement(_material.Tabs, {
    "aria-label": "health tabs",
    textColor: "primary",
    sx: {
      "& .MuiTab-root": {
        textTransform: "capitalize",
        marginRight: 4,
        fontSize: "16px"
      }
    },
    value: selectedTab,
    onChange: handleTabChange
  }, /*#__PURE__*/_react.default.createElement(_material.Tab, {
    label: "Movie",
    value: "movie"
  }), /*#__PURE__*/_react.default.createElement(_material.Tab, {
    label: "TV Show",
    value: "tv-show"
  }))), /*#__PURE__*/_react.default.createElement("form", {
    onSubmit: formik.handleSubmit
  }, selectedTab === "movie" && /*#__PURE__*/_react.default.createElement(_material.Box, {
    sx: {
      p: 2,
      display: "flex",
      flexDirection: "column",
      mt: 2
    }
  }, /*#__PURE__*/_react.default.createElement(_material.TextField, {
    variant: "outlined",
    label: "Search Movie",
    name: "search",
    onChange: formik.handleChange,
    type: "text",
    sx: {
      marginRight: "10px",
      width: "75%",
      ml: "10%"
    }
  }), /*#__PURE__*/_react.default.createElement(_material.Button, {
    type: "submit",
    variant: "contained",
    sx: {
      width: "25%",
      ml: "35%",
      mt: 3
    }
  }, "Submit")), selectedTab === "tv-show" && /*#__PURE__*/_react.default.createElement(_material.Box, {
    sx: {
      p: 2,
      display: "flex",
      flexDirection: "column",
      mt: 2,
      gap: 2
    }
  }, /*#__PURE__*/_react.default.createElement(_material.TextField, {
    variant: "outlined",
    label: "Search TV Show",
    name: "search",
    onChange: formik.handleChange,
    type: "text",
    sx: {
      marginRight: "10px",
      width: "75%",
      ml: "10%"
    }
  }), /*#__PURE__*/_react.default.createElement(_material.TextField, {
    variant: "outlined",
    label: "Search Season",
    name: "season",
    onChange: formik.handleChange,
    type: "number",
    sx: {
      marginRight: "10px",
      width: "75%",
      ml: "10%"
    }
  }), /*#__PURE__*/_react.default.createElement(_material.TextField, {
    variant: "outlined",
    label: "Search Episode",
    name: "episode",
    onChange: formik.handleChange,
    type: "number",
    sx: {
      marginRight: "10px",
      width: "75%",
      ml: "10%"
    }
  }), /*#__PURE__*/_react.default.createElement(_material.Button, {
    type: "submit",
    variant: "contained",
    sx: {
      width: "25%",
      ml: "35%",
      mt: 1
    }
  }, "Submit")))));
};
var _default = Base;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,