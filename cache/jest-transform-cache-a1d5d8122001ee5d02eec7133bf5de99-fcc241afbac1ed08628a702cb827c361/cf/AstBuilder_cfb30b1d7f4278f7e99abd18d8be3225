85325bdfb5eb0f6fff83f6b8afbe98ae
"use strict";

var __values = void 0 && (void 0).__values || function (o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var AstNode_1 = __importDefault(require("./AstNode"));
var cucumber_messages_1 = require("cucumber-messages");
var Parser_1 = require("./Parser");
var Errors_1 = require("./Errors");
var createLocation_1 = __importDefault(require("./cli/createLocation"));
var AstBuilder = /** @class */function () {
  function AstBuilder(newId) {
    this.newId = newId;
    if (!newId) {
      throw new Error('No newId');
    }
    this.reset();
  }
  AstBuilder.prototype.reset = function () {
    this.stack = [new AstNode_1.default(Parser_1.RuleType.None)];
    this.comments = [];
  };
  AstBuilder.prototype.startRule = function (ruleType) {
    this.stack.push(new AstNode_1.default(ruleType));
  };
  AstBuilder.prototype.endRule = function (ruleType) {
    var node = this.stack.pop();
    var transformedNode = this.transformNode(node);
    this.currentNode().add(node.ruleType, transformedNode);
  };
  AstBuilder.prototype.build = function (token) {
    if (token.matchedType === Parser_1.TokenType.Comment) {
      this.comments.push(cucumber_messages_1.messages.GherkinDocument.Comment.create({
        location: this.getLocation(token),
        text: token.matchedText
      }));
    } else {
      this.currentNode().add(token.matchedType, token);
    }
  };
  AstBuilder.prototype.getResult = function () {
    return this.currentNode().getSingle(Parser_1.RuleType.GherkinDocument);
  };
  AstBuilder.prototype.currentNode = function () {
    return this.stack[this.stack.length - 1];
  };
  AstBuilder.prototype.getLocation = function (token, column) {
    return !column ? token.location : createLocation_1.default({
      line: token.location.line,
      column: column
    });
  };
  AstBuilder.prototype.getTags = function (node) {
    var e_1, _a, e_2, _b;
    var tags = [];
    var tagsNode = node.getSingle(Parser_1.RuleType.Tags);
    if (!tagsNode) {
      return tags;
    }
    var tokens = tagsNode.getTokens(Parser_1.TokenType.TagLine);
    try {
      for (var tokens_1 = __values(tokens), tokens_1_1 = tokens_1.next(); !tokens_1_1.done; tokens_1_1 = tokens_1.next()) {
        var token = tokens_1_1.value;
        try {
          for (var _c = (e_2 = void 0, __values(token.matchedItems)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var tagItem = _d.value;
            tags.push(cucumber_messages_1.messages.GherkinDocument.Feature.Tag.create({
              location: this.getLocation(token, tagItem.column),
              name: tagItem.text,
              id: this.newId()
            }));
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
          } finally {
            if (e_2) throw e_2.error;
          }
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (tokens_1_1 && !tokens_1_1.done && (_a = tokens_1.return)) _a.call(tokens_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
    return tags;
  };
  AstBuilder.prototype.getCells = function (tableRowToken) {
    var _this = this;
    return tableRowToken.matchedItems.map(function (cellItem) {
      return cucumber_messages_1.messages.GherkinDocument.Feature.TableRow.TableCell.create({
        location: _this.getLocation(tableRowToken, cellItem.column),
        value: cellItem.text
      });
    });
  };
  AstBuilder.prototype.getDescription = function (node) {
    return node.getSingle(Parser_1.RuleType.Description);
  };
  AstBuilder.prototype.getSteps = function (node) {
    return node.getItems(Parser_1.RuleType.Step);
  };
  AstBuilder.prototype.getTableRows = function (node) {
    var _this = this;
    var rows = node.getTokens(Parser_1.TokenType.TableRow).map(function (token) {
      return cucumber_messages_1.messages.GherkinDocument.Feature.TableRow.create({
        id: _this.newId(),
        location: _this.getLocation(token),
        cells: _this.getCells(token)
      });
    });
    this.ensureCellCount(rows);
    return rows;
  };
  AstBuilder.prototype.ensureCellCount = function (rows) {
    if (rows.length === 0) {
      return;
    }
    var cellCount = rows[0].cells.length;
    rows.forEach(function (row) {
      if (row.cells.length !== cellCount) {
        throw Errors_1.AstBuilderException.create('inconsistent cell count within the table', row.location);
      }
    });
  };
  AstBuilder.prototype.transformNode = function (node) {
    var e_3, _a, e_4, _b, e_5, _c;
    switch (node.ruleType) {
      case Parser_1.RuleType.Step:
        {
          var stepLine = node.getToken(Parser_1.TokenType.StepLine);
          var dataTable = node.getSingle(Parser_1.RuleType.DataTable);
          var docString = node.getSingle(Parser_1.RuleType.DocString);
          return cucumber_messages_1.messages.GherkinDocument.Feature.Step.create({
            id: this.newId(),
            location: this.getLocation(stepLine),
            keyword: stepLine.matchedKeyword,
            text: stepLine.matchedText,
            dataTable: dataTable,
            docString: docString
          });
        }
      case Parser_1.RuleType.DocString:
        {
          var separatorToken = node.getTokens(Parser_1.TokenType.DocStringSeparator)[0];
          var contentType = separatorToken.matchedText.length > 0 ? separatorToken.matchedText : undefined;
          var lineTokens = node.getTokens(Parser_1.TokenType.Other);
          var content = lineTokens.map(function (t) {
            return t.matchedText;
          }).join('\n');
          var result = cucumber_messages_1.messages.GherkinDocument.Feature.Step.DocString.create({
            location: this.getLocation(separatorToken),
            content: content,
            delimiter: separatorToken.line.trimmedLineText.substring(0, 3)
          });
          // conditionally add this like this (needed to make tests pass on node 0.10 as well as 4.0)
          if (contentType) {
            result.contentType = contentType;
          }
          return result;
        }
      case Parser_1.RuleType.DataTable:
        {
          var rows = this.getTableRows(node);
          return cucumber_messages_1.messages.GherkinDocument.Feature.Step.DataTable.create({
            location: rows[0].location,
            rows: rows
          });
        }
      case Parser_1.RuleType.Background:
        {
          var backgroundLine = node.getToken(Parser_1.TokenType.BackgroundLine);
          var description = this.getDescription(node);
          var steps = this.getSteps(node);
          return cucumber_messages_1.messages.GherkinDocument.Feature.Background.create({
            location: this.getLocation(backgroundLine),
            keyword: backgroundLine.matchedKeyword,
            name: backgroundLine.matchedText,
            description: description,
            steps: steps
          });
        }
      case Parser_1.RuleType.ScenarioDefinition:
        {
          var tags = this.getTags(node);
          var scenarioNode = node.getSingle(Parser_1.RuleType.Scenario);
          var scenarioLine = scenarioNode.getToken(Parser_1.TokenType.ScenarioLine);
          var description = this.getDescription(scenarioNode);
          var steps = this.getSteps(scenarioNode);
          var examples = scenarioNode.getItems(Parser_1.RuleType.ExamplesDefinition);
          return cucumber_messages_1.messages.GherkinDocument.Feature.Scenario.create({
            id: this.newId(),
            tags: tags,
            location: this.getLocation(scenarioLine),
            keyword: scenarioLine.matchedKeyword,
            name: scenarioLine.matchedText,
            description: description,
            steps: steps,
            examples: examples
          });
        }
      case Parser_1.RuleType.ExamplesDefinition:
        {
          var tags = this.getTags(node);
          var examplesNode = node.getSingle(Parser_1.RuleType.Examples);
          var examplesLine = examplesNode.getToken(Parser_1.TokenType.ExamplesLine);
          var description = this.getDescription(examplesNode);
          var exampleTable = examplesNode.getSingle(Parser_1.RuleType.ExamplesTable);
          return cucumber_messages_1.messages.GherkinDocument.Feature.Scenario.Examples.create({
            tags: tags,
            location: this.getLocation(examplesLine),
            keyword: examplesLine.matchedKeyword,
            name: examplesLine.matchedText,
            description: description,
            tableHeader: exampleTable !== undefined ? exampleTable[0] : undefined,
            tableBody: exampleTable !== undefined ? exampleTable.slice(1) : undefined
          });
        }
      case Parser_1.RuleType.ExamplesTable:
        {
          return this.getTableRows(node);
        }
      case Parser_1.RuleType.Description:
        {
          var lineTokens = node.getTokens(Parser_1.TokenType.Other);
          // Trim trailing empty lines
          var end = lineTokens.length;
          while (end > 0 && lineTokens[end - 1].line.trimmedLineText === '') {
            end--;
          }
          lineTokens = lineTokens.slice(0, end);
          return lineTokens.map(function (token) {
            return token.matchedText;
          }).join('\n');
        }
      case Parser_1.RuleType.Feature:
        {
          var header = node.getSingle(Parser_1.RuleType.FeatureHeader);
          if (!header) {
            return null;
          }
          var tags = this.getTags(header);
          var featureLine = header.getToken(Parser_1.TokenType.FeatureLine);
          if (!featureLine) {
            return null;
          }
          var children = [];
          var background = node.getSingle(Parser_1.RuleType.Background);
          if (background) {
            children.push(cucumber_messages_1.messages.GherkinDocument.Feature.FeatureChild.create({
              background: background
            }));
          }
          try {
            for (var _d = __values(node.getItems(Parser_1.RuleType.ScenarioDefinition)), _e = _d.next(); !_e.done; _e = _d.next()) {
              var scenario = _e.value;
              children.push(cucumber_messages_1.messages.GherkinDocument.Feature.FeatureChild.create({
                scenario: scenario
              }));
            }
          } catch (e_3_1) {
            e_3 = {
              error: e_3_1
            };
          } finally {
            try {
              if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            } finally {
              if (e_3) throw e_3.error;
            }
          }
          try {
            for (var _f = __values(node.getItems(Parser_1.RuleType.Rule)), _g = _f.next(); !_g.done; _g = _f.next()) {
              var rule = _g.value;
              children.push(cucumber_messages_1.messages.GherkinDocument.Feature.FeatureChild.create({
                rule: rule
              }));
            }
          } catch (e_4_1) {
            e_4 = {
              error: e_4_1
            };
          } finally {
            try {
              if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
            } finally {
              if (e_4) throw e_4.error;
            }
          }
          var description = this.getDescription(header);
          var language = featureLine.matchedGherkinDialect;
          return cucumber_messages_1.messages.GherkinDocument.Feature.create({
            tags: tags,
            location: this.getLocation(featureLine),
            language: language,
            keyword: featureLine.matchedKeyword,
            name: featureLine.matchedText,
            description: description,
            children: children
          });
        }
      case Parser_1.RuleType.Rule:
        {
          var header = node.getSingle(Parser_1.RuleType.RuleHeader);
          if (!header) {
            return null;
          }
          var ruleLine = header.getToken(Parser_1.TokenType.RuleLine);
          if (!ruleLine) {
            return null;
          }
          var children = [];
          var background = node.getSingle(Parser_1.RuleType.Background);
          if (background) {
            children.push(cucumber_messages_1.messages.GherkinDocument.Feature.FeatureChild.create({
              background: background
            }));
          }
          try {
            for (var _h = __values(node.getItems(Parser_1.RuleType.ScenarioDefinition)), _j = _h.next(); !_j.done; _j = _h.next()) {
              var scenario = _j.value;
              children.push(cucumber_messages_1.messages.GherkinDocument.Feature.FeatureChild.create({
                scenario: scenario
              }));
            }
          } catch (e_5_1) {
            e_5 = {
              error: e_5_1
            };
          } finally {
            try {
              if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
            } finally {
              if (e_5) throw e_5.error;
            }
          }
          var description = this.getDescription(header);
          return cucumber_messages_1.messages.GherkinDocument.Feature.FeatureChild.Rule.create({
            location: this.getLocation(ruleLine),
            keyword: ruleLine.matchedKeyword,
            name: ruleLine.matchedText,
            description: description,
            children: children
          });
        }
      case Parser_1.RuleType.GherkinDocument:
        {
          var feature = node.getSingle(Parser_1.RuleType.Feature);
          return cucumber_messages_1.messages.GherkinDocument.create({
            feature: feature,
            comments: this.comments
          });
        }
      default:
        return node;
    }
  };
  return AstBuilder;
}();
exports.default = AstBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBc3ROb2RlXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZXF1aXJlIiwiY3VjdW1iZXJfbWVzc2FnZXNfMSIsIlBhcnNlcl8xIiwiRXJyb3JzXzEiLCJjcmVhdGVMb2NhdGlvbl8xIiwiQXN0QnVpbGRlciIsIm5ld0lkIiwiRXJyb3IiLCJyZXNldCIsInByb3RvdHlwZSIsInN0YWNrIiwiZGVmYXVsdCIsIlJ1bGVUeXBlIiwiTm9uZSIsImNvbW1lbnRzIiwic3RhcnRSdWxlIiwicnVsZVR5cGUiLCJwdXNoIiwiZW5kUnVsZSIsIm5vZGUiLCJwb3AiLCJ0cmFuc2Zvcm1lZE5vZGUiLCJ0cmFuc2Zvcm1Ob2RlIiwiY3VycmVudE5vZGUiLCJhZGQiLCJidWlsZCIsInRva2VuIiwibWF0Y2hlZFR5cGUiLCJUb2tlblR5cGUiLCJDb21tZW50IiwibWVzc2FnZXMiLCJHaGVya2luRG9jdW1lbnQiLCJjcmVhdGUiLCJsb2NhdGlvbiIsImdldExvY2F0aW9uIiwidGV4dCIsIm1hdGNoZWRUZXh0IiwiZ2V0UmVzdWx0IiwiZ2V0U2luZ2xlIiwibGVuZ3RoIiwiY29sdW1uIiwibGluZSIsImdldFRhZ3MiLCJ0YWdzIiwidGFnc05vZGUiLCJUYWdzIiwidG9rZW5zIiwiZ2V0VG9rZW5zIiwiVGFnTGluZSIsInRva2Vuc18xIiwiX192YWx1ZXMiLCJ0b2tlbnNfMV8xIiwibmV4dCIsImRvbmUiLCJ2YWx1ZSIsIl9jIiwiZV8yIiwibWF0Y2hlZEl0ZW1zIiwiX2QiLCJ0YWdJdGVtIiwiRmVhdHVyZSIsIlRhZyIsIm5hbWUiLCJpZCIsImdldENlbGxzIiwidGFibGVSb3dUb2tlbiIsIl90aGlzIiwibWFwIiwiY2VsbEl0ZW0iLCJUYWJsZVJvdyIsIlRhYmxlQ2VsbCIsImdldERlc2NyaXB0aW9uIiwiRGVzY3JpcHRpb24iLCJnZXRTdGVwcyIsImdldEl0ZW1zIiwiU3RlcCIsImdldFRhYmxlUm93cyIsInJvd3MiLCJjZWxscyIsImVuc3VyZUNlbGxDb3VudCIsImNlbGxDb3VudCIsImZvckVhY2giLCJyb3ciLCJBc3RCdWlsZGVyRXhjZXB0aW9uIiwic3RlcExpbmUiLCJnZXRUb2tlbiIsIlN0ZXBMaW5lIiwiZGF0YVRhYmxlIiwiRGF0YVRhYmxlIiwiZG9jU3RyaW5nIiwiRG9jU3RyaW5nIiwia2V5d29yZCIsIm1hdGNoZWRLZXl3b3JkIiwic2VwYXJhdG9yVG9rZW4iLCJEb2NTdHJpbmdTZXBhcmF0b3IiLCJjb250ZW50VHlwZSIsInVuZGVmaW5lZCIsImxpbmVUb2tlbnMiLCJPdGhlciIsImNvbnRlbnQiLCJ0Iiwiam9pbiIsInJlc3VsdCIsImRlbGltaXRlciIsInRyaW1tZWRMaW5lVGV4dCIsInN1YnN0cmluZyIsIkJhY2tncm91bmQiLCJiYWNrZ3JvdW5kTGluZSIsIkJhY2tncm91bmRMaW5lIiwiZGVzY3JpcHRpb24iLCJzdGVwcyIsIlNjZW5hcmlvRGVmaW5pdGlvbiIsInNjZW5hcmlvTm9kZSIsIlNjZW5hcmlvIiwic2NlbmFyaW9MaW5lIiwiU2NlbmFyaW9MaW5lIiwiZXhhbXBsZXMiLCJFeGFtcGxlc0RlZmluaXRpb24iLCJleGFtcGxlc05vZGUiLCJFeGFtcGxlcyIsImV4YW1wbGVzTGluZSIsIkV4YW1wbGVzTGluZSIsImV4YW1wbGVUYWJsZSIsIkV4YW1wbGVzVGFibGUiLCJ0YWJsZUhlYWRlciIsInRhYmxlQm9keSIsInNsaWNlIiwiZW5kIiwiaGVhZGVyIiwiRmVhdHVyZUhlYWRlciIsImZlYXR1cmVMaW5lIiwiRmVhdHVyZUxpbmUiLCJjaGlsZHJlbiIsImJhY2tncm91bmQiLCJGZWF0dXJlQ2hpbGQiLCJfZSIsInNjZW5hcmlvIiwiX2YiLCJSdWxlIiwiX2ciLCJydWxlIiwibGFuZ3VhZ2UiLCJtYXRjaGVkR2hlcmtpbkRpYWxlY3QiLCJSdWxlSGVhZGVyIiwicnVsZUxpbmUiLCJSdWxlTGluZSIsIl9oIiwiX2oiLCJmZWF0dXJlIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL0FzdEJ1aWxkZXIudHMiXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGlu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