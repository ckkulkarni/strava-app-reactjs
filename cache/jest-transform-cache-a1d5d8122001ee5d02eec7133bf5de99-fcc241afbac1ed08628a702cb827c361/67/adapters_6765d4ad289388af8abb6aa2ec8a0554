b4c60de000cb96d0d3a6fcf439cd70cb
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _utils = _interopRequireDefault(require("../utils.js"));
var _http = _interopRequireDefault(require("./http.js"));
var _xhr = _interopRequireDefault(require("./xhr.js"));
var _AxiosError = _interopRequireDefault(require("../core/AxiosError.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const knownAdapters = {
  http: _http.default,
  xhr: _xhr.default
};
_utils.default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, 'name', {
        value
      });
    } catch (e) {
      // eslint-disable-next-line no-empty
    }
    Object.defineProperty(fn, 'adapterName', {
      value
    });
  }
});
var _default = {
  getAdapter: adapters => {
    adapters = _utils.default.isArray(adapters) ? adapters : [adapters];
    const {
      length
    } = adapters;
    let nameOrAdapter;
    let adapter;
    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      if (adapter = _utils.default.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter) {
        break;
      }
    }
    if (!adapter) {
      if (adapter === false) {
        throw new _AxiosError.default(`Adapter ${nameOrAdapter} is not supported by the environment`, 'ERR_NOT_SUPPORT');
      }
      throw new Error(_utils.default.hasOwnProp(knownAdapters, nameOrAdapter) ? `Adapter '${nameOrAdapter}' is not available in the build` : `Unknown adapter '${nameOrAdapter}'`);
    }
    if (!_utils.default.isFunction(adapter)) {
      throw new TypeError('adapter is not a function');
    }
    return adapter;
  },
  adapters: knownAdapters
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdXRpbHMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9odHRwIiwiX3hociIsIl9BeGlvc0Vycm9yIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJrbm93bkFkYXB0ZXJzIiwiaHR0cCIsImh0dHBBZGFwdGVyIiwieGhyIiwieGhyQWRhcHRlciIsInV0aWxzIiwiZm9yRWFjaCIsImZuIiwidmFsdWUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImUiLCJfZGVmYXVsdCIsImdldEFkYXB0ZXIiLCJhZGFwdGVycyIsImlzQXJyYXkiLCJsZW5ndGgiLCJuYW1lT3JBZGFwdGVyIiwiYWRhcHRlciIsImkiLCJpc1N0cmluZyIsInRvTG93ZXJDYXNlIiwiQXhpb3NFcnJvciIsIkVycm9yIiwiaGFzT3duUHJvcCIsImlzRnVuY3Rpb24iLCJUeXBlRXJyb3IiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiYWRhcHRlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBodHRwQWRhcHRlciBmcm9tICcuL2h0dHAuanMnO1xuaW1wb3J0IHhockFkYXB0ZXIgZnJvbSAnLi94aHIuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuXG5jb25zdCBrbm93bkFkYXB0ZXJzID0ge1xuICBodHRwOiBodHRwQWRhcHRlcixcbiAgeGhyOiB4aHJBZGFwdGVyXG59XG5cbnV0aWxzLmZvckVhY2goa25vd25BZGFwdGVycywgKGZuLCB2YWx1ZSkgPT4ge1xuICBpZihmbikge1xuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICduYW1lJywge3ZhbHVlfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ2FkYXB0ZXJOYW1lJywge3ZhbHVlfSk7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldEFkYXB0ZXI6IChhZGFwdGVycykgPT4ge1xuICAgIGFkYXB0ZXJzID0gdXRpbHMuaXNBcnJheShhZGFwdGVycykgPyBhZGFwdGVycyA6IFthZGFwdGVyc107XG5cbiAgICBjb25zdCB7bGVuZ3RofSA9IGFkYXB0ZXJzO1xuICAgIGxldCBuYW1lT3JBZGFwdGVyO1xuICAgIGxldCBhZGFwdGVyO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgbmFtZU9yQWRhcHRlciA9IGFkYXB0ZXJzW2ldO1xuICAgICAgaWYoKGFkYXB0ZXIgPSB1dGlscy5pc1N0cmluZyhuYW1lT3JBZGFwdGVyKSA/IGtub3duQWRhcHRlcnNbbmFtZU9yQWRhcHRlci50b0xvd2VyQ2FzZSgpXSA6IG5hbWVPckFkYXB0ZXIpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghYWRhcHRlcikge1xuICAgICAgaWYgKGFkYXB0ZXIgPT09IGZhbHNlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICAgIGBBZGFwdGVyICR7bmFtZU9yQWRhcHRlcn0gaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgZW52aXJvbm1lbnRgLFxuICAgICAgICAgICdFUlJfTk9UX1NVUFBPUlQnXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgdXRpbHMuaGFzT3duUHJvcChrbm93bkFkYXB0ZXJzLCBuYW1lT3JBZGFwdGVyKSA/XG4gICAgICAgICAgYEFkYXB0ZXIgJyR7bmFtZU9yQWRhcHRlcn0nIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGJ1aWxkYCA6XG4gICAgICAgICAgYFVua25vd24gYWRhcHRlciAnJHtuYW1lT3JBZGFwdGVyfSdgXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghdXRpbHMuaXNGdW5jdGlvbihhZGFwdGVyKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYWRhcHRlciBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIHJldHVybiBhZGFwdGVyO1xuICB9LFxuICBhZGFwdGVyczoga25vd25BZGFwdGVyc1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxLQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxJQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxXQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBK0MsU0FBQUQsdUJBQUFLLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFFL0MsTUFBTUcsYUFBYSxHQUFHO0VBQ3BCQyxJQUFJLEVBQUVDLGFBQVc7RUFDakJDLEdBQUcsRUFBRUM7QUFDUCxDQUFDO0FBRURDLGNBQUssQ0FBQ0MsT0FBTyxDQUFDTixhQUFhLEVBQUUsQ0FBQ08sRUFBRSxFQUFFQyxLQUFLLEtBQUs7RUFDMUMsSUFBR0QsRUFBRSxFQUFFO0lBQ0wsSUFBSTtNQUNGRSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0gsRUFBRSxFQUFFLE1BQU0sRUFBRTtRQUFDQztNQUFLLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUMsT0FBT0csQ0FBQyxFQUFFO01BQ1Y7SUFBQTtJQUVGRixNQUFNLENBQUNDLGNBQWMsQ0FBQ0gsRUFBRSxFQUFFLGFBQWEsRUFBRTtNQUFDQztJQUFLLENBQUMsQ0FBQztFQUNuRDtBQUNGLENBQUMsQ0FBQztBQUFDLElBQUFJLFFBQUEsR0FFWTtFQUNiQyxVQUFVLEVBQUdDLFFBQVEsSUFBSztJQUN4QkEsUUFBUSxHQUFHVCxjQUFLLENBQUNVLE9BQU8sQ0FBQ0QsUUFBUSxDQUFDLEdBQUdBLFFBQVEsR0FBRyxDQUFDQSxRQUFRLENBQUM7SUFFMUQsTUFBTTtNQUFDRTtJQUFNLENBQUMsR0FBR0YsUUFBUTtJQUN6QixJQUFJRyxhQUFhO0lBQ2pCLElBQUlDLE9BQU87SUFFWCxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0gsTUFBTSxFQUFFRyxDQUFDLEVBQUUsRUFBRTtNQUMvQkYsYUFBYSxHQUFHSCxRQUFRLENBQUNLLENBQUMsQ0FBQztNQUMzQixJQUFJRCxPQUFPLEdBQUdiLGNBQUssQ0FBQ2UsUUFBUSxDQUFDSCxhQUFhLENBQUMsR0FBR2pCLGFBQWEsQ0FBQ2lCLGFBQWEsQ0FBQ0ksV0FBVyxFQUFFLENBQUMsR0FBR0osYUFBYSxFQUFHO1FBQ3pHO01BQ0Y7SUFDRjtJQUVBLElBQUksQ0FBQ0MsT0FBTyxFQUFFO01BQ1osSUFBSUEsT0FBTyxLQUFLLEtBQUssRUFBRTtRQUNyQixNQUFNLElBQUlJLG1CQUFVLENBQ2pCLFdBQVVMLGFBQWMsc0NBQXFDLEVBQzlELGlCQUFpQixDQUNsQjtNQUNIO01BRUEsTUFBTSxJQUFJTSxLQUFLLENBQ2JsQixjQUFLLENBQUNtQixVQUFVLENBQUN4QixhQUFhLEVBQUVpQixhQUFhLENBQUMsR0FDM0MsWUFBV0EsYUFBYyxpQ0FBZ0MsR0FDekQsb0JBQW1CQSxhQUFjLEdBQUUsQ0FDdkM7SUFDSDtJQUVBLElBQUksQ0FBQ1osY0FBSyxDQUFDb0IsVUFBVSxDQUFDUCxPQUFPLENBQUMsRUFBRTtNQUM5QixNQUFNLElBQUlRLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQztJQUNsRDtJQUVBLE9BQU9SLE9BQU87RUFDaEIsQ0FBQztFQUNESixRQUFRLEVBQUVkO0FBQ1osQ0FBQztBQUFBMkIsT0FBQSxDQUFBNUIsT0FBQSxHQUFBYSxRQUFBIn0=