072aeb07c7f8eb11cdc03d47a191d448
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _utils = require("@mui/utils");
var _MenuUnstyledContext = _interopRequireDefault(require("./MenuUnstyledContext"));
var _menuUnstyledClasses = require("./menuUnstyledClasses");
var _useMenu = _interopRequireDefault(require("../useMenu"));
var _composeClasses = _interopRequireDefault(require("../composeClasses"));
var _PopperUnstyled = _interopRequireDefault(require("../PopperUnstyled"));
var _useSlotProps = _interopRequireDefault(require("../utils/useSlotProps"));
var _ClassNameConfigurator = require("../utils/ClassNameConfigurator");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["actions", "anchorEl", "children", "component", "keepMounted", "listboxId", "onClose", "open", "slotProps", "slots"];
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function useUtilityClasses(ownerState) {
  const {
    open
  } = ownerState;
  const slots = {
    root: ['root', open && 'expanded'],
    listbox: ['listbox', open && 'expanded']
  };
  return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_menuUnstyledClasses.getMenuUnstyledUtilityClass));
}
/**
 *
 * Demos:
 *
 * - [Unstyled Menu](https://mui.com/base/react-menu/)
 *
 * API:
 *
 * - [MenuUnstyled API](https://mui.com/base/api/menu-unstyled/)
 */
const MenuUnstyled = /*#__PURE__*/React.forwardRef(function MenuUnstyled(props, forwardedRef) {
  var _ref, _slots$listbox;
  const {
      actions,
      anchorEl,
      children,
      component,
      keepMounted = false,
      listboxId,
      onClose,
      open = false,
      slotProps = {},
      slots = {}
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const {
    contextValue,
    getListboxProps,
    highlightFirstItem,
    highlightLastItem
  } = (0, _useMenu.default)({
    open,
    onClose,
    listboxId
  });
  React.useImperativeHandle(actions, () => ({
    highlightFirstItem,
    highlightLastItem
  }), [highlightFirstItem, highlightLastItem]);
  const ownerState = (0, _extends2.default)({}, props, {
    open
  });
  const classes = useUtilityClasses(ownerState);
  const Root = (_ref = component != null ? component : slots.root) != null ? _ref : _PopperUnstyled.default;
  const rootProps = (0, _useSlotProps.default)({
    elementType: Root,
    externalForwardedProps: other,
    externalSlotProps: slotProps.root,
    additionalProps: {
      anchorEl,
      open,
      keepMounted,
      role: undefined,
      ref: forwardedRef
    },
    className: classes.root,
    ownerState
  });
  const Listbox = (_slots$listbox = slots.listbox) != null ? _slots$listbox : 'ul';
  const listboxProps = (0, _useSlotProps.default)({
    elementType: Listbox,
    getSlotProps: getListboxProps,
    externalSlotProps: slotProps.listbox,
    ownerState,
    className: classes.listbox
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, (0, _extends2.default)({}, rootProps, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Listbox, (0, _extends2.default)({}, listboxProps, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_MenuUnstyledContext.default.Provider, {
        value: contextValue,
        children: children
      })
    }))
  }));
});
process.env.NODE_ENV !== "production" ? MenuUnstyled.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * A ref with imperative actions.
   * It allows to select the first or last menu item.
   */
  actions: _utils.refType,
  /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   */
  anchorEl: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_utils.HTMLElementType, _propTypes.default.object, _propTypes.default.func]),
  /**
   * @ignore
   */
  children: _propTypes.default.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes.default.elementType,
  /**
   * Always keep the menu in the DOM.
   * This prop can be useful in SEO situation or when you want to maximize the responsiveness of the Menu.
   *
   * @default false
   */
  keepMounted: _propTypes.default.bool,
  /**
   * @ignore
   */
  listboxId: _propTypes.default.string,
  /**
   * Triggered when focus leaves the menu and the menu should close.
   */
  onClose: _propTypes.default.func,
  /**
   * Controls whether the menu is displayed.
   * @default false
   */
  open: _propTypes.default.bool,
  /**
   * The props used for each slot inside the Menu.
   * @default {}
   */
  slotProps: _propTypes.default.shape({
    listbox: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
  }),
  /**
   * The components used for each slot inside the Menu.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: _propTypes.default.shape({
    listbox: _propTypes.default.elementType,
    root: _propTypes.default.elementType
  })
} : void 0;
var _default = MenuUnstyled;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9leHRlbmRzMiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcHJvcFR5cGVzIiwiX3V0aWxzIiwiX01lbnVVbnN0eWxlZENvbnRleHQiLCJfbWVudVVuc3R5bGVkQ2xhc3NlcyIsIl91c2VNZW51IiwiX2NvbXBvc2VDbGFzc2VzIiwiX1BvcHBlclVuc3R5bGVkIiwiX3VzZVNsb3RQcm9wcyIsIl9DbGFzc05hbWVDb25maWd1cmF0b3IiLCJfanN4UnVudGltZSIsIl9leGNsdWRlZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJ1c2VVdGlsaXR5Q2xhc3NlcyIsIm93bmVyU3RhdGUiLCJvcGVuIiwic2xvdHMiLCJyb290IiwibGlzdGJveCIsInVzZUNsYXNzTmFtZXNPdmVycmlkZSIsImdldE1lbnVVbnN0eWxlZFV0aWxpdHlDbGFzcyIsIk1lbnVVbnN0eWxlZCIsImZvcndhcmRSZWYiLCJwcm9wcyIsImZvcndhcmRlZFJlZiIsIl9yZWYiLCJfc2xvdHMkbGlzdGJveCIsImFjdGlvbnMiLCJhbmNob3JFbCIsImNoaWxkcmVuIiwiY29tcG9uZW50Iiwia2VlcE1vdW50ZWQiLCJsaXN0Ym94SWQiLCJvbkNsb3NlIiwic2xvdFByb3BzIiwib3RoZXIiLCJjb250ZXh0VmFsdWUiLCJnZXRMaXN0Ym94UHJvcHMiLCJoaWdobGlnaHRGaXJzdEl0ZW0iLCJoaWdobGlnaHRMYXN0SXRlbSIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJjbGFzc2VzIiwiUm9vdCIsInJvb3RQcm9wcyIsImVsZW1lbnRUeXBlIiwiZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyIsImV4dGVybmFsU2xvdFByb3BzIiwiYWRkaXRpb25hbFByb3BzIiwicm9sZSIsInVuZGVmaW5lZCIsInJlZiIsImNsYXNzTmFtZSIsIkxpc3Rib3giLCJsaXN0Ym94UHJvcHMiLCJnZXRTbG90UHJvcHMiLCJqc3giLCJQcm92aWRlciIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsInByb3BUeXBlcyIsInJlZlR5cGUiLCJvbmVPZlR5cGUiLCJIVE1MRWxlbWVudFR5cGUiLCJvYmplY3QiLCJmdW5jIiwibm9kZSIsImJvb2wiLCJzdHJpbmciLCJzaGFwZSIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiTWVudVVuc3R5bGVkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtdWkvdXRpbHNcIik7XG52YXIgX01lbnVVbnN0eWxlZENvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL01lbnVVbnN0eWxlZENvbnRleHRcIikpO1xudmFyIF9tZW51VW5zdHlsZWRDbGFzc2VzID0gcmVxdWlyZShcIi4vbWVudVVuc3R5bGVkQ2xhc3Nlc1wiKTtcbnZhciBfdXNlTWVudSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3VzZU1lbnVcIikpO1xudmFyIF9jb21wb3NlQ2xhc3NlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbXBvc2VDbGFzc2VzXCIpKTtcbnZhciBfUG9wcGVyVW5zdHlsZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Qb3BwZXJVbnN0eWxlZFwiKSk7XG52YXIgX3VzZVNsb3RQcm9wcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3VzZVNsb3RQcm9wc1wiKSk7XG52YXIgX0NsYXNzTmFtZUNvbmZpZ3VyYXRvciA9IHJlcXVpcmUoXCIuLi91dGlscy9DbGFzc05hbWVDb25maWd1cmF0b3JcIik7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhY3Rpb25zXCIsIFwiYW5jaG9yRWxcIiwgXCJjaGlsZHJlblwiLCBcImNvbXBvbmVudFwiLCBcImtlZXBNb3VudGVkXCIsIFwibGlzdGJveElkXCIsIFwib25DbG9zZVwiLCBcIm9wZW5cIiwgXCJzbG90UHJvcHNcIiwgXCJzbG90c1wiXTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZUJhYmVsSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAobm9kZUludGVyb3ApIHsgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wOyB9KShub2RlSW50ZXJvcCk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHsgaWYgKCFub2RlSW50ZXJvcCAmJiBvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuZnVuY3Rpb24gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSkge1xuICBjb25zdCB7XG4gICAgb3BlblxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290Jywgb3BlbiAmJiAnZXhwYW5kZWQnXSxcbiAgICBsaXN0Ym94OiBbJ2xpc3Rib3gnLCBvcGVuICYmICdleHBhbmRlZCddXG4gIH07XG4gIHJldHVybiAoMCwgX2NvbXBvc2VDbGFzc2VzLmRlZmF1bHQpKHNsb3RzLCAoMCwgX0NsYXNzTmFtZUNvbmZpZ3VyYXRvci51c2VDbGFzc05hbWVzT3ZlcnJpZGUpKF9tZW51VW5zdHlsZWRDbGFzc2VzLmdldE1lbnVVbnN0eWxlZFV0aWxpdHlDbGFzcykpO1xufVxuLyoqXG4gKlxuICogRGVtb3M6XG4gKlxuICogLSBbVW5zdHlsZWQgTWVudV0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UvcmVhY3QtbWVudS8pXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW01lbnVVbnN0eWxlZCBBUEldKGh0dHBzOi8vbXVpLmNvbS9iYXNlL2FwaS9tZW51LXVuc3R5bGVkLylcbiAqL1xuY29uc3QgTWVudVVuc3R5bGVkID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTWVudVVuc3R5bGVkKHByb3BzLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYsIF9zbG90cyRsaXN0Ym94O1xuICBjb25zdCB7XG4gICAgICBhY3Rpb25zLFxuICAgICAgYW5jaG9yRWwsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNvbXBvbmVudCxcbiAgICAgIGtlZXBNb3VudGVkID0gZmFsc2UsXG4gICAgICBsaXN0Ym94SWQsXG4gICAgICBvbkNsb3NlLFxuICAgICAgb3BlbiA9IGZhbHNlLFxuICAgICAgc2xvdFByb3BzID0ge30sXG4gICAgICBzbG90cyA9IHt9XG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qge1xuICAgIGNvbnRleHRWYWx1ZSxcbiAgICBnZXRMaXN0Ym94UHJvcHMsXG4gICAgaGlnaGxpZ2h0Rmlyc3RJdGVtLFxuICAgIGhpZ2hsaWdodExhc3RJdGVtXG4gIH0gPSAoMCwgX3VzZU1lbnUuZGVmYXVsdCkoe1xuICAgIG9wZW4sXG4gICAgb25DbG9zZSxcbiAgICBsaXN0Ym94SWRcbiAgfSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9ucywgKCkgPT4gKHtcbiAgICBoaWdobGlnaHRGaXJzdEl0ZW0sXG4gICAgaGlnaGxpZ2h0TGFzdEl0ZW1cbiAgfSksIFtoaWdobGlnaHRGaXJzdEl0ZW0sIGhpZ2hsaWdodExhc3RJdGVtXSk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgIG9wZW5cbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgUm9vdCA9IChfcmVmID0gY29tcG9uZW50ICE9IG51bGwgPyBjb21wb25lbnQgOiBzbG90cy5yb290KSAhPSBudWxsID8gX3JlZiA6IF9Qb3BwZXJVbnN0eWxlZC5kZWZhdWx0O1xuICBjb25zdCByb290UHJvcHMgPSAoMCwgX3VzZVNsb3RQcm9wcy5kZWZhdWx0KSh7XG4gICAgZWxlbWVudFR5cGU6IFJvb3QsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wczogb3RoZXIsXG4gICAgZXh0ZXJuYWxTbG90UHJvcHM6IHNsb3RQcm9wcy5yb290LFxuICAgIGFkZGl0aW9uYWxQcm9wczoge1xuICAgICAgYW5jaG9yRWwsXG4gICAgICBvcGVuLFxuICAgICAga2VlcE1vdW50ZWQsXG4gICAgICByb2xlOiB1bmRlZmluZWQsXG4gICAgICByZWY6IGZvcndhcmRlZFJlZlxuICAgIH0sXG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnJvb3QsXG4gICAgb3duZXJTdGF0ZVxuICB9KTtcbiAgY29uc3QgTGlzdGJveCA9IChfc2xvdHMkbGlzdGJveCA9IHNsb3RzLmxpc3Rib3gpICE9IG51bGwgPyBfc2xvdHMkbGlzdGJveCA6ICd1bCc7XG4gIGNvbnN0IGxpc3Rib3hQcm9wcyA9ICgwLCBfdXNlU2xvdFByb3BzLmRlZmF1bHQpKHtcbiAgICBlbGVtZW50VHlwZTogTGlzdGJveCxcbiAgICBnZXRTbG90UHJvcHM6IGdldExpc3Rib3hQcm9wcyxcbiAgICBleHRlcm5hbFNsb3RQcm9wczogc2xvdFByb3BzLmxpc3Rib3gsXG4gICAgb3duZXJTdGF0ZSxcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubGlzdGJveFxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShSb290LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCByb290UHJvcHMsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKExpc3Rib3gsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGxpc3Rib3hQcm9wcywge1xuICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShfTWVudVVuc3R5bGVkQ29udGV4dC5kZWZhdWx0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBjb250ZXh0VmFsdWUsXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgfSlcbiAgICB9KSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51VW5zdHlsZWQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogQSByZWYgd2l0aCBpbXBlcmF0aXZlIGFjdGlvbnMuXG4gICAqIEl0IGFsbG93cyB0byBzZWxlY3QgdGhlIGZpcnN0IG9yIGxhc3QgbWVudSBpdGVtLlxuICAgKi9cbiAgYWN0aW9uczogX3V0aWxzLnJlZlR5cGUsXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQsIFt2aXJ0dWFsRWxlbWVudF0oaHR0cHM6Ly9wb3BwZXIuanMub3JnL2RvY3MvdjIvdmlydHVhbC1lbGVtZW50cy8pLFxuICAgKiBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuXG4gICAqIEl0J3MgdXNlZCB0byBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIuXG4gICAqL1xuICBhbmNob3JFbDogX3Byb3BUeXBlcy5kZWZhdWx0IC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtfdXRpbHMuSFRNTEVsZW1lbnRUeXBlLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBBbHdheXMga2VlcCB0aGUgbWVudSBpbiB0aGUgRE9NLlxuICAgKiBUaGlzIHByb3AgY2FuIGJlIHVzZWZ1bCBpbiBTRU8gc2l0dWF0aW9uIG9yIHdoZW4geW91IHdhbnQgdG8gbWF4aW1pemUgdGhlIHJlc3BvbnNpdmVuZXNzIG9mIHRoZSBNZW51LlxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAga2VlcE1vdW50ZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbGlzdGJveElkOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogVHJpZ2dlcmVkIHdoZW4gZm9jdXMgbGVhdmVzIHRoZSBtZW51IGFuZCB0aGUgbWVudSBzaG91bGQgY2xvc2UuXG4gICAqL1xuICBvbkNsb3NlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoZXRoZXIgdGhlIG1lbnUgaXMgZGlzcGxheWVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgb3BlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgTWVudS5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgICBsaXN0Ym94OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuICAgIHJvb3Q6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSlcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBNZW51LlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgbGlzdGJveDogX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnRUeXBlLFxuICAgIHJvb3Q6IF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50VHlwZVxuICB9KVxufSA6IHZvaWQgMDtcbnZhciBfZGVmYXVsdCA9IE1lbnVVbnN0eWxlZDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxzQkFBc0IsR0FBR0MsT0FBTyxDQUFDLDhDQUE4QyxDQUFDO0FBQ3BGQyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUN4QixJQUFJQyxTQUFTLEdBQUdQLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUNqRixJQUFJTyw4QkFBOEIsR0FBR1Isc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO0FBQzNILElBQUlR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