560c186614fe35f88c9f30b6eddd667a
"use strict";

_getJestObj().mock("axios");
var _jestCucumber = require("jest-cucumber");
var _react = require("@testing-library/react");
var _Base = _interopRequireDefault(require("../../Base"));
var _react2 = _interopRequireDefault(require("react"));
require("@testing-library/jest-dom/extend-expect");
var router = _interopRequireWildcard(require("react-router"));
require("text-encoding");
var _reactRouterDom = require("react-router-dom");
var _axios = _interopRequireDefault(require("axios"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const feature = (0, _jestCucumber.loadFeature)("src/components/features/base.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("Search for a movie", ({
    given,
    when,
    then,
    and
  }) => {
    const navigate = jest.fn();
    beforeEach(() => {
      jest.spyOn(router, "useNavigate").mockImplementation(() => navigate);
    });
    _axios.default.get.mockResolvedValueOnce({
      data: {
        Title: "Manmadhudu",
        Year: "2002",
        Rated: "N/A",
        Released: "20 Dec 2002",
        Runtime: "142 min",
        Genre: "Comedy, Romance",
        Director: "Vijay K. Bhaskar",
        Writer: "Vijay K. Bhaskar, Trivikram Srinivas",
        Actors: "Nagarjuna Akkineni, Sonali Bendre, Anshu",
        Plot: "A misogynist is forced by circumstances to work with a woman.",
        Language: "Telugu",
        Poster: "https://m.media-amazon.com/images/M/MV5BOTE1M2IwMzktNjI1Mi00ZTFkLTg4MmMtNTZmMjk4YTdhODlkXkEyXkFqcGdeQXVyNjE2NTgxOTE@._V1_SX300.jpg",
        Ratings: [{
          Source: "Internet Movie Database",
          Value: "8.3/10"
        }],
        imdbRating: "8.3",
        imdbVotes: "4,096",
        imdbID: "tt0355742"
      }
    });
    const screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, {
      initialEntries: ["/"]
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.Route, {
      path: "/",
      element: /*#__PURE__*/_react2.default.createElement(_Base.default, null)
    }))));
    given("I am on the search page", () => {
      expect(screen).toBeDefined();
    });
    when('I select the "Movie" tab', () => {
      const movieTab = screen.getByRole("tab", {
        name: "Movie"
      });
      _react.fireEvent.click(movieTab);
    });
    and('I enter "Manmadhudu" in the search input and hit submit', async () => {
      const movieSearch = screen.getByTestId("search-movies").querySelector("input");
      expect(movieSearch).toBeInTheDocument();
      _react.fireEvent.change(movieSearch, {
        target: {
          value: "Manmadhudu"
        }
      });
      const submitButton = screen.getByRole("button", {
        name: "Submit"
      });
      _react.fireEvent.click(submitButton);
    });
    then("I should see the search results card", async () => {
      await (0, _react.waitFor)(() => {
        const movieTitle = screen.getByText("Manmadhudu");
        const movieRating = screen.getByText("Rating: N/A");
        expect(movieTitle).toBeTruthy();
        expect(movieRating).toBeTruthy();
      });
    });
    and("I should be able to click the card to view more details", async () => {
      const movieCard = screen.getByTestId("movie-card");
      _react.fireEvent.click(movieCard);
      expect(navigate).toHaveBeenCalled();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,