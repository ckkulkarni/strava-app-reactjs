5662a4a5916f5a5c23fcafbeaf56e401
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _clsx = _interopRequireDefault(require("clsx"));
var _utils = require("@mui/utils");
var _base = require("@mui/base");
var _system = require("@mui/system");
var _styled = _interopRequireDefault(require("../styles/styled"));
var _getOverlayAlpha = _interopRequireDefault(require("../styles/getOverlayAlpha"));
var _useThemeProps = _interopRequireDefault(require("../styles/useThemeProps"));
var _useTheme = _interopRequireDefault(require("../styles/useTheme"));
var _paperClasses = require("./paperClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["className", "component", "elevation", "square", "variant"];
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
const useUtilityClasses = ownerState => {
  const {
    square,
    elevation,
    variant,
    classes
  } = ownerState;
  const slots = {
    root: ['root', variant, !square && 'rounded', variant === 'elevation' && `elevation${elevation}`]
  };
  return (0, _base.unstable_composeClasses)(slots, _paperClasses.getPaperUtilityClass, classes);
};
const PaperRoot = (0, _styled.default)('div', {
  name: 'MuiPaper',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, styles[ownerState.variant], !ownerState.square && styles.rounded, ownerState.variant === 'elevation' && styles[`elevation${ownerState.elevation}`]];
  }
})(({
  theme,
  ownerState
}) => {
  var _theme$vars$overlays;
  return (0, _extends2.default)({
    backgroundColor: (theme.vars || theme).palette.background.paper,
    color: (theme.vars || theme).palette.text.primary,
    transition: theme.transitions.create('box-shadow')
  }, !ownerState.square && {
    borderRadius: theme.shape.borderRadius
  }, ownerState.variant === 'outlined' && {
    border: `1px solid ${(theme.vars || theme).palette.divider}`
  }, ownerState.variant === 'elevation' && (0, _extends2.default)({
    boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
  }, !theme.vars && theme.palette.mode === 'dark' && {
    backgroundImage: `linear-gradient(${(0, _system.alpha)('#fff', (0, _getOverlayAlpha.default)(ownerState.elevation))}, ${(0, _system.alpha)('#fff', (0, _getOverlayAlpha.default)(ownerState.elevation))})`
  }, theme.vars && {
    backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
  }));
});
const Paper = /*#__PURE__*/React.forwardRef(function Paper(inProps, ref) {
  const props = (0, _useThemeProps.default)({
    props: inProps,
    name: 'MuiPaper'
  });
  const {
      className,
      component = 'div',
      elevation = 1,
      square = false,
      variant = 'elevation'
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const ownerState = (0, _extends2.default)({}, props, {
    component,
    elevation,
    square,
    variant
  });
  const classes = useUtilityClasses(ownerState);
  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const theme = (0, _useTheme.default)();
    if (theme.shadows[elevation] === undefined) {
      console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join('\n'));
    }
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(PaperRoot, (0, _extends2.default)({
    as: component,
    ownerState: ownerState,
    className: (0, _clsx.default)(classes.root, className),
    ref: ref
  }, other));
});
process.env.NODE_ENV !== "production" ? Paper.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: _propTypes.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,
  /**
   * @ignore
   */
  className: _propTypes.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes.default.elementType,
  /**
   * Shadow depth, corresponds to `dp` in the spec.
   * It accepts values between 0 and 24 inclusive.
   * @default 1
   */
  elevation: (0, _utils.chainPropTypes)(_utils.integerPropType, props => {
    const {
      elevation,
      variant
    } = props;
    if (elevation > 0 && variant === 'outlined') {
      return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
    }
    return null;
  }),
  /**
   * If `true`, rounded corners are disabled.
   * @default false
   */
  square: _propTypes.default.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
  /**
   * The variant to use.
   * @default 'elevation'
   */
  variant: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['elevation', 'outlined']), _propTypes.default.string])
} : void 0;
var _default = Paper;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiIsIl9leHRlbmRzMiIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcHJvcFR5cGVzIiwiX2Nsc3giLCJfdXRpbHMiLCJfYmFzZSIsIl9zeXN0ZW0iLCJfc3R5bGVkIiwiX2dldE92ZXJsYXlBbHBoYSIsIl91c2VUaGVtZVByb3BzIiwiX3VzZVRoZW1lIiwiX3BhcGVyQ2xhc3NlcyIsIl9qc3hSdW50aW1lIiwiX2V4Y2x1ZGVkIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsInVzZVV0aWxpdHlDbGFzc2VzIiwib3duZXJTdGF0ZSIsInNxdWFyZSIsImVsZXZhdGlvbiIsInZhcmlhbnQiLCJjbGFzc2VzIiwic2xvdHMiLCJyb290IiwidW5zdGFibGVfY29tcG9zZUNsYXNzZXMiLCJnZXRQYXBlclV0aWxpdHlDbGFzcyIsIlBhcGVyUm9vdCIsIm5hbWUiLCJzbG90Iiwib3ZlcnJpZGVzUmVzb2x2ZXIiLCJwcm9wcyIsInN0eWxlcyIsInJvdW5kZWQiLCJ0aGVtZSIsIl90aGVtZSR2YXJzJG92ZXJsYXlzIiwiYmFja2dyb3VuZENvbG9yIiwidmFycyIsInBhbGV0dGUiLCJiYWNrZ3JvdW5kIiwicGFwZXIiLCJjb2xvciIsInRleHQiLCJwcmltYXJ5IiwidHJhbnNpdGlvbiIsInRyYW5zaXRpb25zIiwiY3JlYXRlIiwiYm9yZGVyUmFkaXVzIiwic2hhcGUiLCJib3JkZXIiLCJkaXZpZGVyIiwiYm94U2hhZG93Iiwic2hhZG93cyIsIm1vZGUiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJhbHBoYSIsIm92ZXJsYXlzIiwiUGFwZXIiLCJmb3J3YXJkUmVmIiwiaW5Qcm9wcyIsInJlZiIsImNsYXNzTmFtZSIsImNvbXBvbmVudCIsIm90aGVyIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwidW5kZWZpbmVkIiwiY29uc29sZSIsImVycm9yIiwiam9pbiIsImpzeCIsImFzIiwicHJvcFR5cGVzIiwiY2hpbGRyZW4iLCJub2RlIiwib2JqZWN0Iiwic3RyaW5nIiwiZWxlbWVudFR5cGUiLCJjaGFpblByb3BUeXBlcyIsImludGVnZXJQcm9wVHlwZSIsIkVycm9yIiwiYm9vbCIsInN4Iiwib25lT2ZUeXBlIiwiYXJyYXlPZiIsImZ1bmMiLCJvbmVPZiIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiUGFwZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcbnZhciBfY2xzeCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsc3hcIikpO1xudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAbXVpL3V0aWxzXCIpO1xudmFyIF9iYXNlID0gcmVxdWlyZShcIkBtdWkvYmFzZVwiKTtcbnZhciBfc3lzdGVtID0gcmVxdWlyZShcIkBtdWkvc3lzdGVtXCIpO1xudmFyIF9zdHlsZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvc3R5bGVkXCIpKTtcbnZhciBfZ2V0T3ZlcmxheUFscGhhID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL2dldE92ZXJsYXlBbHBoYVwiKSk7XG52YXIgX3VzZVRoZW1lUHJvcHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvdXNlVGhlbWVQcm9wc1wiKSk7XG52YXIgX3VzZVRoZW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3VzZVRoZW1lXCIpKTtcbnZhciBfcGFwZXJDbGFzc2VzID0gcmVxdWlyZShcIi4vcGFwZXJDbGFzc2VzXCIpO1xudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZWxldmF0aW9uXCIsIFwic3F1YXJlXCIsIFwidmFyaWFudFwiXTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZUJhYmVsSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAobm9kZUludGVyb3ApIHsgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wOyB9KShub2RlSW50ZXJvcCk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHsgaWYgKCFub2RlSW50ZXJvcCAmJiBvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIHNxdWFyZSxcbiAgICBlbGV2YXRpb24sXG4gICAgdmFyaWFudCxcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50LCAhc3F1YXJlICYmICdyb3VuZGVkJywgdmFyaWFudCA9PT0gJ2VsZXZhdGlvbicgJiYgYGVsZXZhdGlvbiR7ZWxldmF0aW9ufWBdXG4gIH07XG4gIHJldHVybiAoMCwgX2Jhc2UudW5zdGFibGVfY29tcG9zZUNsYXNzZXMpKHNsb3RzLCBfcGFwZXJDbGFzc2VzLmdldFBhcGVyVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBQYXBlclJvb3QgPSAoMCwgX3N0eWxlZC5kZWZhdWx0KSgnZGl2Jywge1xuICBuYW1lOiAnTXVpUGFwZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sICFvd25lclN0YXRlLnNxdWFyZSAmJiBzdHlsZXMucm91bmRlZCwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZWxldmF0aW9uJyAmJiBzdHlsZXNbYGVsZXZhdGlvbiR7b3duZXJTdGF0ZS5lbGV2YXRpb259YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICB2YXIgX3RoZW1lJHZhcnMkb3ZlcmxheXM7XG4gIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmJhY2tncm91bmQucGFwZXIsXG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JveC1zaGFkb3cnKVxuICB9LCAhb3duZXJTdGF0ZS5zcXVhcmUgJiYge1xuICAgIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzXG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiB7XG4gICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7KHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZGl2aWRlcn1gXG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2VsZXZhdGlvbicgJiYgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgYm94U2hhZG93OiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhZG93c1tvd25lclN0YXRlLmVsZXZhdGlvbl1cbiAgfSwgIXRoZW1lLnZhcnMgJiYgdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnZGFyaycgJiYge1xuICAgIGJhY2tncm91bmRJbWFnZTogYGxpbmVhci1ncmFkaWVudCgkeygwLCBfc3lzdGVtLmFscGhhKSgnI2ZmZicsICgwLCBfZ2V0T3ZlcmxheUFscGhhLmRlZmF1bHQpKG93bmVyU3RhdGUuZWxldmF0aW9uKSl9LCAkeygwLCBfc3lzdGVtLmFscGhhKSgnI2ZmZicsICgwLCBfZ2V0T3ZlcmxheUFscGhhLmRlZmF1bHQpKG93bmVyU3RhdGUuZWxldmF0aW9uKSl9KWBcbiAgfSwgdGhlbWUudmFycyAmJiB7XG4gICAgYmFja2dyb3VuZEltYWdlOiAoX3RoZW1lJHZhcnMkb3ZlcmxheXMgPSB0aGVtZS52YXJzLm92ZXJsYXlzKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHZhcnMkb3ZlcmxheXNbb3duZXJTdGF0ZS5lbGV2YXRpb25dXG4gIH0pKTtcbn0pO1xuY29uc3QgUGFwZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQYXBlcihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSAoMCwgX3VzZVRoZW1lUHJvcHMuZGVmYXVsdCkoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlQYXBlcidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgICAgZWxldmF0aW9uID0gMSxcbiAgICAgIHNxdWFyZSA9IGZhbHNlLFxuICAgICAgdmFyaWFudCA9ICdlbGV2YXRpb24nXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGVsZXZhdGlvbixcbiAgICBzcXVhcmUsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIGNvbnN0IHRoZW1lID0gKDAsIF91c2VUaGVtZS5kZWZhdWx0KSgpO1xuICAgIGlmICh0aGVtZS5zaGFkb3dzW2VsZXZhdGlvbl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIGVsZXZhdGlvbiBwcm92aWRlZCA8UGFwZXIgZWxldmF0aW9uPXske2VsZXZhdGlvbn19PiBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSB0aGVtZS5gLCBgUGxlYXNlIG1ha2Ugc3VyZSB0aGF0IFxcYHRoZW1lLnNoYWRvd3NbJHtlbGV2YXRpb259XVxcYCBpcyBkZWZpbmVkLmBdLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShQYXBlclJvb3QsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGFzOiBjb21wb25lbnQsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xzeC5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUGFwZXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFNoYWRvdyBkZXB0aCwgY29ycmVzcG9uZHMgdG8gYGRwYCBpbiB0aGUgc3BlYy5cbiAgICogSXQgYWNjZXB0cyB2YWx1ZXMgYmV0d2VlbiAwIGFuZCAyNCBpbmNsdXNpdmUuXG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIGVsZXZhdGlvbjogKDAsIF91dGlscy5jaGFpblByb3BUeXBlcykoX3V0aWxzLmludGVnZXJQcm9wVHlwZSwgcHJvcHMgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGVsZXZhdGlvbixcbiAgICAgIHZhcmlhbnRcbiAgICB9ID0gcHJvcHM7XG4gICAgaWYgKGVsZXZhdGlvbiA+IDAgJiYgdmFyaWFudCA9PT0gJ291dGxpbmVkJykge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihgTVVJOiBDb21iaW5pbmcgXFxgZWxldmF0aW9uPXske2VsZXZhdGlvbn19XFxgIHdpdGggXFxgdmFyaWFudD1cIiR7dmFyaWFudH1cIlxcYCBoYXMgbm8gZWZmZWN0LiBFaXRoZXIgdXNlIFxcYGVsZXZhdGlvbj17MH1cXGAgb3IgdXNlIGEgZGlmZmVyZW50IFxcYHZhcmlhbnRcXGAuYCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcm91bmRlZCBjb3JuZXJzIGFyZSBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNxdWFyZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCwgX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xdKSksIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdlbGV2YXRpb24nXG4gICAqL1xuICB2YXJpYW50OiBfcHJvcFR5cGVzLmRlZmF1bHQgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2VsZXZhdGlvbicsICdvdXRsaW5lZCddKSwgX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ10pXG59IDogdm9pZCAwO1xudmFyIF9kZWZhdWx0ID0gUGFwZXI7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQztBQUNwRkMsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFP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