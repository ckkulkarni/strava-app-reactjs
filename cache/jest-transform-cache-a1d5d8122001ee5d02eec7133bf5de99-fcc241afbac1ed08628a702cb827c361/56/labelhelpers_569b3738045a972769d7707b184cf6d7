a834dcd7cc505174a15e3ac9dca4c2c3
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLabelContent = getLabelContent;
exports.getLabels = getLabels;
exports.getRealLabels = getRealLabels;
var _helpers = require("./helpers");
const labelledNodeNames = ['button', 'meter', 'output', 'progress', 'select', 'textarea', 'input'];
function getTextContent(node) {
  if (labelledNodeNames.includes(node.nodeName.toLowerCase())) {
    return '';
  }
  if (node.nodeType === _helpers.TEXT_NODE) return node.textContent;
  return Array.from(node.childNodes).map(childNode => getTextContent(childNode)).join('');
}
function getLabelContent(element) {
  let textContent;
  if (element.tagName.toLowerCase() === 'label') {
    textContent = getTextContent(element);
  } else {
    textContent = element.value || element.textContent;
  }
  return textContent;
}

// Based on https://github.com/eps1lon/dom-accessibility-api/pull/352
function getRealLabels(element) {
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- types are not aware of older browsers that don't implement `labels`
  if (element.labels !== undefined) {
    return element.labels ?? [];
  }
  if (!isLabelable(element)) return [];
  const labels = element.ownerDocument.querySelectorAll('label');
  return Array.from(labels).filter(label => label.control === element);
}
function isLabelable(element) {
  return /BUTTON|METER|OUTPUT|PROGRESS|SELECT|TEXTAREA/.test(element.tagName) || element.tagName === 'INPUT' && element.getAttribute('type') !== 'hidden';
}
function getLabels(container, element, {
  selector = '*'
} = {}) {
  const ariaLabelledBy = element.getAttribute('aria-labelledby');
  const labelsId = ariaLabelledBy ? ariaLabelledBy.split(' ') : [];
  return labelsId.length ? labelsId.map(labelId => {
    const labellingElement = container.querySelector(`[id="${labelId}"]`);
    return labellingElement ? {
      content: getLabelContent(labellingElement),
      formControl: null
    } : {
      content: '',
      formControl: null
    };
  }) : Array.from(getRealLabels(element)).map(label => {
    const textToMatch = getLabelContent(label);
    const formControlSelector = 'button, input, meter, output, progress, select, textarea';
    const labelledFormControl = Array.from(label.querySelectorAll(formControlSelector)).filter(formControlElement => formControlElement.matches(selector))[0];
    return {
      content: textToMatch,
      formControl: labelledFormControl
    };
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldExhYmVsQ29udGVudCIsImdldExhYmVscyIsImdldFJlYWxMYWJlbHMiLCJfaGVscGVycyIsInJlcXVpcmUiLCJsYWJlbGxlZE5vZGVOYW1lcyIsImdldFRleHRDb250ZW50Iiwibm9kZSIsImluY2x1ZGVzIiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsIm5vZGVUeXBlIiwiVEVYVF9OT0RFIiwidGV4dENvbnRlbnQiLCJBcnJheSIsImZyb20iLCJjaGlsZE5vZGVzIiwibWFwIiwiY2hpbGROb2RlIiwiam9pbiIsImVsZW1lbnQiLCJ0YWdOYW1lIiwibGFiZWxzIiwidW5kZWZpbmVkIiwiaXNMYWJlbGFibGUiLCJvd25lckRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZpbHRlciIsImxhYmVsIiwiY29udHJvbCIsInRlc3QiLCJnZXRBdHRyaWJ1dGUiLCJjb250YWluZXIiLCJzZWxlY3RvciIsImFyaWFMYWJlbGxlZEJ5IiwibGFiZWxzSWQiLCJzcGxpdCIsImxlbmd0aCIsImxhYmVsSWQiLCJsYWJlbGxpbmdFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImNvbnRlbnQiLCJmb3JtQ29udHJvbCIsInRleHRUb01hdGNoIiwiZm9ybUNvbnRyb2xTZWxlY3RvciIsImxhYmVsbGVkRm9ybUNvbnRyb2wiLCJmb3JtQ29udHJvbEVsZW1lbnQiLCJtYXRjaGVzIl0sInNvdXJjZXMiOlsibGFiZWwtaGVscGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0TGFiZWxDb250ZW50ID0gZ2V0TGFiZWxDb250ZW50O1xuZXhwb3J0cy5nZXRMYWJlbHMgPSBnZXRMYWJlbHM7XG5leHBvcnRzLmdldFJlYWxMYWJlbHMgPSBnZXRSZWFsTGFiZWxzO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4vaGVscGVyc1wiKTtcbmNvbnN0IGxhYmVsbGVkTm9kZU5hbWVzID0gWydidXR0b24nLCAnbWV0ZXInLCAnb3V0cHV0JywgJ3Byb2dyZXNzJywgJ3NlbGVjdCcsICd0ZXh0YXJlYScsICdpbnB1dCddO1xuZnVuY3Rpb24gZ2V0VGV4dENvbnRlbnQobm9kZSkge1xuICBpZiAobGFiZWxsZWROb2RlTmFtZXMuaW5jbHVkZXMobm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gX2hlbHBlcnMuVEVYVF9OT0RFKSByZXR1cm4gbm9kZS50ZXh0Q29udGVudDtcbiAgcmV0dXJuIEFycmF5LmZyb20obm9kZS5jaGlsZE5vZGVzKS5tYXAoY2hpbGROb2RlID0+IGdldFRleHRDb250ZW50KGNoaWxkTm9kZSkpLmpvaW4oJycpO1xufVxuZnVuY3Rpb24gZ2V0TGFiZWxDb250ZW50KGVsZW1lbnQpIHtcbiAgbGV0IHRleHRDb250ZW50O1xuICBpZiAoZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdsYWJlbCcpIHtcbiAgICB0ZXh0Q29udGVudCA9IGdldFRleHRDb250ZW50KGVsZW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIHRleHRDb250ZW50ID0gZWxlbWVudC52YWx1ZSB8fCBlbGVtZW50LnRleHRDb250ZW50O1xuICB9XG4gIHJldHVybiB0ZXh0Q29udGVudDtcbn1cblxuLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2VwczFsb24vZG9tLWFjY2Vzc2liaWxpdHktYXBpL3B1bGwvMzUyXG5mdW5jdGlvbiBnZXRSZWFsTGFiZWxzKGVsZW1lbnQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb24gLS0gdHlwZXMgYXJlIG5vdCBhd2FyZSBvZiBvbGRlciBicm93c2VycyB0aGF0IGRvbid0IGltcGxlbWVudCBgbGFiZWxzYFxuICBpZiAoZWxlbWVudC5sYWJlbHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBlbGVtZW50LmxhYmVscyA/PyBbXTtcbiAgfVxuICBpZiAoIWlzTGFiZWxhYmxlKGVsZW1lbnQpKSByZXR1cm4gW107XG4gIGNvbnN0IGxhYmVscyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsYWJlbCcpO1xuICByZXR1cm4gQXJyYXkuZnJvbShsYWJlbHMpLmZpbHRlcihsYWJlbCA9PiBsYWJlbC5jb250cm9sID09PSBlbGVtZW50KTtcbn1cbmZ1bmN0aW9uIGlzTGFiZWxhYmxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIC9CVVRUT058TUVURVJ8T1VUUFVUfFBST0dSRVNTfFNFTEVDVHxURVhUQVJFQS8udGVzdChlbGVtZW50LnRhZ05hbWUpIHx8IGVsZW1lbnQudGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSgndHlwZScpICE9PSAnaGlkZGVuJztcbn1cbmZ1bmN0aW9uIGdldExhYmVscyhjb250YWluZXIsIGVsZW1lbnQsIHtcbiAgc2VsZWN0b3IgPSAnKidcbn0gPSB7fSkge1xuICBjb25zdCBhcmlhTGFiZWxsZWRCeSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknKTtcbiAgY29uc3QgbGFiZWxzSWQgPSBhcmlhTGFiZWxsZWRCeSA/IGFyaWFMYWJlbGxlZEJ5LnNwbGl0KCcgJykgOiBbXTtcbiAgcmV0dXJuIGxhYmVsc0lkLmxlbmd0aCA/IGxhYmVsc0lkLm1hcChsYWJlbElkID0+IHtcbiAgICBjb25zdCBsYWJlbGxpbmdFbGVtZW50ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYFtpZD1cIiR7bGFiZWxJZH1cIl1gKTtcbiAgICByZXR1cm4gbGFiZWxsaW5nRWxlbWVudCA/IHtcbiAgICAgIGNvbnRlbnQ6IGdldExhYmVsQ29udGVudChsYWJlbGxpbmdFbGVtZW50KSxcbiAgICAgIGZvcm1Db250cm9sOiBudWxsXG4gICAgfSA6IHtcbiAgICAgIGNvbnRlbnQ6ICcnLFxuICAgICAgZm9ybUNvbnRyb2w6IG51bGxcbiAgICB9O1xuICB9KSA6IEFycmF5LmZyb20oZ2V0UmVhbExhYmVscyhlbGVtZW50KSkubWFwKGxhYmVsID0+IHtcbiAgICBjb25zdCB0ZXh0VG9NYXRjaCA9IGdldExhYmVsQ29udGVudChsYWJlbCk7XG4gICAgY29uc3QgZm9ybUNvbnRyb2xTZWxlY3RvciA9ICdidXR0b24sIGlucHV0LCBtZXRlciwgb3V0cHV0LCBwcm9ncmVzcywgc2VsZWN0LCB0ZXh0YXJlYSc7XG4gICAgY29uc3QgbGFiZWxsZWRGb3JtQ29udHJvbCA9IEFycmF5LmZyb20obGFiZWwucXVlcnlTZWxlY3RvckFsbChmb3JtQ29udHJvbFNlbGVjdG9yKSkuZmlsdGVyKGZvcm1Db250cm9sRWxlbWVudCA9PiBmb3JtQ29udHJvbEVsZW1lbnQubWF0Y2hlcyhzZWxlY3RvcikpWzBdO1xuICAgIHJldHVybiB7XG4gICAgICBjb250ZW50OiB0ZXh0VG9NYXRjaCxcbiAgICAgIGZvcm1Db250cm9sOiBsYWJlbGxlZEZvcm1Db250cm9sXG4gICAgfTtcbiAgfSk7XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsZUFBZSxHQUFHQSxlQUFlO0FBQ3pDRixPQUFPLENBQUNHLFNBQVMsR0FBR0EsU0FBUztBQUM3QkgsT0FBTyxDQUFDSSxhQUFhLEdBQUdBLGFBQWE7QUFDckMsSUFBSUMsUUFBUSxHQUFHQyxPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ25DLE1BQU1DLGlCQUFpQixHQUFHLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFF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