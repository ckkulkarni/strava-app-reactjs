a69389e2a982404645408f3fd3bb6327
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveStyle = toHaveStyle;
var _chalk = _interopRequireDefault(require("chalk"));
var _utils = require("./utils");
function getStyleDeclaration(document, css) {
  const styles = {}; // The next block is necessary to normalize colors

  const copy = document.createElement('div');
  Object.keys(css).forEach(property => {
    copy.style[property] = css[property];
    styles[property] = copy.style[property];
  });
  return styles;
}
function isSubset(styles, computedStyle) {
  return !!Object.keys(styles).length && Object.entries(styles).every(([prop, value]) => computedStyle[prop] === value || computedStyle.getPropertyValue(prop.toLowerCase()) === value);
}
function printoutStyles(styles) {
  return Object.keys(styles).sort().map(prop => `${prop}: ${styles[prop]};`).join('\n');
} // Highlights only style rules that were expected but were not found in the
// received computed styles

function expectedDiff(diffFn, expected, computedStyles) {
  const received = Array.from(computedStyles).filter(prop => expected[prop] !== undefined).reduce((obj, prop) => Object.assign(obj, {
    [prop]: computedStyles.getPropertyValue(prop)
  }), {});
  const diffOutput = diffFn(printoutStyles(expected), printoutStyles(received)); // Remove the "+ Received" annotation because this is a one-way diff

  return diffOutput.replace(`${_chalk.default.red('+ Received')}\n`, '');
}
function toHaveStyle(htmlElement, css) {
  (0, _utils.checkHtmlElement)(htmlElement, toHaveStyle, this);
  const parsedCSS = typeof css === 'object' ? css : (0, _utils.parseCSS)(css, toHaveStyle, this);
  const {
    getComputedStyle
  } = htmlElement.ownerDocument.defaultView;
  const expected = getStyleDeclaration(htmlElement.ownerDocument, parsedCSS);
  const received = getComputedStyle(htmlElement);
  return {
    pass: isSubset(expected, received),
    message: () => {
      const matcher = `${this.isNot ? '.not' : ''}.toHaveStyle`;
      return [this.utils.matcherHint(matcher, 'element', ''), expectedDiff(this.utils.diff, expected, received)].join('\n\n');
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidG9IYXZlU3R5bGUiLCJfY2hhbGsiLCJfdXRpbHMiLCJnZXRTdHlsZURlY2xhcmF0aW9uIiwiZG9jdW1lbnQiLCJjc3MiLCJzdHlsZXMiLCJjb3B5IiwiY3JlYXRlRWxlbWVudCIsImtleXMiLCJmb3JFYWNoIiwicHJvcGVydHkiLCJzdHlsZSIsImlzU3Vic2V0IiwiY29tcHV0ZWRTdHlsZSIsImxlbmd0aCIsImVudHJpZXMiLCJldmVyeSIsInByb3AiLCJnZXRQcm9wZXJ0eVZhbHVlIiwidG9Mb3dlckNhc2UiLCJwcmludG91dFN0eWxlcyIsInNvcnQiLCJtYXAiLCJqb2luIiwiZXhwZWN0ZWREaWZmIiwiZGlmZkZuIiwiZXhwZWN0ZWQiLCJjb21wdXRlZFN0eWxlcyIsInJlY2VpdmVkIiwiQXJyYXkiLCJmcm9tIiwiZmlsdGVyIiwidW5kZWZpbmVkIiwicmVkdWNlIiwib2JqIiwiYXNzaWduIiwiZGlmZk91dHB1dCIsInJlcGxhY2UiLCJkZWZhdWx0IiwicmVkIiwiaHRtbEVsZW1lbnQiLCJjaGVja0h0bWxFbGVtZW50IiwicGFyc2VkQ1NTIiwicGFyc2VDU1MiLCJnZXRDb21wdXRlZFN0eWxlIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwicGFzcyIsIm1lc3NhZ2UiLCJtYXRjaGVyIiwiaXNOb3QiLCJ1dGlscyIsIm1hdGNoZXJIaW50IiwiZGlmZiJdLCJzb3VyY2VzIjpbInRvLWhhdmUtc3R5bGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy50b0hhdmVTdHlsZSA9IHRvSGF2ZVN0eWxlO1xuXG52YXIgX2NoYWxrID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2hhbGtcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbmZ1bmN0aW9uIGdldFN0eWxlRGVjbGFyYXRpb24oZG9jdW1lbnQsIGNzcykge1xuICBjb25zdCBzdHlsZXMgPSB7fTsgLy8gVGhlIG5leHQgYmxvY2sgaXMgbmVjZXNzYXJ5IHRvIG5vcm1hbGl6ZSBjb2xvcnNcblxuICBjb25zdCBjb3B5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIE9iamVjdC5rZXlzKGNzcykuZm9yRWFjaChwcm9wZXJ0eSA9PiB7XG4gICAgY29weS5zdHlsZVtwcm9wZXJ0eV0gPSBjc3NbcHJvcGVydHldO1xuICAgIHN0eWxlc1twcm9wZXJ0eV0gPSBjb3B5LnN0eWxlW3Byb3BlcnR5XTtcbiAgfSk7XG4gIHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGlzU3Vic2V0KHN0eWxlcywgY29tcHV0ZWRTdHlsZSkge1xuICByZXR1cm4gISFPYmplY3Qua2V5cyhzdHlsZXMpLmxlbmd0aCAmJiBPYmplY3QuZW50cmllcyhzdHlsZXMpLmV2ZXJ5KChbcHJvcCwgdmFsdWVdKSA9PiBjb21wdXRlZFN0eWxlW3Byb3BdID09PSB2YWx1ZSB8fCBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcC50b0xvd2VyQ2FzZSgpKSA9PT0gdmFsdWUpO1xufVxuXG5mdW5jdGlvbiBwcmludG91dFN0eWxlcyhzdHlsZXMpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHN0eWxlcykuc29ydCgpLm1hcChwcm9wID0+IGAke3Byb3B9OiAke3N0eWxlc1twcm9wXX07YCkuam9pbignXFxuJyk7XG59IC8vIEhpZ2hsaWdodHMgb25seSBzdHlsZSBydWxlcyB0aGF0IHdlcmUgZXhwZWN0ZWQgYnV0IHdlcmUgbm90IGZvdW5kIGluIHRoZVxuLy8gcmVjZWl2ZWQgY29tcHV0ZWQgc3R5bGVzXG5cblxuZnVuY3Rpb24gZXhwZWN0ZWREaWZmKGRpZmZGbiwgZXhwZWN0ZWQsIGNvbXB1dGVkU3R5bGVzKSB7XG4gIGNvbnN0IHJlY2VpdmVkID0gQXJyYXkuZnJvbShjb21wdXRlZFN0eWxlcykuZmlsdGVyKHByb3AgPT4gZXhwZWN0ZWRbcHJvcF0gIT09IHVuZGVmaW5lZCkucmVkdWNlKChvYmosIHByb3ApID0+IE9iamVjdC5hc3NpZ24ob2JqLCB7XG4gICAgW3Byb3BdOiBjb21wdXRlZFN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApXG4gIH0pLCB7fSk7XG4gIGNvbnN0IGRpZmZPdXRwdXQgPSBkaWZmRm4ocHJpbnRvdXRTdHlsZXMoZXhwZWN0ZWQpLCBwcmludG91dFN0eWxlcyhyZWNlaXZlZCkpOyAvLyBSZW1vdmUgdGhlIFwiKyBSZWNlaXZlZFwiIGFubm90YXRpb24gYmVjYXVzZSB0aGlzIGlzIGEgb25lLXdheSBkaWZmXG5cbiAgcmV0dXJuIGRpZmZPdXRwdXQucmVwbGFjZShgJHtfY2hhbGsuZGVmYXVsdC5yZWQoJysgUmVjZWl2ZWQnKX1cXG5gLCAnJyk7XG59XG5cbmZ1bmN0aW9uIHRvSGF2ZVN0eWxlKGh0bWxFbGVtZW50LCBjc3MpIHtcbiAgKDAsIF91dGlscy5jaGVja0h0bWxFbGVtZW50KShodG1sRWxlbWVudCwgdG9IYXZlU3R5bGUsIHRoaXMpO1xuICBjb25zdCBwYXJzZWRDU1MgPSB0eXBlb2YgY3NzID09PSAnb2JqZWN0JyA/IGNzcyA6ICgwLCBfdXRpbHMucGFyc2VDU1MpKGNzcywgdG9IYXZlU3R5bGUsIHRoaXMpO1xuICBjb25zdCB7XG4gICAgZ2V0Q29tcHV0ZWRTdHlsZVxuICB9ID0gaHRtbEVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgY29uc3QgZXhwZWN0ZWQgPSBnZXRTdHlsZURlY2xhcmF0aW9uKGh0bWxFbGVtZW50Lm93bmVyRG9jdW1lbnQsIHBhcnNlZENTUyk7XG4gIGNvbnN0IHJlY2VpdmVkID0gZ2V0Q29tcHV0ZWRTdHlsZShodG1sRWxlbWVudCk7XG4gIHJldHVybiB7XG4gICAgcGFzczogaXNTdWJzZXQoZXhwZWN0ZWQsIHJlY2VpdmVkKSxcbiAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICBjb25zdCBtYXRjaGVyID0gYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0hhdmVTdHlsZWA7XG4gICAgICByZXR1cm4gW3RoaXMudXRpbHMubWF0Y2hlckhpbnQobWF0Y2hlciwgJ2VsZW1lbnQnLCAnJyksIGV4cGVjdGVkRGlmZih0aGlzLnV0aWxzLmRpZmYsIGV4cGVjdGVkLCByZWNlaXZlZCldLmpvaW4oJ1xcblxcbicpO1xuICAgIH1cbiAgfTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQztBQUVwRkMsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLFdBQVcsR0FBR0EsV0FBVztBQUVqQyxJQUFJQyxNQUFNLEdBQUdQLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFckQsSUFBSU8sTUFBTSxHQUFHUCxPQUFPLENBQUMsU0FBUyxDQUFDO0FBRS9CLFNBQVNRLG1CQUFtQkEsQ0FBQ0MsUUFBUSxFQUFFQyxHQUFHLEVBQUU7RUFDMUMsTUFBTUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7O0VBRW5CLE1BQU1DLElBQUksR0FBR0gsUUFBUSxDQUFDSSxhQUFhLENBQUMsS0FBSyxDQUFDO0VBQzFDWixNQUFNLENBQUNhLElBQUksQ0FBQ0osR0FBRyxDQUFDLENBQUNLLE9BQU8sQ0FBQ0MsUUFBUSxJQUFJO0lBQ25DSixJQUFJLENBQUNLLEtBQUssQ0FBQ0QsUUFBUSxD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