0d762bc8ae00da1d89c6465f9003a9b5
'use strict';

var isArray = Array.isArray;
var keyList = Object.keys;
var hasProp = Object.prototype.hasOwnProperty;
var hasElementType = typeof Element !== 'undefined';
function equal(a, b) {
  // fast-deep-equal index.js 2.0.1
  if (a === b) return true;
  if (a && b && typeof a == 'object' && typeof b == 'object') {
    var arrA = isArray(a),
      arrB = isArray(b),
      i,
      length,
      key;
    if (arrA && arrB) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0;) if (!equal(a[i], b[i])) return false;
      return true;
    }
    if (arrA != arrB) return false;
    var dateA = a instanceof Date,
      dateB = b instanceof Date;
    if (dateA != dateB) return false;
    if (dateA && dateB) return a.getTime() == b.getTime();
    var regexpA = a instanceof RegExp,
      regexpB = b instanceof RegExp;
    if (regexpA != regexpB) return false;
    if (regexpA && regexpB) return a.toString() == b.toString();
    var keys = keyList(a);
    length = keys.length;
    if (length !== keyList(b).length) return false;
    for (i = length; i-- !== 0;) if (!hasProp.call(b, keys[i])) return false;
    // end fast-deep-equal

    // start react-fast-compare
    // custom handling for DOM elements
    if (hasElementType && a instanceof Element && b instanceof Element) return a === b;

    // custom handling for React
    for (i = length; i-- !== 0;) {
      key = keys[i];
      if (key === '_owner' && a.$$typeof) {
        // React-specific: avoid traversing React elements' _owner.
        //  _owner contains circular references
        // and is not needed when comparing the actual elements (and not their owners)
        // .$$typeof and ._store on just reasonable markers of a react element
        continue;
      } else {
        // all other properties should be traversed as usual
        if (!equal(a[key], b[key])) return false;
      }
    }
    // end react-fast-compare

    // fast-deep-equal index.js 2.0.1
    return true;
  }
  return a !== a && b !== b;
}
// end fast-deep-equal

module.exports = function exportedEqual(a, b) {
  try {
    return equal(a, b);
  } catch (error) {
    if (error.message && error.message.match(/stack|recursion/i) || error.number === -2146828260) {
      // warn on circular references, don't crash
      // browsers give this different errors name and messages:
      // chrome/safari: "RangeError", "Maximum call stack size exceeded"
      // firefox: "InternalError", too much recursion"
      // edge: "Error", "Out of stack space"
      console.warn('Warning: react-fast-compare does not handle circular references.', error.name, error.message);
      return false;
    }
    // some other error. we should definitely know about these
    throw error;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc0FycmF5IiwiQXJyYXkiLCJrZXlMaXN0IiwiT2JqZWN0Iiwia2V5cyIsImhhc1Byb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImhhc0VsZW1lbnRUeXBlIiwiRWxlbWVudCIsImVxdWFsIiwiYSIsImIiLCJhcnJBIiwiYXJyQiIsImkiLCJsZW5ndGgiLCJrZXkiLCJkYXRlQSIsIkRhdGUiLCJkYXRlQiIsImdldFRpbWUiLCJyZWdleHBBIiwiUmVnRXhwIiwicmVnZXhwQiIsInRvU3RyaW5nIiwiY2FsbCIsIiQkdHlwZW9mIiwibW9kdWxlIiwiZXhwb3J0cyIsImV4cG9ydGVkRXF1YWwiLCJlcnJvciIsIm1lc3NhZ2UiLCJtYXRjaCIsIm51bWJlciIsImNvbnNvbGUiLCJ3YXJuIiwibmFtZSJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xudmFyIGtleUxpc3QgPSBPYmplY3Qua2V5cztcbnZhciBoYXNQcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBoYXNFbGVtZW50VHlwZSA9IHR5cGVvZiBFbGVtZW50ICE9PSAndW5kZWZpbmVkJztcblxuZnVuY3Rpb24gZXF1YWwoYSwgYikge1xuICAvLyBmYXN0LWRlZXAtZXF1YWwgaW5kZXguanMgMi4wLjFcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIGlmIChhICYmIGIgJiYgdHlwZW9mIGEgPT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgPT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYXJyQSA9IGlzQXJyYXkoYSlcbiAgICAgICwgYXJyQiA9IGlzQXJyYXkoYilcbiAgICAgICwgaVxuICAgICAgLCBsZW5ndGhcbiAgICAgICwga2V5O1xuXG4gICAgaWYgKGFyckEgJiYgYXJyQikge1xuICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoICE9IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICAgIGlmICghZXF1YWwoYVtpXSwgYltpXSkpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChhcnJBICE9IGFyckIpIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBkYXRlQSA9IGEgaW5zdGFuY2VvZiBEYXRlXG4gICAgICAsIGRhdGVCID0gYiBpbnN0YW5jZW9mIERhdGU7XG4gICAgaWYgKGRhdGVBICE9IGRhdGVCKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGRhdGVBICYmIGRhdGVCKSByZXR1cm4gYS5nZXRUaW1lKCkgPT0gYi5nZXRUaW1lKCk7XG5cbiAgICB2YXIgcmVnZXhwQSA9IGEgaW5zdGFuY2VvZiBSZWdFeHBcbiAgICAgICwgcmVnZXhwQiA9IGIgaW5zdGFuY2VvZiBSZWdFeHA7XG4gICAgaWYgKHJlZ2V4cEEgIT0gcmVnZXhwQikgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChyZWdleHBBICYmIHJlZ2V4cEIpIHJldHVybiBhLnRvU3RyaW5nKCkgPT0gYi50b1N0cmluZygpO1xuXG4gICAgdmFyIGtleXMgPSBrZXlMaXN0KGEpO1xuICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuXG4gICAgaWYgKGxlbmd0aCAhPT0ga2V5TGlzdChiKS5sZW5ndGgpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICBpZiAoIWhhc1Byb3AuY2FsbChiLCBrZXlzW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGVuZCBmYXN0LWRlZXAtZXF1YWxcblxuICAgIC8vIHN0YXJ0IHJlYWN0LWZhc3QtY29tcGFyZVxuICAgIC8vIGN1c3RvbSBoYW5kbGluZyBmb3IgRE9NIGVsZW1lbnRzXG4gICAgaWYgKGhhc0VsZW1lbnRUeXBlICYmIGEgaW5zdGFuY2VvZiBFbGVtZW50ICYmIGIgaW5zdGFuY2VvZiBFbGVtZW50KVxuICAgICAgcmV0dXJuIGEgPT09IGI7XG5cbiAgICAvLyBjdXN0b20gaGFuZGxpbmcgZm9yIFJlYWN0XG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYgKGtleSA9PT0gJ19vd25lcicgJiYgYS4kJHR5cGVvZikge1xuICAgICAgICAvLyBSZWFjdC1zcGVjaWZpYzogYXZvaWQgdHJhdmVyc2luZyBSZWFjdCBlbGVtZW50cycgX293bmVyLlxuICAgICAgICAvLyAgX293bmVyIGNvbnRhaW5zIGNpcmN1bGFyIHJlZmVyZW5jZXNcbiAgICAgICAgLy8gYW5kIGlzIG5vdCBuZWVkZWQgd2hlbiBjb21wYXJpbmcgdGhlIGFjdHVhbCBlbGVtZW50cyAoYW5kIG5vdCB0aGVpciBvd25lcnMpXG4gICAgICAgIC8vIC4kJHR5cGVvZiBhbmQgLl9zdG9yZSBvbiBqdXN0IHJlYXNvbmFibGUgbWFya2VycyBvZiBhIHJlYWN0IGVsZW1lbnRcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBhbGwgb3RoZXIgcHJvcGVydGllcyBzaG91bGQgYmUgdHJhdmVyc2VkIGFzIHVzdWFsXG4gICAgICAgIGlmICghZXF1YWwoYVtrZXldLCBiW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGVuZCByZWFjdC1mYXN0LWNvbXBhcmVcblxuICAgIC8vIGZhc3QtZGVlcC1lcXVhbCBpbmRleC5qcyAyLjAuMVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGEgIT09IGEgJiYgYiAhPT0gYjtcbn1cbi8vIGVuZCBmYXN0LWRlZXAtZXF1YWxcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleHBvcnRlZEVxdWFsKGEsIGIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZXF1YWwoYSwgYik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKChlcnJvci5tZXNzYWdlICYmIGVycm9yLm1lc3NhZ2UubWF0Y2goL3N0YWNrfHJlY3Vyc2lvbi9pKSkgfHwgKGVycm9yLm51bWJlciA9PT0gLTIxNDY4MjgyNjApKSB7XG4gICAgICAvLyB3YXJuIG9uIGNpcmN1bGFyIHJlZmVyZW5jZXMsIGRvbid0IGNyYXNoXG4gICAgICAvLyBicm93c2VycyBnaXZlIHRoaXMgZGlmZmVyZW50IGVycm9ycyBuYW1lIGFuZCBtZXNzYWdlczpcbiAgICAgIC8vIGNocm9tZS9zYWZhcmk6IFwiUmFuZ2VFcnJvclwiLCBcIk1heGltdW0gY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCJcbiAgICAgIC8vIGZpcmVmb3g6IFwiSW50ZXJuYWxFcnJvclwiLCB0b28gbXVjaCByZWN1cnNpb25cIlxuICAgICAgLy8gZWRnZTogXCJFcnJvclwiLCBcIk91dCBvZiBzdGFjayBzcGFjZVwiXG4gICAgICBjb25zb2xlLndhcm4oJ1dhcm5pbmc6IHJlYWN0LWZhc3QtY29tcGFyZSBkb2VzIG5vdCBoYW5kbGUgY2lyY3VsYXIgcmVmZXJlbmNlcy4nLCBlcnJvci5uYW1lLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gc29tZSBvdGhlciBlcnJvci4gd2Ugc2hvdWxkIGRlZmluaXRlbHkga25vdyBhYm91dCB0aGVzZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLE9BQU8sR0FBR0MsS0FBSyxDQUFDRCxPQUFPO0FBQzNCLElBQUlFLE9BQU8sR0FBR0MsTUFBTSxDQUFDQyxJQUFJO0FBQ3pCLElBQUlDLE9BQU8sR0FBR0YsTUFBTSxDQUFDRyxTQUFTLENBQUNDLGNBQWM7QUFDN0MsSUFBSUMsY0FBYyxHQUFHLE9BQU9DLE9BQU8sS0FBSyxXQUFXO0FBRW5ELFNBQVNDLEtBQUtBLENBQUNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0VBQ25CO0VBQ0Es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