83aad1611780c5cc2d875afbbdc0ed7a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _utils = require("@mui/utils");
var _spacing = require("../spacing");
var _breakpoints = require("../breakpoints");
var _borders = require("../borders");
var _cssGrid = require("../cssGrid");
var _palette = require("../palette");
var _sizing = require("../sizing");
const createFontStyleFunction = prop => {
  return props => {
    if (props[prop] !== undefined && props[prop] !== null) {
      const styleFromPropValue = propValue => {
        var _props$theme$typograp;
        // fetch the value directly defined in the theme, like fontWeightLight
        let value = (_props$theme$typograp = props.theme.typography) == null ? void 0 : _props$theme$typograp[propValue];
        if (typeof value === 'object') {
          // typography variant was pulled, but these props can't be an object
          value = null;
        }
        if (!value) {
          var _props$theme$typograp2, _props$prop;
          // fetch fontWeightLight when the value is 'light'
          value = (_props$theme$typograp2 = props.theme.typography) == null ? void 0 : _props$theme$typograp2[`${prop}${props[prop] === 'default' || props[prop] === prop ? '' : (0, _utils.unstable_capitalize)((_props$prop = props[prop]) == null ? void 0 : _props$prop.toString())}`];
        }
        if (!value) {
          var _props$theme$typograp3, _props$theme$typograp4, _props$theme$typograp5;
          // fetch the value from the typography variant or default to the propValue
          value = (_props$theme$typograp3 = (_props$theme$typograp4 = props.theme.typography) == null ? void 0 : (_props$theme$typograp5 = _props$theme$typograp4[propValue]) == null ? void 0 : _props$theme$typograp5[prop]) != null ? _props$theme$typograp3 : propValue;
        }
        return {
          [prop]: value
        };
      };
      return (0, _breakpoints.handleBreakpoints)(props, props[prop], styleFromPropValue);
    }
    return null;
  };
};
const defaultSxConfig = {
  // borders
  border: {
    themeKey: 'borders',
    transform: _borders.borderTransform
  },
  borderTop: {
    themeKey: 'borders',
    transform: _borders.borderTransform
  },
  borderRight: {
    themeKey: 'borders',
    transform: _borders.borderTransform
  },
  borderBottom: {
    themeKey: 'borders',
    transform: _borders.borderTransform
  },
  borderLeft: {
    themeKey: 'borders',
    transform: _borders.borderTransform
  },
  borderColor: {
    themeKey: 'palette'
  },
  borderTopColor: {
    themeKey: 'palette'
  },
  borderRightColor: {
    themeKey: 'palette'
  },
  borderBottomColor: {
    themeKey: 'palette'
  },
  borderLeftColor: {
    themeKey: 'palette'
  },
  borderRadius: {
    themeKey: 'shape.borderRadius',
    style: _borders.borderRadius
  },
  // palette
  color: {
    themeKey: 'palette',
    transform: _palette.paletteTransform
  },
  bgcolor: {
    themeKey: 'palette',
    cssProperty: 'backgroundColor',
    transform: _palette.paletteTransform
  },
  backgroundColor: {
    themeKey: 'palette',
    transform: _palette.paletteTransform
  },
  // spacing
  p: {
    style: _spacing.padding
  },
  pt: {
    style: _spacing.padding
  },
  pr: {
    style: _spacing.padding
  },
  pb: {
    style: _spacing.padding
  },
  pl: {
    style: _spacing.padding
  },
  px: {
    style: _spacing.padding
  },
  py: {
    style: _spacing.padding
  },
  padding: {
    style: _spacing.padding
  },
  paddingTop: {
    style: _spacing.padding
  },
  paddingRight: {
    style: _spacing.padding
  },
  paddingBottom: {
    style: _spacing.padding
  },
  paddingLeft: {
    style: _spacing.padding
  },
  paddingX: {
    style: _spacing.padding
  },
  paddingY: {
    style: _spacing.padding
  },
  paddingInline: {
    style: _spacing.padding
  },
  paddingInlineStart: {
    style: _spacing.padding
  },
  paddingInlineEnd: {
    style: _spacing.padding
  },
  paddingBlock: {
    style: _spacing.padding
  },
  paddingBlockStart: {
    style: _spacing.padding
  },
  paddingBlockEnd: {
    style: _spacing.padding
  },
  m: {
    style: _spacing.margin
  },
  mt: {
    style: _spacing.margin
  },
  mr: {
    style: _spacing.margin
  },
  mb: {
    style: _spacing.margin
  },
  ml: {
    style: _spacing.margin
  },
  mx: {
    style: _spacing.margin
  },
  my: {
    style: _spacing.margin
  },
  margin: {
    style: _spacing.margin
  },
  marginTop: {
    style: _spacing.margin
  },
  marginRight: {
    style: _spacing.margin
  },
  marginBottom: {
    style: _spacing.margin
  },
  marginLeft: {
    style: _spacing.margin
  },
  marginX: {
    style: _spacing.margin
  },
  marginY: {
    style: _spacing.margin
  },
  marginInline: {
    style: _spacing.margin
  },
  marginInlineStart: {
    style: _spacing.margin
  },
  marginInlineEnd: {
    style: _spacing.margin
  },
  marginBlock: {
    style: _spacing.margin
  },
  marginBlockStart: {
    style: _spacing.margin
  },
  marginBlockEnd: {
    style: _spacing.margin
  },
  // display
  displayPrint: {
    cssProperty: false,
    transform: value => ({
      '@media print': {
        display: value
      }
    })
  },
  display: {},
  overflow: {},
  textOverflow: {},
  visibility: {},
  whiteSpace: {},
  // flexbox
  flexBasis: {},
  flexDirection: {},
  flexWrap: {},
  justifyContent: {},
  alignItems: {},
  alignContent: {},
  order: {},
  flex: {},
  flexGrow: {},
  flexShrink: {},
  alignSelf: {},
  justifyItems: {},
  justifySelf: {},
  // grid
  gap: {
    style: _cssGrid.gap
  },
  rowGap: {
    style: _cssGrid.rowGap
  },
  columnGap: {
    style: _cssGrid.columnGap
  },
  gridColumn: {},
  gridRow: {},
  gridAutoFlow: {},
  gridAutoColumns: {},
  gridAutoRows: {},
  gridTemplateColumns: {},
  gridTemplateRows: {},
  gridTemplateAreas: {},
  gridArea: {},
  // positions
  position: {},
  zIndex: {
    themeKey: 'zIndex'
  },
  top: {},
  right: {},
  bottom: {},
  left: {},
  // shadows
  boxShadow: {
    themeKey: 'shadows'
  },
  // sizing
  width: {
    transform: _sizing.sizingTransform
  },
  maxWidth: {
    style: _sizing.maxWidth
  },
  minWidth: {
    transform: _sizing.sizingTransform
  },
  height: {
    transform: _sizing.sizingTransform
  },
  maxHeight: {
    transform: _sizing.sizingTransform
  },
  minHeight: {
    transform: _sizing.sizingTransform
  },
  boxSizing: {},
  // typography
  fontFamily: {
    themeKey: 'typography',
    style: createFontStyleFunction('fontFamily')
  },
  fontSize: {
    themeKey: 'typography',
    style: createFontStyleFunction('fontSize')
  },
  fontStyle: {
    themeKey: 'typography'
  },
  fontWeight: {
    themeKey: 'typography',
    style: createFontStyleFunction('fontWeight')
  },
  letterSpacing: {},
  textTransform: {},
  lineHeight: {},
  textAlign: {},
  typography: {
    cssProperty: false,
    themeKey: 'typography'
  }
};
var _default = defaultSxConfig;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,