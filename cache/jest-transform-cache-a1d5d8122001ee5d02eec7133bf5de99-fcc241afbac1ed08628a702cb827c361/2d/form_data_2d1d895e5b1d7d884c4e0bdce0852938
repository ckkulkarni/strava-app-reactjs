ffc386fd1a0fb3b1e309e645ec7b02fc
"use strict";

var CombinedStream = require('combined-stream');
var util = require('util');
var path = require('path');
var http = require('http');
var https = require('https');
var parseUrl = require('url').parse;
var fs = require('fs');
var Stream = require('stream').Stream;
var mime = require('mime-types');
var asynckit = require('asynckit');
var populate = require('./populate.js');

// Public API
module.exports = FormData;

// make it a Stream
util.inherits(FormData, CombinedStream);

/**
 * Create readable "multipart/form-data" streams.
 * Can be used to submit forms
 * and file uploads to other web applications.
 *
 * @constructor
 * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream
 */
function FormData(options) {
  if (!(this instanceof FormData)) {
    return new FormData(options);
  }
  this._overheadLength = 0;
  this._valueLength = 0;
  this._valuesToMeasure = [];
  CombinedStream.call(this);
  options = options || {};
  for (var option in options) {
    this[option] = options[option];
  }
}
FormData.LINE_BREAK = '\r\n';
FormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';
FormData.prototype.append = function (field, value, options) {
  options = options || {};

  // allow filename as single option
  if (typeof options == 'string') {
    options = {
      filename: options
    };
  }
  var append = CombinedStream.prototype.append.bind(this);

  // all that streamy business can't handle numbers
  if (typeof value == 'number') {
    value = '' + value;
  }

  // https://github.com/felixge/node-form-data/issues/38
  if (util.isArray(value)) {
    // Please convert your array into string
    // the way web server expects it
    this._error(new Error('Arrays are not supported.'));
    return;
  }
  var header = this._multiPartHeader(field, value, options);
  var footer = this._multiPartFooter();
  append(header);
  append(value);
  append(footer);

  // pass along options.knownLength
  this._trackLength(header, value, options);
};
FormData.prototype._trackLength = function (header, value, options) {
  var valueLength = 0;

  // used w/ getLengthSync(), when length is known.
  // e.g. for streaming directly from a remote server,
  // w/ a known file a size, and not wanting to wait for
  // incoming file to finish to get its size.
  if (options.knownLength != null) {
    valueLength += +options.knownLength;
  } else if (Buffer.isBuffer(value)) {
    valueLength = value.length;
  } else if (typeof value === 'string') {
    valueLength = Buffer.byteLength(value);
  }
  this._valueLength += valueLength;

  // @check why add CRLF? does this account for custom/multiple CRLFs?
  this._overheadLength += Buffer.byteLength(header) + FormData.LINE_BREAK.length;

  // empty or either doesn't have path or not an http response or not a stream
  if (!value || !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) && !(value instanceof Stream)) {
    return;
  }

  // no need to bother with the length
  if (!options.knownLength) {
    this._valuesToMeasure.push(value);
  }
};
FormData.prototype._lengthRetriever = function (value, callback) {
  if (value.hasOwnProperty('fd')) {
    // take read range into a account
    // `end` = Infinity â€“> read file till the end
    //
    // TODO: Looks like there is bug in Node fs.createReadStream
    // it doesn't respect `end` options without `start` options
    // Fix it when node fixes it.
    // https://github.com/joyent/node/issues/7819
    if (value.end != undefined && value.end != Infinity && value.start != undefined) {
      // when end specified
      // no need to calculate range
      // inclusive, starts with 0
      callback(null, value.end + 1 - (value.start ? value.start : 0));

      // not that fast snoopy
    } else {
      // still need to fetch file size from fs
      fs.stat(value.path, function (err, stat) {
        var fileSize;
        if (err) {
          callback(err);
          return;
        }

        // update final size based on the range options
        fileSize = stat.size - (value.start ? value.start : 0);
        callback(null, fileSize);
      });
    }

    // or http response
  } else if (value.hasOwnProperty('httpVersion')) {
    callback(null, +value.headers['content-length']);

    // or request stream http://github.com/mikeal/request
  } else if (value.hasOwnProperty('httpModule')) {
    // wait till response come back
    value.on('response', function (response) {
      value.pause();
      callback(null, +response.headers['content-length']);
    });
    value.resume();

    // something else
  } else {
    callback('Unknown stream');
  }
};
FormData.prototype._multiPartHeader = function (field, value, options) {
  // custom header specified (as string)?
  // it becomes responsible for boundary
  // (e.g. to handle extra CRLFs on .NET servers)
  if (typeof options.header == 'string') {
    return options.header;
  }
  var contentDisposition = this._getContentDisposition(value, options);
  var contentType = this._getContentType(value, options);
  var contents = '';
  var headers = {
    // add custom disposition as third element or keep it two elements if not
    'Content-Disposition': ['form-data', 'name="' + field + '"'].concat(contentDisposition || []),
    // if no content type. allow it to be empty array
    'Content-Type': [].concat(contentType || [])
  };

  // allow custom headers.
  if (typeof options.header == 'object') {
    populate(headers, options.header);
  }
  var header;
  for (var prop in headers) {
    if (!headers.hasOwnProperty(prop)) continue;
    header = headers[prop];

    // skip nullish headers.
    if (header == null) {
      continue;
    }

    // convert all headers to arrays.
    if (!Array.isArray(header)) {
      header = [header];
    }

    // add non-empty headers.
    if (header.length) {
      contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;
    }
  }
  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
};
FormData.prototype._getContentDisposition = function (value, options) {
  var filename, contentDisposition;
  if (typeof options.filepath === 'string') {
    // custom filepath for relative paths
    filename = path.normalize(options.filepath).replace(/\\/g, '/');
  } else if (options.filename || value.name || value.path) {
    // custom filename take precedence
    // formidable and the browser add a name property
    // fs- and request- streams have path property
    filename = path.basename(options.filename || value.name || value.path);
  } else if (value.readable && value.hasOwnProperty('httpVersion')) {
    // or try http response
    filename = path.basename(value.client._httpMessage.path || '');
  }
  if (filename) {
    contentDisposition = 'filename="' + filename + '"';
  }
  return contentDisposition;
};
FormData.prototype._getContentType = function (value, options) {
  // use custom content-type above all
  var contentType = options.contentType;

  // or try `name` from formidable, browser
  if (!contentType && value.name) {
    contentType = mime.lookup(value.name);
  }

  // or try `path` from fs-, request- streams
  if (!contentType && value.path) {
    contentType = mime.lookup(value.path);
  }

  // or if it's http-reponse
  if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {
    contentType = value.headers['content-type'];
  }

  // or guess it from the filepath or filename
  if (!contentType && (options.filepath || options.filename)) {
    contentType = mime.lookup(options.filepath || options.filename);
  }

  // fallback to the default content type if `value` is not simple value
  if (!contentType && typeof value == 'object') {
    contentType = FormData.DEFAULT_CONTENT_TYPE;
  }
  return contentType;
};
FormData.prototype._multiPartFooter = function () {
  return function (next) {
    var footer = FormData.LINE_BREAK;
    var lastPart = this._streams.length === 0;
    if (lastPart) {
      footer += this._lastBoundary();
    }
    next(footer);
  }.bind(this);
};
FormData.prototype._lastBoundary = function () {
  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;
};
FormData.prototype.getHeaders = function (userHeaders) {
  var header;
  var formHeaders = {
    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()
  };
  for (header in userHeaders) {
    if (userHeaders.hasOwnProperty(header)) {
      formHeaders[header.toLowerCase()] = userHeaders[header];
    }
  }
  return formHeaders;
};
FormData.prototype.setBoundary = function (boundary) {
  this._boundary = boundary;
};
FormData.prototype.getBoundary = function () {
  if (!this._boundary) {
    this._generateBoundary();
  }
  return this._boundary;
};
FormData.prototype.getBuffer = function () {
  var dataBuffer = new Buffer.alloc(0);
  var boundary = this.getBoundary();

  // Create the form content. Add Line breaks to the end of data.
  for (var i = 0, len = this._streams.length; i < len; i++) {
    if (typeof this._streams[i] !== 'function') {
      // Add content to the buffer.
      if (Buffer.isBuffer(this._streams[i])) {
        dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
      } else {
        dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
      }

      // Add break after content.
      if (typeof this._streams[i] !== 'string' || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
        dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData.LINE_BREAK)]);
      }
    }
  }

  // Add the footer and return the Buffer object.
  return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
};
FormData.prototype._generateBoundary = function () {
  // This generates a 50 character boundary similar to those used by Firefox.
  // They are optimized for boyer-moore parsing.
  var boundary = '--------------------------';
  for (var i = 0; i < 24; i++) {
    boundary += Math.floor(Math.random() * 10).toString(16);
  }
  this._boundary = boundary;
};

// Note: getLengthSync DOESN'T calculate streams length
// As workaround one can calculate file size manually
// and add it as knownLength option
FormData.prototype.getLengthSync = function () {
  var knownLength = this._overheadLength + this._valueLength;

  // Don't get confused, there are 3 "internal" streams for each keyval pair
  // so it basically checks if there is any value added to the form
  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  }

  // https://github.com/form-data/form-data/issues/40
  if (!this.hasKnownLength()) {
    // Some async length retrievers are present
    // therefore synchronous length calculation is false.
    // Please use getLength(callback) to get proper length
    this._error(new Error('Cannot calculate proper length in synchronous way.'));
  }
  return knownLength;
};

// Public API to check if length of added values is known
// https://github.com/form-data/form-data/issues/196
// https://github.com/form-data/form-data/issues/262
FormData.prototype.hasKnownLength = function () {
  var hasKnownLength = true;
  if (this._valuesToMeasure.length) {
    hasKnownLength = false;
  }
  return hasKnownLength;
};
FormData.prototype.getLength = function (cb) {
  var knownLength = this._overheadLength + this._valueLength;
  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  }
  if (!this._valuesToMeasure.length) {
    process.nextTick(cb.bind(this, null, knownLength));
    return;
  }
  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function (err, values) {
    if (err) {
      cb(err);
      return;
    }
    values.forEach(function (length) {
      knownLength += length;
    });
    cb(null, knownLength);
  });
};
FormData.prototype.submit = function (params, cb) {
  var request,
    options,
    defaults = {
      method: 'post'
    };

  // parse provided url if it's string
  // or treat it as options object
  if (typeof params == 'string') {
    params = parseUrl(params);
    options = populate({
      port: params.port,
      path: params.pathname,
      host: params.hostname,
      protocol: params.protocol
    }, defaults);

    // use custom params
  } else {
    options = populate(params, defaults);
    // if no port provided use default one
    if (!options.port) {
      options.port = options.protocol == 'https:' ? 443 : 80;
    }
  }

  // put that good code in getHeaders to some use
  options.headers = this.getHeaders(params.headers);

  // https if specified, fallback to http in any other case
  if (options.protocol == 'https:') {
    request = https.request(options);
  } else {
    request = http.request(options);
  }

  // get content length and fire away
  this.getLength(function (err, length) {
    if (err && err !== 'Unknown stream') {
      this._error(err);
      return;
    }

    // add content length
    if (length) {
      request.setHeader('Content-Length', length);
    }
    this.pipe(request);
    if (cb) {
      var onResponse;
      var callback = function (error, responce) {
        request.removeListener('error', callback);
        request.removeListener('response', onResponse);
        return cb.call(this, error, responce);
      };
      onResponse = callback.bind(this, null);
      request.on('error', callback);
      request.on('response', onResponse);
    }
  }.bind(this));
  return request;
};
FormData.prototype._error = function (err) {
  if (!this.error) {
    this.error = err;
    this.pause();
    this.emit('error', err);
  }
};
FormData.prototype.toString = function () {
  return '[object FormData]';
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb21iaW5lZFN0cmVhbSIsInJlcXVpcmUiLCJ1dGlsIiwicGF0aCIsImh0dHAiLCJodHRwcyIsInBhcnNlVXJsIiwicGFyc2UiLCJmcyIsIlN0cmVhbSIsIm1pbWUiLCJhc3luY2tpdCIsInBvcHVsYXRlIiwibW9kdWxlIiwiZXhwb3J0cyIsIkZvcm1EYXRhIiwiaW5oZXJpdHMiLCJvcHRpb25zIiwiX292ZXJoZWFkTGVuZ3RoIiwiX3ZhbHVlTGVuZ3RoIiwiX3ZhbHVlc1RvTWVhc3VyZSIsImNhbGwiLCJvcHRpb24iLCJMSU5FX0JSRUFLIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJwcm90b3R5cGUiLCJhcHBlbmQiLCJmaWVsZCIsInZhbHVlIiwiZmlsZW5hbWUiLCJiaW5kIiwiaXNBcnJheSIsIl9lcnJvciIsIkVycm9yIiwiaGVhZGVyIiwiX211bHRpUGFydEhlYWRlciIsImZvb3RlciIsIl9tdWx0aVBhcnRGb290ZXIiLCJfdHJhY2tMZW5ndGgiLCJ2YWx1ZUxlbmd0aCIsImtub3duTGVuZ3RoIiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJsZW5ndGgiLCJieXRlTGVuZ3RoIiwicmVhZGFibGUiLCJoYXNPd25Qcm9wZXJ0eSIsInB1c2giLCJfbGVuZ3RoUmV0cmlldmVyIiwiY2FsbGJhY2siLCJlbmQiLCJ1bmRlZmluZWQiLCJJbmZpbml0eSIsInN0YXJ0Iiwic3RhdCIsImVyciIsImZpbGVTaXplIiwic2l6ZSIsImhlYWRlcnMiLCJvbiIsInJlc3BvbnNlIiwicGF1c2UiLCJyZXN1bWUiLCJjb250ZW50RGlzcG9zaXRpb24iLCJfZ2V0Q29udGVudERpc3Bvc2l0aW9uIiwiY29udGVudFR5cGUiLCJfZ2V0Q29udGVudFR5cGUiLCJjb250ZW50cyIsImNvbmNhdCIsInByb3AiLCJBcnJheSIsImpvaW4iLCJnZXRCb3VuZGFyeSIsImZpbGVwYXRoIiwibm9ybWFsaXplIiwicmVwbGFjZSIsIm5hbWUiLCJiYXNlbmFtZSIsImNsaWVudCIsIl9odHRwTWVzc2FnZSIsImxvb2t1cCIsIm5leHQiLCJsYXN0UGFydCIsIl9zdHJlYW1zIiwiX2xhc3RCb3VuZGFyeSIsImdldEhlYWRlcnMiLCJ1c2VySGVhZGVycyIsImZvcm1IZWFkZXJzIiwidG9Mb3dlckNhc2UiLCJzZXRCb3VuZGFyeSIsImJvdW5kYXJ5IiwiX2JvdW5kYXJ5IiwiX2dlbmVyYXRlQm91bmRhcnkiLCJnZXRCdWZmZXIiLCJkYXRhQnVmZmVyIiwiYWxsb2MiLCJpIiwibGVuIiwiZnJvbSIsInN1YnN0cmluZyIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInRvU3RyaW5nIiwiZ2V0TGVuZ3RoU3luYyIsImhhc0tub3duTGVuZ3RoIiwiZ2V0TGVuZ3RoIiwiY2IiLCJwcm9jZXNzIiwibmV4dFRpY2siLCJwYXJhbGxlbCIsInZhbHVlcyIsImZvckVhY2giLCJzdWJtaXQiLCJwYXJhbXMiLCJyZXF1ZXN0IiwiZGVmYXVsdHMiLCJtZXRob2QiLCJwb3J0IiwicGF0aG5hbWUiLCJob3N0IiwiaG9zdG5hbWUiLCJwcm90b2NvbCIsInNldEhlYWRlciIsInBpcGUiLCJvblJlc3BvbnNlIiwiZXJyb3IiLCJyZXNwb25jZSIsInJlbW92ZUxpc3RlbmVyIiwiZW1pdCJdLCJzb3VyY2VzIjpbImZvcm1fZGF0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQ29tYmluZWRTdHJlYW0gPSByZXF1aXJlKCdjb21iaW5lZC1zdHJlYW0nKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbnZhciBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG52YXIgcGFyc2VVcmwgPSByZXF1aXJlKCd1cmwnKS5wYXJzZTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJykuU3RyZWFtO1xudmFyIG1pbWUgPSByZXF1aXJlKCdtaW1lLXR5cGVzJyk7XG52YXIgYXN5bmNraXQgPSByZXF1aXJlKCdhc3luY2tpdCcpO1xudmFyIHBvcHVsYXRlID0gcmVxdWlyZSgnLi9wb3B1bGF0ZS5qcycpO1xuXG4vLyBQdWJsaWMgQVBJXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm1EYXRhO1xuXG4vLyBtYWtlIGl0IGEgU3RyZWFtXG51dGlsLmluaGVyaXRzKEZvcm1EYXRhLCBDb21iaW5lZFN0cmVhbSk7XG5cbi8qKlxuICogQ3JlYXRlIHJlYWRhYmxlIFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiIHN0cmVhbXMuXG4gKiBDYW4gYmUgdXNlZCB0byBzdWJtaXQgZm9ybXNcbiAqIGFuZCBmaWxlIHVwbG9hZHMgdG8gb3RoZXIgd2ViIGFwcGxpY2F0aW9ucy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUHJvcGVydGllcyB0byBiZSBhZGRlZC9vdmVycmlkZW4gZm9yIEZvcm1EYXRhIGFuZCBDb21iaW5lZFN0cmVhbVxuICovXG5mdW5jdGlvbiBGb3JtRGF0YShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBGb3JtRGF0YSkpIHtcbiAgICByZXR1cm4gbmV3IEZvcm1EYXRhKG9wdGlvbnMpO1xuICB9XG5cbiAgdGhpcy5fb3ZlcmhlYWRMZW5ndGggPSAwO1xuICB0aGlzLl92YWx1ZUxlbmd0aCA9IDA7XG4gIHRoaXMuX3ZhbHVlc1RvTWVhc3VyZSA9IFtdO1xuXG4gIENvbWJpbmVkU3RyZWFtLmNhbGwodGhpcyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGZvciAodmFyIG9wdGlvbiBpbiBvcHRpb25zKSB7XG4gICAgdGhpc1tvcHRpb25dID0gb3B0aW9uc1tvcHRpb25dO1xuICB9XG59XG5cbkZvcm1EYXRhLkxJTkVfQlJFQUsgPSAnXFxyXFxuJztcbkZvcm1EYXRhLkRFRkFVTFRfQ09OVEVOVF9UWVBFID0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSc7XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihmaWVsZCwgdmFsdWUsIG9wdGlvbnMpIHtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBhbGxvdyBmaWxlbmFtZSBhcyBzaW5nbGUgb3B0aW9uXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PSAnc3RyaW5nJykge1xuICAgIG9wdGlvbnMgPSB7ZmlsZW5hbWU6IG9wdGlvbnN9O1xuICB9XG5cbiAgdmFyIGFwcGVuZCA9IENvbWJpbmVkU3RyZWFtLnByb3RvdHlwZS5hcHBlbmQuYmluZCh0aGlzKTtcblxuICAvLyBhbGwgdGhhdCBzdHJlYW15IGJ1c2luZXNzIGNhbid0IGhhbmRsZSBudW1iZXJzXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICB2YWx1ZSA9ICcnICsgdmFsdWU7XG4gIH1cblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmVsaXhnZS9ub2RlLWZvcm0tZGF0YS9pc3N1ZXMvMzhcbiAgaWYgKHV0aWwuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAvLyBQbGVhc2UgY29udmVydCB5b3VyIGFycmF5IGludG8gc3RyaW5nXG4gICAgLy8gdGhlIHdheSB3ZWIgc2VydmVyIGV4cGVjdHMgaXRcbiAgICB0aGlzLl9lcnJvcihuZXcgRXJyb3IoJ0FycmF5cyBhcmUgbm90IHN1cHBvcnRlZC4nKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGhlYWRlciA9IHRoaXMuX211bHRpUGFydEhlYWRlcihmaWVsZCwgdmFsdWUsIG9wdGlvbnMpO1xuICB2YXIgZm9vdGVyID0gdGhpcy5fbXVsdGlQYXJ0Rm9vdGVyKCk7XG5cbiAgYXBwZW5kKGhlYWRlcik7XG4gIGFwcGVuZCh2YWx1ZSk7XG4gIGFwcGVuZChmb290ZXIpO1xuXG4gIC8vIHBhc3MgYWxvbmcgb3B0aW9ucy5rbm93bkxlbmd0aFxuICB0aGlzLl90cmFja0xlbmd0aChoZWFkZXIsIHZhbHVlLCBvcHRpb25zKTtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fdHJhY2tMZW5ndGggPSBmdW5jdGlvbihoZWFkZXIsIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB2YWx1ZUxlbmd0aCA9IDA7XG5cbiAgLy8gdXNlZCB3LyBnZXRMZW5ndGhTeW5jKCksIHdoZW4gbGVuZ3RoIGlzIGtub3duLlxuICAvLyBlLmcuIGZvciBzdHJlYW1pbmcgZGlyZWN0bHkgZnJvbSBhIHJlbW90ZSBzZXJ2ZXIsXG4gIC8vIHcvIGEga25vd24gZmlsZSBhIHNpemUsIGFuZCBub3Qgd2FudGluZyB0byB3YWl0IGZvclxuICAvLyBpbmNvbWluZyBmaWxlIHRvIGZpbmlzaCB0byBnZXQgaXRzIHNpemUuXG4gIGlmIChvcHRpb25zLmtub3duTGVuZ3RoICE9IG51bGwpIHtcbiAgICB2YWx1ZUxlbmd0aCArPSArb3B0aW9ucy5rbm93bkxlbmd0aDtcbiAgfSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgdmFsdWVMZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHZhbHVlTGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgodmFsdWUpO1xuICB9XG5cbiAgdGhpcy5fdmFsdWVMZW5ndGggKz0gdmFsdWVMZW5ndGg7XG5cbiAgLy8gQGNoZWNrIHdoeSBhZGQgQ1JMRj8gZG9lcyB0aGlzIGFjY291bnQgZm9yIGN1c3RvbS9tdWx0aXBsZSBDUkxGcz9cbiAgdGhpcy5fb3ZlcmhlYWRMZW5ndGggKz1cbiAgICBCdWZmZXIuYnl0ZUxlbmd0aChoZWFkZXIpICtcbiAgICBGb3JtRGF0YS5MSU5FX0JSRUFLLmxlbmd0aDtcblxuICAvLyBlbXB0eSBvciBlaXRoZXIgZG9lc24ndCBoYXZlIHBhdGggb3Igbm90IGFuIGh0dHAgcmVzcG9uc2Ugb3Igbm90IGEgc3RyZWFtXG4gIGlmICghdmFsdWUgfHwgKCAhdmFsdWUucGF0aCAmJiAhKHZhbHVlLnJlYWRhYmxlICYmIHZhbHVlLmhhc093blByb3BlcnR5KCdodHRwVmVyc2lvbicpKSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgU3RyZWFtKSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBubyBuZWVkIHRvIGJvdGhlciB3aXRoIHRoZSBsZW5ndGhcbiAgaWYgKCFvcHRpb25zLmtub3duTGVuZ3RoKSB7XG4gICAgdGhpcy5fdmFsdWVzVG9NZWFzdXJlLnB1c2godmFsdWUpO1xuICB9XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX2xlbmd0aFJldHJpZXZlciA9IGZ1bmN0aW9uKHZhbHVlLCBjYWxsYmFjaykge1xuXG4gIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnZmQnKSkge1xuXG4gICAgLy8gdGFrZSByZWFkIHJhbmdlIGludG8gYSBhY2NvdW50XG4gICAgLy8gYGVuZGAgPSBJbmZpbml0eSDigJM+IHJlYWQgZmlsZSB0aWxsIHRoZSBlbmRcbiAgICAvL1xuICAgIC8vIFRPRE86IExvb2tzIGxpa2UgdGhlcmUgaXMgYnVnIGluIE5vZGUgZnMuY3JlYXRlUmVhZFN0cmVhbVxuICAgIC8vIGl0IGRvZXNuJ3QgcmVzcGVjdCBgZW5kYCBvcHRpb25zIHdpdGhvdXQgYHN0YXJ0YCBvcHRpb25zXG4gICAgLy8gRml4IGl0IHdoZW4gbm9kZSBmaXhlcyBpdC5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvaXNzdWVzLzc4MTlcbiAgICBpZiAodmFsdWUuZW5kICE9IHVuZGVmaW5lZCAmJiB2YWx1ZS5lbmQgIT0gSW5maW5pdHkgJiYgdmFsdWUuc3RhcnQgIT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgIC8vIHdoZW4gZW5kIHNwZWNpZmllZFxuICAgICAgLy8gbm8gbmVlZCB0byBjYWxjdWxhdGUgcmFuZ2VcbiAgICAgIC8vIGluY2x1c2l2ZSwgc3RhcnRzIHdpdGggMFxuICAgICAgY2FsbGJhY2sobnVsbCwgdmFsdWUuZW5kICsgMSAtICh2YWx1ZS5zdGFydCA/IHZhbHVlLnN0YXJ0IDogMCkpO1xuXG4gICAgLy8gbm90IHRoYXQgZmFzdCBzbm9vcHlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc3RpbGwgbmVlZCB0byBmZXRjaCBmaWxlIHNpemUgZnJvbSBmc1xuICAgICAgZnMuc3RhdCh2YWx1ZS5wYXRoLCBmdW5jdGlvbihlcnIsIHN0YXQpIHtcblxuICAgICAgICB2YXIgZmlsZVNpemU7XG5cbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIGZpbmFsIHNpemUgYmFzZWQgb24gdGhlIHJhbmdlIG9wdGlvbnNcbiAgICAgICAgZmlsZVNpemUgPSBzdGF0LnNpemUgLSAodmFsdWUuc3RhcnQgPyB2YWx1ZS5zdGFydCA6IDApO1xuICAgICAgICBjYWxsYmFjayhudWxsLCBmaWxlU2l6ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgLy8gb3IgaHR0cCByZXNwb25zZVxuICB9IGVsc2UgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdodHRwVmVyc2lvbicpKSB7XG4gICAgY2FsbGJhY2sobnVsbCwgK3ZhbHVlLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10pO1xuXG4gIC8vIG9yIHJlcXVlc3Qgc3RyZWFtIGh0dHA6Ly9naXRodWIuY29tL21pa2VhbC9yZXF1ZXN0XG4gIH0gZWxzZSBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ2h0dHBNb2R1bGUnKSkge1xuICAgIC8vIHdhaXQgdGlsbCByZXNwb25zZSBjb21lIGJhY2tcbiAgICB2YWx1ZS5vbigncmVzcG9uc2UnLCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgdmFsdWUucGF1c2UoKTtcbiAgICAgIGNhbGxiYWNrKG51bGwsICtyZXNwb25zZS5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddKTtcbiAgICB9KTtcbiAgICB2YWx1ZS5yZXN1bWUoKTtcblxuICAvLyBzb21ldGhpbmcgZWxzZVxuICB9IGVsc2Uge1xuICAgIGNhbGxiYWNrKCdVbmtub3duIHN0cmVhbScpO1xuICB9XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX211bHRpUGFydEhlYWRlciA9IGZ1bmN0aW9uKGZpZWxkLCB2YWx1ZSwgb3B0aW9ucykge1xuICAvLyBjdXN0b20gaGVhZGVyIHNwZWNpZmllZCAoYXMgc3RyaW5nKT9cbiAgLy8gaXQgYmVjb21lcyByZXNwb25zaWJsZSBmb3IgYm91bmRhcnlcbiAgLy8gKGUuZy4gdG8gaGFuZGxlIGV4dHJhIENSTEZzIG9uIC5ORVQgc2VydmVycylcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmhlYWRlciA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBvcHRpb25zLmhlYWRlcjtcbiAgfVxuXG4gIHZhciBjb250ZW50RGlzcG9zaXRpb24gPSB0aGlzLl9nZXRDb250ZW50RGlzcG9zaXRpb24odmFsdWUsIG9wdGlvbnMpO1xuICB2YXIgY29udGVudFR5cGUgPSB0aGlzLl9nZXRDb250ZW50VHlwZSh2YWx1ZSwgb3B0aW9ucyk7XG5cbiAgdmFyIGNvbnRlbnRzID0gJyc7XG4gIHZhciBoZWFkZXJzICA9IHtcbiAgICAvLyBhZGQgY3VzdG9tIGRpc3Bvc2l0aW9uIGFzIHRoaXJkIGVsZW1lbnQgb3Iga2VlcCBpdCB0d28gZWxlbWVudHMgaWYgbm90XG4gICAgJ0NvbnRlbnQtRGlzcG9zaXRpb24nOiBbJ2Zvcm0tZGF0YScsICduYW1lPVwiJyArIGZpZWxkICsgJ1wiJ10uY29uY2F0KGNvbnRlbnREaXNwb3NpdGlvbiB8fCBbXSksXG4gICAgLy8gaWYgbm8gY29udGVudCB0eXBlLiBhbGxvdyBpdCB0byBiZSBlbXB0eSBhcnJheVxuICAgICdDb250ZW50LVR5cGUnOiBbXS5jb25jYXQoY29udGVudFR5cGUgfHwgW10pXG4gIH07XG5cbiAgLy8gYWxsb3cgY3VzdG9tIGhlYWRlcnMuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5oZWFkZXIgPT0gJ29iamVjdCcpIHtcbiAgICBwb3B1bGF0ZShoZWFkZXJzLCBvcHRpb25zLmhlYWRlcik7XG4gIH1cblxuICB2YXIgaGVhZGVyO1xuICBmb3IgKHZhciBwcm9wIGluIGhlYWRlcnMpIHtcbiAgICBpZiAoIWhlYWRlcnMuaGFzT3duUHJvcGVydHkocHJvcCkpIGNvbnRpbnVlO1xuICAgIGhlYWRlciA9IGhlYWRlcnNbcHJvcF07XG5cbiAgICAvLyBza2lwIG51bGxpc2ggaGVhZGVycy5cbiAgICBpZiAoaGVhZGVyID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnQgYWxsIGhlYWRlcnMgdG8gYXJyYXlzLlxuICAgIGlmICghQXJyYXkuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICBoZWFkZXIgPSBbaGVhZGVyXTtcbiAgICB9XG5cbiAgICAvLyBhZGQgbm9uLWVtcHR5IGhlYWRlcnMuXG4gICAgaWYgKGhlYWRlci5sZW5ndGgpIHtcbiAgICAgIGNvbnRlbnRzICs9IHByb3AgKyAnOiAnICsgaGVhZGVyLmpvaW4oJzsgJykgKyBGb3JtRGF0YS5MSU5FX0JSRUFLO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAnLS0nICsgdGhpcy5nZXRCb3VuZGFyeSgpICsgRm9ybURhdGEuTElORV9CUkVBSyArIGNvbnRlbnRzICsgRm9ybURhdGEuTElORV9CUkVBSztcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fZ2V0Q29udGVudERpc3Bvc2l0aW9uID0gZnVuY3Rpb24odmFsdWUsIG9wdGlvbnMpIHtcblxuICB2YXIgZmlsZW5hbWVcbiAgICAsIGNvbnRlbnREaXNwb3NpdGlvblxuICAgIDtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuZmlsZXBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gY3VzdG9tIGZpbGVwYXRoIGZvciByZWxhdGl2ZSBwYXRoc1xuICAgIGZpbGVuYW1lID0gcGF0aC5ub3JtYWxpemUob3B0aW9ucy5maWxlcGF0aCkucmVwbGFjZSgvXFxcXC9nLCAnLycpO1xuICB9IGVsc2UgaWYgKG9wdGlvbnMuZmlsZW5hbWUgfHwgdmFsdWUubmFtZSB8fCB2YWx1ZS5wYXRoKSB7XG4gICAgLy8gY3VzdG9tIGZpbGVuYW1lIHRha2UgcHJlY2VkZW5jZVxuICAgIC8vIGZvcm1pZGFibGUgYW5kIHRoZSBicm93c2VyIGFkZCBhIG5hbWUgcHJvcGVydHlcbiAgICAvLyBmcy0gYW5kIHJlcXVlc3QtIHN0cmVhbXMgaGF2ZSBwYXRoIHByb3BlcnR5XG4gICAgZmlsZW5hbWUgPSBwYXRoLmJhc2VuYW1lKG9wdGlvbnMuZmlsZW5hbWUgfHwgdmFsdWUubmFtZSB8fCB2YWx1ZS5wYXRoKTtcbiAgfSBlbHNlIGlmICh2YWx1ZS5yZWFkYWJsZSAmJiB2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnaHR0cFZlcnNpb24nKSkge1xuICAgIC8vIG9yIHRyeSBodHRwIHJlc3BvbnNlXG4gICAgZmlsZW5hbWUgPSBwYXRoLmJhc2VuYW1lKHZhbHVlLmNsaWVudC5faHR0cE1lc3NhZ2UucGF0aCB8fCAnJyk7XG4gIH1cblxuICBpZiAoZmlsZW5hbWUpIHtcbiAgICBjb250ZW50RGlzcG9zaXRpb24gPSAnZmlsZW5hbWU9XCInICsgZmlsZW5hbWUgKyAnXCInO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRlbnREaXNwb3NpdGlvbjtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fZ2V0Q29udGVudFR5cGUgPSBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucykge1xuXG4gIC8vIHVzZSBjdXN0b20gY29udGVudC10eXBlIGFib3ZlIGFsbFxuICB2YXIgY29udGVudFR5cGUgPSBvcHRpb25zLmNvbnRlbnRUeXBlO1xuXG4gIC8vIG9yIHRyeSBgbmFtZWAgZnJvbSBmb3JtaWRhYmxlLCBicm93c2VyXG4gIGlmICghY29udGVudFR5cGUgJiYgdmFsdWUubmFtZSkge1xuICAgIGNvbnRlbnRUeXBlID0gbWltZS5sb29rdXAodmFsdWUubmFtZSk7XG4gIH1cblxuICAvLyBvciB0cnkgYHBhdGhgIGZyb20gZnMtLCByZXF1ZXN0LSBzdHJlYW1zXG4gIGlmICghY29udGVudFR5cGUgJiYgdmFsdWUucGF0aCkge1xuICAgIGNvbnRlbnRUeXBlID0gbWltZS5sb29rdXAodmFsdWUucGF0aCk7XG4gIH1cblxuICAvLyBvciBpZiBpdCdzIGh0dHAtcmVwb25zZVxuICBpZiAoIWNvbnRlbnRUeXBlICYmIHZhbHVlLnJlYWRhYmxlICYmIHZhbHVlLmhhc093blByb3BlcnR5KCdodHRwVmVyc2lvbicpKSB7XG4gICAgY29udGVudFR5cGUgPSB2YWx1ZS5oZWFkZXJzWydjb250ZW50LXR5cGUnXTtcbiAgfVxuXG4gIC8vIG9yIGd1ZXNzIGl0IGZyb20gdGhlIGZpbGVwYXRoIG9yIGZpbGVuYW1lXG4gIGlmICghY29udGVudFR5cGUgJiYgKG9wdGlvbnMuZmlsZXBhdGggfHwgb3B0aW9ucy5maWxlbmFtZSkpIHtcbiAgICBjb250ZW50VHlwZSA9IG1pbWUubG9va3VwKG9wdGlvbnMuZmlsZXBhdGggfHwgb3B0aW9ucy5maWxlbmFtZSk7XG4gIH1cblxuICAvLyBmYWxsYmFjayB0byB0aGUgZGVmYXVsdCBjb250ZW50IHR5cGUgaWYgYHZhbHVlYCBpcyBub3Qgc2ltcGxlIHZhbHVlXG4gIGlmICghY29udGVudFR5cGUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgY29udGVudFR5cGUgPSBGb3JtRGF0YS5ERUZBVUxUX0NPTlRFTlRfVFlQRTtcbiAgfVxuXG4gIHJldHVybiBjb250ZW50VHlwZTtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5fbXVsdGlQYXJ0Rm9vdGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBmdW5jdGlvbihuZXh0KSB7XG4gICAgdmFyIGZvb3RlciA9IEZvcm1EYXRhLkxJTkVfQlJFQUs7XG5cbiAgICB2YXIgbGFzdFBhcnQgPSAodGhpcy5fc3RyZWFtcy5sZW5ndGggPT09IDApO1xuICAgIGlmIChsYXN0UGFydCkge1xuICAgICAgZm9vdGVyICs9IHRoaXMuX2xhc3RCb3VuZGFyeSgpO1xuICAgIH1cblxuICAgIG5leHQoZm9vdGVyKTtcbiAgfS5iaW5kKHRoaXMpO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLl9sYXN0Qm91bmRhcnkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICctLScgKyB0aGlzLmdldEJvdW5kYXJ5KCkgKyAnLS0nICsgRm9ybURhdGEuTElORV9CUkVBSztcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5nZXRIZWFkZXJzID0gZnVuY3Rpb24odXNlckhlYWRlcnMpIHtcbiAgdmFyIGhlYWRlcjtcbiAgdmFyIGZvcm1IZWFkZXJzID0ge1xuICAgICdjb250ZW50LXR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YTsgYm91bmRhcnk9JyArIHRoaXMuZ2V0Qm91bmRhcnkoKVxuICB9O1xuXG4gIGZvciAoaGVhZGVyIGluIHVzZXJIZWFkZXJzKSB7XG4gICAgaWYgKHVzZXJIZWFkZXJzLmhhc093blByb3BlcnR5KGhlYWRlcikpIHtcbiAgICAgIGZvcm1IZWFkZXJzW2hlYWRlci50b0xvd2VyQ2FzZSgpXSA9IHVzZXJIZWFkZXJzW2hlYWRlcl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZvcm1IZWFkZXJzO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLnNldEJvdW5kYXJ5ID0gZnVuY3Rpb24oYm91bmRhcnkpIHtcbiAgdGhpcy5fYm91bmRhcnkgPSBib3VuZGFyeTtcbn07XG5cbkZvcm1EYXRhLnByb3RvdHlwZS5nZXRCb3VuZGFyeSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuX2JvdW5kYXJ5KSB7XG4gICAgdGhpcy5fZ2VuZXJhdGVCb3VuZGFyeSgpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2JvdW5kYXJ5O1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZGF0YUJ1ZmZlciA9IG5ldyBCdWZmZXIuYWxsb2MoIDAgKTtcbiAgdmFyIGJvdW5kYXJ5ID0gdGhpcy5nZXRCb3VuZGFyeSgpO1xuXG4gIC8vIENyZWF0ZSB0aGUgZm9ybSBjb250ZW50LiBBZGQgTGluZSBicmVha3MgdG8gdGhlIGVuZCBvZiBkYXRhLlxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fc3RyZWFtcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fc3RyZWFtc1tpXSAhPT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAvLyBBZGQgY29udGVudCB0byB0aGUgYnVmZmVyLlxuICAgICAgaWYoQnVmZmVyLmlzQnVmZmVyKHRoaXMuX3N0cmVhbXNbaV0pKSB7XG4gICAgICAgIGRhdGFCdWZmZXIgPSBCdWZmZXIuY29uY2F0KCBbZGF0YUJ1ZmZlciwgdGhpcy5fc3RyZWFtc1tpXV0pO1xuICAgICAgfWVsc2Uge1xuICAgICAgICBkYXRhQnVmZmVyID0gQnVmZmVyLmNvbmNhdCggW2RhdGFCdWZmZXIsIEJ1ZmZlci5mcm9tKHRoaXMuX3N0cmVhbXNbaV0pXSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCBicmVhayBhZnRlciBjb250ZW50LlxuICAgICAgaWYgKHR5cGVvZiB0aGlzLl9zdHJlYW1zW2ldICE9PSAnc3RyaW5nJyB8fCB0aGlzLl9zdHJlYW1zW2ldLnN1YnN0cmluZyggMiwgYm91bmRhcnkubGVuZ3RoICsgMiApICE9PSBib3VuZGFyeSkge1xuICAgICAgICBkYXRhQnVmZmVyID0gQnVmZmVyLmNvbmNhdCggW2RhdGFCdWZmZXIsIEJ1ZmZlci5mcm9tKEZvcm1EYXRhLkxJTkVfQlJFQUspXSApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCB0aGUgZm9vdGVyIGFuZCByZXR1cm4gdGhlIEJ1ZmZlciBvYmplY3QuXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KCBbZGF0YUJ1ZmZlciwgQnVmZmVyLmZyb20odGhpcy5fbGFzdEJvdW5kYXJ5KCkpXSApO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLl9nZW5lcmF0ZUJvdW5kYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIC8vIFRoaXMgZ2VuZXJhdGVzIGEgNTAgY2hhcmFjdGVyIGJvdW5kYXJ5IHNpbWlsYXIgdG8gdGhvc2UgdXNlZCBieSBGaXJlZm94LlxuICAvLyBUaGV5IGFyZSBvcHRpbWl6ZWQgZm9yIGJveWVyLW1vb3JlIHBhcnNpbmcuXG4gIHZhciBib3VuZGFyeSA9ICctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMjQ7IGkrKykge1xuICAgIGJvdW5kYXJ5ICs9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKS50b1N0cmluZygxNik7XG4gIH1cblxuICB0aGlzLl9ib3VuZGFyeSA9IGJvdW5kYXJ5O1xufTtcblxuLy8gTm90ZTogZ2V0TGVuZ3RoU3luYyBET0VTTidUIGNhbGN1bGF0ZSBzdHJlYW1zIGxlbmd0aFxuLy8gQXMgd29ya2Fyb3VuZCBvbmUgY2FuIGNhbGN1bGF0ZSBmaWxlIHNpemUgbWFudWFsbHlcbi8vIGFuZCBhZGQgaXQgYXMga25vd25MZW5ndGggb3B0aW9uXG5Gb3JtRGF0YS5wcm90b3R5cGUuZ2V0TGVuZ3RoU3luYyA9IGZ1bmN0aW9uKCkge1xuICB2YXIga25vd25MZW5ndGggPSB0aGlzLl9vdmVyaGVhZExlbmd0aCArIHRoaXMuX3ZhbHVlTGVuZ3RoO1xuXG4gIC8vIERvbid0IGdldCBjb25mdXNlZCwgdGhlcmUgYXJlIDMgXCJpbnRlcm5hbFwiIHN0cmVhbXMgZm9yIGVhY2gga2V5dmFsIHBhaXJcbiAgLy8gc28gaXQgYmFzaWNhbGx5IGNoZWNrcyBpZiB0aGVyZSBpcyBhbnkgdmFsdWUgYWRkZWQgdG8gdGhlIGZvcm1cbiAgaWYgKHRoaXMuX3N0cmVhbXMubGVuZ3RoKSB7XG4gICAga25vd25MZW5ndGggKz0gdGhpcy5fbGFzdEJvdW5kYXJ5KCkubGVuZ3RoO1xuICB9XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zvcm0tZGF0YS9mb3JtLWRhdGEvaXNzdWVzLzQwXG4gIGlmICghdGhpcy5oYXNLbm93bkxlbmd0aCgpKSB7XG4gICAgLy8gU29tZSBhc3luYyBsZW5ndGggcmV0cmlldmVycyBhcmUgcHJlc2VudFxuICAgIC8vIHRoZXJlZm9yZSBzeW5jaHJvbm91cyBsZW5ndGggY2FsY3VsYXRpb24gaXMgZmFsc2UuXG4gICAgLy8gUGxlYXNlIHVzZSBnZXRMZW5ndGgoY2FsbGJhY2spIHRvIGdldCBwcm9wZXIgbGVuZ3RoXG4gICAgdGhpcy5fZXJyb3IobmV3IEVycm9yKCdDYW5ub3QgY2FsY3VsYXRlIHByb3BlciBsZW5ndGggaW4gc3luY2hyb25vdXMgd2F5LicpKTtcbiAgfVxuXG4gIHJldHVybiBrbm93bkxlbmd0aDtcbn07XG5cbi8vIFB1YmxpYyBBUEkgdG8gY2hlY2sgaWYgbGVuZ3RoIG9mIGFkZGVkIHZhbHVlcyBpcyBrbm93blxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zvcm0tZGF0YS9mb3JtLWRhdGEvaXNzdWVzLzE5NlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zvcm0tZGF0YS9mb3JtLWRhdGEvaXNzdWVzLzI2MlxuRm9ybURhdGEucHJvdG90eXBlLmhhc0tub3duTGVuZ3RoID0gZnVuY3Rpb24oKSB7XG4gIHZhciBoYXNLbm93bkxlbmd0aCA9IHRydWU7XG5cbiAgaWYgKHRoaXMuX3ZhbHVlc1RvTWVhc3VyZS5sZW5ndGgpIHtcbiAgICBoYXNLbm93bkxlbmd0aCA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGhhc0tub3duTGVuZ3RoO1xufTtcblxuRm9ybURhdGEucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uKGNiKSB7XG4gIHZhciBrbm93bkxlbmd0aCA9IHRoaXMuX292ZXJoZWFkTGVuZ3RoICsgdGhpcy5fdmFsdWVMZW5ndGg7XG5cbiAgaWYgKHRoaXMuX3N0cmVhbXMubGVuZ3RoKSB7XG4gICAga25vd25MZW5ndGggKz0gdGhpcy5fbGFzdEJvdW5kYXJ5KCkubGVuZ3RoO1xuICB9XG5cbiAgaWYgKCF0aGlzLl92YWx1ZXNUb01lYXN1cmUubGVuZ3RoKSB7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhjYi5iaW5kKHRoaXMsIG51bGwsIGtub3duTGVuZ3RoKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgYXN5bmNraXQucGFyYWxsZWwodGhpcy5fdmFsdWVzVG9NZWFzdXJlLCB0aGlzLl9sZW5ndGhSZXRyaWV2ZXIsIGZ1bmN0aW9uKGVyciwgdmFsdWVzKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgY2IoZXJyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbihsZW5ndGgpIHtcbiAgICAgIGtub3duTGVuZ3RoICs9IGxlbmd0aDtcbiAgICB9KTtcblxuICAgIGNiKG51bGwsIGtub3duTGVuZ3RoKTtcbiAgfSk7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuc3VibWl0ID0gZnVuY3Rpb24ocGFyYW1zLCBjYikge1xuICB2YXIgcmVxdWVzdFxuICAgICwgb3B0aW9uc1xuICAgICwgZGVmYXVsdHMgPSB7bWV0aG9kOiAncG9zdCd9XG4gICAgO1xuXG4gIC8vIHBhcnNlIHByb3ZpZGVkIHVybCBpZiBpdCdzIHN0cmluZ1xuICAvLyBvciB0cmVhdCBpdCBhcyBvcHRpb25zIG9iamVjdFxuICBpZiAodHlwZW9mIHBhcmFtcyA9PSAnc3RyaW5nJykge1xuXG4gICAgcGFyYW1zID0gcGFyc2VVcmwocGFyYW1zKTtcbiAgICBvcHRpb25zID0gcG9wdWxhdGUoe1xuICAgICAgcG9ydDogcGFyYW1zLnBvcnQsXG4gICAgICBwYXRoOiBwYXJhbXMucGF0aG5hbWUsXG4gICAgICBob3N0OiBwYXJhbXMuaG9zdG5hbWUsXG4gICAgICBwcm90b2NvbDogcGFyYW1zLnByb3RvY29sXG4gICAgfSwgZGVmYXVsdHMpO1xuXG4gIC8vIHVzZSBjdXN0b20gcGFyYW1zXG4gIH0gZWxzZSB7XG5cbiAgICBvcHRpb25zID0gcG9wdWxhdGUocGFyYW1zLCBkZWZhdWx0cyk7XG4gICAgLy8gaWYgbm8gcG9ydCBwcm92aWRlZCB1c2UgZGVmYXVsdCBvbmVcbiAgICBpZiAoIW9wdGlvbnMucG9ydCkge1xuICAgICAgb3B0aW9ucy5wb3J0ID0gb3B0aW9ucy5wcm90b2NvbCA9PSAnaHR0cHM6JyA/IDQ0MyA6IDgwO1xuICAgIH1cbiAgfVxuXG4gIC8vIHB1dCB0aGF0IGdvb2QgY29kZSBpbiBnZXRIZWFkZXJzIHRvIHNvbWUgdXNlXG4gIG9wdGlvbnMuaGVhZGVycyA9IHRoaXMuZ2V0SGVhZGVycyhwYXJhbXMuaGVhZGVycyk7XG5cbiAgLy8gaHR0cHMgaWYgc3BlY2lmaWVkLCBmYWxsYmFjayB0byBodHRwIGluIGFueSBvdGhlciBjYXNlXG4gIGlmIChvcHRpb25zLnByb3RvY29sID09ICdodHRwczonKSB7XG4gICAgcmVxdWVzdCA9IGh0dHBzLnJlcXVlc3Qob3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgcmVxdWVzdCA9IGh0dHAucmVxdWVzdChvcHRpb25zKTtcbiAgfVxuXG4gIC8vIGdldCBjb250ZW50IGxlbmd0aCBhbmQgZmlyZSBhd2F5XG4gIHRoaXMuZ2V0TGVuZ3RoKGZ1bmN0aW9uKGVyciwgbGVuZ3RoKSB7XG4gICAgaWYgKGVyciAmJiBlcnIgIT09ICdVbmtub3duIHN0cmVhbScpIHtcbiAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYWRkIGNvbnRlbnQgbGVuZ3RoXG4gICAgaWYgKGxlbmd0aCkge1xuICAgICAgcmVxdWVzdC5zZXRIZWFkZXIoJ0NvbnRlbnQtTGVuZ3RoJywgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICB0aGlzLnBpcGUocmVxdWVzdCk7XG4gICAgaWYgKGNiKSB7XG4gICAgICB2YXIgb25SZXNwb25zZTtcblxuICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKGVycm9yLCByZXNwb25jZSkge1xuICAgICAgICByZXF1ZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGNhbGxiYWNrKTtcbiAgICAgICAgcmVxdWVzdC5yZW1vdmVMaXN0ZW5lcigncmVzcG9uc2UnLCBvblJlc3BvbnNlKTtcblxuICAgICAgICByZXR1cm4gY2IuY2FsbCh0aGlzLCBlcnJvciwgcmVzcG9uY2UpO1xuICAgICAgfTtcblxuICAgICAgb25SZXNwb25zZSA9IGNhbGxiYWNrLmJpbmQodGhpcywgbnVsbCk7XG5cbiAgICAgIHJlcXVlc3Qub24oJ2Vycm9yJywgY2FsbGJhY2spO1xuICAgICAgcmVxdWVzdC5vbigncmVzcG9uc2UnLCBvblJlc3BvbnNlKTtcbiAgICB9XG4gIH0uYmluZCh0aGlzKSk7XG5cbiAgcmV0dXJuIHJlcXVlc3Q7XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24oZXJyKSB7XG4gIGlmICghdGhpcy5lcnJvcikge1xuICAgIHRoaXMuZXJyb3IgPSBlcnI7XG4gICAgdGhpcy5wYXVzZSgpO1xuICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB9XG59O1xuXG5Gb3JtRGF0YS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAnW29iamVjdCBGb3JtRGF0YV0nO1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxjQUFjLEdBQUdDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztBQUMvQyxJQUFJQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFNLENBQUM7QUFDMUIsSUFBSUUsSUFBSSxHQUFHRixPQUFPLENBQUMsTUFBTSxDQUFDO0FBQzFCLElBQUlHLElBQUksR0FBR0gsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUMxQixJQUFJSSxLQUFLLEdBQUdKLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDNUIsSUFBSUssUUFBUSxHQUFHTCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUNNLEtBQUs7QUFDbkMsSUFBSUMsRUFBRSxHQUFHUCxPQUFPLENBQUMsSUFBSSxDQUFDO0FBQ3RCLElBQUlRLE1BQU0sR0FBR1IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDUSxNQUFNO0FBQ3JDLElBQUlDLElBQUksR0FBR1QsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUNoQyxJQUFJVSxRQUFRLEdBQUdWLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDbEMsSUFBSVcsUUFBUSxH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