4bece6e7e89590e7a94d1c10f7b0f753
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.testReset = testReset;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _clsx = _interopRequireDefault(require("clsx"));
var _utils = require("@mui/utils");
var _base = require("@mui/base");
var _system = require("@mui/system");
var _styled = _interopRequireDefault(require("../styles/styled"));
var _useTheme = _interopRequireDefault(require("../styles/useTheme"));
var _useThemeProps = _interopRequireDefault(require("../styles/useThemeProps"));
var _capitalize = _interopRequireDefault(require("../utils/capitalize"));
var _Grow = _interopRequireDefault(require("../Grow"));
var _Popper = _interopRequireDefault(require("../Popper"));
var _useEventCallback = _interopRequireDefault(require("../utils/useEventCallback"));
var _useForkRef = _interopRequireDefault(require("../utils/useForkRef"));
var _useId = _interopRequireDefault(require("../utils/useId"));
var _useIsFocusVisible = _interopRequireDefault(require("../utils/useIsFocusVisible"));
var _useControlled = _interopRequireDefault(require("../utils/useControlled"));
var _tooltipClasses = _interopRequireWildcard(require("./tooltipClasses"));
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["arrow", "children", "classes", "components", "componentsProps", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "slotProps", "slots", "title", "TransitionComponent", "TransitionProps"];
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function round(value) {
  return Math.round(value * 1e5) / 1e5;
}
const useUtilityClasses = ownerState => {
  const {
    classes,
    disableInteractive,
    arrow,
    touch,
    placement
  } = ownerState;
  const slots = {
    popper: ['popper', !disableInteractive && 'popperInteractive', arrow && 'popperArrow'],
    tooltip: ['tooltip', arrow && 'tooltipArrow', touch && 'touch', `tooltipPlacement${(0, _capitalize.default)(placement.split('-')[0])}`],
    arrow: ['arrow']
  };
  return (0, _base.unstable_composeClasses)(slots, _tooltipClasses.getTooltipUtilityClass, classes);
};
const TooltipPopper = (0, _styled.default)(_Popper.default, {
  name: 'MuiTooltip',
  slot: 'Popper',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.popper, !ownerState.disableInteractive && styles.popperInteractive, ownerState.arrow && styles.popperArrow, !ownerState.open && styles.popperClose];
  }
})(({
  theme,
  ownerState,
  open
}) => (0, _extends2.default)({
  zIndex: (theme.vars || theme).zIndex.tooltip,
  pointerEvents: 'none'
}, !ownerState.disableInteractive && {
  pointerEvents: 'auto'
}, !open && {
  pointerEvents: 'none'
}, ownerState.arrow && {
  [`&[data-popper-placement*="bottom"] .${_tooltipClasses.default.arrow}`]: {
    top: 0,
    marginTop: '-0.71em',
    '&::before': {
      transformOrigin: '0 100%'
    }
  },
  [`&[data-popper-placement*="top"] .${_tooltipClasses.default.arrow}`]: {
    bottom: 0,
    marginBottom: '-0.71em',
    '&::before': {
      transformOrigin: '100% 0'
    }
  },
  [`&[data-popper-placement*="right"] .${_tooltipClasses.default.arrow}`]: (0, _extends2.default)({}, !ownerState.isRtl ? {
    left: 0,
    marginLeft: '-0.71em'
  } : {
    right: 0,
    marginRight: '-0.71em'
  }, {
    height: '1em',
    width: '0.71em',
    '&::before': {
      transformOrigin: '100% 100%'
    }
  }),
  [`&[data-popper-placement*="left"] .${_tooltipClasses.default.arrow}`]: (0, _extends2.default)({}, !ownerState.isRtl ? {
    right: 0,
    marginRight: '-0.71em'
  } : {
    left: 0,
    marginLeft: '-0.71em'
  }, {
    height: '1em',
    width: '0.71em',
    '&::before': {
      transformOrigin: '0 0'
    }
  })
}));
const TooltipTooltip = (0, _styled.default)('div', {
  name: 'MuiTooltip',
  slot: 'Tooltip',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.tooltip, ownerState.touch && styles.touch, ownerState.arrow && styles.tooltipArrow, styles[`tooltipPlacement${(0, _capitalize.default)(ownerState.placement.split('-')[0])}`]];
  }
})(({
  theme,
  ownerState
}) => (0, _extends2.default)({
  backgroundColor: theme.vars ? theme.vars.palette.Tooltip.bg : (0, _system.alpha)(theme.palette.grey[700], 0.92),
  borderRadius: (theme.vars || theme).shape.borderRadius,
  color: (theme.vars || theme).palette.common.white,
  fontFamily: theme.typography.fontFamily,
  padding: '4px 8px',
  fontSize: theme.typography.pxToRem(11),
  maxWidth: 300,
  margin: 2,
  wordWrap: 'break-word',
  fontWeight: theme.typography.fontWeightMedium
}, ownerState.arrow && {
  position: 'relative',
  margin: 0
}, ownerState.touch && {
  padding: '8px 16px',
  fontSize: theme.typography.pxToRem(14),
  lineHeight: `${round(16 / 14)}em`,
  fontWeight: theme.typography.fontWeightRegular
}, {
  [`.${_tooltipClasses.default.popper}[data-popper-placement*="left"] &`]: (0, _extends2.default)({
    transformOrigin: 'right center'
  }, !ownerState.isRtl ? (0, _extends2.default)({
    marginRight: '14px'
  }, ownerState.touch && {
    marginRight: '24px'
  }) : (0, _extends2.default)({
    marginLeft: '14px'
  }, ownerState.touch && {
    marginLeft: '24px'
  })),
  [`.${_tooltipClasses.default.popper}[data-popper-placement*="right"] &`]: (0, _extends2.default)({
    transformOrigin: 'left center'
  }, !ownerState.isRtl ? (0, _extends2.default)({
    marginLeft: '14px'
  }, ownerState.touch && {
    marginLeft: '24px'
  }) : (0, _extends2.default)({
    marginRight: '14px'
  }, ownerState.touch && {
    marginRight: '24px'
  })),
  [`.${_tooltipClasses.default.popper}[data-popper-placement*="top"] &`]: (0, _extends2.default)({
    transformOrigin: 'center bottom',
    marginBottom: '14px'
  }, ownerState.touch && {
    marginBottom: '24px'
  }),
  [`.${_tooltipClasses.default.popper}[data-popper-placement*="bottom"] &`]: (0, _extends2.default)({
    transformOrigin: 'center top',
    marginTop: '14px'
  }, ownerState.touch && {
    marginTop: '24px'
  })
}));
const TooltipArrow = (0, _styled.default)('span', {
  name: 'MuiTooltip',
  slot: 'Arrow',
  overridesResolver: (props, styles) => styles.arrow
})(({
  theme
}) => ({
  overflow: 'hidden',
  position: 'absolute',
  width: '1em',
  height: '0.71em' /* = width / sqrt(2) = (length of the hypotenuse) */,
  boxSizing: 'border-box',
  color: theme.vars ? theme.vars.palette.Tooltip.bg : (0, _system.alpha)(theme.palette.grey[700], 0.9),
  '&::before': {
    content: '""',
    margin: 'auto',
    display: 'block',
    width: '100%',
    height: '100%',
    backgroundColor: 'currentColor',
    transform: 'rotate(45deg)'
  }
}));
let hystersisOpen = false;
let hystersisTimer = null;
let cursorPosition = {
  x: 0,
  y: 0
};
function testReset() {
  hystersisOpen = false;
  clearTimeout(hystersisTimer);
}
function composeEventHandler(handler, eventHandler) {
  return event => {
    if (eventHandler) {
      eventHandler(event);
    }
    handler(event);
  };
}

// TODO v6: Remove PopperComponent, PopperProps, TransitionComponent and TransitionProps.
const Tooltip = /*#__PURE__*/React.forwardRef(function Tooltip(inProps, ref) {
  var _ref, _slots$popper, _ref2, _ref3, _slots$transition, _ref4, _slots$tooltip, _ref5, _slots$arrow, _slotProps$popper, _ref6, _slotProps$popper2, _slotProps$transition, _slotProps$tooltip, _ref7, _slotProps$tooltip2, _slotProps$arrow, _ref8, _slotProps$arrow2;
  const props = (0, _useThemeProps.default)({
    props: inProps,
    name: 'MuiTooltip'
  });
  const {
      arrow = false,
      children,
      components = {},
      componentsProps = {},
      describeChild = false,
      disableFocusListener = false,
      disableHoverListener = false,
      disableInteractive: disableInteractiveProp = false,
      disableTouchListener = false,
      enterDelay = 100,
      enterNextDelay = 0,
      enterTouchDelay = 700,
      followCursor = false,
      id: idProp,
      leaveDelay = 0,
      leaveTouchDelay = 1500,
      onClose,
      onOpen,
      open: openProp,
      placement = 'bottom',
      PopperComponent: PopperComponentProp,
      PopperProps = {},
      slotProps = {},
      slots = {},
      title,
      TransitionComponent: TransitionComponentProp = _Grow.default,
      TransitionProps
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const theme = (0, _useTheme.default)();
  const isRtl = theme.direction === 'rtl';
  const [childNode, setChildNode] = React.useState();
  const [arrowRef, setArrowRef] = React.useState(null);
  const ignoreNonTouchEvents = React.useRef(false);
  const disableInteractive = disableInteractiveProp || followCursor;
  const closeTimer = React.useRef();
  const enterTimer = React.useRef();
  const leaveTimer = React.useRef();
  const touchTimer = React.useRef();
  const [openState, setOpenState] = (0, _useControlled.default)({
    controlled: openProp,
    default: false,
    name: 'Tooltip',
    state: 'open'
  });
  let open = openState;
  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const {
      current: isControlled
    } = React.useRef(openProp !== undefined);

    // eslint-disable-next-line react-hooks/rules-of-hooks
    React.useEffect(() => {
      if (childNode && childNode.disabled && !isControlled && title !== '' && childNode.tagName.toLowerCase() === 'button') {
        console.error(['MUI: You are providing a disabled `button` child to the Tooltip component.', 'A disabled element does not fire events.', "Tooltip needs to listen to the child element's events to display the title.", '', 'Add a simple wrapper element, such as a `span`.'].join('\n'));
      }
    }, [title, childNode, isControlled]);
  }
  const id = (0, _useId.default)(idProp);
  const prevUserSelect = React.useRef();
  const stopTouchInteraction = React.useCallback(() => {
    if (prevUserSelect.current !== undefined) {
      document.body.style.WebkitUserSelect = prevUserSelect.current;
      prevUserSelect.current = undefined;
    }
    clearTimeout(touchTimer.current);
  }, []);
  React.useEffect(() => {
    return () => {
      clearTimeout(closeTimer.current);
      clearTimeout(enterTimer.current);
      clearTimeout(leaveTimer.current);
      stopTouchInteraction();
    };
  }, [stopTouchInteraction]);
  const handleOpen = event => {
    clearTimeout(hystersisTimer);
    hystersisOpen = true;

    // The mouseover event will trigger for every nested element in the tooltip.
    // We can skip rerendering when the tooltip is already open.
    // We are using the mouseover event instead of the mouseenter event to fix a hide/show issue.
    setOpenState(true);
    if (onOpen && !open) {
      onOpen(event);
    }
  };
  const handleClose = (0, _useEventCallback.default)(
  /**
   * @param {React.SyntheticEvent | Event} event
   */
  event => {
    clearTimeout(hystersisTimer);
    hystersisTimer = setTimeout(() => {
      hystersisOpen = false;
    }, 800 + leaveDelay);
    setOpenState(false);
    if (onClose && open) {
      onClose(event);
    }
    clearTimeout(closeTimer.current);
    closeTimer.current = setTimeout(() => {
      ignoreNonTouchEvents.current = false;
    }, theme.transitions.duration.shortest);
  });
  const handleEnter = event => {
    if (ignoreNonTouchEvents.current && event.type !== 'touchstart') {
      return;
    }

    // Remove the title ahead of time.
    // We don't want to wait for the next render commit.
    // We would risk displaying two tooltips at the same time (native + this one).
    if (childNode) {
      childNode.removeAttribute('title');
    }
    clearTimeout(enterTimer.current);
    clearTimeout(leaveTimer.current);
    if (enterDelay || hystersisOpen && enterNextDelay) {
      enterTimer.current = setTimeout(() => {
        handleOpen(event);
      }, hystersisOpen ? enterNextDelay : enterDelay);
    } else {
      handleOpen(event);
    }
  };
  const handleLeave = event => {
    clearTimeout(enterTimer.current);
    clearTimeout(leaveTimer.current);
    leaveTimer.current = setTimeout(() => {
      handleClose(event);
    }, leaveDelay);
  };
  const {
    isFocusVisibleRef,
    onBlur: handleBlurVisible,
    onFocus: handleFocusVisible,
    ref: focusVisibleRef
  } = (0, _useIsFocusVisible.default)();
  // We don't necessarily care about the focusVisible state (which is safe to access via ref anyway).
  // We just need to re-render the Tooltip if the focus-visible state changes.
  const [, setChildIsFocusVisible] = React.useState(false);
  const handleBlur = event => {
    handleBlurVisible(event);
    if (isFocusVisibleRef.current === false) {
      setChildIsFocusVisible(false);
      handleLeave(event);
    }
  };
  const handleFocus = event => {
    // Workaround for https://github.com/facebook/react/issues/7769
    // The autoFocus of React might trigger the event before the componentDidMount.
    // We need to account for this eventuality.
    if (!childNode) {
      setChildNode(event.currentTarget);
    }
    handleFocusVisible(event);
    if (isFocusVisibleRef.current === true) {
      setChildIsFocusVisible(true);
      handleEnter(event);
    }
  };
  const detectTouchStart = event => {
    ignoreNonTouchEvents.current = true;
    const childrenProps = children.props;
    if (childrenProps.onTouchStart) {
      childrenProps.onTouchStart(event);
    }
  };
  const handleMouseOver = handleEnter;
  const handleMouseLeave = handleLeave;
  const handleTouchStart = event => {
    detectTouchStart(event);
    clearTimeout(leaveTimer.current);
    clearTimeout(closeTimer.current);
    stopTouchInteraction();
    prevUserSelect.current = document.body.style.WebkitUserSelect;
    // Prevent iOS text selection on long-tap.
    document.body.style.WebkitUserSelect = 'none';
    touchTimer.current = setTimeout(() => {
      document.body.style.WebkitUserSelect = prevUserSelect.current;
      handleEnter(event);
    }, enterTouchDelay);
  };
  const handleTouchEnd = event => {
    if (children.props.onTouchEnd) {
      children.props.onTouchEnd(event);
    }
    stopTouchInteraction();
    clearTimeout(leaveTimer.current);
    leaveTimer.current = setTimeout(() => {
      handleClose(event);
    }, leaveTouchDelay);
  };
  React.useEffect(() => {
    if (!open) {
      return undefined;
    }

    /**
     * @param {KeyboardEvent} nativeEvent
     */
    function handleKeyDown(nativeEvent) {
      // IE11, Edge (prior to using Bink?) use 'Esc'
      if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {
        handleClose(nativeEvent);
      }
    }
    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [handleClose, open]);
  const handleRef = (0, _useForkRef.default)(children.ref, focusVisibleRef, setChildNode, ref);

  // There is no point in displaying an empty tooltip.
  if (!title && title !== 0) {
    open = false;
  }
  const popperRef = React.useRef();
  const handleMouseMove = event => {
    const childrenProps = children.props;
    if (childrenProps.onMouseMove) {
      childrenProps.onMouseMove(event);
    }
    cursorPosition = {
      x: event.clientX,
      y: event.clientY
    };
    if (popperRef.current) {
      popperRef.current.update();
    }
  };
  const nameOrDescProps = {};
  const titleIsString = typeof title === 'string';
  if (describeChild) {
    nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
    nameOrDescProps['aria-describedby'] = open ? id : null;
  } else {
    nameOrDescProps['aria-label'] = titleIsString ? title : null;
    nameOrDescProps['aria-labelledby'] = open && !titleIsString ? id : null;
  }
  const childrenProps = (0, _extends2.default)({}, nameOrDescProps, other, children.props, {
    className: (0, _clsx.default)(other.className, children.props.className),
    onTouchStart: detectTouchStart,
    ref: handleRef
  }, followCursor ? {
    onMouseMove: handleMouseMove
  } : {});
  if (process.env.NODE_ENV !== 'production') {
    childrenProps['data-mui-internal-clone-element'] = true;

    // eslint-disable-next-line react-hooks/rules-of-hooks
    React.useEffect(() => {
      if (childNode && !childNode.getAttribute('data-mui-internal-clone-element')) {
        console.error(['MUI: The `children` component of the Tooltip is not forwarding its props correctly.', 'Please make sure that props are spread on the same element that the ref is applied to.'].join('\n'));
      }
    }, [childNode]);
  }
  const interactiveWrapperListeners = {};
  if (!disableTouchListener) {
    childrenProps.onTouchStart = handleTouchStart;
    childrenProps.onTouchEnd = handleTouchEnd;
  }
  if (!disableHoverListener) {
    childrenProps.onMouseOver = composeEventHandler(handleMouseOver, childrenProps.onMouseOver);
    childrenProps.onMouseLeave = composeEventHandler(handleMouseLeave, childrenProps.onMouseLeave);
    if (!disableInteractive) {
      interactiveWrapperListeners.onMouseOver = handleMouseOver;
      interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
    }
  }
  if (!disableFocusListener) {
    childrenProps.onFocus = composeEventHandler(handleFocus, childrenProps.onFocus);
    childrenProps.onBlur = composeEventHandler(handleBlur, childrenProps.onBlur);
    if (!disableInteractive) {
      interactiveWrapperListeners.onFocus = handleFocus;
      interactiveWrapperListeners.onBlur = handleBlur;
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (children.props.title) {
      console.error(['MUI: You have provided a `title` prop to the child of <Tooltip />.', `Remove this title prop \`${children.props.title}\` or the Tooltip component.`].join('\n'));
    }
  }
  const popperOptions = React.useMemo(() => {
    var _PopperProps$popperOp;
    let tooltipModifiers = [{
      name: 'arrow',
      enabled: Boolean(arrowRef),
      options: {
        element: arrowRef,
        padding: 4
      }
    }];
    if ((_PopperProps$popperOp = PopperProps.popperOptions) != null && _PopperProps$popperOp.modifiers) {
      tooltipModifiers = tooltipModifiers.concat(PopperProps.popperOptions.modifiers);
    }
    return (0, _extends2.default)({}, PopperProps.popperOptions, {
      modifiers: tooltipModifiers
    });
  }, [arrowRef, PopperProps]);
  const ownerState = (0, _extends2.default)({}, props, {
    isRtl,
    arrow,
    disableInteractive,
    placement,
    PopperComponentProp,
    touch: ignoreNonTouchEvents.current
  });
  const classes = useUtilityClasses(ownerState);
  const PopperComponent = (_ref = (_slots$popper = slots.popper) != null ? _slots$popper : components.Popper) != null ? _ref : TooltipPopper;
  const TransitionComponent = (_ref2 = (_ref3 = (_slots$transition = slots.transition) != null ? _slots$transition : components.Transition) != null ? _ref3 : TransitionComponentProp) != null ? _ref2 : _Grow.default;
  const TooltipComponent = (_ref4 = (_slots$tooltip = slots.tooltip) != null ? _slots$tooltip : components.Tooltip) != null ? _ref4 : TooltipTooltip;
  const ArrowComponent = (_ref5 = (_slots$arrow = slots.arrow) != null ? _slots$arrow : components.Arrow) != null ? _ref5 : TooltipArrow;
  const popperProps = (0, _base.appendOwnerState)(PopperComponent, (0, _extends2.default)({}, PopperProps, (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper, {
    className: (0, _clsx.default)(classes.popper, PopperProps == null ? void 0 : PopperProps.className, (_ref6 = (_slotProps$popper2 = slotProps.popper) != null ? _slotProps$popper2 : componentsProps.popper) == null ? void 0 : _ref6.className)
  }), ownerState);
  const transitionProps = (0, _base.appendOwnerState)(TransitionComponent, (0, _extends2.default)({}, TransitionProps, (_slotProps$transition = slotProps.transition) != null ? _slotProps$transition : componentsProps.transition), ownerState);
  const tooltipProps = (0, _base.appendOwnerState)(TooltipComponent, (0, _extends2.default)({}, (_slotProps$tooltip = slotProps.tooltip) != null ? _slotProps$tooltip : componentsProps.tooltip, {
    className: (0, _clsx.default)(classes.tooltip, (_ref7 = (_slotProps$tooltip2 = slotProps.tooltip) != null ? _slotProps$tooltip2 : componentsProps.tooltip) == null ? void 0 : _ref7.className)
  }), ownerState);
  const tooltipArrowProps = (0, _base.appendOwnerState)(ArrowComponent, (0, _extends2.default)({}, (_slotProps$arrow = slotProps.arrow) != null ? _slotProps$arrow : componentsProps.arrow, {
    className: (0, _clsx.default)(classes.arrow, (_ref8 = (_slotProps$arrow2 = slotProps.arrow) != null ? _slotProps$arrow2 : componentsProps.arrow) == null ? void 0 : _ref8.className)
  }), ownerState);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
    children: [/*#__PURE__*/React.cloneElement(children, childrenProps), /*#__PURE__*/(0, _jsxRuntime.jsx)(PopperComponent, (0, _extends2.default)({
      as: PopperComponentProp != null ? PopperComponentProp : _Popper.default,
      placement: placement,
      anchorEl: followCursor ? {
        getBoundingClientRect: () => ({
          top: cursorPosition.y,
          left: cursorPosition.x,
          right: cursorPosition.x,
          bottom: cursorPosition.y,
          width: 0,
          height: 0
        })
      } : childNode,
      popperRef: popperRef,
      open: childNode ? open : false,
      id: id,
      transition: true
    }, interactiveWrapperListeners, popperProps, {
      popperOptions: popperOptions,
      children: ({
        TransitionProps: TransitionPropsInner
      }) => /*#__PURE__*/(0, _jsxRuntime.jsx)(TransitionComponent, (0, _extends2.default)({
        timeout: theme.transitions.duration.shorter
      }, TransitionPropsInner, transitionProps, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(TooltipComponent, (0, _extends2.default)({}, tooltipProps, {
          children: [title, arrow ? /*#__PURE__*/(0, _jsxRuntime.jsx)(ArrowComponent, (0, _extends2.default)({}, tooltipArrowProps, {
            ref: setArrowRef
          })) : null]
        }))
      }))
    }))]
  });
});
process.env.NODE_ENV !== "production" ? Tooltip.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * If `true`, adds an arrow to the tooltip.
   * @default false
   */
  arrow: _propTypes.default.bool,
  /**
   * Tooltip reference element.
   */
  children: _utils.elementAcceptingRef.isRequired,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,
  /**
   * @ignore
   */
  className: _propTypes.default.string,
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `slots` prop.
   * It's recommended to use the `slots` prop instead.
   *
   * @default {}
   */
  components: _propTypes.default.shape({
    Arrow: _propTypes.default.elementType,
    Popper: _propTypes.default.elementType,
    Tooltip: _propTypes.default.elementType,
    Transition: _propTypes.default.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `slotProps` prop.
   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
   *
   * @default {}
   */
  componentsProps: _propTypes.default.shape({
    arrow: _propTypes.default.object,
    popper: _propTypes.default.object,
    tooltip: _propTypes.default.object,
    transition: _propTypes.default.object
  }),
  /**
   * Set to `true` if the `title` acts as an accessible description.
   * By default the `title` acts as an accessible label for the child.
   * @default false
   */
  describeChild: _propTypes.default.bool,
  /**
   * Do not respond to focus-visible events.
   * @default false
   */
  disableFocusListener: _propTypes.default.bool,
  /**
   * Do not respond to hover events.
   * @default false
   */
  disableHoverListener: _propTypes.default.bool,
  /**
   * Makes a tooltip not interactive, i.e. it will close when the user
   * hovers over the tooltip before the `leaveDelay` is expired.
   * @default false
   */
  disableInteractive: _propTypes.default.bool,
  /**
   * Do not respond to long press touch events.
   * @default false
   */
  disableTouchListener: _propTypes.default.bool,
  /**
   * The number of milliseconds to wait before showing the tooltip.
   * This prop won't impact the enter touch delay (`enterTouchDelay`).
   * @default 100
   */
  enterDelay: _propTypes.default.number,
  /**
   * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
   * @default 0
   */
  enterNextDelay: _propTypes.default.number,
  /**
   * The number of milliseconds a user must touch the element before showing the tooltip.
   * @default 700
   */
  enterTouchDelay: _propTypes.default.number,
  /**
   * If `true`, the tooltip follow the cursor over the wrapped element.
   * @default false
   */
  followCursor: _propTypes.default.bool,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: _propTypes.default.string,
  /**
   * The number of milliseconds to wait before hiding the tooltip.
   * This prop won't impact the leave touch delay (`leaveTouchDelay`).
   * @default 0
   */
  leaveDelay: _propTypes.default.number,
  /**
   * The number of milliseconds after the user stops touching an element before hiding the tooltip.
   * @default 1500
   */
  leaveTouchDelay: _propTypes.default.number,
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onClose: _propTypes.default.func,
  /**
   * Callback fired when the component requests to be open.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onOpen: _propTypes.default.func,
  /**
   * If `true`, the component is shown.
   */
  open: _propTypes.default.bool,
  /**
   * Tooltip placement.
   * @default 'bottom'
   */
  placement: _propTypes.default.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),
  /**
   * The component used for the popper.
   * @default Popper
   */
  PopperComponent: _propTypes.default.elementType,
  /**
   * Props applied to the [`Popper`](/material-ui/api/popper/) element.
   * @default {}
   */
  PopperProps: _propTypes.default.object,
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: _propTypes.default.shape({
    arrow: _propTypes.default.object,
    popper: _propTypes.default.object,
    tooltip: _propTypes.default.object,
    transition: _propTypes.default.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: _propTypes.default.shape({
    arrow: _propTypes.default.elementType,
    popper: _propTypes.default.elementType,
    tooltip: _propTypes.default.elementType,
    transition: _propTypes.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
  /**
   * Tooltip title. Zero-length titles string, undefined, null and false are never displayed.
   */
  title: _propTypes.default.node,
  /**
   * The component used for the transition.
   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Grow
   */
  TransitionComponent: _propTypes.default.elementType,
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
   */
  TransitionProps: _propTypes.default.object
} : void 0;
var _default = Tooltip;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsInRlc3RSZXNldCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiIsIl9leHRlbmRzMiIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcHJvcFR5cGVzIiwiX2Nsc3giLCJfdXRpbHMiLCJfYmFzZSIsIl9zeXN0ZW0iLCJfc3R5bGVkIiwiX3VzZVRoZW1lIiwiX3VzZVRoZW1lUHJvcHMiLCJfY2FwaXRhbGl6ZSIsIl9Hcm93IiwiX1BvcHBlciIsIl91c2VFdmVudENhbGxiYWNrIiwiX3VzZUZvcmtSZWYiLCJfdXNlSWQiLCJfdXNlSXNGb2N1c1Zpc2libGUiLCJfdXNlQ29udHJvbGxlZCIsIl90b29sdGlwQ2xhc3NlcyIsIl9qc3hSdW50aW1lIiwiX2V4Y2x1ZGVkIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsInJvdW5kIiwiTWF0aCIsInVzZVV0aWxpdHlDbGFzc2VzIiwib3duZXJTdGF0ZSIsImNsYXNzZXMiLCJkaXNhYmxlSW50ZXJhY3RpdmUiLCJhcnJvdyIsInRvdWNoIiwicGxhY2VtZW50Iiwic2xvdHMiLCJwb3BwZXIiLCJ0b29sdGlwIiwic3BsaXQiLCJ1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyIsImdldFRvb2x0aXBVdGlsaXR5Q2xhc3MiLCJUb29sdGlwUG9wcGVyIiwibmFtZSIsInNsb3QiLCJvdmVycmlkZXNSZXNvbHZlciIsInByb3BzIiwic3R5bGVzIiwicG9wcGVySW50ZXJhY3RpdmUiLCJwb3BwZXJBcnJvdyIsIm9wZW4iLCJwb3BwZXJDbG9zZSIsInRoZW1lIiwiekluZGV4IiwidmFycyIsInBvaW50ZXJFdmVudHMiLCJ0b3AiLCJtYXJnaW5Ub3AiLCJ0cmFuc2Zvcm1PcmlnaW4iLCJib3R0b20iLCJtYXJnaW5Cb3R0b20iLCJpc1J0bCIsImxlZnQiLCJtYXJnaW5MZWZ0IiwicmlnaHQiLCJtYXJnaW5SaWdodCIsImhlaWdodCIsIndpZHRoIiwiVG9vbHRpcFRvb2x0aXAiLCJ0b29sdGlwQXJyb3ciLCJiYWNrZ3JvdW5kQ29sb3IiLCJwYWxldHRlIiwiVG9vbHRpcCIsImJnIiwiYWxwaGEiLCJncmV5IiwiYm9yZGVyUmFkaXVzIiwic2hhcGUiLCJjb2xvciIsImNvbW1vbiIsIndoaXRlIiwiZm9udEZhbWlseSIsInR5cG9ncmFwaHkiLCJwYWRkaW5nIiwiZm9udFNpemUiLCJweFRvUmVtIiwibWF4V2lkdGgiLCJtYXJnaW4iLCJ3b3JkV3JhcCIsImZvbnRXZWlnaHQiLCJmb250V2VpZ2h0TWVkaXVtIiwicG9zaXRpb24iLCJsaW5lSGVpZ2h0IiwiZm9udFdlaWdodFJlZ3VsYXIiLCJUb29sdGlwQXJyb3ciLCJvdmVyZmxvdyIsImJveFNpemluZyIsImNvbnRlbnQiLCJkaXNwbGF5IiwidHJhbnNmb3JtIiwiaHlzdGVyc2lzT3BlbiIsImh5c3RlcnNpc1RpbWVyIiwiY3Vyc29yUG9zaXRpb24iLCJ4IiwieSIsImNsZWFyVGltZW91dCIsImNvbXBvc2VFdmVudEhhbmRsZXIiLCJoYW5kbGVyIiwiZXZlbnRIYW5kbGVyIiwiZXZlbnQiLCJmb3J3YXJkUmVmIiwiaW5Qcm9wcyIsInJlZiIsIl9yZWYiLCJfc2xvdHMkcG9wcGVyIiwiX3JlZjIiLCJfcmVmMyIsIl9zbG90cyR0cmFuc2l0aW9uIiwiX3JlZjQiLCJfc2xvdHMkdG9vbHRpcCIsIl9yZWY1IiwiX3Nsb3RzJGFycm93IiwiX3Nsb3RQcm9wcyRwb3BwZXIiLCJfcmVmNiIsIl9zbG90UHJvcHMkcG9wcGVyMiIsIl9zbG90UHJvcHMkdHJhbnNpdGlvbiIsIl9zbG90UHJvcHMkdG9vbHRpcCIsIl9yZWY3IiwiX3Nsb3RQcm9wcyR0b29sdGlwMiIsIl9zbG90UHJvcHMkYXJyb3ciLCJfcmVmOCIsIl9zbG90UHJvcHMkYXJyb3cyIiwiY2hpbGRyZW4iLCJjb21wb25lbnRzIiwiY29tcG9uZW50c1Byb3BzIiwiZGVzY3JpYmVDaGlsZCIsImRpc2FibGVGb2N1c0xpc3RlbmVyIiwiZGlzYWJsZUhvdmVyTGlzdGVuZXIiLCJkaXNhYmxlSW50ZXJhY3RpdmVQcm9wIiwiZGlzYWJsZVRvdWNoTGlzdGVuZXIiLCJlbnRlckRlbGF5IiwiZW50ZXJOZXh0RGVsYXkiLCJlbnRlclRvdWNoRGVsYXkiLCJmb2xsb3dDdXJzb3IiLCJpZCIsImlkUHJvcCIsImxlYXZlRGVsYXkiLCJsZWF2ZVRvdWNoRGVsYXkiLCJvbkNsb3NlIiwib25PcGVuIiwib3BlblByb3AiLCJQb3BwZXJDb21wb25lbnQiLCJQb3BwZXJDb21wb25lbnRQcm9wIiwiUG9wcGVyUHJvcHMiLCJzbG90UHJvcHMiLCJ0aXRsZSIsIlRyYW5zaXRpb25Db21wb25lbnQiLCJUcmFuc2l0aW9uQ29tcG9uZW50UHJvcCIsIlRyYW5zaXRpb25Qcm9wcyIsIm90aGVyIiwiZGlyZWN0aW9uIiwiY2hpbGROb2RlIiwic2V0Q2hpbGROb2RlIiwidXNlU3RhdGUiLCJhcnJvd1JlZiIsInNldEFycm93UmVmIiwiaWdub3JlTm9uVG91Y2hFdmVudHMiLCJ1c2VSZWYiLCJjbG9zZVRpbWVyIiwiZW50ZXJUaW1lciIsImxlYXZlVGltZXIiLCJ0b3VjaFRpbWVyIiwib3BlblN0YXRlIiwic2V0T3BlblN0YXRlIiwiY29udHJvbGxlZCIsInN0YXRlIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiY3VycmVudCIsImlzQ29udHJvbGxlZCIsInVuZGVmaW5lZCIsInVzZUVmZmVjdCIsImRpc2FibGVkIiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwiY29uc29sZSIsImVycm9yIiwiam9pbiIsInByZXZVc2VyU2VsZWN0Iiwic3RvcFRvdWNoSW50ZXJhY3Rpb24iLCJ1c2VDYWxsYmFjayIsImRvY3VtZW50IiwiYm9keSIsInN0eWxlIiwiV2Via2l0VXNlclNlbGVjdCIsImhhbmRsZU9wZW4iLCJoYW5kbGVDbG9zZSIsInNldFRpbWVvdXQiLCJ0cmFuc2l0aW9ucyIsImR1cmF0aW9uIiwic2hvcnRlc3QiLCJoYW5kbGVFbnRlciIsInR5cGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJoYW5kbGVMZWF2ZSIsImlzRm9jdXNWaXNpYmxlUmVmIiwib25CbHVyIiwiaGFuZGxlQmx1clZpc2libGUiLCJvbkZvY3VzIiwiaGFuZGxlRm9jdXNWaXNpYmxlIiwiZm9jdXNWaXNpYmxlUmVmIiwic2V0Q2hpbGRJc0ZvY3VzVmlzaWJsZSIsImhhbmRsZUJsdXIiLCJoYW5kbGVGb2N1cyIsImN1cnJlbnRUYXJnZXQiLCJkZXRlY3RUb3VjaFN0YXJ0IiwiY2hpbGRyZW5Qcm9wcyIsIm9uVG91Y2hTdGFydCIsImhhbmRsZU1vdXNlT3ZlciIsImhhbmRsZU1vdXNlTGVhdmUiLCJoYW5kbGVUb3VjaFN0YXJ0IiwiaGFuZGxlVG91Y2hFbmQiLCJvblRvdWNoRW5kIiwiaGFuZGxlS2V5RG93biIsIm5hdGl2ZUV2ZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJoYW5kbGVSZWYiLCJwb3BwZXJSZWYiLCJoYW5kbGVNb3VzZU1vdmUiLCJvbk1vdXNlTW92ZSIsImNsaWVudFgiLCJjbGllbnRZIiwidXBkYXRlIiwibmFtZU9yRGVzY1Byb3BzIiwidGl0bGVJc1N0cmluZyIsImNsYXNzTmFtZSIsImdldEF0dHJpYnV0ZSIsImludGVyYWN0aXZlV3JhcHBlckxpc3RlbmVycyIsIm9uTW91c2VPdmVyIiwib25Nb3VzZUxlYXZlIiwicG9wcGVyT3B0aW9ucyIsInVzZU1lbW8iLCJfUG9wcGVyUHJvcHMkcG9wcGVyT3AiLCJ0b29sdGlwTW9kaWZpZXJzIiwiZW5hYmxlZCIsIkJvb2xlYW4iLCJvcHRpb25zIiwiZWxlbWVudCIsIm1vZGlmaWVycyIsImNvbmNhdCIsIlBvcHBlciIsInRyYW5zaXRpb24iLCJUcmFuc2l0aW9uIiwiVG9vbHRpcENvbXBvbmVudCIsIkFycm93Q29tcG9uZW50IiwiQXJyb3ciLCJwb3BwZXJQcm9wcyIsImFwcGVuZE93bmVyU3RhdGUiLCJ0cmFuc2l0aW9uUHJvcHMiLCJ0b29sdGlwUHJvcHMiLCJ0b29sdGlwQXJyb3dQcm9wcyIsImpzeHMiLCJGcmFnbWVudCIsImNsb25lRWxlbWVudCIsImpzeCIsImFzIiwiYW5jaG9yRWwiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJUcmFuc2l0aW9uUHJvcHNJbm5lciIsInRpbWVvdXQiLCJzaG9ydGVyIiwicHJvcFR5cGVzIiwiYm9vbCIsImVsZW1lbnRBY2NlcHRpbmdSZWYiLCJpc1JlcXVpcmVkIiwib2JqZWN0Iiwic3RyaW5nIiwiZWxlbWVudFR5cGUiLCJudW1iZXIiLCJmdW5jIiwib25lT2YiLCJzeCIsIm9uZU9mVHlwZSIsImFycmF5T2YiLCJub2RlIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJUb29sdGlwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5leHBvcnRzLnRlc3RSZXNldCA9IHRlc3RSZXNldDtcbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcbnZhciBfY2xzeCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsc3hcIikpO1xudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAbXVpL3V0aWxzXCIpO1xudmFyIF9iYXNlID0gcmVxdWlyZShcIkBtdWkvYmFzZVwiKTtcbnZhciBfc3lzdGVtID0gcmVxdWlyZShcIkBtdWkvc3lzdGVtXCIpO1xudmFyIF9zdHlsZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvc3R5bGVkXCIpKTtcbnZhciBfdXNlVGhlbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvdXNlVGhlbWVcIikpO1xudmFyIF91c2VUaGVtZVByb3BzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHNcIikpO1xudmFyIF9jYXBpdGFsaXplID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvY2FwaXRhbGl6ZVwiKSk7XG52YXIgX0dyb3cgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Hcm93XCIpKTtcbnZhciBfUG9wcGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vUG9wcGVyXCIpKTtcbnZhciBfdXNlRXZlbnRDYWxsYmFjayA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2tcIikpO1xudmFyIF91c2VGb3JrUmVmID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvdXNlRm9ya1JlZlwiKSk7XG52YXIgX3VzZUlkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvdXNlSWRcIikpO1xudmFyIF91c2VJc0ZvY3VzVmlzaWJsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3VzZUlzRm9jdXNWaXNpYmxlXCIpKTtcbnZhciBfdXNlQ29udHJvbGxlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3VzZUNvbnRyb2xsZWRcIikpO1xudmFyIF90b29sdGlwQ2xhc3NlcyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL3Rvb2x0aXBDbGFzc2VzXCIpKTtcbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFycm93XCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImRlc2NyaWJlQ2hpbGRcIiwgXCJkaXNhYmxlRm9jdXNMaXN0ZW5lclwiLCBcImRpc2FibGVIb3Zlckxpc3RlbmVyXCIsIFwiZGlzYWJsZUludGVyYWN0aXZlXCIsIFwiZGlzYWJsZVRvdWNoTGlzdGVuZXJcIiwgXCJlbnRlckRlbGF5XCIsIFwiZW50ZXJOZXh0RGVsYXlcIiwgXCJlbnRlclRvdWNoRGVsYXlcIiwgXCJmb2xsb3dDdXJzb3JcIiwgXCJpZFwiLCBcImxlYXZlRGVsYXlcIiwgXCJsZWF2ZVRvdWNoRGVsYXlcIiwgXCJvbkNsb3NlXCIsIFwib25PcGVuXCIsIFwib3BlblwiLCBcInBsYWNlbWVudFwiLCBcIlBvcHBlckNvbXBvbmVudFwiLCBcIlBvcHBlclByb3BzXCIsIFwic2xvdFByb3BzXCIsIFwic2xvdHNcIiwgXCJ0aXRsZVwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIiwgXCJUcmFuc2l0aW9uUHJvcHNcIl07XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cbmZ1bmN0aW9uIHJvdW5kKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMWU1KSAvIDFlNTtcbn1cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVJbnRlcmFjdGl2ZSxcbiAgICBhcnJvdyxcbiAgICB0b3VjaCxcbiAgICBwbGFjZW1lbnRcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHBvcHBlcjogWydwb3BwZXInLCAhZGlzYWJsZUludGVyYWN0aXZlICYmICdwb3BwZXJJbnRlcmFjdGl2ZScsIGFycm93ICYmICdwb3BwZXJBcnJvdyddLFxuICAgIHRvb2x0aXA6IFsndG9vbHRpcCcsIGFycm93ICYmICd0b29sdGlwQXJyb3cnLCB0b3VjaCAmJiAndG91Y2gnLCBgdG9vbHRpcFBsYWNlbWVudCR7KDAsIF9jYXBpdGFsaXplLmRlZmF1bHQpKHBsYWNlbWVudC5zcGxpdCgnLScpWzBdKX1gXSxcbiAgICBhcnJvdzogWydhcnJvdyddXG4gIH07XG4gIHJldHVybiAoMCwgX2Jhc2UudW5zdGFibGVfY29tcG9zZUNsYXNzZXMpKHNsb3RzLCBfdG9vbHRpcENsYXNzZXMuZ2V0VG9vbHRpcFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgVG9vbHRpcFBvcHBlciA9ICgwLCBfc3R5bGVkLmRlZmF1bHQpKF9Qb3BwZXIuZGVmYXVsdCwge1xuICBuYW1lOiAnTXVpVG9vbHRpcCcsXG4gIHNsb3Q6ICdQb3BwZXInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnBvcHBlciwgIW93bmVyU3RhdGUuZGlzYWJsZUludGVyYWN0aXZlICYmIHN0eWxlcy5wb3BwZXJJbnRlcmFjdGl2ZSwgb3duZXJTdGF0ZS5hcnJvdyAmJiBzdHlsZXMucG9wcGVyQXJyb3csICFvd25lclN0YXRlLm9wZW4gJiYgc3R5bGVzLnBvcHBlckNsb3NlXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGUsXG4gIG9wZW5cbn0pID0+ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICB6SW5kZXg6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS56SW5kZXgudG9vbHRpcCxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnXG59LCAhb3duZXJTdGF0ZS5kaXNhYmxlSW50ZXJhY3RpdmUgJiYge1xuICBwb2ludGVyRXZlbnRzOiAnYXV0bydcbn0sICFvcGVuICYmIHtcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnXG59LCBvd25lclN0YXRlLmFycm93ICYmIHtcbiAgW2AmW2RhdGEtcG9wcGVyLXBsYWNlbWVudCo9XCJib3R0b21cIl0gLiR7X3Rvb2x0aXBDbGFzc2VzLmRlZmF1bHQuYXJyb3d9YF06IHtcbiAgICB0b3A6IDAsXG4gICAgbWFyZ2luVG9wOiAnLTAuNzFlbScsXG4gICAgJyY6OmJlZm9yZSc6IHtcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAgMTAwJSdcbiAgICB9XG4gIH0sXG4gIFtgJltkYXRhLXBvcHBlci1wbGFjZW1lbnQqPVwidG9wXCJdIC4ke190b29sdGlwQ2xhc3Nlcy5kZWZhdWx0LmFycm93fWBdOiB7XG4gICAgYm90dG9tOiAwLFxuICAgIG1hcmdpbkJvdHRvbTogJy0wLjcxZW0nLFxuICAgICcmOjpiZWZvcmUnOiB7XG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICcxMDAlIDAnXG4gICAgfVxuICB9LFxuICBbYCZbZGF0YS1wb3BwZXItcGxhY2VtZW50Kj1cInJpZ2h0XCJdIC4ke190b29sdGlwQ2xhc3Nlcy5kZWZhdWx0LmFycm93fWBdOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCAhb3duZXJTdGF0ZS5pc1J0bCA/IHtcbiAgICBsZWZ0OiAwLFxuICAgIG1hcmdpbkxlZnQ6ICctMC43MWVtJ1xuICB9IDoge1xuICAgIHJpZ2h0OiAwLFxuICAgIG1hcmdpblJpZ2h0OiAnLTAuNzFlbSdcbiAgfSwge1xuICAgIGhlaWdodDogJzFlbScsXG4gICAgd2lkdGg6ICcwLjcxZW0nLFxuICAgICcmOjpiZWZvcmUnOiB7XG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICcxMDAlIDEwMCUnXG4gICAgfVxuICB9KSxcbiAgW2AmW2RhdGEtcG9wcGVyLXBsYWNlbWVudCo9XCJsZWZ0XCJdIC4ke190b29sdGlwQ2xhc3Nlcy5kZWZhdWx0LmFycm93fWBdOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCAhb3duZXJTdGF0ZS5pc1J0bCA/IHtcbiAgICByaWdodDogMCxcbiAgICBtYXJnaW5SaWdodDogJy0wLjcxZW0nXG4gIH0gOiB7XG4gICAgbGVmdDogMCxcbiAgICBtYXJnaW5MZWZ0OiAnLTAuNzFlbSdcbiAgfSwge1xuICAgIGhlaWdodDogJzFlbScsXG4gICAgd2lkdGg6ICcwLjcxZW0nLFxuICAgICcmOjpiZWZvcmUnOiB7XG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwIDAnXG4gICAgfVxuICB9KVxufSkpO1xuY29uc3QgVG9vbHRpcFRvb2x0aXAgPSAoMCwgX3N0eWxlZC5kZWZhdWx0KSgnZGl2Jywge1xuICBuYW1lOiAnTXVpVG9vbHRpcCcsXG4gIHNsb3Q6ICdUb29sdGlwJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy50b29sdGlwLCBvd25lclN0YXRlLnRvdWNoICYmIHN0eWxlcy50b3VjaCwgb3duZXJTdGF0ZS5hcnJvdyAmJiBzdHlsZXMudG9vbHRpcEFycm93LCBzdHlsZXNbYHRvb2x0aXBQbGFjZW1lbnQkeygwLCBfY2FwaXRhbGl6ZS5kZWZhdWx0KShvd25lclN0YXRlLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdKX1gXV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLlRvb2x0aXAuYmcgOiAoMCwgX3N5c3RlbS5hbHBoYSkodGhlbWUucGFsZXR0ZS5ncmV5WzcwMF0sIDAuOTIpLFxuICBib3JkZXJSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgcGFkZGluZzogJzRweCA4cHgnLFxuICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDExKSxcbiAgbWF4V2lkdGg6IDMwMCxcbiAgbWFyZ2luOiAyLFxuICB3b3JkV3JhcDogJ2JyZWFrLXdvcmQnLFxuICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRNZWRpdW1cbn0sIG93bmVyU3RhdGUuYXJyb3cgJiYge1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgbWFyZ2luOiAwXG59LCBvd25lclN0YXRlLnRvdWNoICYmIHtcbiAgcGFkZGluZzogJzhweCAxNnB4JyxcbiAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNCksXG4gIGxpbmVIZWlnaHQ6IGAke3JvdW5kKDE2IC8gMTQpfWVtYCxcbiAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0UmVndWxhclxufSwge1xuICBbYC4ke190b29sdGlwQ2xhc3Nlcy5kZWZhdWx0LnBvcHBlcn1bZGF0YS1wb3BwZXItcGxhY2VtZW50Kj1cImxlZnRcIl0gJmBdOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICB0cmFuc2Zvcm1PcmlnaW46ICdyaWdodCBjZW50ZXInXG4gIH0sICFvd25lclN0YXRlLmlzUnRsID8gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgbWFyZ2luUmlnaHQ6ICcxNHB4J1xuICB9LCBvd25lclN0YXRlLnRvdWNoICYmIHtcbiAgICBtYXJnaW5SaWdodDogJzI0cHgnXG4gIH0pIDogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgbWFyZ2luTGVmdDogJzE0cHgnXG4gIH0sIG93bmVyU3RhdGUudG91Y2ggJiYge1xuICAgIG1hcmdpbkxlZnQ6ICcyNHB4J1xuICB9KSksXG4gIFtgLiR7X3Rvb2x0aXBDbGFzc2VzLmRlZmF1bHQucG9wcGVyfVtkYXRhLXBvcHBlci1wbGFjZW1lbnQqPVwicmlnaHRcIl0gJmBdOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICB0cmFuc2Zvcm1PcmlnaW46ICdsZWZ0IGNlbnRlcidcbiAgfSwgIW93bmVyU3RhdGUuaXNSdGwgPyAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBtYXJnaW5MZWZ0OiAnMTRweCdcbiAgfSwgb3duZXJTdGF0ZS50b3VjaCAmJiB7XG4gICAgbWFyZ2luTGVmdDogJzI0cHgnXG4gIH0pIDogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgbWFyZ2luUmlnaHQ6ICcxNHB4J1xuICB9LCBvd25lclN0YXRlLnRvdWNoICYmIHtcbiAgICBtYXJnaW5SaWdodDogJzI0cHgnXG4gIH0pKSxcbiAgW2AuJHtfdG9vbHRpcENsYXNzZXMuZGVmYXVsdC5wb3BwZXJ9W2RhdGEtcG9wcGVyLXBsYWNlbWVudCo9XCJ0b3BcIl0gJmBdOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICB0cmFuc2Zvcm1PcmlnaW46ICdjZW50ZXIgYm90dG9tJyxcbiAgICBtYXJnaW5Cb3R0b206ICcxNHB4J1xuICB9LCBvd25lclN0YXRlLnRvdWNoICYmIHtcbiAgICBtYXJnaW5Cb3R0b206ICcyNHB4J1xuICB9KSxcbiAgW2AuJHtfdG9vbHRpcENsYXNzZXMuZGVmYXVsdC5wb3BwZXJ9W2RhdGEtcG9wcGVyLXBsYWNlbWVudCo9XCJib3R0b21cIl0gJmBdOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICB0cmFuc2Zvcm1PcmlnaW46ICdjZW50ZXIgdG9wJyxcbiAgICBtYXJnaW5Ub3A6ICcxNHB4J1xuICB9LCBvd25lclN0YXRlLnRvdWNoICYmIHtcbiAgICBtYXJnaW5Ub3A6ICcyNHB4J1xuICB9KVxufSkpO1xuY29uc3QgVG9vbHRpcEFycm93ID0gKDAsIF9zdHlsZWQuZGVmYXVsdCkoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlUb29sdGlwJyxcbiAgc2xvdDogJ0Fycm93JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuYXJyb3dcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aWR0aDogJzFlbScsXG4gIGhlaWdodDogJzAuNzFlbScgLyogPSB3aWR0aCAvIHNxcnQoMikgPSAobGVuZ3RoIG9mIHRoZSBoeXBvdGVudXNlKSAqLyxcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIGNvbG9yOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLlRvb2x0aXAuYmcgOiAoMCwgX3N5c3RlbS5hbHBoYSkodGhlbWUucGFsZXR0ZS5ncmV5WzcwMF0sIDAuOSksXG4gICcmOjpiZWZvcmUnOiB7XG4gICAgY29udGVudDogJ1wiXCInLFxuICAgIG1hcmdpbjogJ2F1dG8nLFxuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSg0NWRlZyknXG4gIH1cbn0pKTtcbmxldCBoeXN0ZXJzaXNPcGVuID0gZmFsc2U7XG5sZXQgaHlzdGVyc2lzVGltZXIgPSBudWxsO1xubGV0IGN1cnNvclBvc2l0aW9uID0ge1xuICB4OiAwLFxuICB5OiAwXG59O1xuZnVuY3Rpb24gdGVzdFJlc2V0KCkge1xuICBoeXN0ZXJzaXNPcGVuID0gZmFsc2U7XG4gIGNsZWFyVGltZW91dChoeXN0ZXJzaXNUaW1lcik7XG59XG5mdW5jdGlvbiBjb21wb3NlRXZlbnRIYW5kbGVyKGhhbmRsZXIsIGV2ZW50SGFuZGxlcikge1xuICByZXR1cm4gZXZlbnQgPT4ge1xuICAgIGlmIChldmVudEhhbmRsZXIpIHtcbiAgICAgIGV2ZW50SGFuZGxlcihldmVudCk7XG4gICAgfVxuICAgIGhhbmRsZXIoZXZlbnQpO1xuICB9O1xufVxuXG4vLyBUT0RPIHY2OiBSZW1vdmUgUG9wcGVyQ29tcG9uZW50LCBQb3BwZXJQcm9wcywgVHJhbnNpdGlvbkNvbXBvbmVudCBhbmQgVHJhbnNpdGlvblByb3BzLlxuY29uc3QgVG9vbHRpcCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRvb2x0aXAoaW5Qcm9wcywgcmVmKSB7XG4gIHZhciBfcmVmLCBfc2xvdHMkcG9wcGVyLCBfcmVmMiwgX3JlZjMsIF9zbG90cyR0cmFuc2l0aW9uLCBfcmVmNCwgX3Nsb3RzJHRvb2x0aXAsIF9yZWY1LCBfc2xvdHMkYXJyb3csIF9zbG90UHJvcHMkcG9wcGVyLCBfcmVmNiwgX3Nsb3RQcm9wcyRwb3BwZXIyLCBfc2xvdFByb3BzJHRyYW5zaXRpb24sIF9zbG90UHJvcHMkdG9vbHRpcCwgX3JlZjcsIF9zbG90UHJvcHMkdG9vbHRpcDIsIF9zbG90UHJvcHMkYXJyb3csIF9yZWY4LCBfc2xvdFByb3BzJGFycm93MjtcbiAgY29uc3QgcHJvcHMgPSAoMCwgX3VzZVRoZW1lUHJvcHMuZGVmYXVsdCkoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlUb29sdGlwJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYXJyb3cgPSBmYWxzZSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY29tcG9uZW50cyA9IHt9LFxuICAgICAgY29tcG9uZW50c1Byb3BzID0ge30sXG4gICAgICBkZXNjcmliZUNoaWxkID0gZmFsc2UsXG4gICAgICBkaXNhYmxlRm9jdXNMaXN0ZW5lciA9IGZhbHNlLFxuICAgICAgZGlzYWJsZUhvdmVyTGlzdGVuZXIgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVJbnRlcmFjdGl2ZTogZGlzYWJsZUludGVyYWN0aXZlUHJvcCA9IGZhbHNlLFxuICAgICAgZGlzYWJsZVRvdWNoTGlzdGVuZXIgPSBmYWxzZSxcbiAgICAgIGVudGVyRGVsYXkgPSAxMDAsXG4gICAgICBlbnRlck5leHREZWxheSA9IDAsXG4gICAgICBlbnRlclRvdWNoRGVsYXkgPSA3MDAsXG4gICAgICBmb2xsb3dDdXJzb3IgPSBmYWxzZSxcbiAgICAgIGlkOiBpZFByb3AsXG4gICAgICBsZWF2ZURlbGF5ID0gMCxcbiAgICAgIGxlYXZlVG91Y2hEZWxheSA9IDE1MDAsXG4gICAgICBvbkNsb3NlLFxuICAgICAgb25PcGVuLFxuICAgICAgb3Blbjogb3BlblByb3AsXG4gICAgICBwbGFjZW1lbnQgPSAnYm90dG9tJyxcbiAgICAgIFBvcHBlckNvbXBvbmVudDogUG9wcGVyQ29tcG9uZW50UHJvcCxcbiAgICAgIFBvcHBlclByb3BzID0ge30sXG4gICAgICBzbG90UHJvcHMgPSB7fSxcbiAgICAgIHNsb3RzID0ge30sXG4gICAgICB0aXRsZSxcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQ6IFRyYW5zaXRpb25Db21wb25lbnRQcm9wID0gX0dyb3cuZGVmYXVsdCxcbiAgICAgIFRyYW5zaXRpb25Qcm9wc1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHRoZW1lID0gKDAsIF91c2VUaGVtZS5kZWZhdWx0KSgpO1xuICBjb25zdCBpc1J0bCA9IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCc7XG4gIGNvbnN0IFtjaGlsZE5vZGUsIHNldENoaWxkTm9kZV0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBjb25zdCBbYXJyb3dSZWYsIHNldEFycm93UmVmXSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBpZ25vcmVOb25Ub3VjaEV2ZW50cyA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIGNvbnN0IGRpc2FibGVJbnRlcmFjdGl2ZSA9IGRpc2FibGVJbnRlcmFjdGl2ZVByb3AgfHwgZm9sbG93Q3Vyc29yO1xuICBjb25zdCBjbG9zZVRpbWVyID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IGVudGVyVGltZXIgPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3QgbGVhdmVUaW1lciA9IFJlYWN0LnVzZVJlZigpO1xuICBjb25zdCB0b3VjaFRpbWVyID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IFtvcGVuU3RhdGUsIHNldE9wZW5TdGF0ZV0gPSAoMCwgX3VzZUNvbnRyb2xsZWQuZGVmYXVsdCkoe1xuICAgIGNvbnRyb2xsZWQ6IG9wZW5Qcm9wLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIG5hbWU6ICdUb29sdGlwJyxcbiAgICBzdGF0ZTogJ29wZW4nXG4gIH0pO1xuICBsZXQgb3BlbiA9IG9wZW5TdGF0ZTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBjb25zdCB7XG4gICAgICBjdXJyZW50OiBpc0NvbnRyb2xsZWRcbiAgICB9ID0gUmVhY3QudXNlUmVmKG9wZW5Qcm9wICE9PSB1bmRlZmluZWQpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGlmIChjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRpc2FibGVkICYmICFpc0NvbnRyb2xsZWQgJiYgdGl0bGUgIT09ICcnICYmIGNoaWxkTm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdidXR0b24nKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFlvdSBhcmUgcHJvdmlkaW5nIGEgZGlzYWJsZWQgYGJ1dHRvbmAgY2hpbGQgdG8gdGhlIFRvb2x0aXAgY29tcG9uZW50LicsICdBIGRpc2FibGVkIGVsZW1lbnQgZG9lcyBub3QgZmlyZSBldmVudHMuJywgXCJUb29sdGlwIG5lZWRzIHRvIGxpc3RlbiB0byB0aGUgY2hpbGQgZWxlbWVudCdzIGV2ZW50cyB0byBkaXNwbGF5IHRoZSB0aXRsZS5cIiwgJycsICdBZGQgYSBzaW1wbGUgd3JhcHBlciBlbGVtZW50LCBzdWNoIGFzIGEgYHNwYW5gLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbdGl0bGUsIGNoaWxkTm9kZSwgaXNDb250cm9sbGVkXSk7XG4gIH1cbiAgY29uc3QgaWQgPSAoMCwgX3VzZUlkLmRlZmF1bHQpKGlkUHJvcCk7XG4gIGNvbnN0IHByZXZVc2VyU2VsZWN0ID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IHN0b3BUb3VjaEludGVyYWN0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChwcmV2VXNlclNlbGVjdC5jdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuV2Via2l0VXNlclNlbGVjdCA9IHByZXZVc2VyU2VsZWN0LmN1cnJlbnQ7XG4gICAgICBwcmV2VXNlclNlbGVjdC5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjbGVhclRpbWVvdXQodG91Y2hUaW1lci5jdXJyZW50KTtcbiAgfSwgW10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQoY2xvc2VUaW1lci5jdXJyZW50KTtcbiAgICAgIGNsZWFyVGltZW91dChlbnRlclRpbWVyLmN1cnJlbnQpO1xuICAgICAgY2xlYXJUaW1lb3V0KGxlYXZlVGltZXIuY3VycmVudCk7XG4gICAgICBzdG9wVG91Y2hJbnRlcmFjdGlvbigpO1xuICAgIH07XG4gIH0sIFtzdG9wVG91Y2hJbnRlcmFjdGlvbl0pO1xuICBjb25zdCBoYW5kbGVPcGVuID0gZXZlbnQgPT4ge1xuICAgIGNsZWFyVGltZW91dChoeXN0ZXJzaXNUaW1lcik7XG4gICAgaHlzdGVyc2lzT3BlbiA9IHRydWU7XG5cbiAgICAvLyBUaGUgbW91c2VvdmVyIGV2ZW50IHdpbGwgdHJpZ2dlciBmb3IgZXZlcnkgbmVzdGVkIGVsZW1lbnQgaW4gdGhlIHRvb2x0aXAuXG4gICAgLy8gV2UgY2FuIHNraXAgcmVyZW5kZXJpbmcgd2hlbiB0aGUgdG9vbHRpcCBpcyBhbHJlYWR5IG9wZW4uXG4gICAgLy8gV2UgYXJlIHVzaW5nIHRoZSBtb3VzZW92ZXIgZXZlbnQgaW5zdGVhZCBvZiB0aGUgbW91c2VlbnRlciBldmVudCB0byBmaXggYSBoaWRlL3Nob3cgaXNzdWUuXG4gICAgc2V0T3BlblN0YXRlKHRydWUpO1xuICAgIGlmIChvbk9wZW4gJiYgIW9wZW4pIHtcbiAgICAgIG9uT3BlbihldmVudCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVDbG9zZSA9ICgwLCBfdXNlRXZlbnRDYWxsYmFjay5kZWZhdWx0KShcbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVhY3QuU3ludGhldGljRXZlbnQgfCBFdmVudH0gZXZlbnRcbiAgICovXG4gIGV2ZW50ID0+IHtcbiAgICBjbGVhclRpbWVvdXQoaHlzdGVyc2lzVGltZXIpO1xuICAgIGh5c3RlcnNpc1RpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBoeXN0ZXJzaXNPcGVuID0gZmFsc2U7XG4gICAgfSwgODAwICsgbGVhdmVEZWxheSk7XG4gICAgc2V0T3BlblN0YXRlKGZhbHNlKTtcbiAgICBpZiAob25DbG9zZSAmJiBvcGVuKSB7XG4gICAgICBvbkNsb3NlKGV2ZW50KTtcbiAgICB9XG4gICAgY2xlYXJUaW1lb3V0KGNsb3NlVGltZXIuY3VycmVudCk7XG4gICAgY2xvc2VUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZ25vcmVOb25Ub3VjaEV2ZW50cy5jdXJyZW50ID0gZmFsc2U7XG4gICAgfSwgdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3QpO1xuICB9KTtcbiAgY29uc3QgaGFuZGxlRW50ZXIgPSBldmVudCA9PiB7XG4gICAgaWYgKGlnbm9yZU5vblRvdWNoRXZlbnRzLmN1cnJlbnQgJiYgZXZlbnQudHlwZSAhPT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIHRoZSB0aXRsZSBhaGVhZCBvZiB0aW1lLlxuICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gd2FpdCBmb3IgdGhlIG5leHQgcmVuZGVyIGNvbW1pdC5cbiAgICAvLyBXZSB3b3VsZCByaXNrIGRpc3BsYXlpbmcgdHdvIHRvb2x0aXBzIGF0IHRoZSBzYW1lIHRpbWUgKG5hdGl2ZSArIHRoaXMgb25lKS5cbiAgICBpZiAoY2hpbGROb2RlKSB7XG4gICAgICBjaGlsZE5vZGUucmVtb3ZlQXR0cmlidXRlKCd0aXRsZScpO1xuICAgIH1cbiAgICBjbGVhclRpbWVvdXQoZW50ZXJUaW1lci5jdXJyZW50KTtcbiAgICBjbGVhclRpbWVvdXQobGVhdmVUaW1lci5jdXJyZW50KTtcbiAgICBpZiAoZW50ZXJEZWxheSB8fCBoeXN0ZXJzaXNPcGVuICYmIGVudGVyTmV4dERlbGF5KSB7XG4gICAgICBlbnRlclRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaGFuZGxlT3BlbihldmVudCk7XG4gICAgICB9LCBoeXN0ZXJzaXNPcGVuID8gZW50ZXJOZXh0RGVsYXkgOiBlbnRlckRlbGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFuZGxlT3BlbihldmVudCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVMZWF2ZSA9IGV2ZW50ID0+IHtcbiAgICBjbGVhclRpbWVvdXQoZW50ZXJUaW1lci5jdXJyZW50KTtcbiAgICBjbGVhclRpbWVvdXQobGVhdmVUaW1lci5jdXJyZW50KTtcbiAgICBsZWF2ZVRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGhhbmRsZUNsb3NlKGV2ZW50KTtcbiAgICB9LCBsZWF2ZURlbGF5KTtcbiAgfTtcbiAgY29uc3Qge1xuICAgIGlzRm9jdXNWaXNpYmxlUmVmLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1clZpc2libGUsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXNWaXNpYmxlLFxuICAgIHJlZjogZm9jdXNWaXNpYmxlUmVmXG4gIH0gPSAoMCwgX3VzZUlzRm9jdXNWaXNpYmxlLmRlZmF1bHQpKCk7XG4gIC8vIFdlIGRvbid0IG5lY2Vzc2FyaWx5IGNhcmUgYWJvdXQgdGhlIGZvY3VzVmlzaWJsZSBzdGF0ZSAod2hpY2ggaXMgc2FmZSB0byBhY2Nlc3MgdmlhIHJlZiBhbnl3YXkpLlxuICAvLyBXZSBqdXN0IG5lZWQgdG8gcmUtcmVuZGVyIHRoZSBUb29sdGlwIGlmIHRoZSBmb2N1cy12aXNpYmxlIHN0YXRlIGNoYW5nZXMuXG4gIGNvbnN0IFssIHNldENoaWxkSXNGb2N1c1Zpc2libGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBoYW5kbGVCbHVyID0gZXZlbnQgPT4ge1xuICAgIGhhbmRsZUJsdXJWaXNpYmxlKGV2ZW50KTtcbiAgICBpZiAoaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9PT0gZmFsc2UpIHtcbiAgICAgIHNldENoaWxkSXNGb2N1c1Zpc2libGUoZmFsc2UpO1xuICAgICAgaGFuZGxlTGVhdmUoZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlRm9jdXMgPSBldmVudCA9PiB7XG4gICAgLy8gV29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83NzY5XG4gICAgLy8gVGhlIGF1dG9Gb2N1cyBvZiBSZWFjdCBtaWdodCB0cmlnZ2VyIHRoZSBldmVudCBiZWZvcmUgdGhlIGNvbXBvbmVudERpZE1vdW50LlxuICAgIC8vIFdlIG5lZWQgdG8gYWNjb3VudCBmb3IgdGhpcyBldmVudHVhbGl0eS5cbiAgICBpZiAoIWNoaWxkTm9kZSkge1xuICAgICAgc2V0Q2hpbGROb2RlKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuICAgIH1cbiAgICBoYW5kbGVGb2N1c1Zpc2libGUoZXZlbnQpO1xuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID09PSB0cnVlKSB7XG4gICAgICBzZXRDaGlsZElzRm9jdXNWaXNpYmxlKHRydWUpO1xuICAgICAgaGFuZGxlRW50ZXIoZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZGV0ZWN0VG91Y2hTdGFydCA9IGV2ZW50ID0+IHtcbiAgICBpZ25vcmVOb25Ub3VjaEV2ZW50cy5jdXJyZW50ID0gdHJ1ZTtcbiAgICBjb25zdCBjaGlsZHJlblByb3BzID0gY2hpbGRyZW4ucHJvcHM7XG4gICAgaWYgKGNoaWxkcmVuUHJvcHMub25Ub3VjaFN0YXJ0KSB7XG4gICAgICBjaGlsZHJlblByb3BzLm9uVG91Y2hTdGFydChldmVudCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVNb3VzZU92ZXIgPSBoYW5kbGVFbnRlcjtcbiAgY29uc3QgaGFuZGxlTW91c2VMZWF2ZSA9IGhhbmRsZUxlYXZlO1xuICBjb25zdCBoYW5kbGVUb3VjaFN0YXJ0ID0gZXZlbnQgPT4ge1xuICAgIGRldGVjdFRvdWNoU3RhcnQoZXZlbnQpO1xuICAgIGNsZWFyVGltZW91dChsZWF2ZVRpbWVyLmN1cnJlbnQpO1xuICAgIGNsZWFyVGltZW91dChjbG9zZVRpbWVyLmN1cnJlbnQpO1xuICAgIHN0b3BUb3VjaEludGVyYWN0aW9uKCk7XG4gICAgcHJldlVzZXJTZWxlY3QuY3VycmVudCA9IGRvY3VtZW50LmJvZHkuc3R5bGUuV2Via2l0VXNlclNlbGVjdDtcbiAgICAvLyBQcmV2ZW50IGlPUyB0ZXh0IHNlbGVjdGlvbiBvbiBsb25nLXRhcC5cbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLldlYmtpdFVzZXJTZWxlY3QgPSAnbm9uZSc7XG4gICAgdG91Y2hUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLldlYmtpdFVzZXJTZWxlY3QgPSBwcmV2VXNlclNlbGVjdC5jdXJyZW50O1xuICAgICAgaGFuZGxlRW50ZXIoZXZlbnQpO1xuICAgIH0sIGVudGVyVG91Y2hEZWxheSk7XG4gIH07XG4gIGNvbnN0IGhhbmRsZVRvdWNoRW5kID0gZXZlbnQgPT4ge1xuICAgIGlmIChjaGlsZHJlbi5wcm9wcy5vblRvdWNoRW5kKSB7XG4gICAgICBjaGlsZHJlbi5wcm9wcy5vblRvdWNoRW5kKGV2ZW50KTtcbiAgICB9XG4gICAgc3RvcFRvdWNoSW50ZXJhY3Rpb24oKTtcbiAgICBjbGVhclRpbWVvdXQobGVhdmVUaW1lci5jdXJyZW50KTtcbiAgICBsZWF2ZVRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGhhbmRsZUNsb3NlKGV2ZW50KTtcbiAgICB9LCBsZWF2ZVRvdWNoRGVsYXkpO1xuICB9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghb3Blbikge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IG5hdGl2ZUV2ZW50XG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFuZGxlS2V5RG93bihuYXRpdmVFdmVudCkge1xuICAgICAgLy8gSUUxMSwgRWRnZSAocHJpb3IgdG8gdXNpbmcgQmluaz8pIHVzZSAnRXNjJ1xuICAgICAgaWYgKG5hdGl2ZUV2ZW50LmtleSA9PT0gJ0VzY2FwZScgfHwgbmF0aXZlRXZlbnQua2V5ID09PSAnRXNjJykge1xuICAgICAgICBoYW5kbGVDbG9zZShuYXRpdmVFdmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24pO1xuICAgIH07XG4gIH0sIFtoYW5kbGVDbG9zZSwgb3Blbl0pO1xuICBjb25zdCBoYW5kbGVSZWYgPSAoMCwgX3VzZUZvcmtSZWYuZGVmYXVsdCkoY2hpbGRyZW4ucmVmLCBmb2N1c1Zpc2libGVSZWYsIHNldENoaWxkTm9kZSwgcmVmKTtcblxuICAvLyBUaGVyZSBpcyBubyBwb2ludCBpbiBkaXNwbGF5aW5nIGFuIGVtcHR5IHRvb2x0aXAuXG4gIGlmICghdGl0bGUgJiYgdGl0bGUgIT09IDApIHtcbiAgICBvcGVuID0gZmFsc2U7XG4gIH1cbiAgY29uc3QgcG9wcGVyUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IGhhbmRsZU1vdXNlTW92ZSA9IGV2ZW50ID0+IHtcbiAgICBjb25zdCBjaGlsZHJlblByb3BzID0gY2hpbGRyZW4ucHJvcHM7XG4gICAgaWYgKGNoaWxkcmVuUHJvcHMub25Nb3VzZU1vdmUpIHtcbiAgICAgIGNoaWxkcmVuUHJvcHMub25Nb3VzZU1vdmUoZXZlbnQpO1xuICAgIH1cbiAgICBjdXJzb3JQb3NpdGlvbiA9IHtcbiAgICAgIHg6IGV2ZW50LmNsaWVudFgsXG4gICAgICB5OiBldmVudC5jbGllbnRZXG4gICAgfTtcbiAgICBpZiAocG9wcGVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIHBvcHBlclJlZi5jdXJyZW50LnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgbmFtZU9yRGVzY1Byb3BzID0ge307XG4gIGNvbnN0IHRpdGxlSXNTdHJpbmcgPSB0eXBlb2YgdGl0bGUgPT09ICdzdHJpbmcnO1xuICBpZiAoZGVzY3JpYmVDaGlsZCkge1xuICAgIG5hbWVPckRlc2NQcm9wcy50aXRsZSA9ICFvcGVuICYmIHRpdGxlSXNTdHJpbmcgJiYgIWRpc2FibGVIb3Zlckxpc3RlbmVyID8gdGl0bGUgOiBudWxsO1xuICAgIG5hbWVPckRlc2NQcm9wc1snYXJpYS1kZXNjcmliZWRieSddID0gb3BlbiA/IGlkIDogbnVsbDtcbiAgfSBlbHNlIHtcbiAgICBuYW1lT3JEZXNjUHJvcHNbJ2FyaWEtbGFiZWwnXSA9IHRpdGxlSXNTdHJpbmcgPyB0aXRsZSA6IG51bGw7XG4gICAgbmFtZU9yRGVzY1Byb3BzWydhcmlhLWxhYmVsbGVkYnknXSA9IG9wZW4gJiYgIXRpdGxlSXNTdHJpbmcgPyBpZCA6IG51bGw7XG4gIH1cbiAgY29uc3QgY2hpbGRyZW5Qcm9wcyA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIG5hbWVPckRlc2NQcm9wcywgb3RoZXIsIGNoaWxkcmVuLnByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2Nsc3guZGVmYXVsdCkob3RoZXIuY2xhc3NOYW1lLCBjaGlsZHJlbi5wcm9wcy5jbGFzc05hbWUpLFxuICAgIG9uVG91Y2hTdGFydDogZGV0ZWN0VG91Y2hTdGFydCxcbiAgICByZWY6IGhhbmRsZVJlZlxuICB9LCBmb2xsb3dDdXJzb3IgPyB7XG4gICAgb25Nb3VzZU1vdmU6IGhhbmRsZU1vdXNlTW92ZVxuICB9IDoge30pO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoaWxkcmVuUHJvcHNbJ2RhdGEtbXVpLWludGVybmFsLWNsb25lLWVsZW1lbnQnXSA9IHRydWU7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKGNoaWxkTm9kZSAmJiAhY2hpbGROb2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1tdWktaW50ZXJuYWwtY2xvbmUtZWxlbWVudCcpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFRoZSBgY2hpbGRyZW5gIGNvbXBvbmVudCBvZiB0aGUgVG9vbHRpcCBpcyBub3QgZm9yd2FyZGluZyBpdHMgcHJvcHMgY29ycmVjdGx5LicsICdQbGVhc2UgbWFrZSBzdXJlIHRoYXQgcHJvcHMgYXJlIHNwcmVhZCBvbiB0aGUgc2FtZSBlbGVtZW50IHRoYXQgdGhlIHJlZiBpcyBhcHBsaWVkIHRvLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbY2hpbGROb2RlXSk7XG4gIH1cbiAgY29uc3QgaW50ZXJhY3RpdmVXcmFwcGVyTGlzdGVuZXJzID0ge307XG4gIGlmICghZGlzYWJsZVRvdWNoTGlzdGVuZXIpIHtcbiAgICBjaGlsZHJlblByb3BzLm9uVG91Y2hTdGFydCA9IGhhbmRsZVRvdWNoU3RhcnQ7XG4gICAgY2hpbGRyZW5Qcm9wcy5vblRvdWNoRW5kID0gaGFuZGxlVG91Y2hFbmQ7XG4gIH1cbiAgaWYgKCFkaXNhYmxlSG92ZXJMaXN0ZW5lcikge1xuICAgIGNoaWxkcmVuUHJvcHMub25Nb3VzZU92ZXIgPSBjb21wb3NlRXZlbnRIYW5kbGVyKGhhbmRsZU1vdXNlT3ZlciwgY2hpbGRyZW5Qcm9wcy5vbk1vdXNlT3Zlcik7XG4gICAgY2hpbGRyZW5Qcm9wcy5vbk1vdXNlTGVhdmUgPSBjb21wb3NlRXZlbnRIYW5kbGVyKGhhbmRsZU1vdXNlTGVhdmUsIGNoaWxkcmVuUHJvcHMub25Nb3VzZUxlYXZlKTtcbiAgICBpZiAoIWRpc2FibGVJbnRlcmFjdGl2ZSkge1xuICAgICAgaW50ZXJhY3RpdmVXcmFwcGVyTGlzdGVuZXJzLm9uTW91c2VPdmVyID0gaGFuZGxlTW91c2VPdmVyO1xuICAgICAgaW50ZXJhY3RpdmVXcmFwcGVyTGlzdGVuZXJzLm9uTW91c2VMZWF2ZSA9IGhhbmRsZU1vdXNlTGVhdmU7XG4gICAgfVxuICB9XG4gIGlmICghZGlzYWJsZUZvY3VzTGlzdGVuZXIpIHtcbiAgICBjaGlsZHJlblByb3BzLm9uRm9jdXMgPSBjb21wb3NlRXZlbnRIYW5kbGVyKGhhbmRsZUZvY3VzLCBjaGlsZHJlblByb3BzLm9uRm9jdXMpO1xuICAgIGNoaWxkcmVuUHJvcHMub25CbHVyID0gY29tcG9zZUV2ZW50SGFuZGxlcihoYW5kbGVCbHVyLCBjaGlsZHJlblByb3BzLm9uQmx1cik7XG4gICAgaWYgKCFkaXNhYmxlSW50ZXJhY3RpdmUpIHtcbiAgICAgIGludGVyYWN0aXZlV3JhcHBlckxpc3RlbmVycy5vbkZvY3VzID0gaGFuZGxlRm9jdXM7XG4gICAgICBpbnRlcmFjdGl2ZVdyYXBwZXJMaXN0ZW5lcnMub25CbHVyID0gaGFuZGxlQmx1cjtcbiAgICB9XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoY2hpbGRyZW4ucHJvcHMudGl0bGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFlvdSBoYXZlIHByb3ZpZGVkIGEgYHRpdGxlYCBwcm9wIHRvIHRoZSBjaGlsZCBvZiA8VG9vbHRpcCAvPi4nLCBgUmVtb3ZlIHRoaXMgdGl0bGUgcHJvcCBcXGAke2NoaWxkcmVuLnByb3BzLnRpdGxlfVxcYCBvciB0aGUgVG9vbHRpcCBjb21wb25lbnQuYF0uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuICBjb25zdCBwb3BwZXJPcHRpb25zID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgdmFyIF9Qb3BwZXJQcm9wcyRwb3BwZXJPcDtcbiAgICBsZXQgdG9vbHRpcE1vZGlmaWVycyA9IFt7XG4gICAgICBuYW1lOiAnYXJyb3cnLFxuICAgICAgZW5hYmxlZDogQm9vbGVhbihhcnJvd1JlZiksXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGVsZW1lbnQ6IGFycm93UmVmLFxuICAgICAgICBwYWRkaW5nOiA0XG4gICAgICB9XG4gICAgfV07XG4gICAgaWYgKChfUG9wcGVyUHJvcHMkcG9wcGVyT3AgPSBQb3BwZXJQcm9wcy5wb3BwZXJPcHRpb25zKSAhPSBudWxsICYmIF9Qb3BwZXJQcm9wcyRwb3BwZXJPcC5tb2RpZmllcnMpIHtcbiAgICAgIHRvb2x0aXBNb2RpZmllcnMgPSB0b29sdGlwTW9kaWZpZXJzLmNvbmNhdChQb3BwZXJQcm9wcy5wb3BwZXJPcHRpb25zLm1vZGlmaWVycyk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBQb3BwZXJQcm9wcy5wb3BwZXJPcHRpb25zLCB7XG4gICAgICBtb2RpZmllcnM6IHRvb2x0aXBNb2RpZmllcnNcbiAgICB9KTtcbiAgfSwgW2Fycm93UmVmLCBQb3BwZXJQcm9wc10pO1xuICBjb25zdCBvd25lclN0YXRlID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICBpc1J0bCxcbiAgICBhcnJvdyxcbiAgICBkaXNhYmxlSW50ZXJhY3RpdmUsXG4gICAgcGxhY2VtZW50LFxuICAgIFBvcHBlckNvbXBvbmVudFByb3AsXG4gICAgdG91Y2g6IGlnbm9yZU5vblRvdWNoRXZlbnRzLmN1cnJlbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgUG9wcGVyQ29tcG9uZW50ID0gKF9yZWYgPSAoX3Nsb3RzJHBvcHBlciA9IHNsb3RzLnBvcHBlcikgIT0gbnVsbCA/IF9zbG90cyRwb3BwZXIgOiBjb21wb25lbnRzLlBvcHBlcikgIT0gbnVsbCA/IF9yZWYgOiBUb29sdGlwUG9wcGVyO1xuICBjb25zdCBUcmFuc2l0aW9uQ29tcG9uZW50ID0gKF9yZWYyID0gKF9yZWYzID0gKF9zbG90cyR0cmFuc2l0aW9uID0gc2xvdHMudHJhbnNpdGlvbikgIT0gbnVsbCA/IF9zbG90cyR0cmFuc2l0aW9uIDogY29tcG9uZW50cy5UcmFuc2l0aW9uKSAhPSBudWxsID8gX3JlZjMgOiBUcmFuc2l0aW9uQ29tcG9uZW50UHJvcCkgIT0gbnVsbCA/IF9yZWYyIDogX0dyb3cuZGVmYXVsdDtcbiAgY29uc3QgVG9vbHRpcENvbXBvbmVudCA9IChfcmVmNCA9IChfc2xvdHMkdG9vbHRpcCA9IHNsb3RzLnRvb2x0aXApICE9IG51bGwgPyBfc2xvdHMkdG9vbHRpcCA6IGNvbXBvbmVudHMuVG9vbHRpcCkgIT0gbnVsbCA/IF9yZWY0IDogVG9vbHRpcFRvb2x0aXA7XG4gIGNvbnN0IEFycm93Q29tcG9uZW50ID0gKF9yZWY1ID0gKF9zbG90cyRhcnJvdyA9IHNsb3RzLmFycm93KSAhPSBudWxsID8gX3Nsb3RzJGFycm93IDogY29tcG9uZW50cy5BcnJvdykgIT0gbnVsbCA/IF9yZWY1IDogVG9vbHRpcEFycm93O1xuICBjb25zdCBwb3BwZXJQcm9wcyA9ICgwLCBfYmFzZS5hcHBlbmRPd25lclN0YXRlKShQb3BwZXJDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIFBvcHBlclByb3BzLCAoX3Nsb3RQcm9wcyRwb3BwZXIgPSBzbG90UHJvcHMucG9wcGVyKSAhPSBudWxsID8gX3Nsb3RQcm9wcyRwb3BwZXIgOiBjb21wb25lbnRzUHJvcHMucG9wcGVyLCB7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2Nsc3guZGVmYXVsdCkoY2xhc3Nlcy5wb3BwZXIsIFBvcHBlclByb3BzID09IG51bGwgPyB2b2lkIDAgOiBQb3BwZXJQcm9wcy5jbGFzc05hbWUsIChfcmVmNiA9IChfc2xvdFByb3BzJHBvcHBlcjIgPSBzbG90UHJvcHMucG9wcGVyKSAhPSBudWxsID8gX3Nsb3RQcm9wcyRwb3BwZXIyIDogY29tcG9uZW50c1Byb3BzLnBvcHBlcikgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZWY2LmNsYXNzTmFtZSlcbiAgfSksIG93bmVyU3RhdGUpO1xuICBjb25zdCB0cmFuc2l0aW9uUHJvcHMgPSAoMCwgX2Jhc2UuYXBwZW5kT3duZXJTdGF0ZSkoVHJhbnNpdGlvbkNvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgVHJhbnNpdGlvblByb3BzLCAoX3Nsb3RQcm9wcyR0cmFuc2l0aW9uID0gc2xvdFByb3BzLnRyYW5zaXRpb24pICE9IG51bGwgPyBfc2xvdFByb3BzJHRyYW5zaXRpb24gOiBjb21wb25lbnRzUHJvcHMudHJhbnNpdGlvbiksIG93bmVyU3RhdGUpO1xuICBjb25zdCB0b29sdGlwUHJvcHMgPSAoMCwgX2Jhc2UuYXBwZW5kT3duZXJTdGF0ZSkoVG9vbHRpcENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgKF9zbG90UHJvcHMkdG9vbHRpcCA9IHNsb3RQcm9wcy50b29sdGlwKSAhPSBudWxsID8gX3Nsb3RQcm9wcyR0b29sdGlwIDogY29tcG9uZW50c1Byb3BzLnRvb2x0aXAsIHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xzeC5kZWZhdWx0KShjbGFzc2VzLnRvb2x0aXAsIChfcmVmNyA9IChfc2xvdFByb3BzJHRvb2x0aXAyID0gc2xvdFByb3BzLnRvb2x0aXApICE9IG51bGwgPyBfc2xvdFByb3BzJHRvb2x0aXAyIDogY29tcG9uZW50c1Byb3BzLnRvb2x0aXApID09IG51bGwgPyB2b2lkIDAgOiBfcmVmNy5jbGFzc05hbWUpXG4gIH0pLCBvd25lclN0YXRlKTtcbiAgY29uc3QgdG9vbHRpcEFycm93UHJvcHMgPSAoMCwgX2Jhc2UuYXBwZW5kT3duZXJTdGF0ZSkoQXJyb3dDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIChfc2xvdFByb3BzJGFycm93ID0gc2xvdFByb3BzLmFycm93KSAhPSBudWxsID8gX3Nsb3RQcm9wcyRhcnJvdyA6IGNvbXBvbmVudHNQcm9wcy5hcnJvdywge1xuICAgIGNsYXNzTmFtZTogKDAsIF9jbHN4LmRlZmF1bHQpKGNsYXNzZXMuYXJyb3csIChfcmVmOCA9IChfc2xvdFByb3BzJGFycm93MiA9IHNsb3RQcm9wcy5hcnJvdykgIT0gbnVsbCA/IF9zbG90UHJvcHMkYXJyb3cyIDogY29tcG9uZW50c1Byb3BzLmFycm93KSA9PSBudWxsID8gdm9pZCAwIDogX3JlZjguY2xhc3NOYW1lKVxuICB9KSwgb3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeHMpKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBjaGlsZHJlblByb3BzKSwgLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFBvcHBlckNvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBhczogUG9wcGVyQ29tcG9uZW50UHJvcCAhPSBudWxsID8gUG9wcGVyQ29tcG9uZW50UHJvcCA6IF9Qb3BwZXIuZGVmYXVsdCxcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYW5jaG9yRWw6IGZvbGxvd0N1cnNvciA/IHtcbiAgICAgICAgZ2V0Qm91bmRpbmdDbGllbnRSZWN0OiAoKSA9PiAoe1xuICAgICAgICAgIHRvcDogY3Vyc29yUG9zaXRpb24ueSxcbiAgICAgICAgICBsZWZ0OiBjdXJzb3JQb3NpdGlvbi54LFxuICAgICAgICAgIHJpZ2h0OiBjdXJzb3JQb3NpdGlvbi54LFxuICAgICAgICAgIGJvdHRvbTogY3Vyc29yUG9zaXRpb24ueSxcbiAgICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgICBoZWlnaHQ6IDBcbiAgICAgICAgfSlcbiAgICAgIH0gOiBjaGlsZE5vZGUsXG4gICAgICBwb3BwZXJSZWY6IHBvcHBlclJlZixcbiAgICAgIG9wZW46IGNoaWxkTm9kZSA/IG9wZW4gOiBmYWxzZSxcbiAgICAgIGlkOiBpZCxcbiAgICAgIHRyYW5zaXRpb246IHRydWVcbiAgICB9LCBpbnRlcmFjdGl2ZVdyYXBwZXJMaXN0ZW5lcnMsIHBvcHBlclByb3BzLCB7XG4gICAgICBwb3BwZXJPcHRpb25zOiBwb3BwZXJPcHRpb25zLFxuICAgICAgY2hpbGRyZW46ICh7XG4gICAgICAgIFRyYW5zaXRpb25Qcm9wczogVHJhbnNpdGlvblByb3BzSW5uZXJcbiAgICAgIH0pID0+IC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShUcmFuc2l0aW9uQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgdGltZW91dDogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgfSwgVHJhbnNpdGlvblByb3BzSW5uZXIsIHRyYW5zaXRpb25Qcm9wcywge1xuICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3hzKShUb29sdGlwQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCB0b29sdGlwUHJvcHMsIHtcbiAgICAgICAgICBjaGlsZHJlbjogW3RpdGxlLCBhcnJvdyA/IC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShBcnJvd0NvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgdG9vbHRpcEFycm93UHJvcHMsIHtcbiAgICAgICAgICAgIHJlZjogc2V0QXJyb3dSZWZcbiAgICAgICAgICB9KSkgOiBudWxsXVxuICAgICAgICB9KSlcbiAgICAgIH0pKVxuICAgIH0pKV1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRvb2x0aXAucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogSWYgYHRydWVgLCBhZGRzIGFuIGFycm93IHRvIHRoZSB0b29sdGlwLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYXJyb3c6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVG9vbHRpcCByZWZlcmVuY2UgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfdXRpbHMuZWxlbWVudEFjY2VwdGluZ1JlZi5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90c2AgcHJvcC5cbiAgICogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBzbG90c2AgcHJvcCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgICBBcnJvdzogX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnRUeXBlLFxuICAgIFBvcHBlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnRUeXBlLFxuICAgIFRvb2x0aXA6IF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50VHlwZSxcbiAgICBUcmFuc2l0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgZXh0cmEgcHJvcHMgZm9yIHRoZSBzbG90IGNvbXBvbmVudHMuXG4gICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhlIGV4aXN0aW5nIHByb3BzIG9yIGFkZCBuZXcgb25lcy5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYHNsb3RQcm9wc2AgcHJvcC5cbiAgICogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBzbG90UHJvcHNgIHByb3AgaW5zdGVhZCwgYXMgYGNvbXBvbmVudHNQcm9wc2Agd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzUHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgYXJyb3c6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG4gICAgcG9wcGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuICAgIHRvb2x0aXA6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG4gICAgdHJhbnNpdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxuICB9KSxcbiAgLyoqXG4gICAqIFNldCB0byBgdHJ1ZWAgaWYgdGhlIGB0aXRsZWAgYWN0cyBhcyBhbiBhY2Nlc3NpYmxlIGRlc2NyaXB0aW9uLlxuICAgKiBCeSBkZWZhdWx0IHRoZSBgdGl0bGVgIGFjdHMgYXMgYW4gYWNjZXNzaWJsZSBsYWJlbCBmb3IgdGhlIGNoaWxkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVzY3JpYmVDaGlsZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBEbyBub3QgcmVzcG9uZCB0byBmb2N1cy12aXNpYmxlIGV2ZW50cy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVGb2N1c0xpc3RlbmVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIERvIG5vdCByZXNwb25kIHRvIGhvdmVyIGV2ZW50cy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVIb3Zlckxpc3RlbmVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIE1ha2VzIGEgdG9vbHRpcCBub3QgaW50ZXJhY3RpdmUsIGkuZS4gaXQgd2lsbCBjbG9zZSB3aGVuIHRoZSB1c2VyXG4gICAqIGhvdmVycyBvdmVyIHRoZSB0b29sdGlwIGJlZm9yZSB0aGUgYGxlYXZlRGVsYXlgIGlzIGV4cGlyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlSW50ZXJhY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogRG8gbm90IHJlc3BvbmQgdG8gbG9uZyBwcmVzcyB0b3VjaCBldmVudHMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlVG91Y2hMaXN0ZW5lcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBzaG93aW5nIHRoZSB0b29sdGlwLlxuICAgKiBUaGlzIHByb3Agd29uJ3QgaW1wYWN0IHRoZSBlbnRlciB0b3VjaCBkZWxheSAoYGVudGVyVG91Y2hEZWxheWApLlxuICAgKiBAZGVmYXVsdCAxMDBcbiAgICovXG4gIGVudGVyRGVsYXk6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBzaG93aW5nIHRoZSB0b29sdGlwIHdoZW4gb25lIHdhcyBhbHJlYWR5IHJlY2VudGx5IG9wZW5lZC5cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgZW50ZXJOZXh0RGVsYXk6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBhIHVzZXIgbXVzdCB0b3VjaCB0aGUgZWxlbWVudCBiZWZvcmUgc2hvd2luZyB0aGUgdG9vbHRpcC5cbiAgICogQGRlZmF1bHQgNzAwXG4gICAqL1xuICBlbnRlclRvdWNoRGVsYXk6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0b29sdGlwIGZvbGxvdyB0aGUgY3Vyc29yIG92ZXIgdGhlIHdyYXBwZWQgZWxlbWVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZvbGxvd0N1cnNvcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaXMgdXNlZCB0byBoZWxwIGltcGxlbWVudCB0aGUgYWNjZXNzaWJpbGl0eSBsb2dpYy5cbiAgICogSWYgeW91IGRvbid0IHByb3ZpZGUgdGhpcyBwcm9wLiBJdCBmYWxscyBiYWNrIHRvIGEgcmFuZG9tbHkgZ2VuZXJhdGVkIGlkLlxuICAgKi9cbiAgaWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBoaWRpbmcgdGhlIHRvb2x0aXAuXG4gICAqIFRoaXMgcHJvcCB3b24ndCBpbXBhY3QgdGhlIGxlYXZlIHRvdWNoIGRlbGF5IChgbGVhdmVUb3VjaERlbGF5YCkuXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIGxlYXZlRGVsYXk6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBhZnRlciB0aGUgdXNlciBzdG9wcyB0b3VjaGluZyBhbiBlbGVtZW50IGJlZm9yZSBoaWRpbmcgdGhlIHRvb2x0aXAuXG4gICAqIEBkZWZhdWx0IDE1MDBcbiAgICovXG4gIGxlYXZlVG91Y2hEZWxheTogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3QuU3ludGhldGljRXZlbnR9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25DbG9zZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgb3Blbi5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5TeW50aGV0aWNFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbk9wZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKi9cbiAgb3BlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUb29sdGlwIHBsYWNlbWVudC5cbiAgICogQGRlZmF1bHQgJ2JvdHRvbSdcbiAgICovXG4gIHBsYWNlbWVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnYm90dG9tLWVuZCcsICdib3R0b20tc3RhcnQnLCAnYm90dG9tJywgJ2xlZnQtZW5kJywgJ2xlZnQtc3RhcnQnLCAnbGVmdCcsICdyaWdodC1lbmQnLCAncmlnaHQtc3RhcnQnLCAncmlnaHQnLCAndG9wLWVuZCcsICd0b3Atc3RhcnQnLCAndG9wJ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcG9wcGVyLlxuICAgKiBAZGVmYXVsdCBQb3BwZXJcbiAgICovXG4gIFBvcHBlckNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BQb3BwZXJgXSgvbWF0ZXJpYWwtdWkvYXBpL3BvcHBlci8pIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBQb3BwZXJQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c1Byb3BzYCBwcm9wLCB3aGljaCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgICBhcnJvdzogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcbiAgICBwb3BwZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG4gICAgdG9vbHRpcDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcbiAgICB0cmFuc2l0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYGNvbXBvbmVudHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgYXJyb3c6IF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50VHlwZSxcbiAgICBwb3BwZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50VHlwZSxcbiAgICB0b29sdGlwOiBfcHJvcFR5cGVzLmRlZmF1bHQuZWxlbWVudFR5cGUsXG4gICAgdHJhbnNpdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsIF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sXSkpLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuICAvKipcbiAgICogVG9vbHRpcCB0aXRsZS4gWmVyby1sZW5ndGggdGl0bGVzIHN0cmluZywgdW5kZWZpbmVkLCBudWxsIGFuZCBmYWxzZSBhcmUgbmV2ZXIgZGlzcGxheWVkLlxuICAgKi9cbiAgdGl0bGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICogW0ZvbGxvdyB0aGlzIGd1aWRlXSgvbWF0ZXJpYWwtdWkvdHJhbnNpdGlvbnMvI3RyYW5zaXRpb25jb21wb25lbnQtcHJvcCkgdG8gbGVhcm4gbW9yZSBhYm91dCB0aGUgcmVxdWlyZW1lbnRzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgR3Jvd1xuICAgKi9cbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgdHJhbnNpdGlvbiBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgZWxlbWVudCBpcyBiYXNlZCBvbiB0aGlzIFtgVHJhbnNpdGlvbmBdKGh0dHA6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC90cmFuc2l0aW9uLykgY29tcG9uZW50LlxuICAgKi9cbiAgVHJhbnNpdGlvblByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XG59IDogdm9pZCAwO1xudmFyIF9kZWZhdWx0ID0gVG9vbHRpcDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxzQkFBc0IsR0FBR0MsT0FBTyxDQUFDLDhDQUE4QyxDQUFDO0FBQ3BGQyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUN4QkYsT0FBTyxDQUFDRyxTQUFTLEdBQUdBLFNBQVM7QUFDN0IsSUFBSUMsOEJBQThCLEdBQUdSLHNCQUFzQixDQUFDQyxPQUFPLENBQUMscURBQXFELENBQUMsQ0FBQztBQUMzSCxJQUFJUSxTQUFTLEdBQUdULHNCQUFzQixDQUFDQyxPQUFPLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUNqRixJQUFJUyxLQUFLLEdBQUdDLHVCQUF1QixDQUFDVixPQUFPLENB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