9cc86ac579aec5cda92f1589804a74b5
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _clsx = _interopRequireDefault(require("clsx"));
var _utils = require("@mui/utils");
var _base = require("@mui/base");
var _system = require("@mui/system");
var _capitalize = _interopRequireDefault(require("../utils/capitalize"));
var _SwitchBase = _interopRequireDefault(require("../internal/SwitchBase"));
var _useThemeProps = _interopRequireDefault(require("../styles/useThemeProps"));
var _styled = _interopRequireDefault(require("../styles/styled"));
var _switchClasses = _interopRequireWildcard(require("./switchClasses"));
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["className", "color", "edge", "size", "sx"];
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
const useUtilityClasses = ownerState => {
  const {
    classes,
    edge,
    size,
    color,
    checked,
    disabled
  } = ownerState;
  const slots = {
    root: ['root', edge && `edge${(0, _capitalize.default)(edge)}`, `size${(0, _capitalize.default)(size)}`],
    switchBase: ['switchBase', `color${(0, _capitalize.default)(color)}`, checked && 'checked', disabled && 'disabled'],
    thumb: ['thumb'],
    track: ['track'],
    input: ['input']
  };
  const composedClasses = (0, _base.unstable_composeClasses)(slots, _switchClasses.getSwitchUtilityClass, classes);
  return (0, _extends2.default)({}, classes, composedClasses);
};
const SwitchRoot = (0, _styled.default)('span', {
  name: 'MuiSwitch',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, ownerState.edge && styles[`edge${(0, _capitalize.default)(ownerState.edge)}`], styles[`size${(0, _capitalize.default)(ownerState.size)}`]];
  }
})(({
  ownerState
}) => (0, _extends2.default)({
  display: 'inline-flex',
  width: 34 + 12 * 2,
  height: 14 + 12 * 2,
  overflow: 'hidden',
  padding: 12,
  boxSizing: 'border-box',
  position: 'relative',
  flexShrink: 0,
  zIndex: 0,
  // Reset the stacking context.
  verticalAlign: 'middle',
  // For correct alignment with the text.
  '@media print': {
    colorAdjust: 'exact'
  }
}, ownerState.edge === 'start' && {
  marginLeft: -8
}, ownerState.edge === 'end' && {
  marginRight: -8
}, ownerState.size === 'small' && {
  width: 40,
  height: 24,
  padding: 7,
  [`& .${_switchClasses.default.thumb}`]: {
    width: 16,
    height: 16
  },
  [`& .${_switchClasses.default.switchBase}`]: {
    padding: 4,
    [`&.${_switchClasses.default.checked}`]: {
      transform: 'translateX(16px)'
    }
  }
}));
const SwitchSwitchBase = (0, _styled.default)(_SwitchBase.default, {
  name: 'MuiSwitch',
  slot: 'SwitchBase',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.switchBase, {
      [`& .${_switchClasses.default.input}`]: styles.input
    }, ownerState.color !== 'default' && styles[`color${(0, _capitalize.default)(ownerState.color)}`]];
  }
})(({
  theme
}) => ({
  position: 'absolute',
  top: 0,
  left: 0,
  zIndex: 1,
  // Render above the focus ripple.
  color: theme.vars ? theme.vars.palette.Switch.defaultColor : `${theme.palette.mode === 'light' ? theme.palette.common.white : theme.palette.grey[300]}`,
  transition: theme.transitions.create(['left', 'transform'], {
    duration: theme.transitions.duration.shortest
  }),
  [`&.${_switchClasses.default.checked}`]: {
    transform: 'translateX(20px)'
  },
  [`&.${_switchClasses.default.disabled}`]: {
    color: theme.vars ? theme.vars.palette.Switch.defaultDisabledColor : `${theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[600]}`
  },
  [`&.${_switchClasses.default.checked} + .${_switchClasses.default.track}`]: {
    opacity: 0.5
  },
  [`&.${_switchClasses.default.disabled} + .${_switchClasses.default.track}`]: {
    opacity: theme.vars ? theme.vars.opacity.switchTrackDisabled : `${theme.palette.mode === 'light' ? 0.12 : 0.2}`
  },
  [`& .${_switchClasses.default.input}`]: {
    left: '-100%',
    width: '300%'
  }
}), ({
  theme,
  ownerState
}) => (0, _extends2.default)({
  '&:hover': {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, _system.alpha)(theme.palette.action.active, theme.palette.action.hoverOpacity),
    // Reset on touch devices, it doesn't add specificity
    '@media (hover: none)': {
      backgroundColor: 'transparent'
    }
  }
}, ownerState.color !== 'default' && {
  [`&.${_switchClasses.default.checked}`]: {
    color: (theme.vars || theme).palette[ownerState.color].main,
    '&:hover': {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, _system.alpha)(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      '@media (hover: none)': {
        backgroundColor: 'transparent'
      }
    },
    [`&.${_switchClasses.default.disabled}`]: {
      color: theme.vars ? theme.vars.palette.Switch[`${ownerState.color}DisabledColor`] : `${theme.palette.mode === 'light' ? (0, _system.lighten)(theme.palette[ownerState.color].main, 0.62) : (0, _system.darken)(theme.palette[ownerState.color].main, 0.55)}`
    }
  },
  [`&.${_switchClasses.default.checked} + .${_switchClasses.default.track}`]: {
    backgroundColor: (theme.vars || theme).palette[ownerState.color].main
  }
}));
const SwitchTrack = (0, _styled.default)('span', {
  name: 'MuiSwitch',
  slot: 'Track',
  overridesResolver: (props, styles) => styles.track
})(({
  theme
}) => ({
  height: '100%',
  width: '100%',
  borderRadius: 14 / 2,
  zIndex: -1,
  transition: theme.transitions.create(['opacity', 'background-color'], {
    duration: theme.transitions.duration.shortest
  }),
  backgroundColor: theme.vars ? theme.vars.palette.common.onBackground : `${theme.palette.mode === 'light' ? theme.palette.common.black : theme.palette.common.white}`,
  opacity: theme.vars ? theme.vars.opacity.switchTrack : `${theme.palette.mode === 'light' ? 0.38 : 0.3}`
}));
const SwitchThumb = (0, _styled.default)('span', {
  name: 'MuiSwitch',
  slot: 'Thumb',
  overridesResolver: (props, styles) => styles.thumb
})(({
  theme
}) => ({
  boxShadow: (theme.vars || theme).shadows[1],
  backgroundColor: 'currentColor',
  width: 20,
  height: 20,
  borderRadius: '50%'
}));
const Switch = /*#__PURE__*/React.forwardRef(function Switch(inProps, ref) {
  const props = (0, _useThemeProps.default)({
    props: inProps,
    name: 'MuiSwitch'
  });
  const {
      className,
      color = 'primary',
      edge = false,
      size = 'medium',
      sx
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const ownerState = (0, _extends2.default)({}, props, {
    color,
    edge,
    size
  });
  const classes = useUtilityClasses(ownerState);
  const icon = /*#__PURE__*/(0, _jsxRuntime.jsx)(SwitchThumb, {
    className: classes.thumb,
    ownerState: ownerState
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(SwitchRoot, {
    className: (0, _clsx.default)(classes.root, className),
    sx: sx,
    ownerState: ownerState,
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(SwitchSwitchBase, (0, _extends2.default)({
      type: "checkbox",
      icon: icon,
      checkedIcon: icon,
      ref: ref,
      ownerState: ownerState
    }, other, {
      classes: (0, _extends2.default)({}, classes, {
        root: classes.switchBase
      })
    })), /*#__PURE__*/(0, _jsxRuntime.jsx)(SwitchTrack, {
      className: classes.track,
      ownerState: ownerState
    })]
  });
});
process.env.NODE_ENV !== "production" ? Switch.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the component is checked.
   */
  checked: _propTypes.default.bool,
  /**
   * The icon to display when the component is checked.
   */
  checkedIcon: _propTypes.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,
  /**
   * @ignore
   */
  className: _propTypes.default.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
   * @default 'primary'
   */
  color: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), _propTypes.default.string]),
  /**
   * The default checked state. Use when the component is not controlled.
   */
  defaultChecked: _propTypes.default.bool,
  /**
   * If `true`, the component is disabled.
   */
  disabled: _propTypes.default.bool,
  /**
   * If `true`, the ripple effect is disabled.
   * @default false
   */
  disableRipple: _propTypes.default.bool,
  /**
   * If given, uses a negative margin to counteract the padding on one
   * side (this is often helpful for aligning the left or right
   * side of the icon with content above or below, without ruining the border
   * size and shape).
   * @default false
   */
  edge: _propTypes.default.oneOf(['end', 'start', false]),
  /**
   * The icon to display when the component is unchecked.
   */
  icon: _propTypes.default.node,
  /**
   * The id of the `input` element.
   */
  id: _propTypes.default.string,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: _propTypes.default.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: _utils.refType,
  /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: _propTypes.default.func,
  /**
   * If `true`, the `input` element is required.
   * @default false
   */
  required: _propTypes.default.bool,
  /**
   * The size of the component.
   * `small` is equivalent to the dense switch styling.
   * @default 'medium'
   */
  size: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['medium', 'small']), _propTypes.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
  /**
   * The value of the component. The DOM API casts this to a string.
   * The browser uses "on" as the default value.
   */
  value: _propTypes.default.any
} : void 0;
var _default = Switch;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiIsIl9leHRlbmRzMiIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcHJvcFR5cGVzIiwiX2Nsc3giLCJfdXRpbHMiLCJfYmFzZSIsIl9zeXN0ZW0iLCJfY2FwaXRhbGl6ZSIsIl9Td2l0Y2hCYXNlIiwiX3VzZVRoZW1lUHJvcHMiLCJfc3R5bGVkIiwiX3N3aXRjaENsYXNzZXMiLCJfanN4UnVudGltZSIsIl9leGNsdWRlZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJ1c2VVdGlsaXR5Q2xhc3NlcyIsIm93bmVyU3RhdGUiLCJjbGFzc2VzIiwiZWRnZSIsInNpemUiLCJjb2xvciIsImNoZWNrZWQiLCJkaXNhYmxlZCIsInNsb3RzIiwicm9vdCIsInN3aXRjaEJhc2UiLCJ0aHVtYiIsInRyYWNrIiwiaW5wdXQiLCJjb21wb3NlZENsYXNzZXMiLCJ1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyIsImdldFN3aXRjaFV0aWxpdHlDbGFzcyIsIlN3aXRjaFJvb3QiLCJuYW1lIiwic2xvdCIsIm92ZXJyaWRlc1Jlc29sdmVyIiwicHJvcHMiLCJzdHlsZXMiLCJkaXNwbGF5Iiwid2lkdGgiLCJoZWlnaHQiLCJvdmVyZmxvdyIsInBhZGRpbmciLCJib3hTaXppbmciLCJwb3NpdGlvbiIsImZsZXhTaHJpbmsiLCJ6SW5kZXgiLCJ2ZXJ0aWNhbEFsaWduIiwiY29sb3JBZGp1c3QiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJ0cmFuc2Zvcm0iLCJTd2l0Y2hTd2l0Y2hCYXNlIiwidGhlbWUiLCJ0b3AiLCJsZWZ0IiwidmFycyIsInBhbGV0dGUiLCJTd2l0Y2giLCJkZWZhdWx0Q29sb3IiLCJtb2RlIiwiY29tbW9uIiwid2hpdGUiLCJncmV5IiwidHJhbnNpdGlvbiIsInRyYW5zaXRpb25zIiwiY3JlYXRlIiwiZHVyYXRpb24iLCJzaG9ydGVzdCIsImRlZmF1bHREaXNhYmxlZENvbG9yIiwib3BhY2l0eSIsInN3aXRjaFRyYWNrRGlzYWJsZWQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJhY3Rpb24iLCJhY3RpdmVDaGFubmVsIiwiaG92ZXJPcGFjaXR5IiwiYWxwaGEiLCJhY3RpdmUiLCJtYWluIiwibWFpbkNoYW5uZWwiLCJsaWdodGVuIiwiZGFya2VuIiwiU3dpdGNoVHJhY2siLCJib3JkZXJSYWRpdXMiLCJvbkJhY2tncm91bmQiLCJibGFjayIsInN3aXRjaFRyYWNrIiwiU3dpdGNoVGh1bWIiLCJib3hTaGFkb3ciLCJzaGFkb3dzIiwiZm9yd2FyZFJlZiIsImluUHJvcHMiLCJyZWYiLCJjbGFzc05hbWUiLCJzeCIsIm90aGVyIiwiaWNvbiIsImpzeCIsImpzeHMiLCJjaGlsZHJlbiIsInR5cGUiLCJjaGVja2VkSWNvbiIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsInByb3BUeXBlcyIsImJvb2wiLCJub2RlIiwib2JqZWN0Iiwic3RyaW5nIiwib25lT2ZUeXBlIiwib25lT2YiLCJkZWZhdWx0Q2hlY2tlZCIsImRpc2FibGVSaXBwbGUiLCJpZCIsImlucHV0UHJvcHMiLCJpbnB1dFJlZiIsInJlZlR5cGUiLCJvbkNoYW5nZSIsImZ1bmMiLCJyZXF1aXJlZCIsImFycmF5T2YiLCJhbnkiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIlN3aXRjaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xudmFyIF9jbHN4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xzeFwiKSk7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtdWkvdXRpbHNcIik7XG52YXIgX2Jhc2UgPSByZXF1aXJlKFwiQG11aS9iYXNlXCIpO1xudmFyIF9zeXN0ZW0gPSByZXF1aXJlKFwiQG11aS9zeXN0ZW1cIik7XG52YXIgX2NhcGl0YWxpemUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9jYXBpdGFsaXplXCIpKTtcbnZhciBfU3dpdGNoQmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2ludGVybmFsL1N3aXRjaEJhc2VcIikpO1xudmFyIF91c2VUaGVtZVByb3BzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHNcIikpO1xudmFyIF9zdHlsZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvc3R5bGVkXCIpKTtcbnZhciBfc3dpdGNoQ2xhc3NlcyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL3N3aXRjaENsYXNzZXNcIikpO1xudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJlZGdlXCIsIFwic2l6ZVwiLCBcInN4XCJdO1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlQmFiZWxJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgdmFyIGNhY2hlTm9kZUludGVyb3AgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIChub2RlSW50ZXJvcCkgeyByZXR1cm4gbm9kZUludGVyb3AgPyBjYWNoZU5vZGVJbnRlcm9wIDogY2FjaGVCYWJlbEludGVyb3A7IH0pKG5vZGVJbnRlcm9wKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqLCBub2RlSW50ZXJvcCkgeyBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBlZGdlLFxuICAgIHNpemUsXG4gICAgY29sb3IsXG4gICAgY2hlY2tlZCxcbiAgICBkaXNhYmxlZFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZWRnZSAmJiBgZWRnZSR7KDAsIF9jYXBpdGFsaXplLmRlZmF1bHQpKGVkZ2UpfWAsIGBzaXplJHsoMCwgX2NhcGl0YWxpemUuZGVmYXVsdCkoc2l6ZSl9YF0sXG4gICAgc3dpdGNoQmFzZTogWydzd2l0Y2hCYXNlJywgYGNvbG9yJHsoMCwgX2NhcGl0YWxpemUuZGVmYXVsdCkoY29sb3IpfWAsIGNoZWNrZWQgJiYgJ2NoZWNrZWQnLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnXSxcbiAgICB0aHVtYjogWyd0aHVtYiddLFxuICAgIHRyYWNrOiBbJ3RyYWNrJ10sXG4gICAgaW5wdXQ6IFsnaW5wdXQnXVxuICB9O1xuICBjb25zdCBjb21wb3NlZENsYXNzZXMgPSAoMCwgX2Jhc2UudW5zdGFibGVfY29tcG9zZUNsYXNzZXMpKHNsb3RzLCBfc3dpdGNoQ2xhc3Nlcy5nZXRTd2l0Y2hVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xuICByZXR1cm4gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5jb25zdCBTd2l0Y2hSb290ID0gKDAsIF9zdHlsZWQuZGVmYXVsdCkoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlTd2l0Y2gnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5lZGdlICYmIHN0eWxlc1tgZWRnZSR7KDAsIF9jYXBpdGFsaXplLmRlZmF1bHQpKG93bmVyU3RhdGUuZWRnZSl9YF0sIHN0eWxlc1tgc2l6ZSR7KDAsIF9jYXBpdGFsaXplLmRlZmF1bHQpKG93bmVyU3RhdGUuc2l6ZSl9YF1dO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgd2lkdGg6IDM0ICsgMTIgKiAyLFxuICBoZWlnaHQ6IDE0ICsgMTIgKiAyLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHBhZGRpbmc6IDEyLFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGZsZXhTaHJpbms6IDAsXG4gIHpJbmRleDogMCxcbiAgLy8gUmVzZXQgdGhlIHN0YWNraW5nIGNvbnRleHQuXG4gIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAvLyBGb3IgY29ycmVjdCBhbGlnbm1lbnQgd2l0aCB0aGUgdGV4dC5cbiAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICBjb2xvckFkanVzdDogJ2V4YWN0J1xuICB9XG59LCBvd25lclN0YXRlLmVkZ2UgPT09ICdzdGFydCcgJiYge1xuICBtYXJnaW5MZWZ0OiAtOFxufSwgb3duZXJTdGF0ZS5lZGdlID09PSAnZW5kJyAmJiB7XG4gIG1hcmdpblJpZ2h0OiAtOFxufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgd2lkdGg6IDQwLFxuICBoZWlnaHQ6IDI0LFxuICBwYWRkaW5nOiA3LFxuICBbYCYgLiR7X3N3aXRjaENsYXNzZXMuZGVmYXVsdC50aHVtYn1gXToge1xuICAgIHdpZHRoOiAxNixcbiAgICBoZWlnaHQ6IDE2XG4gIH0sXG4gIFtgJiAuJHtfc3dpdGNoQ2xhc3Nlcy5kZWZhdWx0LnN3aXRjaEJhc2V9YF06IHtcbiAgICBwYWRkaW5nOiA0LFxuICAgIFtgJi4ke19zd2l0Y2hDbGFzc2VzLmRlZmF1bHQuY2hlY2tlZH1gXToge1xuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgxNnB4KSdcbiAgICB9XG4gIH1cbn0pKTtcbmNvbnN0IFN3aXRjaFN3aXRjaEJhc2UgPSAoMCwgX3N0eWxlZC5kZWZhdWx0KShfU3dpdGNoQmFzZS5kZWZhdWx0LCB7XG4gIG5hbWU6ICdNdWlTd2l0Y2gnLFxuICBzbG90OiAnU3dpdGNoQmFzZScsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuc3dpdGNoQmFzZSwge1xuICAgICAgW2AmIC4ke19zd2l0Y2hDbGFzc2VzLmRlZmF1bHQuaW5wdXR9YF06IHN0eWxlcy5pbnB1dFxuICAgIH0sIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiBzdHlsZXNbYGNvbG9yJHsoMCwgX2NhcGl0YWxpemUuZGVmYXVsdCkob3duZXJTdGF0ZS5jb2xvcil9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgekluZGV4OiAxLFxuICAvLyBSZW5kZXIgYWJvdmUgdGhlIGZvY3VzIHJpcHBsZS5cbiAgY29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuU3dpdGNoLmRlZmF1bHRDb2xvciA6IGAke3RoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlIDogdGhlbWUucGFsZXR0ZS5ncmV5WzMwMF19YCxcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnbGVmdCcsICd0cmFuc2Zvcm0nXSwge1xuICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICB9KSxcbiAgW2AmLiR7X3N3aXRjaENsYXNzZXMuZGVmYXVsdC5jaGVja2VkfWBdOiB7XG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgyMHB4KSdcbiAgfSxcbiAgW2AmLiR7X3N3aXRjaENsYXNzZXMuZGVmYXVsdC5kaXNhYmxlZH1gXToge1xuICAgIGNvbG9yOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLlN3aXRjaC5kZWZhdWx0RGlzYWJsZWRDb2xvciA6IGAke3RoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuZ3JleVsxMDBdIDogdGhlbWUucGFsZXR0ZS5ncmV5WzYwMF19YFxuICB9LFxuICBbYCYuJHtfc3dpdGNoQ2xhc3Nlcy5kZWZhdWx0LmNoZWNrZWR9ICsgLiR7X3N3aXRjaENsYXNzZXMuZGVmYXVsdC50cmFja31gXToge1xuICAgIG9wYWNpdHk6IDAuNVxuICB9LFxuICBbYCYuJHtfc3dpdGNoQ2xhc3Nlcy5kZWZhdWx0LmRpc2FibGVkfSArIC4ke19zd2l0Y2hDbGFzc2VzLmRlZmF1bHQudHJhY2t9YF06IHtcbiAgICBvcGFjaXR5OiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5vcGFjaXR5LnN3aXRjaFRyYWNrRGlzYWJsZWQgOiBgJHt0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyAwLjEyIDogMC4yfWBcbiAgfSxcbiAgW2AmIC4ke19zd2l0Y2hDbGFzc2VzLmRlZmF1bHQuaW5wdXR9YF06IHtcbiAgICBsZWZ0OiAnLTEwMCUnLFxuICAgIHdpZHRoOiAnMzAwJSdcbiAgfVxufSksICh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgJyY6aG92ZXInOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZUNoYW5uZWx9IC8gJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eX0pYCA6ICgwLCBfc3lzdGVtLmFscGhhKSh0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmUsIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICB9XG4gIH1cbn0sIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiB7XG4gIFtgJi4ke19zd2l0Y2hDbGFzc2VzLmRlZmF1bHQuY2hlY2tlZH1gXToge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLFxuICAgICcmOmhvdmVyJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbkNoYW5uZWx9IC8gJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eX0pYCA6ICgwLCBfc3lzdGVtLmFscGhhKSh0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgfVxuICAgIH0sXG4gICAgW2AmLiR7X3N3aXRjaENsYXNzZXMuZGVmYXVsdC5kaXNhYmxlZH1gXToge1xuICAgICAgY29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuU3dpdGNoW2Ake293bmVyU3RhdGUuY29sb3J9RGlzYWJsZWRDb2xvcmBdIDogYCR7dGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gKDAsIF9zeXN0ZW0ubGlnaHRlbikodGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCAwLjYyKSA6ICgwLCBfc3lzdGVtLmRhcmtlbikodGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCAwLjU1KX1gXG4gICAgfVxuICB9LFxuICBbYCYuJHtfc3dpdGNoQ2xhc3Nlcy5kZWZhdWx0LmNoZWNrZWR9ICsgLiR7X3N3aXRjaENsYXNzZXMuZGVmYXVsdC50cmFja31gXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxuICB9XG59KSk7XG5jb25zdCBTd2l0Y2hUcmFjayA9ICgwLCBfc3R5bGVkLmRlZmF1bHQpKCdzcGFuJywge1xuICBuYW1lOiAnTXVpU3dpdGNoJyxcbiAgc2xvdDogJ1RyYWNrJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMudHJhY2tcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBoZWlnaHQ6ICcxMDAlJyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgYm9yZGVyUmFkaXVzOiAxNCAvIDIsXG4gIHpJbmRleDogLTEsXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ29wYWNpdHknLCAnYmFja2dyb3VuZC1jb2xvciddLCB7XG4gICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gIH0pLFxuICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuY29tbW9uLm9uQmFja2dyb3VuZCA6IGAke3RoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuY29tbW9uLmJsYWNrIDogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGV9YCxcbiAgb3BhY2l0eTogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMub3BhY2l0eS5zd2l0Y2hUcmFjayA6IGAke3RoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IDAuMzggOiAwLjN9YFxufSkpO1xuY29uc3QgU3dpdGNoVGh1bWIgPSAoMCwgX3N0eWxlZC5kZWZhdWx0KSgnc3BhbicsIHtcbiAgbmFtZTogJ011aVN3aXRjaCcsXG4gIHNsb3Q6ICdUaHVtYicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnRodW1iXG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgYm94U2hhZG93OiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhZG93c1sxXSxcbiAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgd2lkdGg6IDIwLFxuICBoZWlnaHQ6IDIwLFxuICBib3JkZXJSYWRpdXM6ICc1MCUnXG59KSk7XG5jb25zdCBTd2l0Y2ggPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTd2l0Y2goaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gKDAsIF91c2VUaGVtZVByb3BzLmRlZmF1bHQpKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpU3dpdGNoJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSAncHJpbWFyeScsXG4gICAgICBlZGdlID0gZmFsc2UsXG4gICAgICBzaXplID0gJ21lZGl1bScsXG4gICAgICBzeFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIGVkZ2UsXG4gICAgc2l6ZVxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBpY29uID0gLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFN3aXRjaFRodW1iLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnRodW1iLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeHMpKFN3aXRjaFJvb3QsIHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xzeC5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgc3g6IHN4LFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoU3dpdGNoU3dpdGNoQmFzZSwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICBpY29uOiBpY29uLFxuICAgICAgY2hlY2tlZEljb246IGljb24sXG4gICAgICByZWY6IHJlZixcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9LCBvdGhlciwge1xuICAgICAgY2xhc3NlczogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgY2xhc3Nlcywge1xuICAgICAgICByb290OiBjbGFzc2VzLnN3aXRjaEJhc2VcbiAgICAgIH0pXG4gICAgfSkpLCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoU3dpdGNoVHJhY2ssIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50cmFjayxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9KV1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN3aXRjaC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgY2hlY2tlZC5cbiAgICovXG4gIGNoZWNrZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheSB3aGVuIHRoZSBjb21wb25lbnQgaXMgY2hlY2tlZC5cbiAgICovXG4gIGNoZWNrZWRJY29uOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2FkZGluZy1uZXctY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ3ByaW1hcnknXG4gICAqL1xuICBjb2xvcjogX3Byb3BUeXBlcy5kZWZhdWx0IC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydkZWZhdWx0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBjaGVja2VkIHN0YXRlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdENoZWNrZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogSWYgZ2l2ZW4sIHVzZXMgYSBuZWdhdGl2ZSBtYXJnaW4gdG8gY291bnRlcmFjdCB0aGUgcGFkZGluZyBvbiBvbmVcbiAgICogc2lkZSAodGhpcyBpcyBvZnRlbiBoZWxwZnVsIGZvciBhbGlnbmluZyB0aGUgbGVmdCBvciByaWdodFxuICAgKiBzaWRlIG9mIHRoZSBpY29uIHdpdGggY29udGVudCBhYm92ZSBvciBiZWxvdywgd2l0aG91dCBydWluaW5nIHRoZSBib3JkZXJcbiAgICogc2l6ZSBhbmQgc2hhcGUpLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZWRnZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZW5kJywgJ3N0YXJ0JywgZmFsc2VdKSxcbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgd2hlbiB0aGUgY29tcG9uZW50IGlzIHVuY2hlY2tlZC5cbiAgICovXG4gIGljb246IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiBfdXRpbHMucmVmVHlwZSxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHN0YXRlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgY2hlY2tlZCBzdGF0ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC5jaGVja2VkYCAoYm9vbGVhbikuXG4gICAqL1xuICBvbkNoYW5nZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgcmVxdWlyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZXF1aXJlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIHN3aXRjaCBzdHlsaW5nLlxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgc2l6ZTogX3Byb3BUeXBlcy5kZWZhdWx0IC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydtZWRpdW0nLCAnc21hbGwnXSksIF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5hcnJheU9mKF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LCBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbF0pKSwgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgY29tcG9uZW50LiBUaGUgRE9NIEFQSSBjYXN0cyB0aGlzIHRvIGEgc3RyaW5nLlxuICAgKiBUaGUgYnJvd3NlciB1c2VzIFwib25cIiBhcyB0aGUgZGVmYXVsdCB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYW55XG59IDogdm9pZCAwO1xudmFyIF9kZWZhdWx0ID0gU3dpdGNoO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLHNCQUFzQixHQUFHQyxPQUFPLENBQUMsOENBQThDLENBQUM7QUFDcEZDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLElBQUlDLDhCQUE4QixHQUFHUCxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7QUFDM0gsSUFBSU8sU0FBUyxHQUFHUixzQkFBc0IsQ0FBQ0MsT0FBTyxD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