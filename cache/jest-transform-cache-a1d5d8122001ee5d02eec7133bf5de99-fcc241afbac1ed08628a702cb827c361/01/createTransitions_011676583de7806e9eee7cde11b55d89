ffc95a399b06996da75edfca28ce9114
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createTransitions;
exports.easing = exports.duration = void 0;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
const _excluded = ["duration", "easing", "delay"];
// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
// to learn the context in which each easing should be used.
const easing = {
  // This is the most common easing curve.
  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
  // Objects enter the screen at full velocity from off-screen and
  // slowly decelerate to a resting point.
  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
  // The sharp curve is used by objects that may return to the screen at any time.
  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
};

// Follow https://m2.material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
// to learn when use what timing
exports.easing = easing;
const duration = {
  shortest: 150,
  shorter: 200,
  short: 250,
  // most basic recommended timing
  standard: 300,
  // this is to be used in complex animations
  complex: 375,
  // recommended when something is entering screen
  enteringScreen: 225,
  // recommended when something is leaving screen
  leavingScreen: 195
};
exports.duration = duration;
function formatMs(milliseconds) {
  return `${Math.round(milliseconds)}ms`;
}
function getAutoHeightDuration(height) {
  if (!height) {
    return 0;
  }
  const constant = height / 36;

  // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10
  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
}
function createTransitions(inputTransitions) {
  const mergedEasing = (0, _extends2.default)({}, easing, inputTransitions.easing);
  const mergedDuration = (0, _extends2.default)({}, duration, inputTransitions.duration);
  const create = (props = ['all'], options = {}) => {
    const {
        duration: durationOption = mergedDuration.standard,
        easing: easingOption = mergedEasing.easeInOut,
        delay = 0
      } = options,
      other = (0, _objectWithoutPropertiesLoose2.default)(options, _excluded);
    if (process.env.NODE_ENV !== 'production') {
      const isString = value => typeof value === 'string';
      // IE11 support, replace with Number.isNaN
      // eslint-disable-next-line no-restricted-globals
      const isNumber = value => !isNaN(parseFloat(value));
      if (!isString(props) && !Array.isArray(props)) {
        console.error('MUI: Argument "props" must be a string or Array.');
      }
      if (!isNumber(durationOption) && !isString(durationOption)) {
        console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
      }
      if (!isString(easingOption)) {
        console.error('MUI: Argument "easing" must be a string.');
      }
      if (!isNumber(delay) && !isString(delay)) {
        console.error('MUI: Argument "delay" must be a number or a string.');
      }
      if (Object.keys(other).length !== 0) {
        console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(',')}].`);
      }
    }
    return (Array.isArray(props) ? props : [props]).map(animatedProp => `${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`).join(',');
  };
  return (0, _extends2.default)({
    getAutoHeightDuration,
    create
  }, inputTransitions, {
    easing: mergedEasing,
    duration: mergedDuration
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImNyZWF0ZVRyYW5zaXRpb25zIiwiZWFzaW5nIiwiZHVyYXRpb24iLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIiLCJfZXh0ZW5kczIiLCJfZXhjbHVkZWQiLCJlYXNlSW5PdXQiLCJlYXNlT3V0IiwiZWFzZUluIiwic2hhcnAiLCJzaG9ydGVzdCIsInNob3J0ZXIiLCJzaG9ydCIsInN0YW5kYXJkIiwiY29tcGxleCIsImVudGVyaW5nU2NyZWVuIiwibGVhdmluZ1NjcmVlbiIsImZvcm1hdE1zIiwibWlsbGlzZWNvbmRzIiwiTWF0aCIsInJvdW5kIiwiZ2V0QXV0b0hlaWdodER1cmF0aW9uIiwiaGVpZ2h0IiwiY29uc3RhbnQiLCJpbnB1dFRyYW5zaXRpb25zIiwibWVyZ2VkRWFzaW5nIiwibWVyZ2VkRHVyYXRpb24iLCJjcmVhdGUiLCJwcm9wcyIsIm9wdGlvbnMiLCJkdXJhdGlvbk9wdGlvbiIsImVhc2luZ09wdGlvbiIsImRlbGF5Iiwib3RoZXIiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwiQXJyYXkiLCJpc0FycmF5IiwiY29uc29sZSIsImVycm9yIiwia2V5cyIsImxlbmd0aCIsImpvaW4iLCJtYXAiLCJhbmltYXRlZFByb3AiXSwic291cmNlcyI6WyJjcmVhdGVUcmFuc2l0aW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlVHJhbnNpdGlvbnM7XG5leHBvcnRzLmVhc2luZyA9IGV4cG9ydHMuZHVyYXRpb24gPSB2b2lkIDA7XG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZHVyYXRpb25cIiwgXCJlYXNpbmdcIiwgXCJkZWxheVwiXTtcbi8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmdvb2dsZS5jb20vbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1uYXR1cmFsLWVhc2luZy1jdXJ2ZXNcbi8vIHRvIGxlYXJuIHRoZSBjb250ZXh0IGluIHdoaWNoIGVhY2ggZWFzaW5nIHNob3VsZCBiZSB1c2VkLlxuY29uc3QgZWFzaW5nID0ge1xuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGNvbW1vbiBlYXNpbmcgY3VydmUuXG4gIGVhc2VJbk91dDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGVudGVyIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eSBmcm9tIG9mZi1zY3JlZW4gYW5kXG4gIC8vIHNsb3dseSBkZWNlbGVyYXRlIHRvIGEgcmVzdGluZyBwb2ludC5cbiAgZWFzZU91dDogJ2N1YmljLWJlemllcigwLjAsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGxlYXZlIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eS4gVGhleSBkbyBub3QgZGVjZWxlcmF0ZSB3aGVuIG9mZi1zY3JlZW4uXG4gIGVhc2VJbjogJ2N1YmljLWJlemllcigwLjQsIDAsIDEsIDEpJyxcbiAgLy8gVGhlIHNoYXJwIGN1cnZlIGlzIHVzZWQgYnkgb2JqZWN0cyB0aGF0IG1heSByZXR1cm4gdG8gdGhlIHNjcmVlbiBhdCBhbnkgdGltZS5cbiAgc2hhcnA6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpJ1xufTtcblxuLy8gRm9sbG93IGh0dHBzOi8vbTIubWF0ZXJpYWwuaW8vZ3VpZGVsaW5lcy9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLWNvbW1vbi1kdXJhdGlvbnNcbi8vIHRvIGxlYXJuIHdoZW4gdXNlIHdoYXQgdGltaW5nXG5leHBvcnRzLmVhc2luZyA9IGVhc2luZztcbmNvbnN0IGR1cmF0aW9uID0ge1xuICBzaG9ydGVzdDogMTUwLFxuICBzaG9ydGVyOiAyMDAsXG4gIHNob3J0OiAyNTAsXG4gIC8vIG1vc3QgYmFzaWMgcmVjb21tZW5kZWQgdGltaW5nXG4gIHN0YW5kYXJkOiAzMDAsXG4gIC8vIHRoaXMgaXMgdG8gYmUgdXNlZCBpbiBjb21wbGV4IGFuaW1hdGlvbnNcbiAgY29tcGxleDogMzc1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBlbnRlcmluZyBzY3JlZW5cbiAgZW50ZXJpbmdTY3JlZW46IDIyNSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgbGVhdmluZyBzY3JlZW5cbiAgbGVhdmluZ1NjcmVlbjogMTk1XG59O1xuZXhwb3J0cy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuZnVuY3Rpb24gZm9ybWF0TXMobWlsbGlzZWNvbmRzKSB7XG4gIHJldHVybiBgJHtNYXRoLnJvdW5kKG1pbGxpc2Vjb25kcyl9bXNgO1xufVxuZnVuY3Rpb24gZ2V0QXV0b0hlaWdodER1cmF0aW9uKGhlaWdodCkge1xuICBpZiAoIWhlaWdodCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGNvbnN0IGNvbnN0YW50ID0gaGVpZ2h0IC8gMzY7XG5cbiAgLy8gaHR0cHM6Ly93d3cud29sZnJhbWFscGhhLmNvbS9pbnB1dC8/aT0oNCslMkIrMTUrKisoeCslMkYrMzYrKSsqKiswLjI1KyUyQisoeCslMkYrMzYpKyUyRis1KSsqKzEwXG4gIHJldHVybiBNYXRoLnJvdW5kKCg0ICsgMTUgKiBjb25zdGFudCAqKiAwLjI1ICsgY29uc3RhbnQgLyA1KSAqIDEwKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25zKGlucHV0VHJhbnNpdGlvbnMpIHtcbiAgY29uc3QgbWVyZ2VkRWFzaW5nID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgZWFzaW5nLCBpbnB1dFRyYW5zaXRpb25zLmVhc2luZyk7XG4gIGNvbnN0IG1lcmdlZER1cmF0aW9uID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgZHVyYXRpb24sIGlucHV0VHJhbnNpdGlvbnMuZHVyYXRpb24pO1xuICBjb25zdCBjcmVhdGUgPSAocHJvcHMgPSBbJ2FsbCddLCBvcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbk9wdGlvbiA9IG1lcmdlZER1cmF0aW9uLnN0YW5kYXJkLFxuICAgICAgICBlYXNpbmc6IGVhc2luZ09wdGlvbiA9IG1lcmdlZEVhc2luZy5lYXNlSW5PdXQsXG4gICAgICAgIGRlbGF5ID0gMFxuICAgICAgfSA9IG9wdGlvbnMsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkob3B0aW9ucywgX2V4Y2x1ZGVkKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc3QgaXNTdHJpbmcgPSB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICAgICAgLy8gSUUxMSBzdXBwb3J0LCByZXBsYWNlIHdpdGggTnVtYmVyLmlzTmFOXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgICBjb25zdCBpc051bWJlciA9IHZhbHVlID0+ICFpc05hTihwYXJzZUZsb2F0KHZhbHVlKSk7XG4gICAgICBpZiAoIWlzU3RyaW5nKHByb3BzKSAmJiAhQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBBcmd1bWVudCBcInByb3BzXCIgbXVzdCBiZSBhIHN0cmluZyBvciBBcnJheS4nKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNOdW1iZXIoZHVyYXRpb25PcHRpb24pICYmICFpc1N0cmluZyhkdXJhdGlvbk9wdGlvbikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBBcmd1bWVudCBcImR1cmF0aW9uXCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZyBidXQgZm91bmQgJHtkdXJhdGlvbk9wdGlvbn0uYCk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzU3RyaW5nKGVhc2luZ09wdGlvbikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBBcmd1bWVudCBcImVhc2luZ1wiIG11c3QgYmUgYSBzdHJpbmcuJyk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzTnVtYmVyKGRlbGF5KSAmJiAhaXNTdHJpbmcoZGVsYXkpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJkZWxheVwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcuJyk7XG4gICAgICB9XG4gICAgICBpZiAoT2JqZWN0LmtleXMob3RoZXIpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFVucmVjb2duaXplZCBhcmd1bWVudChzKSBbJHtPYmplY3Qua2V5cyhvdGhlcikuam9pbignLCcpfV0uYCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoQXJyYXkuaXNBcnJheShwcm9wcykgPyBwcm9wcyA6IFtwcm9wc10pLm1hcChhbmltYXRlZFByb3AgPT4gYCR7YW5pbWF0ZWRQcm9wfSAke3R5cGVvZiBkdXJhdGlvbk9wdGlvbiA9PT0gJ3N0cmluZycgPyBkdXJhdGlvbk9wdGlvbiA6IGZvcm1hdE1zKGR1cmF0aW9uT3B0aW9uKX0gJHtlYXNpbmdPcHRpb259ICR7dHlwZW9mIGRlbGF5ID09PSAnc3RyaW5nJyA/IGRlbGF5IDogZm9ybWF0TXMoZGVsYXkpfWApLmpvaW4oJywnKTtcbiAgfTtcbiAgcmV0dXJuICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGdldEF1dG9IZWlnaHREdXJhdGlvbixcbiAgICBjcmVhdGVcbiAgfSwgaW5wdXRUcmFuc2l0aW9ucywge1xuICAgIGVhc2luZzogbWVyZ2VkRWFzaW5nLFxuICAgIGR1cmF0aW9uOiBtZXJnZWREdXJhdGlvblxuICB9KTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQztBQUNwRkMsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLE9BQU8sR0FBR0MsaUJBQWlCO0FBQ25DSCxPQUFPLENBQUNJLE1BQU0sR0FBR0osT0FBTyxDQUFDSyxRQUFRLEdBQUcsS0FBSyxDQUFDO0FBQzFDLElBQUlDLDhCQUE4QixHQUFHVixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7QUFDM0gsSUFBSVUsU0FBUyxHQUFHWCxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDakYsTUFBTVcsU0FBUyxHQUFHLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUM7QUFDakQ7QUFDQTtBQUNBLE1BQU1KLE1BQU0sR0FBRztFQUNiO0VBQ0FLLFNBQVMsRUFBRSw4QkFBOEI7RUFDekM7RUFDQTtFQUNBQyxPQUFPLEVBQUUsOEJBQThCO0VBQ3ZDO0VBQ0FDLE1BQU0sRUFBRSw0QkFBNEI7RUFDcEM7RUFDQUMsS0FBSyxFQUFFO0FBQ1QsQ0FBQzs7QUFFRDtBQUNBO0FBQ0FaLE9BQU8sQ0FBQ0ksTUFBTSxHQUFHQSxNQUFNO0FBQ3ZCLE1BQU1DLFFBQVEsR0FBRztFQUNmUSxRQUFRLEVBQUUsR0FBRztFQUNiQyxPQUFPLEVBQUUsR0FBRztFQUNaQyxLQUFLLEVBQUUsR0FBRztFQUNWO0VBQ0FDLFFBQVEsRUFBRSxHQUFHO0VBQ2I7RUFDQUMsT0FBTyxFQUFFLEdBQUc7RUFDWjtFQUNBQyxjQUFjLEVBQUUsR0FBRztFQUNuQjtFQUNBQyxhQUFhLEVBQUU7QUFDakIsQ0FBQztBQUNEbkIsT0FBTyxDQUFDSyxRQUFRLEdBQUdBLFFBQVE7QUFDM0IsU0FBU2UsUUFBUUEsQ0FBQ0MsWUFBWSxFQUFFO0VBQzlCLE9BQVEsR0FBRUMsSUFBSSxDQUFDQyxLQUFLLENBQUNGLFlBQVksQ0FBRSxJQUFHO0FBQ3hDO0FBQ0EsU0FBU0cscUJBQXFCQSxDQUFDQyxNQUFNLEVBQUU7RUFDckMsSUFBSSxDQUFDQSxNQUFNLEVBQUU7SUFDWCxPQUFPLENBQUM7RUFDVjtFQUNBLE1BQU1DLFFBQVEsR0FBR0QsTUFBTSxHQUFHLEVBQUU7O0VBRTVCO0VBQ0EsT0FBT0gsSUFBSSxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHRyxRQUFRLElBQUksSUFBSSxHQUFHQSxRQUFRLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNwRTtBQUNBLFNBQVN2QixpQkFBaUJBLENBQUN3QixnQkFBZ0IsRUFBRTtFQUMzQyxNQUFNQyxZQUFZLEdBQUcsQ0FBQyxDQUFDLEVBQUVyQixTQUFTLENBQUNMLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRUUsTUFBTSxFQUFFdUIsZ0JBQWdCLENBQUN2QixNQUFNLENBQUM7RUFDaEYsTUFBTXlCLGNBQWMsR0FBRyxDQUFDLENBQUMsRUFBRXRCLFNBQVMsQ0FBQ0wsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFRyxRQUFRLEVBQUVzQixnQkFBZ0IsQ0FBQ3RCLFFBQVEsQ0FBQztFQUN0RixNQUFNeUIsTUFBTSxHQUFHQSxDQUFDQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFLO0lBQ2hELE1BQU07UUFDRjNCLFFBQVEsRUFBRTRCLGNBQWMsR0FBR0osY0FBYyxDQUFDYixRQUFRO1FBQ2xEWixNQUFNLEVBQUU4QixZQUFZLEdBQUdOLFlBQVksQ0FBQ25CLFNBQVM7UUFDN0MwQixLQUFLLEdBQUc7TUFDVixDQUFDLEdBQUdILE9BQU87TUFDWEksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFOUIsOEJBQThCLENBQUNKLE9BQU8sRUFBRThCLE9BQU8sRUFBRXhCLFNBQVMsQ0FBQztJQUN6RSxJQUFJNkIsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFFBQVEsS0FBSyxZQUFZLEVBQUU7TUFDekMsTUFBTUMsUUFBUSxHQUFHdkMsS0FBSyxJQUFJLE9BQU9BLEtBQUssS0FBSyxRQUFRO01BQ25EO01BQ0E7TUFDQSxNQUFNd0MsUUFBUSxHQUFHeEMsS0FBSyxJQUFJLENBQUN5QyxLQUFLLENBQUNDLFVBQVUsQ0FBQzFDLEtBQUssQ0FBQyxDQUFDO01BQ25ELElBQUksQ0FBQ3VDLFFBQVEsQ0FBQ1QsS0FBSyxDQUFDLElBQUksQ0FBQ2EsS0FBSyxDQUFDQyxPQUFPLENBQUNkLEtBQUssQ0FBQyxFQUFFO1FBQzdDZSxPQUFPLENBQUNDLEtBQUssQ0FBQyxrREFBa0QsQ0FBQztNQUNuRTtNQUNBLElBQUksQ0FBQ04sUUFBUSxDQUFDUixjQUFjLENBQUMsSUFBSSxDQUFDTyxRQUFRLENBQUNQLGNBQWMsQ0FBQyxFQUFFO1FBQzFEYSxPQUFPLENBQUNDLEtBQUssQ0FBRSxtRUFBa0VkLGNBQWUsR0FBRSxDQUFDO01BQ3JHO01BQ0EsSUFBSSxDQUFDTyxRQUFRLENBQUNOLFlBQVksQ0FBQyxFQUFFO1FBQzNCWSxPQUFPLENBQUNDLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQztNQUMzRDtNQUNBLElBQUksQ0FBQ04sUUFBUSxDQUFDTixLQUFLLENBQUMsSUFBSSxDQUFDSyxRQUFRLENBQUNMLEtBQUssQ0FBQyxFQUFFO1FBQ3hDVyxPQUFPLENBQUNDLEtBQUssQ0FBQyxxREFBcUQsQ0FBQztNQUN0RTtNQUNBLElBQUlqRCxNQUFNLENBQUNrRCxJQUFJLENBQUNaLEtBQUssQ0FBQyxDQUFDYSxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ25DSCxPQUFPLENBQUNDLEtBQUssQ0FBRSxrQ0FBaUNqRCxNQUFNLENBQUNrRCxJQUFJLENBQUNaLEtBQUssQ0FBQyxDQUFDYyxJQUFJLENBQUMsR0FBRyxDQUFFLElBQUcsQ0FBQztNQUNuRjtJQUNGO0lBQ0EsT0FBTyxDQUFDTixLQUFLLENBQUNDLE9BQU8sQ0FBQ2QsS0FBSyxDQUFDLEdBQUdBLEtBQUssR0FBRyxDQUFDQSxLQUFLLENBQUMsRUFBRW9CLEdBQUcsQ0FBQ0MsWUFBWSxJQUFLLEdBQUVBLFlBQWEsSUFBRyxPQUFPbkIsY0FBYyxLQUFLLFFBQVEsR0FBR0EsY0FBYyxHQUFHYixRQUFRLENBQUNhLGNBQWMsQ0FBRSxJQUFHQyxZQUFhLElBQUcsT0FBT0MsS0FBSyxLQUFLLFFBQVEsR0FBR0EsS0FBSyxHQUFHZixRQUFRLENBQUNlLEtBQUssQ0FBRSxFQUFDLENBQUMsQ0FBQ2UsSUFBSSxDQUFDLEdBQUcsQ0FBQztFQUMzUCxDQUFDO0VBQ0QsT0FBTyxDQUFDLENBQUMsRUFBRTNDLFNBQVMsQ0FBQ0wsT0FBTyxFQUFFO0lBQzVCc0IscUJBQXFCO0lBQ3JCTTtFQUNGLENBQUMsRUFBRUgsZ0JBQWdCLEVBQUU7SUFDbkJ2QixNQUFNLEVBQUV3QixZQUFZO0lBQ3BCdkIsUUFBUSxFQUFFd0I7RUFDWixDQUFDLENBQUM7QUFDSiJ9