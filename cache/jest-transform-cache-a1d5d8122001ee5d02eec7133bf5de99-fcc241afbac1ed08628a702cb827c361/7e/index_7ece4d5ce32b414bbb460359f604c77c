5903fddc85b3d442c62cafa584b8f10b
'use strict';

var callBound = require('call-bind/callBound');
var hasToStringTag = require('has-tostringtag/shams')();
var has;
var $exec;
var isRegexMarker;
var badStringifier;
if (hasToStringTag) {
  has = callBound('Object.prototype.hasOwnProperty');
  $exec = callBound('RegExp.prototype.exec');
  isRegexMarker = {};
  var throwRegexMarker = function () {
    throw isRegexMarker;
  };
  badStringifier = {
    toString: throwRegexMarker,
    valueOf: throwRegexMarker
  };
  if (typeof Symbol.toPrimitive === 'symbol') {
    badStringifier[Symbol.toPrimitive] = throwRegexMarker;
  }
}
var $toString = callBound('Object.prototype.toString');
var gOPD = Object.getOwnPropertyDescriptor;
var regexClass = '[object RegExp]';
module.exports = hasToStringTag
// eslint-disable-next-line consistent-return
? function isRegex(value) {
  if (!value || typeof value !== 'object') {
    return false;
  }
  var descriptor = gOPD(value, 'lastIndex');
  var hasLastIndexDataProperty = descriptor && has(descriptor, 'value');
  if (!hasLastIndexDataProperty) {
    return false;
  }
  try {
    $exec(value, badStringifier);
  } catch (e) {
    return e === isRegexMarker;
  }
} : function isRegex(value) {
  // In older browsers, typeof regex incorrectly returns 'function'
  if (!value || typeof value !== 'object' && typeof value !== 'function') {
    return false;
  }
  return $toString(value) === regexClass;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYWxsQm91bmQiLCJyZXF1aXJlIiwiaGFzVG9TdHJpbmdUYWciLCJoYXMiLCIkZXhlYyIsImlzUmVnZXhNYXJrZXIiLCJiYWRTdHJpbmdpZmllciIsInRocm93UmVnZXhNYXJrZXIiLCJ0b1N0cmluZyIsInZhbHVlT2YiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsIiR0b1N0cmluZyIsImdPUEQiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJyZWdleENsYXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzUmVnZXgiLCJ2YWx1ZSIsImRlc2NyaXB0b3IiLCJoYXNMYXN0SW5kZXhEYXRhUHJvcGVydHkiLCJlIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kL2NhbGxCb3VuZCcpO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gcmVxdWlyZSgnaGFzLXRvc3RyaW5ndGFnL3NoYW1zJykoKTtcbnZhciBoYXM7XG52YXIgJGV4ZWM7XG52YXIgaXNSZWdleE1hcmtlcjtcbnZhciBiYWRTdHJpbmdpZmllcjtcblxuaWYgKGhhc1RvU3RyaW5nVGFnKSB7XG5cdGhhcyA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eScpO1xuXHQkZXhlYyA9IGNhbGxCb3VuZCgnUmVnRXhwLnByb3RvdHlwZS5leGVjJyk7XG5cdGlzUmVnZXhNYXJrZXIgPSB7fTtcblxuXHR2YXIgdGhyb3dSZWdleE1hcmtlciA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aHJvdyBpc1JlZ2V4TWFya2VyO1xuXHR9O1xuXHRiYWRTdHJpbmdpZmllciA9IHtcblx0XHR0b1N0cmluZzogdGhyb3dSZWdleE1hcmtlcixcblx0XHR2YWx1ZU9mOiB0aHJvd1JlZ2V4TWFya2VyXG5cdH07XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wudG9QcmltaXRpdmUgPT09ICdzeW1ib2wnKSB7XG5cdFx0YmFkU3RyaW5naWZpZXJbU3ltYm9sLnRvUHJpbWl0aXZlXSA9IHRocm93UmVnZXhNYXJrZXI7XG5cdH1cbn1cblxudmFyICR0b1N0cmluZyA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZycpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIHJlZ2V4Q2xhc3MgPSAnW29iamVjdCBSZWdFeHBdJztcblxubW9kdWxlLmV4cG9ydHMgPSBoYXNUb1N0cmluZ1RhZ1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cblx0PyBmdW5jdGlvbiBpc1JlZ2V4KHZhbHVlKSB7XG5cdFx0aWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0dmFyIGRlc2NyaXB0b3IgPSBnT1BEKHZhbHVlLCAnbGFzdEluZGV4Jyk7XG5cdFx0dmFyIGhhc0xhc3RJbmRleERhdGFQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgaGFzKGRlc2NyaXB0b3IsICd2YWx1ZScpO1xuXHRcdGlmICghaGFzTGFzdEluZGV4RGF0YVByb3BlcnR5KSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0dHJ5IHtcblx0XHRcdCRleGVjKHZhbHVlLCBiYWRTdHJpbmdpZmllcik7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIGUgPT09IGlzUmVnZXhNYXJrZXI7XG5cdFx0fVxuXHR9XG5cdDogZnVuY3Rpb24gaXNSZWdleCh2YWx1ZSkge1xuXHRcdC8vIEluIG9sZGVyIGJyb3dzZXJzLCB0eXBlb2YgcmVnZXggaW5jb3JyZWN0bHkgcmV0dXJucyAnZnVuY3Rpb24nXG5cdFx0aWYgKCF2YWx1ZSB8fCAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuICR0b1N0cmluZyh2YWx1ZSkgPT09IHJlZ2V4Q2xhc3M7XG5cdH07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsU0FBUyxHQUFHQyxPQUFPLENBQUMscUJBQXFCLENBQUM7QUFDOUMsSUFBSUMsY0FBYyxHQUFHRCxPQUFPLENBQUMsdUJBQXVCLENBQUMsRUFBRTtBQUN2RCxJQUFJRSxHQUFHO0FBQ1AsSUFBSUMsS0FBSztBQUNULElBQUlDLGFBQWE7QUFDakIsSUFBSUMsY0FBYztBQUVsQixJQUFJSixjQUFjLEVBQUU7RUFDbkJDLEdBQUcsR0FBR0gsU0FBUyxDQUFDLGlDQUFpQyxDQUFDO0VBQ2xESSxLQUFLLEdBQUdKLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQztFQUMxQ0ssYUFBYSxHQUFHLENBQUMsQ0FBQztFQUVsQixJQUFJRSxnQkFBZ0IsR0FBRyxTQUFBQSxDQUFBLEVBQVk7SUFDbEMsTUFBTUYsYUFBYTtFQUNwQixDQUFDO0VBQ0RDLGNBQWMsR0FBRztJQUNoQkUsUUFBUSxFQUFFRCxnQkFBZ0I7SUFDMUJFLE9BQU8sRUFBRUY7RUFDVixDQUFDO0VBRUQsSUFBSSxPQUFPRyxNQUFNLENBQUNDLFdBQVcsS0FBSyxRQUFRLEVBQUU7SUFDM0NMLGNBQWMsQ0FBQ0ksTUFBTSxDQUFDQyxXQUFXLENBQUMsR0FBR0osZ0JBQWdCO0VBQ3REO0FBQ0Q7QUFFQSxJQUFJSyxTQUFTLEdBQUdaLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQztBQUN0RCxJQUFJYSxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0Msd0JBQXdCO0FBQzFDLElBQUlDLFVBQVUsR0FBRyxpQkFBaUI7QUFFbENDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHaEI7QUFDaEI7QUFBQSxFQUNFLFNBQVNpQixPQUFPQSxDQUFDQyxLQUFLLEVBQUU7RUFDekIsSUFBSSxDQUFDQSxLQUFLLElBQUksT0FBT0EsS0FBSyxLQUFLLFFBQVEsRUFBRTtJQUN4QyxPQUFPLEtBQUs7RUFDYjtFQUVBLElBQUlDLFVBQVUsR0FBR1IsSUFBSSxDQUFDTyxLQUFLLEVBQUUsV0FBVyxDQUFDO0VBQ3pDLElBQUlFLHdCQUF3QixHQUFHRCxVQUFVLElBQUlsQixHQUFHLENBQUNrQixVQUFVLEVBQUUsT0FBTyxDQUFDO0VBQ3JFLElBQUksQ0FBQ0Msd0JBQXdCLEVBQUU7SUFDOUIsT0FBTyxLQUFLO0VBQ2I7RUFFQSxJQUFJO0lBQ0hsQixLQUFLLENBQUNnQixLQUFLLEVBQUVkLGNBQWMsQ0FBQztFQUM3QixDQUFDLENBQUMsT0FBT2lCLENBQUMsRUFBRTtJQUNYLE9BQU9BLENBQUMsS0FBS2xCLGFBQWE7RUFDM0I7QUFDRCxDQUFDLEdBQ0MsU0FBU2MsT0FBT0EsQ0FBQ0MsS0FBSyxFQUFFO0VBQ3pCO0VBQ0EsSUFBSSxDQUFDQSxLQUFLLElBQUssT0FBT0EsS0FBSyxLQUFLLFFBQVEsSUFBSSxPQUFPQSxLQUFLLEtBQUssVUFBVyxFQUFFO0lBQ3pFLE9BQU8sS0FBSztFQUNiO0VBRUEsT0FBT1IsU0FBUyxDQUFDUSxLQUFLLENBQUMsS0FBS0osVUFBVTtBQUN2QyxDQUFDIn0=