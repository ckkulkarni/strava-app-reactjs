da8f1f798669554ebed6d62bc66aede9
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typographyVariant = exports.textTransform = exports.textAlign = exports.lineHeight = exports.letterSpacing = exports.fontWeight = exports.fontStyle = exports.fontSize = exports.fontFamily = exports.default = void 0;
var _style = _interopRequireDefault(require("./style"));
var _compose = _interopRequireDefault(require("./compose"));
const fontFamily = (0, _style.default)({
  prop: 'fontFamily',
  themeKey: 'typography'
});
exports.fontFamily = fontFamily;
const fontSize = (0, _style.default)({
  prop: 'fontSize',
  themeKey: 'typography'
});
exports.fontSize = fontSize;
const fontStyle = (0, _style.default)({
  prop: 'fontStyle',
  themeKey: 'typography'
});
exports.fontStyle = fontStyle;
const fontWeight = (0, _style.default)({
  prop: 'fontWeight',
  themeKey: 'typography'
});
exports.fontWeight = fontWeight;
const letterSpacing = (0, _style.default)({
  prop: 'letterSpacing'
});
exports.letterSpacing = letterSpacing;
const textTransform = (0, _style.default)({
  prop: 'textTransform'
});
exports.textTransform = textTransform;
const lineHeight = (0, _style.default)({
  prop: 'lineHeight'
});
exports.lineHeight = lineHeight;
const textAlign = (0, _style.default)({
  prop: 'textAlign'
});
exports.textAlign = textAlign;
const typographyVariant = (0, _style.default)({
  prop: 'typography',
  cssProperty: false,
  themeKey: 'typography'
});
exports.typographyVariant = typographyVariant;
const typography = (0, _compose.default)(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign, textTransform);
var _default = typography;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidHlwb2dyYXBoeVZhcmlhbnQiLCJ0ZXh0VHJhbnNmb3JtIiwidGV4dEFsaWduIiwibGluZUhlaWdodCIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiZm9udFN0eWxlIiwiZm9udFNpemUiLCJmb250RmFtaWx5IiwiZGVmYXVsdCIsIl9zdHlsZSIsIl9jb21wb3NlIiwicHJvcCIsInRoZW1lS2V5IiwiY3NzUHJvcGVydHkiLCJ0eXBvZ3JhcGh5IiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJ0eXBvZ3JhcGh5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnR5cG9ncmFwaHlWYXJpYW50ID0gZXhwb3J0cy50ZXh0VHJhbnNmb3JtID0gZXhwb3J0cy50ZXh0QWxpZ24gPSBleHBvcnRzLmxpbmVIZWlnaHQgPSBleHBvcnRzLmxldHRlclNwYWNpbmcgPSBleHBvcnRzLmZvbnRXZWlnaHQgPSBleHBvcnRzLmZvbnRTdHlsZSA9IGV4cG9ydHMuZm9udFNpemUgPSBleHBvcnRzLmZvbnRGYW1pbHkgPSBleHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX3N0eWxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zdHlsZVwiKSk7XG52YXIgX2NvbXBvc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvc2VcIikpO1xuY29uc3QgZm9udEZhbWlseSA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnZm9udEZhbWlseScsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuZXhwb3J0cy5mb250RmFtaWx5ID0gZm9udEZhbWlseTtcbmNvbnN0IGZvbnRTaXplID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdmb250U2l6ZScsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuZXhwb3J0cy5mb250U2l6ZSA9IGZvbnRTaXplO1xuY29uc3QgZm9udFN0eWxlID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICdmb250U3R5bGUnLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydHMuZm9udFN0eWxlID0gZm9udFN0eWxlO1xuY29uc3QgZm9udFdlaWdodCA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnZm9udFdlaWdodCcsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuZXhwb3J0cy5mb250V2VpZ2h0ID0gZm9udFdlaWdodDtcbmNvbnN0IGxldHRlclNwYWNpbmcgPSAoMCwgX3N0eWxlLmRlZmF1bHQpKHtcbiAgcHJvcDogJ2xldHRlclNwYWNpbmcnXG59KTtcbmV4cG9ydHMubGV0dGVyU3BhY2luZyA9IGxldHRlclNwYWNpbmc7XG5jb25zdCB0ZXh0VHJhbnNmb3JtID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICd0ZXh0VHJhbnNmb3JtJ1xufSk7XG5leHBvcnRzLnRleHRUcmFuc2Zvcm0gPSB0ZXh0VHJhbnNmb3JtO1xuY29uc3QgbGluZUhlaWdodCA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAnbGluZUhlaWdodCdcbn0pO1xuZXhwb3J0cy5saW5lSGVpZ2h0ID0gbGluZUhlaWdodDtcbmNvbnN0IHRleHRBbGlnbiA9ICgwLCBfc3R5bGUuZGVmYXVsdCkoe1xuICBwcm9wOiAndGV4dEFsaWduJ1xufSk7XG5leHBvcnRzLnRleHRBbGlnbiA9IHRleHRBbGlnbjtcbmNvbnN0IHR5cG9ncmFwaHlWYXJpYW50ID0gKDAsIF9zdHlsZS5kZWZhdWx0KSh7XG4gIHByb3A6ICd0eXBvZ3JhcGh5JyxcbiAgY3NzUHJvcGVydHk6IGZhbHNlLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydHMudHlwb2dyYXBoeVZhcmlhbnQgPSB0eXBvZ3JhcGh5VmFyaWFudDtcbmNvbnN0IHR5cG9ncmFwaHkgPSAoMCwgX2NvbXBvc2UuZGVmYXVsdCkodHlwb2dyYXBoeVZhcmlhbnQsIGZvbnRGYW1pbHksIGZvbnRTaXplLCBmb250U3R5bGUsIGZvbnRXZWlnaHQsIGxldHRlclNwYWNpbmcsIGxpbmVIZWlnaHQsIHRleHRBbGlnbiwgdGV4dFRyYW5zZm9ybSk7XG52YXIgX2RlZmF1bHQgPSB0eXBvZ3JhcGh5O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLHNCQUFzQixHQUFHQyxPQUFPLENBQUMsOENBQThDLENBQUM7QUFDcEZDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxpQkFBaUIsR0FBR0YsT0FBTyxDQUFDRyxhQUFhLEdBQUdILE9BQU8sQ0FBQ0ksU0FBUyxHQUFHSixPQUFPLENBQUNLLFVBQVUsR0FBR0wsT0FBTyxDQUFDTSxhQUFhLEdBQUdOLE9BQU8sQ0FBQ08sVUFBVSxHQUFHUCxPQUFPLENBQUNRLFNBQVMsR0FBR1IsT0FBTyxDQUFDUyxRQUFRLEdBQUdULE9BQU8sQ0FBQ1UsVUFBVSxHQUFHVixPQUFPLENBQUNXLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDOU4sSUFBSUMsTUFBTSxHQUFHaEIsc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN2RCxJQUFJZ0IsUUFBUSxHQUFHakIsc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMzRCxNQUFNYSxVQUFVLEdBQUcsQ0FBQyxDQUFDLEVBQUVFLE1BQU0sQ0FBQ0QsT0FBTyxFQUFFO0VBQ3JDRyxJQUFJLEVBQUUsWUFBWTtFQUNsQkMsUUFBUSxFQUFFO0FBQ1osQ0FBQyxDQUFDO0FBQ0ZmLE9BQU8sQ0FBQ1UsVUFBVSxHQUFHQSxVQUFVO0FBQy9CLE1BQU1ELFFBQVEsR0FBRyxDQUFDLENBQUMsRUFBRUcsTUFBTSxDQUFDRCxPQUFPLEVBQUU7RUFDbkNHLElBQUksRUFBRSxVQUFVO0VBQ2hCQyxRQUFRLEVBQUU7QUFDWixDQUFDLENBQUM7QUFDRmYsT0FBTyxDQUFDUyxRQUFRLEdBQUdBLFFBQVE7QUFDM0IsTUFBTUQsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFSSxNQUFNLENBQUNELE9BQU8sRUFBRTtFQUNwQ0csSUFBSSxFQUFFLFdBQVc7RUFDakJDLFFBQVEsRUFBRTtBQUNaLENBQUMsQ0FBQztBQUNGZixPQUFPLENBQUNRLFNBQVMsR0FBR0EsU0FBUztBQUM3QixNQUFNRCxVQUFVLEdBQUcsQ0FBQyxDQUFDLEVBQUVLLE1BQU0sQ0FBQ0QsT0FBTyxFQUFFO0VBQ3JDRyxJQUFJLEVBQUUsWUFBWTtFQUNsQkMsUUFBUSxFQUFFO0FBQ1osQ0FBQyxDQUFDO0FBQ0ZmLE9BQU8sQ0FBQ08sVUFBVSxHQUFHQSxVQUFVO0FBQy9CLE1BQU1ELGFBQWEsR0FBRyxDQUFDLENBQUMsRUFBRU0sTUFBTSxDQUFDRCxPQUFPLEVBQUU7RUFDeENHLElBQUksRUFBRTtBQUNSLENBQUMsQ0FBQztBQUNGZCxPQUFPLENBQUNNLGFBQWEsR0FBR0EsYUFBYTtBQUNyQyxNQUFNSCxhQUFhLEdBQUcsQ0FBQyxDQUFDLEVBQUVTLE1BQU0sQ0FBQ0QsT0FBTyxFQUFFO0VBQ3hDRyxJQUFJLEVBQUU7QUFDUixDQUFDLENBQUM7QUFDRmQsT0FBTyxDQUFDRyxhQUFhLEdBQUdBLGFBQWE7QUFDckMsTUFBTUUsVUFBVSxHQUFHLENBQUMsQ0FBQyxFQUFFTyxNQUFNLENBQUNELE9BQU8sRUFBRTtFQUNyQ0csSUFBSSxFQUFFO0FBQ1IsQ0FBQyxDQUFDO0FBQ0ZkLE9BQU8sQ0FBQ0ssVUFBVSxHQUFHQSxVQUFVO0FBQy9CLE1BQU1ELFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRVEsTUFBTSxDQUFDRCxPQUFPLEVBQUU7RUFDcENHLElBQUksRUFBRTtBQUNSLENBQUMsQ0FBQztBQUNGZCxPQUFPLENBQUNJLFNBQVMsR0FBR0EsU0FBUztBQUM3QixNQUFNRixpQkFBaUIsR0FBRyxDQUFDLENBQUMsRUFBRVUsTUFBTSxDQUFDRCxPQUFPLEVBQUU7RUFDNUNHLElBQUksRUFBRSxZQUFZO0VBQ2xCRSxXQUFXLEVBQUUsS0FBSztFQUNsQkQsUUFBUSxFQUFFO0FBQ1osQ0FBQyxDQUFDO0FBQ0ZmLE9BQU8sQ0FBQ0UsaUJBQWlCLEdBQUdBLGlCQUFpQjtBQUM3QyxNQUFNZSxVQUFVLEdBQUcsQ0FBQyxDQUFDLEVBQUVKLFFBQVEsQ0FBQ0YsT0FBTyxFQUFFVCxpQkFBaUIsRUFBRVEsVUFBVSxFQUFFRCxRQUFRLEVBQUVELFNBQVMsRUFBRUQsVUFBVSxFQUFFRCxhQUFhLEVBQUVELFVBQVUsRUFBRUQsU0FBUyxFQUFFRCxhQUFhLENBQUM7QUFDN0osSUFBSWUsUUFBUSxHQUFHRCxVQUFVO0FBQ3pCakIsT0FBTyxDQUFDVyxPQUFPLEdBQUdPLFFBQVEifQ==