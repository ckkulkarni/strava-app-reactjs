5c32b8977a7a3918ec874d24236b0f7b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NodeTypeError = exports.HtmlElementTypeError = void 0;
exports.checkHtmlElement = checkHtmlElement;
exports.checkNode = checkNode;
exports.compareArraysAsSet = compareArraysAsSet;
exports.deprecate = deprecate;
exports.getMessage = getMessage;
exports.getSingleElementValue = getSingleElementValue;
exports.getTag = getTag;
exports.matches = matches;
exports.normalize = normalize;
exports.parseCSS = parseCSS;
exports.toSentence = toSentence;
var _redent = _interopRequireDefault(require("redent"));
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
var _cssTools = require("@adobe/css-tools");
class GenericTypeError extends Error {
  constructor(expectedString, received, matcherFn, context) {
    super();
    /* istanbul ignore next */

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, matcherFn);
    }
    let withType = '';
    try {
      withType = context.utils.printWithType('Received', received, context.utils.printReceived);
    } catch (e) {// Can throw for Document:
      // https://github.com/jsdom/jsdom/issues/2304
    }
    this.message = [context.utils.matcherHint(`${context.isNot ? '.not' : ''}.${matcherFn.name}`, 'received', ''), '',
    // eslint-disable-next-line @babel/new-cap
    `${context.utils.RECEIVED_COLOR('received')} value must ${expectedString}.`, withType].join('\n');
  }
}
class HtmlElementTypeError extends GenericTypeError {
  constructor(...args) {
    super('be an HTMLElement or an SVGElement', ...args);
  }
}
exports.HtmlElementTypeError = HtmlElementTypeError;
class NodeTypeError extends GenericTypeError {
  constructor(...args) {
    super('be a Node', ...args);
  }
}
exports.NodeTypeError = NodeTypeError;
function checkHasWindow(htmlElement, ErrorClass, ...args) {
  if (!htmlElement || !htmlElement.ownerDocument || !htmlElement.ownerDocument.defaultView) {
    throw new ErrorClass(htmlElement, ...args);
  }
}
function checkNode(node, ...args) {
  checkHasWindow(node, NodeTypeError, ...args);
  const window = node.ownerDocument.defaultView;
  if (!(node instanceof window.Node)) {
    throw new NodeTypeError(node, ...args);
  }
}
function checkHtmlElement(htmlElement, ...args) {
  checkHasWindow(htmlElement, HtmlElementTypeError, ...args);
  const window = htmlElement.ownerDocument.defaultView;
  if (!(htmlElement instanceof window.HTMLElement) && !(htmlElement instanceof window.SVGElement)) {
    throw new HtmlElementTypeError(htmlElement, ...args);
  }
}
class InvalidCSSError extends Error {
  constructor(received, matcherFn, context) {
    super();
    /* istanbul ignore next */

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, matcherFn);
    }
    this.message = [received.message, '',
    // eslint-disable-next-line @babel/new-cap
    context.utils.RECEIVED_COLOR(`Failing css:`),
    // eslint-disable-next-line @babel/new-cap
    context.utils.RECEIVED_COLOR(`${received.css}`)].join('\n');
  }
}
function parseCSS(css, ...args) {
  const ast = (0, _cssTools.parse)(`selector { ${css} }`, {
    silent: true
  }).stylesheet;
  if (ast.parsingErrors && ast.parsingErrors.length > 0) {
    const {
      reason,
      line
    } = ast.parsingErrors[0];
    throw new InvalidCSSError({
      css,
      message: `Syntax error parsing expected css: ${reason} on line: ${line}`
    }, ...args);
  }
  const parsedRules = ast.rules[0].declarations.filter(d => d.type === 'declaration').reduce((obj, {
    property,
    value
  }) => Object.assign(obj, {
    [property]: value
  }), {});
  return parsedRules;
}
function display(context, value) {
  return typeof value === 'string' ? value : context.utils.stringify(value);
}
function getMessage(context, matcher, expectedLabel, expectedValue, receivedLabel, receivedValue) {
  return [`${matcher}\n`,
  // eslint-disable-next-line @babel/new-cap
  `${expectedLabel}:\n${context.utils.EXPECTED_COLOR((0, _redent.default)(display(context, expectedValue), 2))}`,
  // eslint-disable-next-line @babel/new-cap
  `${receivedLabel}:\n${context.utils.RECEIVED_COLOR((0, _redent.default)(display(context, receivedValue), 2))}`].join('\n');
}
function matches(textToMatch, matcher) {
  if (matcher instanceof RegExp) {
    return matcher.test(textToMatch);
  } else {
    return textToMatch.includes(String(matcher));
  }
}
function deprecate(name, replacementText) {
  // Notify user that they are using deprecated functionality.
  // eslint-disable-next-line no-console
  console.warn(`Warning: ${name} has been deprecated and will be removed in future updates.`, replacementText);
}
function normalize(text) {
  return text.replace(/\s+/g, ' ').trim();
}
function getTag(element) {
  return element.tagName && element.tagName.toLowerCase();
}
function getSelectValue({
  multiple,
  options
}) {
  const selectedOptions = [...options].filter(option => option.selected);
  if (multiple) {
    return [...selectedOptions].map(opt => opt.value);
  }
  /* istanbul ignore if */

  if (selectedOptions.length === 0) {
    return undefined; // Couldn't make this happen, but just in case
  }

  return selectedOptions[0].value;
}
function getInputValue(inputElement) {
  switch (inputElement.type) {
    case 'number':
      return inputElement.value === '' ? null : Number(inputElement.value);
    case 'checkbox':
      return inputElement.checked;
    default:
      return inputElement.value;
  }
}
function getSingleElementValue(element) {
  /* istanbul ignore if */
  if (!element) {
    return undefined;
  }
  switch (element.tagName.toLowerCase()) {
    case 'input':
      return getInputValue(element);
    case 'select':
      return getSelectValue(element);
    default:
      return element.value;
  }
}
function compareArraysAsSet(a, b) {
  if (Array.isArray(a) && Array.isArray(b)) {
    return (0, _isEqual.default)(new Set(a), new Set(b));
  }
  return undefined;
}
function toSentence(array, {
  wordConnector = ', ',
  lastWordConnector = ' and '
} = {}) {
  return [array.slice(0, -1).join(wordConnector), array[array.length - 1]].join(array.length > 1 ? lastWordConnector : '');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTm9kZVR5cGVFcnJvciIsIkh0bWxFbGVtZW50VHlwZUVycm9yIiwiY2hlY2tIdG1sRWxlbWVudCIsImNoZWNrTm9kZSIsImNvbXBhcmVBcnJheXNBc1NldCIsImRlcHJlY2F0ZSIsImdldE1lc3NhZ2UiLCJnZXRTaW5nbGVFbGVtZW50VmFsdWUiLCJnZXRUYWciLCJtYXRjaGVzIiwibm9ybWFsaXplIiwicGFyc2VDU1MiLCJ0b1NlbnRlbmNlIiwiX3JlZGVudCIsIl9pc0VxdWFsIiwiX2Nzc1Rvb2xzIiwiR2VuZXJpY1R5cGVFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJleHBlY3RlZFN0cmluZyIsInJlY2VpdmVkIiwibWF0Y2hlckZuIiwiY29udGV4dCIsImNhcHR1cmVTdGFja1RyYWNlIiwid2l0aFR5cGUiLCJ1dGlscyIsInByaW50V2l0aFR5cGUiLCJwcmludFJlY2VpdmVkIiwiZSIsIm1lc3NhZ2UiLCJtYXRjaGVySGludCIsImlzTm90IiwibmFtZSIsIlJFQ0VJVkVEX0NPTE9SIiwiam9pbiIsImFyZ3MiLCJjaGVja0hhc1dpbmRvdyIsImh0bWxFbGVtZW50IiwiRXJyb3JDbGFzcyIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsIm5vZGUiLCJ3aW5kb3ciLCJOb2RlIiwiSFRNTEVsZW1lbnQiLCJTVkdFbGVtZW50IiwiSW52YWxpZENTU0Vycm9yIiwiY3NzIiwiYXN0IiwicGFyc2UiLCJzaWxlbnQiLCJzdHlsZXNoZWV0IiwicGFyc2luZ0Vycm9ycyIsImxlbmd0aCIsInJlYXNvbiIsImxpbmUiLCJwYXJzZWRSdWxlcyIsInJ1bGVzIiwiZGVjbGFyYXRpb25zIiwiZmlsdGVyIiwiZCIsInR5cGUiLCJyZWR1Y2UiLCJvYmoiLCJwcm9wZXJ0eSIsImFzc2lnbiIsImRpc3BsYXkiLCJzdHJpbmdpZnkiLCJtYXRjaGVyIiwiZXhwZWN0ZWRMYWJlbCIsImV4cGVjdGVkVmFsdWUiLCJyZWNlaXZlZExhYmVsIiwicmVjZWl2ZWRWYWx1ZSIsIkVYUEVDVEVEX0NPTE9SIiwiZGVmYXVsdCIsInRleHRUb01hdGNoIiwiUmVnRXhwIiwidGVzdCIsImluY2x1ZGVzIiwiU3RyaW5nIiwicmVwbGFjZW1lbnRUZXh0IiwiY29uc29sZSIsIndhcm4iLCJ0ZXh0IiwicmVwbGFjZSIsInRyaW0iLCJlbGVtZW50IiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwiZ2V0U2VsZWN0VmFsdWUiLCJtdWx0aXBsZSIsIm9wdGlvbnMiLCJzZWxlY3RlZE9wdGlvbnMiLCJvcHRpb24iLCJzZWxlY3RlZCIsIm1hcCIsIm9wdCIsInVuZGVmaW5lZCIsImdldElucHV0VmFsdWUiLCJpbnB1dEVsZW1lbnQiLCJOdW1iZXIiLCJjaGVja2VkIiwiYSIsImIiLCJBcnJheSIsImlzQXJyYXkiLCJTZXQiLCJhcnJheSIsIndvcmRDb25uZWN0b3IiLCJsYXN0V29yZENvbm5lY3RvciIsInNsaWNlIl0sInNvdXJjZXMiOlsidXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Ob2RlVHlwZUVycm9yID0gZXhwb3J0cy5IdG1sRWxlbWVudFR5cGVFcnJvciA9IHZvaWQgMDtcbmV4cG9ydHMuY2hlY2tIdG1sRWxlbWVudCA9IGNoZWNrSHRtbEVsZW1lbnQ7XG5leHBvcnRzLmNoZWNrTm9kZSA9IGNoZWNrTm9kZTtcbmV4cG9ydHMuY29tcGFyZUFycmF5c0FzU2V0ID0gY29tcGFyZUFycmF5c0FzU2V0O1xuZXhwb3J0cy5kZXByZWNhdGUgPSBkZXByZWNhdGU7XG5leHBvcnRzLmdldE1lc3NhZ2UgPSBnZXRNZXNzYWdlO1xuZXhwb3J0cy5nZXRTaW5nbGVFbGVtZW50VmFsdWUgPSBnZXRTaW5nbGVFbGVtZW50VmFsdWU7XG5leHBvcnRzLmdldFRhZyA9IGdldFRhZztcbmV4cG9ydHMubWF0Y2hlcyA9IG1hdGNoZXM7XG5leHBvcnRzLm5vcm1hbGl6ZSA9IG5vcm1hbGl6ZTtcbmV4cG9ydHMucGFyc2VDU1MgPSBwYXJzZUNTUztcbmV4cG9ydHMudG9TZW50ZW5jZSA9IHRvU2VudGVuY2U7XG5cbnZhciBfcmVkZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVkZW50XCIpKTtcblxudmFyIF9pc0VxdWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL2lzRXF1YWxcIikpO1xuXG52YXIgX2Nzc1Rvb2xzID0gcmVxdWlyZShcIkBhZG9iZS9jc3MtdG9vbHNcIik7XG5cbmNsYXNzIEdlbmVyaWNUeXBlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKGV4cGVjdGVkU3RyaW5nLCByZWNlaXZlZCwgbWF0Y2hlckZuLCBjb250ZXh0KSB7XG4gICAgc3VwZXIoKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG4gICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBtYXRjaGVyRm4pO1xuICAgIH1cblxuICAgIGxldCB3aXRoVHlwZSA9ICcnO1xuXG4gICAgdHJ5IHtcbiAgICAgIHdpdGhUeXBlID0gY29udGV4dC51dGlscy5wcmludFdpdGhUeXBlKCdSZWNlaXZlZCcsIHJlY2VpdmVkLCBjb250ZXh0LnV0aWxzLnByaW50UmVjZWl2ZWQpO1xuICAgIH0gY2F0Y2ggKGUpIHsvLyBDYW4gdGhyb3cgZm9yIERvY3VtZW50OlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2pzZG9tL2pzZG9tL2lzc3Vlcy8yMzA0XG4gICAgfVxuXG4gICAgdGhpcy5tZXNzYWdlID0gW2NvbnRleHQudXRpbHMubWF0Y2hlckhpbnQoYCR7Y29udGV4dC5pc05vdCA/ICcubm90JyA6ICcnfS4ke21hdGNoZXJGbi5uYW1lfWAsICdyZWNlaXZlZCcsICcnKSwgJycsIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYmFiZWwvbmV3LWNhcFxuICAgIGAke2NvbnRleHQudXRpbHMuUkVDRUlWRURfQ09MT1IoJ3JlY2VpdmVkJyl9IHZhbHVlIG11c3QgJHtleHBlY3RlZFN0cmluZ30uYCwgd2l0aFR5cGVdLmpvaW4oJ1xcbicpO1xuICB9XG5cbn1cblxuY2xhc3MgSHRtbEVsZW1lbnRUeXBlRXJyb3IgZXh0ZW5kcyBHZW5lcmljVHlwZUVycm9yIHtcbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIHN1cGVyKCdiZSBhbiBIVE1MRWxlbWVudCBvciBhbiBTVkdFbGVtZW50JywgLi4uYXJncyk7XG4gIH1cblxufVxuXG5leHBvcnRzLkh0bWxFbGVtZW50VHlwZUVycm9yID0gSHRtbEVsZW1lbnRUeXBlRXJyb3I7XG5cbmNsYXNzIE5vZGVUeXBlRXJyb3IgZXh0ZW5kcyBHZW5lcmljVHlwZUVycm9yIHtcbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIHN1cGVyKCdiZSBhIE5vZGUnLCAuLi5hcmdzKTtcbiAgfVxuXG59XG5cbmV4cG9ydHMuTm9kZVR5cGVFcnJvciA9IE5vZGVUeXBlRXJyb3I7XG5cbmZ1bmN0aW9uIGNoZWNrSGFzV2luZG93KGh0bWxFbGVtZW50LCBFcnJvckNsYXNzLCAuLi5hcmdzKSB7XG4gIGlmICghaHRtbEVsZW1lbnQgfHwgIWh0bWxFbGVtZW50Lm93bmVyRG9jdW1lbnQgfHwgIWh0bWxFbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3JDbGFzcyhodG1sRWxlbWVudCwgLi4uYXJncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tOb2RlKG5vZGUsIC4uLmFyZ3MpIHtcbiAgY2hlY2tIYXNXaW5kb3cobm9kZSwgTm9kZVR5cGVFcnJvciwgLi4uYXJncyk7XG4gIGNvbnN0IHdpbmRvdyA9IG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuICBpZiAoIShub2RlIGluc3RhbmNlb2Ygd2luZG93Lk5vZGUpKSB7XG4gICAgdGhyb3cgbmV3IE5vZGVUeXBlRXJyb3Iobm9kZSwgLi4uYXJncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tIdG1sRWxlbWVudChodG1sRWxlbWVudCwgLi4uYXJncykge1xuICBjaGVja0hhc1dpbmRvdyhodG1sRWxlbWVudCwgSHRtbEVsZW1lbnRUeXBlRXJyb3IsIC4uLmFyZ3MpO1xuICBjb25zdCB3aW5kb3cgPSBodG1sRWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG4gIGlmICghKGh0bWxFbGVtZW50IGluc3RhbmNlb2Ygd2luZG93LkhUTUxFbGVtZW50KSAmJiAhKGh0bWxFbGVtZW50IGluc3RhbmNlb2Ygd2luZG93LlNWR0VsZW1lbnQpKSB7XG4gICAgdGhyb3cgbmV3IEh0bWxFbGVtZW50VHlwZUVycm9yKGh0bWxFbGVtZW50LCAuLi5hcmdzKTtcbiAgfVxufVxuXG5jbGFzcyBJbnZhbGlkQ1NTRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHJlY2VpdmVkLCBtYXRjaGVyRm4sIGNvbnRleHQpIHtcbiAgICBzdXBlcigpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cbiAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIG1hdGNoZXJGbik7XG4gICAgfVxuXG4gICAgdGhpcy5tZXNzYWdlID0gW3JlY2VpdmVkLm1lc3NhZ2UsICcnLCAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGJhYmVsL25ldy1jYXBcbiAgICBjb250ZXh0LnV0aWxzLlJFQ0VJVkVEX0NPTE9SKGBGYWlsaW5nIGNzczpgKSwgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBiYWJlbC9uZXctY2FwXG4gICAgY29udGV4dC51dGlscy5SRUNFSVZFRF9DT0xPUihgJHtyZWNlaXZlZC5jc3N9YCldLmpvaW4oJ1xcbicpO1xuICB9XG5cbn1cblxuZnVuY3Rpb24gcGFyc2VDU1MoY3NzLCAuLi5hcmdzKSB7XG4gIGNvbnN0IGFzdCA9ICgwLCBfY3NzVG9vbHMucGFyc2UpKGBzZWxlY3RvciB7ICR7Y3NzfSB9YCwge1xuICAgIHNpbGVudDogdHJ1ZVxuICB9KS5zdHlsZXNoZWV0O1xuXG4gIGlmIChhc3QucGFyc2luZ0Vycm9ycyAmJiBhc3QucGFyc2luZ0Vycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3Qge1xuICAgICAgcmVhc29uLFxuICAgICAgbGluZVxuICAgIH0gPSBhc3QucGFyc2luZ0Vycm9yc1swXTtcbiAgICB0aHJvdyBuZXcgSW52YWxpZENTU0Vycm9yKHtcbiAgICAgIGNzcyxcbiAgICAgIG1lc3NhZ2U6IGBTeW50YXggZXJyb3IgcGFyc2luZyBleHBlY3RlZCBjc3M6ICR7cmVhc29ufSBvbiBsaW5lOiAke2xpbmV9YFxuICAgIH0sIC4uLmFyZ3MpO1xuICB9XG5cbiAgY29uc3QgcGFyc2VkUnVsZXMgPSBhc3QucnVsZXNbMF0uZGVjbGFyYXRpb25zLmZpbHRlcihkID0+IGQudHlwZSA9PT0gJ2RlY2xhcmF0aW9uJykucmVkdWNlKChvYmosIHtcbiAgICBwcm9wZXJ0eSxcbiAgICB2YWx1ZVxuICB9KSA9PiBPYmplY3QuYXNzaWduKG9iaiwge1xuICAgIFtwcm9wZXJ0eV06IHZhbHVlXG4gIH0pLCB7fSk7XG4gIHJldHVybiBwYXJzZWRSdWxlcztcbn1cblxuZnVuY3Rpb24gZGlzcGxheShjb250ZXh0LCB2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHZhbHVlIDogY29udGV4dC51dGlscy5zdHJpbmdpZnkodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBnZXRNZXNzYWdlKGNvbnRleHQsIG1hdGNoZXIsIGV4cGVjdGVkTGFiZWwsIGV4cGVjdGVkVmFsdWUsIHJlY2VpdmVkTGFiZWwsIHJlY2VpdmVkVmFsdWUpIHtcbiAgcmV0dXJuIFtgJHttYXRjaGVyfVxcbmAsIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYmFiZWwvbmV3LWNhcFxuICBgJHtleHBlY3RlZExhYmVsfTpcXG4ke2NvbnRleHQudXRpbHMuRVhQRUNURURfQ09MT1IoKDAsIF9yZWRlbnQuZGVmYXVsdCkoZGlzcGxheShjb250ZXh0LCBleHBlY3RlZFZhbHVlKSwgMikpfWAsIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYmFiZWwvbmV3LWNhcFxuICBgJHtyZWNlaXZlZExhYmVsfTpcXG4ke2NvbnRleHQudXRpbHMuUkVDRUlWRURfQ09MT1IoKDAsIF9yZWRlbnQuZGVmYXVsdCkoZGlzcGxheShjb250ZXh0LCByZWNlaXZlZFZhbHVlKSwgMikpfWBdLmpvaW4oJ1xcbicpO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVzKHRleHRUb01hdGNoLCBtYXRjaGVyKSB7XG4gIGlmIChtYXRjaGVyIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIG1hdGNoZXIudGVzdCh0ZXh0VG9NYXRjaCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRleHRUb01hdGNoLmluY2x1ZGVzKFN0cmluZyhtYXRjaGVyKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVwcmVjYXRlKG5hbWUsIHJlcGxhY2VtZW50VGV4dCkge1xuICAvLyBOb3RpZnkgdXNlciB0aGF0IHRoZXkgYXJlIHVzaW5nIGRlcHJlY2F0ZWQgZnVuY3Rpb25hbGl0eS5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgY29uc29sZS53YXJuKGBXYXJuaW5nOiAke25hbWV9IGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBmdXR1cmUgdXBkYXRlcy5gLCByZXBsYWNlbWVudFRleHQpO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemUodGV4dCkge1xuICByZXR1cm4gdGV4dC5yZXBsYWNlKC9cXHMrL2csICcgJykudHJpbSgpO1xufVxuXG5mdW5jdGlvbiBnZXRUYWcoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC50YWdOYW1lICYmIGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBnZXRTZWxlY3RWYWx1ZSh7XG4gIG11bHRpcGxlLFxuICBvcHRpb25zXG59KSB7XG4gIGNvbnN0IHNlbGVjdGVkT3B0aW9ucyA9IFsuLi5vcHRpb25zXS5maWx0ZXIob3B0aW9uID0+IG9wdGlvbi5zZWxlY3RlZCk7XG5cbiAgaWYgKG11bHRpcGxlKSB7XG4gICAgcmV0dXJuIFsuLi5zZWxlY3RlZE9wdGlvbnNdLm1hcChvcHQgPT4gb3B0LnZhbHVlKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblxuXG4gIGlmIChzZWxlY3RlZE9wdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDsgLy8gQ291bGRuJ3QgbWFrZSB0aGlzIGhhcHBlbiwgYnV0IGp1c3QgaW4gY2FzZVxuICB9XG5cbiAgcmV0dXJuIHNlbGVjdGVkT3B0aW9uc1swXS52YWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5wdXRWYWx1ZShpbnB1dEVsZW1lbnQpIHtcbiAgc3dpdGNoIChpbnB1dEVsZW1lbnQudHlwZSkge1xuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gaW5wdXRFbGVtZW50LnZhbHVlID09PSAnJyA/IG51bGwgOiBOdW1iZXIoaW5wdXRFbGVtZW50LnZhbHVlKTtcblxuICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgIHJldHVybiBpbnB1dEVsZW1lbnQuY2hlY2tlZDtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gaW5wdXRFbGVtZW50LnZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFNpbmdsZUVsZW1lbnRWYWx1ZShlbGVtZW50KSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgc3dpdGNoIChlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgIHJldHVybiBnZXRJbnB1dFZhbHVlKGVsZW1lbnQpO1xuXG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIHJldHVybiBnZXRTZWxlY3RWYWx1ZShlbGVtZW50KTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZWxlbWVudC52YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wYXJlQXJyYXlzQXNTZXQoYSwgYikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhKSAmJiBBcnJheS5pc0FycmF5KGIpKSB7XG4gICAgcmV0dXJuICgwLCBfaXNFcXVhbC5kZWZhdWx0KShuZXcgU2V0KGEpLCBuZXcgU2V0KGIpKTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHRvU2VudGVuY2UoYXJyYXksIHtcbiAgd29yZENvbm5lY3RvciA9ICcsICcsXG4gIGxhc3RXb3JkQ29ubmVjdG9yID0gJyBhbmQgJ1xufSA9IHt9KSB7XG4gIHJldHVybiBbYXJyYXkuc2xpY2UoMCwgLTEpLmpvaW4od29yZENvbm5lY3RvciksIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdXS5qb2luKGFycmF5Lmxlbmd0aCA+IDEgPyBsYXN0V29yZENvbm5lY3RvciA6ICcnKTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQztBQUVwRkMsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FB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