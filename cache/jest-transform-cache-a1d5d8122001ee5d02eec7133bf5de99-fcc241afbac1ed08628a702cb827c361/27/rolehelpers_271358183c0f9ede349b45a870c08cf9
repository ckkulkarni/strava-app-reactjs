2d71f9ab58836c6092bc98a0d95cd996
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeAriaChecked = computeAriaChecked;
exports.computeAriaCurrent = computeAriaCurrent;
exports.computeAriaExpanded = computeAriaExpanded;
exports.computeAriaPressed = computeAriaPressed;
exports.computeAriaSelected = computeAriaSelected;
exports.computeHeadingLevel = computeHeadingLevel;
exports.getImplicitAriaRoles = getImplicitAriaRoles;
exports.getRoles = getRoles;
exports.isInaccessible = isInaccessible;
exports.isSubtreeInaccessible = isSubtreeInaccessible;
exports.logRoles = void 0;
exports.prettyRoles = prettyRoles;
var _ariaQuery = require("aria-query");
var _domAccessibilityApi = require("dom-accessibility-api");
var _prettyDom = require("./pretty-dom");
var _config = require("./config");
const elementRoleList = buildElementRoleList(_ariaQuery.elementRoles);

/**
 * @param {Element} element -
 * @returns {boolean} - `true` if `element` and its subtree are inaccessible
 */
function isSubtreeInaccessible(element) {
  if (element.hidden === true) {
    return true;
  }
  if (element.getAttribute('aria-hidden') === 'true') {
    return true;
  }
  const window = element.ownerDocument.defaultView;
  if (window.getComputedStyle(element).display === 'none') {
    return true;
  }
  return false;
}

/**
 * Partial implementation https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion
 * which should only be used for elements with a non-presentational role i.e.
 * `role="none"` and `role="presentation"` will not be excluded.
 *
 * Implements aria-hidden semantics (i.e. parent overrides child)
 * Ignores "Child Presentational: True" characteristics
 *
 * @param {Element} element -
 * @param {object} [options] -
 * @param {function (element: Element): boolean} options.isSubtreeInaccessible -
 * can be used to return cached results from previous isSubtreeInaccessible calls
 * @returns {boolean} true if excluded, otherwise false
 */
function isInaccessible(element, options = {}) {
  const {
    isSubtreeInaccessible: isSubtreeInaccessibleImpl = isSubtreeInaccessible
  } = options;
  const window = element.ownerDocument.defaultView;
  // since visibility is inherited we can exit early
  if (window.getComputedStyle(element).visibility === 'hidden') {
    return true;
  }
  let currentElement = element;
  while (currentElement) {
    if (isSubtreeInaccessibleImpl(currentElement)) {
      return true;
    }
    currentElement = currentElement.parentElement;
  }
  return false;
}
function getImplicitAriaRoles(currentNode) {
  // eslint bug here:
  // eslint-disable-next-line no-unused-vars
  for (const {
    match,
    roles
  } of elementRoleList) {
    if (match(currentNode)) {
      return [...roles];
    }
  }
  return [];
}
function buildElementRoleList(elementRolesMap) {
  function makeElementSelector({
    name,
    attributes
  }) {
    return `${name}${attributes.map(({
      name: attributeName,
      value,
      constraints = []
    }) => {
      const shouldNotExist = constraints.indexOf('undefined') !== -1;
      if (shouldNotExist) {
        return `:not([${attributeName}])`;
      } else if (value) {
        return `[${attributeName}="${value}"]`;
      } else {
        return `[${attributeName}]`;
      }
    }).join('')}`;
  }
  function getSelectorSpecificity({
    attributes = []
  }) {
    return attributes.length;
  }
  function bySelectorSpecificity({
    specificity: leftSpecificity
  }, {
    specificity: rightSpecificity
  }) {
    return rightSpecificity - leftSpecificity;
  }
  function match(element) {
    let {
      attributes = []
    } = element;

    // https://github.com/testing-library/dom-testing-library/issues/814
    const typeTextIndex = attributes.findIndex(attribute => attribute.value && attribute.name === 'type' && attribute.value === 'text');
    if (typeTextIndex >= 0) {
      // not using splice to not mutate the attributes array
      attributes = [...attributes.slice(0, typeTextIndex), ...attributes.slice(typeTextIndex + 1)];
    }
    const selector = makeElementSelector({
      ...element,
      attributes
    });
    return node => {
      if (typeTextIndex >= 0 && node.type !== 'text') {
        return false;
      }
      return node.matches(selector);
    };
  }
  let result = [];

  // eslint bug here:
  // eslint-disable-next-line no-unused-vars
  for (const [element, roles] of elementRolesMap.entries()) {
    result = [...result, {
      match: match(element),
      roles: Array.from(roles),
      specificity: getSelectorSpecificity(element)
    }];
  }
  return result.sort(bySelectorSpecificity);
}
function getRoles(container, {
  hidden = false
} = {}) {
  function flattenDOM(node) {
    return [node, ...Array.from(node.children).reduce((acc, child) => [...acc, ...flattenDOM(child)], [])];
  }
  return flattenDOM(container).filter(element => {
    return hidden === false ? isInaccessible(element) === false : true;
  }).reduce((acc, node) => {
    let roles = [];
    // TODO: This violates html-aria which does not allow any role on every element
    if (node.hasAttribute('role')) {
      roles = node.getAttribute('role').split(' ').slice(0, 1);
    } else {
      roles = getImplicitAriaRoles(node);
    }
    return roles.reduce((rolesAcc, role) => Array.isArray(rolesAcc[role]) ? {
      ...rolesAcc,
      [role]: [...rolesAcc[role], node]
    } : {
      ...rolesAcc,
      [role]: [node]
    }, acc);
  }, {});
}
function prettyRoles(dom, {
  hidden,
  includeDescription
}) {
  const roles = getRoles(dom, {
    hidden
  });
  // We prefer to skip generic role, we don't recommend it
  return Object.entries(roles).filter(([role]) => role !== 'generic').map(([role, elements]) => {
    const delimiterBar = '-'.repeat(50);
    const elementsString = elements.map(el => {
      const nameString = `Name "${(0, _domAccessibilityApi.computeAccessibleName)(el, {
        computedStyleSupportsPseudoElements: (0, _config.getConfig)().computedStyleSupportsPseudoElements
      })}":\n`;
      const domString = (0, _prettyDom.prettyDOM)(el.cloneNode(false));
      if (includeDescription) {
        const descriptionString = `Description "${(0, _domAccessibilityApi.computeAccessibleDescription)(el, {
          computedStyleSupportsPseudoElements: (0, _config.getConfig)().computedStyleSupportsPseudoElements
        })}":\n`;
        return `${nameString}${descriptionString}${domString}`;
      }
      return `${nameString}${domString}`;
    }).join('\n\n');
    return `${role}:\n\n${elementsString}\n\n${delimiterBar}`;
  }).join('\n');
}
const logRoles = (dom, {
  hidden = false
} = {}) => console.log(prettyRoles(dom, {
  hidden
}));

/**
 * @param {Element} element -
 * @returns {boolean | undefined} - false/true if (not)selected, undefined if not selectable
 */
exports.logRoles = logRoles;
function computeAriaSelected(element) {
  // implicit value from html-aam mappings: https://www.w3.org/TR/html-aam-1.0/#html-attribute-state-and-property-mappings
  // https://www.w3.org/TR/html-aam-1.0/#details-id-97
  if (element.tagName === 'OPTION') {
    return element.selected;
  }

  // explicit value
  return checkBooleanAttribute(element, 'aria-selected');
}

/**
 * @param {Element} element -
 * @returns {boolean | undefined} - false/true if (not)checked, undefined if not checked-able
 */
function computeAriaChecked(element) {
  // implicit value from html-aam mappings: https://www.w3.org/TR/html-aam-1.0/#html-attribute-state-and-property-mappings
  // https://www.w3.org/TR/html-aam-1.0/#details-id-56
  // https://www.w3.org/TR/html-aam-1.0/#details-id-67
  if ('indeterminate' in element && element.indeterminate) {
    return undefined;
  }
  if ('checked' in element) {
    return element.checked;
  }

  // explicit value
  return checkBooleanAttribute(element, 'aria-checked');
}

/**
 * @param {Element} element -
 * @returns {boolean | undefined} - false/true if (not)pressed, undefined if not press-able
 */
function computeAriaPressed(element) {
  // https://www.w3.org/TR/wai-aria-1.1/#aria-pressed
  return checkBooleanAttribute(element, 'aria-pressed');
}

/**
 * @param {Element} element -
 * @returns {boolean | string | null} -
 */
function computeAriaCurrent(element) {
  // https://www.w3.org/TR/wai-aria-1.1/#aria-current
  return checkBooleanAttribute(element, 'aria-current') ?? element.getAttribute('aria-current') ?? false;
}

/**
 * @param {Element} element -
 * @returns {boolean | undefined} - false/true if (not)expanded, undefined if not expand-able
 */
function computeAriaExpanded(element) {
  // https://www.w3.org/TR/wai-aria-1.1/#aria-expanded
  return checkBooleanAttribute(element, 'aria-expanded');
}
function checkBooleanAttribute(element, attribute) {
  const attributeValue = element.getAttribute(attribute);
  if (attributeValue === 'true') {
    return true;
  }
  if (attributeValue === 'false') {
    return false;
  }
  return undefined;
}

/**
 * @param {Element} element -
 * @returns {number | undefined} - number if implicit heading or aria-level present, otherwise undefined
 */
function computeHeadingLevel(element) {
  // https://w3c.github.io/html-aam/#el-h1-h6
  // https://w3c.github.io/html-aam/#el-h1-h6
  const implicitHeadingLevels = {
    H1: 1,
    H2: 2,
    H3: 3,
    H4: 4,
    H5: 5,
    H6: 6
  };
  // explicit aria-level value
  // https://www.w3.org/TR/wai-aria-1.2/#aria-level
  const ariaLevelAttribute = element.getAttribute('aria-level') && Number(element.getAttribute('aria-level'));
  return ariaLevelAttribute || implicitHeadingLevels[element.tagName];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvbXB1dGVBcmlhQ2hlY2tlZCIsImNvbXB1dGVBcmlhQ3VycmVudCIsImNvbXB1dGVBcmlhRXhwYW5kZWQiLCJjb21wdXRlQXJpYVByZXNzZWQiLCJjb21wdXRlQXJpYVNlbGVjdGVkIiwiY29tcHV0ZUhlYWRpbmdMZXZlbCIsImdldEltcGxpY2l0QXJpYVJvbGVzIiwiZ2V0Um9sZXMiLCJpc0luYWNjZXNzaWJsZSIsImlzU3VidHJlZUluYWNjZXNzaWJsZSIsImxvZ1JvbGVzIiwicHJldHR5Um9sZXMiLCJfYXJpYVF1ZXJ5IiwicmVxdWlyZSIsIl9kb21BY2Nlc3NpYmlsaXR5QXBpIiwiX3ByZXR0eURvbSIsIl9jb25maWciLCJlbGVtZW50Um9sZUxpc3QiLCJidWlsZEVsZW1lbnRSb2xlTGlzdCIsImVsZW1lbnRSb2xlcyIsImVsZW1lbnQiLCJoaWRkZW4iLCJnZXRBdHRyaWJ1dGUiLCJ3aW5kb3ciLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJnZXRDb21wdXRlZFN0eWxlIiwiZGlzcGxheSIsIm9wdGlvbnMiLCJpc1N1YnRyZWVJbmFjY2Vzc2libGVJbXBsIiwidmlzaWJpbGl0eSIsImN1cnJlbnRFbGVtZW50IiwicGFyZW50RWxlbWVudCIsImN1cnJlbnROb2RlIiwibWF0Y2giLCJyb2xlcyIsImVsZW1lbnRSb2xlc01hcCIsIm1ha2VFbGVtZW50U2VsZWN0b3IiLCJuYW1lIiwiYXR0cmlidXRlcyIsIm1hcCIsImF0dHJpYnV0ZU5hbWUiLCJjb25zdHJhaW50cyIsInNob3VsZE5vdEV4aXN0IiwiaW5kZXhPZiIsImpvaW4iLCJnZXRTZWxlY3RvclNwZWNpZmljaXR5IiwibGVuZ3RoIiwiYnlTZWxlY3RvclNwZWNpZmljaXR5Iiwic3BlY2lmaWNpdHkiLCJsZWZ0U3BlY2lmaWNpdHkiLCJyaWdodFNwZWNpZmljaXR5IiwidHlwZVRleHRJbmRleCIsImZpbmRJbmRleCIsImF0dHJpYnV0ZSIsInNsaWNlIiwic2VsZWN0b3IiLCJub2RlIiwidHlwZSIsIm1hdGNoZXMiLCJyZXN1bHQiLCJlbnRyaWVzIiwiQXJyYXkiLCJmcm9tIiwic29ydCIsImNvbnRhaW5lciIsImZsYXR0ZW5ET00iLCJjaGlsZHJlbiIsInJlZHVjZSIsImFjYyIsImNoaWxkIiwiZmlsdGVyIiwiaGFzQXR0cmlidXRlIiwic3BsaXQiLCJyb2xlc0FjYyIsInJvbGUiLCJpc0FycmF5IiwiZG9tIiwiaW5jbHVkZURlc2NyaXB0aW9uIiwiZWxlbWVudHMiLCJkZWxpbWl0ZXJCYXIiLCJyZXBlYXQiLCJlbGVtZW50c1N0cmluZyIsImVsIiwibmFtZVN0cmluZyIsImNvbXB1dGVBY2Nlc3NpYmxlTmFtZSIsImNvbXB1dGVkU3R5bGVTdXBwb3J0c1BzZXVkb0VsZW1lbnRzIiwiZ2V0Q29uZmlnIiwiZG9tU3RyaW5nIiwicHJldHR5RE9NIiwiY2xvbmVOb2RlIiwiZGVzY3JpcHRpb25TdHJpbmciLCJjb21wdXRlQWNjZXNzaWJsZURlc2NyaXB0aW9uIiwiY29uc29sZSIsImxvZyIsInRhZ05hbWUiLCJzZWxlY3RlZCIsImNoZWNrQm9vbGVhbkF0dHJpYnV0ZSIsImluZGV0ZXJtaW5hdGUiLCJ1bmRlZmluZWQiLCJjaGVja2VkIiwiYXR0cmlidXRlVmFsdWUiLCJpbXBsaWNpdEhlYWRpbmdMZXZlbHMiLCJIMSIsIkgyIiwiSDMiLCJINCIsIkg1IiwiSDYiLCJhcmlhTGV2ZWxBdHRyaWJ1dGUiLCJOdW1iZXIiXSwic291cmNlcyI6WyJyb2xlLWhlbHBlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNvbXB1dGVBcmlhQ2hlY2tlZCA9IGNvbXB1dGVBcmlhQ2hlY2tlZDtcbmV4cG9ydHMuY29tcHV0ZUFyaWFDdXJyZW50ID0gY29tcHV0ZUFyaWFDdXJyZW50O1xuZXhwb3J0cy5jb21wdXRlQXJpYUV4cGFuZGVkID0gY29tcHV0ZUFyaWFFeHBhbmRlZDtcbmV4cG9ydHMuY29tcHV0ZUFyaWFQcmVzc2VkID0gY29tcHV0ZUFyaWFQcmVzc2VkO1xuZXhwb3J0cy5jb21wdXRlQXJpYVNlbGVjdGVkID0gY29tcHV0ZUFyaWFTZWxlY3RlZDtcbmV4cG9ydHMuY29tcHV0ZUhlYWRpbmdMZXZlbCA9IGNvbXB1dGVIZWFkaW5nTGV2ZWw7XG5leHBvcnRzLmdldEltcGxpY2l0QXJpYVJvbGVzID0gZ2V0SW1wbGljaXRBcmlhUm9sZXM7XG5leHBvcnRzLmdldFJvbGVzID0gZ2V0Um9sZXM7XG5leHBvcnRzLmlzSW5hY2Nlc3NpYmxlID0gaXNJbmFjY2Vzc2libGU7XG5leHBvcnRzLmlzU3VidHJlZUluYWNjZXNzaWJsZSA9IGlzU3VidHJlZUluYWNjZXNzaWJsZTtcbmV4cG9ydHMubG9nUm9sZXMgPSB2b2lkIDA7XG5leHBvcnRzLnByZXR0eVJvbGVzID0gcHJldHR5Um9sZXM7XG52YXIgX2FyaWFRdWVyeSA9IHJlcXVpcmUoXCJhcmlhLXF1ZXJ5XCIpO1xudmFyIF9kb21BY2Nlc3NpYmlsaXR5QXBpID0gcmVxdWlyZShcImRvbS1hY2Nlc3NpYmlsaXR5LWFwaVwiKTtcbnZhciBfcHJldHR5RG9tID0gcmVxdWlyZShcIi4vcHJldHR5LWRvbVwiKTtcbnZhciBfY29uZmlnID0gcmVxdWlyZShcIi4vY29uZmlnXCIpO1xuY29uc3QgZWxlbWVudFJvbGVMaXN0ID0gYnVpbGRFbGVtZW50Um9sZUxpc3QoX2FyaWFRdWVyeS5lbGVtZW50Um9sZXMpO1xuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBgdHJ1ZWAgaWYgYGVsZW1lbnRgIGFuZCBpdHMgc3VidHJlZSBhcmUgaW5hY2Nlc3NpYmxlXG4gKi9cbmZ1bmN0aW9uIGlzU3VidHJlZUluYWNjZXNzaWJsZShlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LmhpZGRlbiA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKSA9PT0gJ3RydWUnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3Qgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFBhcnRpYWwgaW1wbGVtZW50YXRpb24gaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMi8jdHJlZV9leGNsdXNpb25cbiAqIHdoaWNoIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIGVsZW1lbnRzIHdpdGggYSBub24tcHJlc2VudGF0aW9uYWwgcm9sZSBpLmUuXG4gKiBgcm9sZT1cIm5vbmVcImAgYW5kIGByb2xlPVwicHJlc2VudGF0aW9uXCJgIHdpbGwgbm90IGJlIGV4Y2x1ZGVkLlxuICpcbiAqIEltcGxlbWVudHMgYXJpYS1oaWRkZW4gc2VtYW50aWNzIChpLmUuIHBhcmVudCBvdmVycmlkZXMgY2hpbGQpXG4gKiBJZ25vcmVzIFwiQ2hpbGQgUHJlc2VudGF0aW9uYWw6IFRydWVcIiBjaGFyYWN0ZXJpc3RpY3NcbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtXG4gKiBAcGFyYW0ge2Z1bmN0aW9uIChlbGVtZW50OiBFbGVtZW50KTogYm9vbGVhbn0gb3B0aW9ucy5pc1N1YnRyZWVJbmFjY2Vzc2libGUgLVxuICogY2FuIGJlIHVzZWQgdG8gcmV0dXJuIGNhY2hlZCByZXN1bHRzIGZyb20gcHJldmlvdXMgaXNTdWJ0cmVlSW5hY2Nlc3NpYmxlIGNhbGxzXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBleGNsdWRlZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzSW5hY2Nlc3NpYmxlKGVsZW1lbnQsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgaXNTdWJ0cmVlSW5hY2Nlc3NpYmxlOiBpc1N1YnRyZWVJbmFjY2Vzc2libGVJbXBsID0gaXNTdWJ0cmVlSW5hY2Nlc3NpYmxlXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCB3aW5kb3cgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIC8vIHNpbmNlIHZpc2liaWxpdHkgaXMgaW5oZXJpdGVkIHdlIGNhbiBleGl0IGVhcmx5XG4gIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS52aXNpYmlsaXR5ID09PSAnaGlkZGVuJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGxldCBjdXJyZW50RWxlbWVudCA9IGVsZW1lbnQ7XG4gIHdoaWxlIChjdXJyZW50RWxlbWVudCkge1xuICAgIGlmIChpc1N1YnRyZWVJbmFjY2Vzc2libGVJbXBsKGN1cnJlbnRFbGVtZW50KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGN1cnJlbnRFbGVtZW50ID0gY3VycmVudEVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBnZXRJbXBsaWNpdEFyaWFSb2xlcyhjdXJyZW50Tm9kZSkge1xuICAvLyBlc2xpbnQgYnVnIGhlcmU6XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBmb3IgKGNvbnN0IHtcbiAgICBtYXRjaCxcbiAgICByb2xlc1xuICB9IG9mIGVsZW1lbnRSb2xlTGlzdCkge1xuICAgIGlmIChtYXRjaChjdXJyZW50Tm9kZSkpIHtcbiAgICAgIHJldHVybiBbLi4ucm9sZXNdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gW107XG59XG5mdW5jdGlvbiBidWlsZEVsZW1lbnRSb2xlTGlzdChlbGVtZW50Um9sZXNNYXApIHtcbiAgZnVuY3Rpb24gbWFrZUVsZW1lbnRTZWxlY3Rvcih7XG4gICAgbmFtZSxcbiAgICBhdHRyaWJ1dGVzXG4gIH0pIHtcbiAgICByZXR1cm4gYCR7bmFtZX0ke2F0dHJpYnV0ZXMubWFwKCh7XG4gICAgICBuYW1lOiBhdHRyaWJ1dGVOYW1lLFxuICAgICAgdmFsdWUsXG4gICAgICBjb25zdHJhaW50cyA9IFtdXG4gICAgfSkgPT4ge1xuICAgICAgY29uc3Qgc2hvdWxkTm90RXhpc3QgPSBjb25zdHJhaW50cy5pbmRleE9mKCd1bmRlZmluZWQnKSAhPT0gLTE7XG4gICAgICBpZiAoc2hvdWxkTm90RXhpc3QpIHtcbiAgICAgICAgcmV0dXJuIGA6bm90KFske2F0dHJpYnV0ZU5hbWV9XSlgO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYFske2F0dHJpYnV0ZU5hbWV9PVwiJHt2YWx1ZX1cIl1gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGBbJHthdHRyaWJ1dGVOYW1lfV1gO1xuICAgICAgfVxuICAgIH0pLmpvaW4oJycpfWA7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0U2VsZWN0b3JTcGVjaWZpY2l0eSh7XG4gICAgYXR0cmlidXRlcyA9IFtdXG4gIH0pIHtcbiAgICByZXR1cm4gYXR0cmlidXRlcy5sZW5ndGg7XG4gIH1cbiAgZnVuY3Rpb24gYnlTZWxlY3RvclNwZWNpZmljaXR5KHtcbiAgICBzcGVjaWZpY2l0eTogbGVmdFNwZWNpZmljaXR5XG4gIH0sIHtcbiAgICBzcGVjaWZpY2l0eTogcmlnaHRTcGVjaWZpY2l0eVxuICB9KSB7XG4gICAgcmV0dXJuIHJpZ2h0U3BlY2lmaWNpdHkgLSBsZWZ0U3BlY2lmaWNpdHk7XG4gIH1cbiAgZnVuY3Rpb24gbWF0Y2goZWxlbWVudCkge1xuICAgIGxldCB7XG4gICAgICBhdHRyaWJ1dGVzID0gW11cbiAgICB9ID0gZWxlbWVudDtcblxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90ZXN0aW5nLWxpYnJhcnkvZG9tLXRlc3RpbmctbGlicmFyeS9pc3N1ZXMvODE0XG4gICAgY29uc3QgdHlwZVRleHRJbmRleCA9IGF0dHJpYnV0ZXMuZmluZEluZGV4KGF0dHJpYnV0ZSA9PiBhdHRyaWJ1dGUudmFsdWUgJiYgYXR0cmlidXRlLm5hbWUgPT09ICd0eXBlJyAmJiBhdHRyaWJ1dGUudmFsdWUgPT09ICd0ZXh0Jyk7XG4gICAgaWYgKHR5cGVUZXh0SW5kZXggPj0gMCkge1xuICAgICAgLy8gbm90IHVzaW5nIHNwbGljZSB0byBub3QgbXV0YXRlIHRoZSBhdHRyaWJ1dGVzIGFycmF5XG4gICAgICBhdHRyaWJ1dGVzID0gWy4uLmF0dHJpYnV0ZXMuc2xpY2UoMCwgdHlwZVRleHRJbmRleCksIC4uLmF0dHJpYnV0ZXMuc2xpY2UodHlwZVRleHRJbmRleCArIDEpXTtcbiAgICB9XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBtYWtlRWxlbWVudFNlbGVjdG9yKHtcbiAgICAgIC4uLmVsZW1lbnQsXG4gICAgICBhdHRyaWJ1dGVzXG4gICAgfSk7XG4gICAgcmV0dXJuIG5vZGUgPT4ge1xuICAgICAgaWYgKHR5cGVUZXh0SW5kZXggPj0gMCAmJiBub2RlLnR5cGUgIT09ICd0ZXh0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm9kZS5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgICB9O1xuICB9XG4gIGxldCByZXN1bHQgPSBbXTtcblxuICAvLyBlc2xpbnQgYnVnIGhlcmU6XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBmb3IgKGNvbnN0IFtlbGVtZW50LCByb2xlc10gb2YgZWxlbWVudFJvbGVzTWFwLmVudHJpZXMoKSkge1xuICAgIHJlc3VsdCA9IFsuLi5yZXN1bHQsIHtcbiAgICAgIG1hdGNoOiBtYXRjaChlbGVtZW50KSxcbiAgICAgIHJvbGVzOiBBcnJheS5mcm9tKHJvbGVzKSxcbiAgICAgIHNwZWNpZmljaXR5OiBnZXRTZWxlY3RvclNwZWNpZmljaXR5KGVsZW1lbnQpXG4gICAgfV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdC5zb3J0KGJ5U2VsZWN0b3JTcGVjaWZpY2l0eSk7XG59XG5mdW5jdGlvbiBnZXRSb2xlcyhjb250YWluZXIsIHtcbiAgaGlkZGVuID0gZmFsc2Vcbn0gPSB7fSkge1xuICBmdW5jdGlvbiBmbGF0dGVuRE9NKG5vZGUpIHtcbiAgICByZXR1cm4gW25vZGUsIC4uLkFycmF5LmZyb20obm9kZS5jaGlsZHJlbikucmVkdWNlKChhY2MsIGNoaWxkKSA9PiBbLi4uYWNjLCAuLi5mbGF0dGVuRE9NKGNoaWxkKV0sIFtdKV07XG4gIH1cbiAgcmV0dXJuIGZsYXR0ZW5ET00oY29udGFpbmVyKS5maWx0ZXIoZWxlbWVudCA9PiB7XG4gICAgcmV0dXJuIGhpZGRlbiA9PT0gZmFsc2UgPyBpc0luYWNjZXNzaWJsZShlbGVtZW50KSA9PT0gZmFsc2UgOiB0cnVlO1xuICB9KS5yZWR1Y2UoKGFjYywgbm9kZSkgPT4ge1xuICAgIGxldCByb2xlcyA9IFtdO1xuICAgIC8vIFRPRE86IFRoaXMgdmlvbGF0ZXMgaHRtbC1hcmlhIHdoaWNoIGRvZXMgbm90IGFsbG93IGFueSByb2xlIG9uIGV2ZXJ5IGVsZW1lbnRcbiAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoJ3JvbGUnKSkge1xuICAgICAgcm9sZXMgPSBub2RlLmdldEF0dHJpYnV0ZSgncm9sZScpLnNwbGl0KCcgJykuc2xpY2UoMCwgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvbGVzID0gZ2V0SW1wbGljaXRBcmlhUm9sZXMobm9kZSk7XG4gICAgfVxuICAgIHJldHVybiByb2xlcy5yZWR1Y2UoKHJvbGVzQWNjLCByb2xlKSA9PiBBcnJheS5pc0FycmF5KHJvbGVzQWNjW3JvbGVdKSA/IHtcbiAgICAgIC4uLnJvbGVzQWNjLFxuICAgICAgW3JvbGVdOiBbLi4ucm9sZXNBY2Nbcm9sZV0sIG5vZGVdXG4gICAgfSA6IHtcbiAgICAgIC4uLnJvbGVzQWNjLFxuICAgICAgW3JvbGVdOiBbbm9kZV1cbiAgICB9LCBhY2MpO1xuICB9LCB7fSk7XG59XG5mdW5jdGlvbiBwcmV0dHlSb2xlcyhkb20sIHtcbiAgaGlkZGVuLFxuICBpbmNsdWRlRGVzY3JpcHRpb25cbn0pIHtcbiAgY29uc3Qgcm9sZXMgPSBnZXRSb2xlcyhkb20sIHtcbiAgICBoaWRkZW5cbiAgfSk7XG4gIC8vIFdlIHByZWZlciB0byBza2lwIGdlbmVyaWMgcm9sZSwgd2UgZG9uJ3QgcmVjb21tZW5kIGl0XG4gIHJldHVybiBPYmplY3QuZW50cmllcyhyb2xlcykuZmlsdGVyKChbcm9sZV0pID0+IHJvbGUgIT09ICdnZW5lcmljJykubWFwKChbcm9sZSwgZWxlbWVudHNdKSA9PiB7XG4gICAgY29uc3QgZGVsaW1pdGVyQmFyID0gJy0nLnJlcGVhdCg1MCk7XG4gICAgY29uc3QgZWxlbWVudHNTdHJpbmcgPSBlbGVtZW50cy5tYXAoZWwgPT4ge1xuICAgICAgY29uc3QgbmFtZVN0cmluZyA9IGBOYW1lIFwiJHsoMCwgX2RvbUFjY2Vzc2liaWxpdHlBcGkuY29tcHV0ZUFjY2Vzc2libGVOYW1lKShlbCwge1xuICAgICAgICBjb21wdXRlZFN0eWxlU3VwcG9ydHNQc2V1ZG9FbGVtZW50czogKDAsIF9jb25maWcuZ2V0Q29uZmlnKSgpLmNvbXB1dGVkU3R5bGVTdXBwb3J0c1BzZXVkb0VsZW1lbnRzXG4gICAgICB9KX1cIjpcXG5gO1xuICAgICAgY29uc3QgZG9tU3RyaW5nID0gKDAsIF9wcmV0dHlEb20ucHJldHR5RE9NKShlbC5jbG9uZU5vZGUoZmFsc2UpKTtcbiAgICAgIGlmIChpbmNsdWRlRGVzY3JpcHRpb24pIHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb25TdHJpbmcgPSBgRGVzY3JpcHRpb24gXCIkeygwLCBfZG9tQWNjZXNzaWJpbGl0eUFwaS5jb21wdXRlQWNjZXNzaWJsZURlc2NyaXB0aW9uKShlbCwge1xuICAgICAgICAgIGNvbXB1dGVkU3R5bGVTdXBwb3J0c1BzZXVkb0VsZW1lbnRzOiAoMCwgX2NvbmZpZy5nZXRDb25maWcpKCkuY29tcHV0ZWRTdHlsZVN1cHBvcnRzUHNldWRvRWxlbWVudHNcbiAgICAgICAgfSl9XCI6XFxuYDtcbiAgICAgICAgcmV0dXJuIGAke25hbWVTdHJpbmd9JHtkZXNjcmlwdGlvblN0cmluZ30ke2RvbVN0cmluZ31gO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGAke25hbWVTdHJpbmd9JHtkb21TdHJpbmd9YDtcbiAgICB9KS5qb2luKCdcXG5cXG4nKTtcbiAgICByZXR1cm4gYCR7cm9sZX06XFxuXFxuJHtlbGVtZW50c1N0cmluZ31cXG5cXG4ke2RlbGltaXRlckJhcn1gO1xuICB9KS5qb2luKCdcXG4nKTtcbn1cbmNvbnN0IGxvZ1JvbGVzID0gKGRvbSwge1xuICBoaWRkZW4gPSBmYWxzZVxufSA9IHt9KSA9PiBjb25zb2xlLmxvZyhwcmV0dHlSb2xlcyhkb20sIHtcbiAgaGlkZGVuXG59KSk7XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC1cbiAqIEByZXR1cm5zIHtib29sZWFuIHwgdW5kZWZpbmVkfSAtIGZhbHNlL3RydWUgaWYgKG5vdClzZWxlY3RlZCwgdW5kZWZpbmVkIGlmIG5vdCBzZWxlY3RhYmxlXG4gKi9cbmV4cG9ydHMubG9nUm9sZXMgPSBsb2dSb2xlcztcbmZ1bmN0aW9uIGNvbXB1dGVBcmlhU2VsZWN0ZWQoZWxlbWVudCkge1xuICAvLyBpbXBsaWNpdCB2YWx1ZSBmcm9tIGh0bWwtYWFtIG1hcHBpbmdzOiBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbC1hYW0tMS4wLyNodG1sLWF0dHJpYnV0ZS1zdGF0ZS1hbmQtcHJvcGVydHktbWFwcGluZ3NcbiAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWwtYWFtLTEuMC8jZGV0YWlscy1pZC05N1xuICBpZiAoZWxlbWVudC50YWdOYW1lID09PSAnT1BUSU9OJykge1xuICAgIHJldHVybiBlbGVtZW50LnNlbGVjdGVkO1xuICB9XG5cbiAgLy8gZXhwbGljaXQgdmFsdWVcbiAgcmV0dXJuIGNoZWNrQm9vbGVhbkF0dHJpYnV0ZShlbGVtZW50LCAnYXJpYS1zZWxlY3RlZCcpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtXG4gKiBAcmV0dXJucyB7Ym9vbGVhbiB8IHVuZGVmaW5lZH0gLSBmYWxzZS90cnVlIGlmIChub3QpY2hlY2tlZCwgdW5kZWZpbmVkIGlmIG5vdCBjaGVja2VkLWFibGVcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUFyaWFDaGVja2VkKGVsZW1lbnQpIHtcbiAgLy8gaW1wbGljaXQgdmFsdWUgZnJvbSBodG1sLWFhbSBtYXBwaW5nczogaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWwtYWFtLTEuMC8jaHRtbC1hdHRyaWJ1dGUtc3RhdGUtYW5kLXByb3BlcnR5LW1hcHBpbmdzXG4gIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sLWFhbS0xLjAvI2RldGFpbHMtaWQtNTZcbiAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWwtYWFtLTEuMC8jZGV0YWlscy1pZC02N1xuICBpZiAoJ2luZGV0ZXJtaW5hdGUnIGluIGVsZW1lbnQgJiYgZWxlbWVudC5pbmRldGVybWluYXRlKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoJ2NoZWNrZWQnIGluIGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5jaGVja2VkO1xuICB9XG5cbiAgLy8gZXhwbGljaXQgdmFsdWVcbiAgcmV0dXJuIGNoZWNrQm9vbGVhbkF0dHJpYnV0ZShlbGVtZW50LCAnYXJpYS1jaGVja2VkJyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC1cbiAqIEByZXR1cm5zIHtib29sZWFuIHwgdW5kZWZpbmVkfSAtIGZhbHNlL3RydWUgaWYgKG5vdClwcmVzc2VkLCB1bmRlZmluZWQgaWYgbm90IHByZXNzLWFibGVcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUFyaWFQcmVzc2VkKGVsZW1lbnQpIHtcbiAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1wcmVzc2VkXG4gIHJldHVybiBjaGVja0Jvb2xlYW5BdHRyaWJ1dGUoZWxlbWVudCwgJ2FyaWEtcHJlc3NlZCcpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtXG4gKiBAcmV0dXJucyB7Ym9vbGVhbiB8IHN0cmluZyB8IG51bGx9IC1cbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUFyaWFDdXJyZW50KGVsZW1lbnQpIHtcbiAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMS8jYXJpYS1jdXJyZW50XG4gIHJldHVybiBjaGVja0Jvb2xlYW5BdHRyaWJ1dGUoZWxlbWVudCwgJ2FyaWEtY3VycmVudCcpID8/IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWN1cnJlbnQnKSA/PyBmYWxzZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLVxuICogQHJldHVybnMge2Jvb2xlYW4gfCB1bmRlZmluZWR9IC0gZmFsc2UvdHJ1ZSBpZiAobm90KWV4cGFuZGVkLCB1bmRlZmluZWQgaWYgbm90IGV4cGFuZC1hYmxlXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVBcmlhRXhwYW5kZWQoZWxlbWVudCkge1xuICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4xLyNhcmlhLWV4cGFuZGVkXG4gIHJldHVybiBjaGVja0Jvb2xlYW5BdHRyaWJ1dGUoZWxlbWVudCwgJ2FyaWEtZXhwYW5kZWQnKTtcbn1cbmZ1bmN0aW9uIGNoZWNrQm9vbGVhbkF0dHJpYnV0ZShlbGVtZW50LCBhdHRyaWJ1dGUpIHtcbiAgY29uc3QgYXR0cmlidXRlVmFsdWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICBpZiAoYXR0cmlidXRlVmFsdWUgPT09ICd0cnVlJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChhdHRyaWJ1dGVWYWx1ZSA9PT0gJ2ZhbHNlJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtXG4gKiBAcmV0dXJucyB7bnVtYmVyIHwgdW5kZWZpbmVkfSAtIG51bWJlciBpZiBpbXBsaWNpdCBoZWFkaW5nIG9yIGFyaWEtbGV2ZWwgcHJlc2VudCwgb3RoZXJ3aXNlIHVuZGVmaW5lZFxuICovXG5mdW5jdGlvbiBjb21wdXRlSGVhZGluZ0xldmVsKGVsZW1lbnQpIHtcbiAgLy8gaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2h0bWwtYWFtLyNlbC1oMS1oNlxuICAvLyBodHRwczovL3czYy5naXRodWIuaW8vaHRtbC1hYW0vI2VsLWgxLWg2XG4gIGNvbnN0IGltcGxpY2l0SGVhZGluZ0xldmVscyA9IHtcbiAgICBIMTogMSxcbiAgICBIMjogMixcbiAgICBIMzogMyxcbiAgICBINDogNCxcbiAgICBINTogNSxcbiAgICBINjogNlxuICB9O1xuICAvLyBleHBsaWNpdCBhcmlhLWxldmVsIHZhbHVlXG4gIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjIvI2FyaWEtbGV2ZWxcbiAgY29uc3QgYXJpYUxldmVsQXR0cmlidXRlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGV2ZWwnKSAmJiBOdW1iZXIoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGV2ZWwnKSk7XG4gIHJldHVybiBhcmlhTGV2ZWxBdHRyaWJ1dGUgfHwgaW1wbGljaXRIZWFkaW5nTGV2ZWxzW2VsZW1lbnQudGFnTmFtZV07XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0Usa0JBQWtCLEdBQUdBLGtCQUFrQjtBQUMvQ0YsT0FBTyxDQUFD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