1beae011535f00cd594b1df69376058c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = extendSxProp;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _utils = require("@mui/utils");
var _defaultSxConfig = _interopRequireDefault(require("./defaultSxConfig"));
const _excluded = ["sx"];
const splitProps = props => {
  var _props$theme$unstable, _props$theme;
  const result = {
    systemProps: {},
    otherProps: {}
  };
  const config = (_props$theme$unstable = props == null ? void 0 : (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : _defaultSxConfig.default;
  Object.keys(props).forEach(prop => {
    if (config[prop]) {
      result.systemProps[prop] = props[prop];
    } else {
      result.otherProps[prop] = props[prop];
    }
  });
  return result;
};
function extendSxProp(props) {
  const {
      sx: inSx
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const {
    systemProps,
    otherProps
  } = splitProps(other);
  let finalSx;
  if (Array.isArray(inSx)) {
    finalSx = [systemProps, ...inSx];
  } else if (typeof inSx === 'function') {
    finalSx = (...args) => {
      const result = inSx(...args);
      if (!(0, _utils.isPlainObject)(result)) {
        return systemProps;
      }
      return (0, _extends2.default)({}, systemProps, result);
    };
  } else {
    finalSx = (0, _extends2.default)({}, systemProps, inSx);
  }
  return (0, _extends2.default)({}, otherProps, {
    sx: finalSx
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImV4dGVuZFN4UHJvcCIsIl9leHRlbmRzMiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiIsIl91dGlscyIsIl9kZWZhdWx0U3hDb25maWciLCJfZXhjbHVkZWQiLCJzcGxpdFByb3BzIiwicHJvcHMiLCJfcHJvcHMkdGhlbWUkdW5zdGFibGUiLCJfcHJvcHMkdGhlbWUiLCJyZXN1bHQiLCJzeXN0ZW1Qcm9wcyIsIm90aGVyUHJvcHMiLCJjb25maWciLCJ0aGVtZSIsInVuc3RhYmxlX3N4Q29uZmlnIiwia2V5cyIsImZvckVhY2giLCJwcm9wIiwic3giLCJpblN4Iiwib3RoZXIiLCJmaW5hbFN4IiwiQXJyYXkiLCJpc0FycmF5IiwiYXJncyIsImlzUGxhaW5PYmplY3QiXSwic291cmNlcyI6WyJleHRlbmRTeFByb3AuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4dGVuZFN4UHJvcDtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtdWkvdXRpbHNcIik7XG52YXIgX2RlZmF1bHRTeENvbmZpZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZGVmYXVsdFN4Q29uZmlnXCIpKTtcbmNvbnN0IF9leGNsdWRlZCA9IFtcInN4XCJdO1xuY29uc3Qgc3BsaXRQcm9wcyA9IHByb3BzID0+IHtcbiAgdmFyIF9wcm9wcyR0aGVtZSR1bnN0YWJsZSwgX3Byb3BzJHRoZW1lO1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgc3lzdGVtUHJvcHM6IHt9LFxuICAgIG90aGVyUHJvcHM6IHt9XG4gIH07XG4gIGNvbnN0IGNvbmZpZyA9IChfcHJvcHMkdGhlbWUkdW5zdGFibGUgPSBwcm9wcyA9PSBudWxsID8gdm9pZCAwIDogKF9wcm9wcyR0aGVtZSA9IHByb3BzLnRoZW1lKSA9PSBudWxsID8gdm9pZCAwIDogX3Byb3BzJHRoZW1lLnVuc3RhYmxlX3N4Q29uZmlnKSAhPSBudWxsID8gX3Byb3BzJHRoZW1lJHVuc3RhYmxlIDogX2RlZmF1bHRTeENvbmZpZy5kZWZhdWx0O1xuICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaChwcm9wID0+IHtcbiAgICBpZiAoY29uZmlnW3Byb3BdKSB7XG4gICAgICByZXN1bHQuc3lzdGVtUHJvcHNbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0Lm90aGVyUHJvcHNbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbmZ1bmN0aW9uIGV4dGVuZFN4UHJvcChwcm9wcykge1xuICBjb25zdCB7XG4gICAgICBzeDogaW5TeFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHtcbiAgICBzeXN0ZW1Qcm9wcyxcbiAgICBvdGhlclByb3BzXG4gIH0gPSBzcGxpdFByb3BzKG90aGVyKTtcbiAgbGV0IGZpbmFsU3g7XG4gIGlmIChBcnJheS5pc0FycmF5KGluU3gpKSB7XG4gICAgZmluYWxTeCA9IFtzeXN0ZW1Qcm9wcywgLi4uaW5TeF07XG4gIH0gZWxzZSBpZiAodHlwZW9mIGluU3ggPT09ICdmdW5jdGlvbicpIHtcbiAgICBmaW5hbFN4ID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGluU3goLi4uYXJncyk7XG4gICAgICBpZiAoISgwLCBfdXRpbHMuaXNQbGFpbk9iamVjdCkocmVzdWx0KSkge1xuICAgICAgICByZXR1cm4gc3lzdGVtUHJvcHM7XG4gICAgICB9XG4gICAgICByZXR1cm4gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgc3lzdGVtUHJvcHMsIHJlc3VsdCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBmaW5hbFN4ID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgc3lzdGVtUHJvcHMsIGluU3gpO1xuICB9XG4gIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBvdGhlclByb3BzLCB7XG4gICAgc3g6IGZpbmFsU3hcbiAgfSk7XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLHNCQUFzQixHQUFHQyxPQUFPLENBQUMsOENBQThDLENBQUM7QUFDcEZDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxPQUFPLEdBQUdDLFlBQVk7QUFDOUIsSUFBSUMsU0FBUyxHQUFHUixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDakYsSUFBSVEsOEJBQThCLEdBQUdULHNCQUFzQixDQUFDQyxPQUFPLENBQUMscURBQXFELENBQUMsQ0FBQztBQUMzSCxJQUFJUyxNQUFNLEdBQUdULE9BQU8sQ0FBQyxZ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