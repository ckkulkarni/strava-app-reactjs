ef1f627ce2a62af699a3582ee9771a7a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _utils = require("@mui/utils");
var _FormControlUnstyledContext = _interopRequireDefault(require("./FormControlUnstyledContext"));
var _formControlUnstyledClasses = require("./formControlUnstyledClasses");
var _utils2 = require("../utils");
var _composeClasses = _interopRequireDefault(require("../composeClasses"));
var _ClassNameConfigurator = require("../utils/ClassNameConfigurator");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["defaultValue", "children", "component", "disabled", "error", "onChange", "required", "slotProps", "slots", "value"];
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function hasValue(value) {
  return value != null && !(Array.isArray(value) && value.length === 0) && value !== '';
}
function useUtilityClasses(ownerState) {
  const {
    disabled,
    error,
    filled,
    focused,
    required
  } = ownerState;
  const slots = {
    root: ['root', disabled && 'disabled', focused && 'focused', error && 'error', filled && 'filled', required && 'required']
  };
  return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_formControlUnstyledClasses.getFormControlUnstyledUtilityClass));
}

/**
 * Provides context such as filled/focused/error/required for form inputs.
 * Relying on the context provides high flexibility and ensures that the state always stays
 * consistent across the children of the `FormControl`.
 * This context is used by the following components:
 *
 * *   FormLabel
 * *   FormHelperText
 * *   Input
 * *   InputLabel
 *
 * You can find one composition example below and more going to [the demos](https://mui.com/material-ui/react-text-field/#components).
 *
 * ```jsx
 * <FormControl>
 *   <InputLabel htmlFor="my-input">Email address</InputLabel>
 *   <Input id="my-input" aria-describedby="my-helper-text" />
 *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
 * </FormControl>
 * ```
 *
 * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.
 * For instance, only one input can be focused at the same time, the state shouldn't be shared.
 *
 * Demos:
 *
 * - [Unstyled Form Control](https://mui.com/base/react-form-control/)
 *
 * API:
 *
 * - [FormControlUnstyled API](https://mui.com/base/api/form-control-unstyled/)
 */
const FormControlUnstyled = /*#__PURE__*/React.forwardRef(function FormControlUnstyled(props, ref) {
  var _ref;
  const {
      defaultValue,
      children,
      component,
      disabled = false,
      error = false,
      onChange,
      required = false,
      slotProps = {},
      slots = {},
      value: incomingValue
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const [value, setValue] = (0, _utils.unstable_useControlled)({
    controlled: incomingValue,
    default: defaultValue,
    name: 'FormControl',
    state: 'value'
  });
  const filled = hasValue(value);
  const [focusedState, setFocused] = React.useState(false);
  const focused = focusedState && !disabled;
  React.useEffect(() => setFocused(isFocused => disabled ? false : isFocused), [disabled]);
  const ownerState = (0, _extends2.default)({}, props, {
    disabled,
    error,
    filled,
    focused,
    required
  });
  const childContext = React.useMemo(() => {
    return {
      disabled,
      error,
      filled,
      focused,
      onBlur: () => {
        setFocused(false);
      },
      onChange: event => {
        setValue(event.target.value);
        onChange == null ? void 0 : onChange(event);
      },
      onFocus: () => {
        setFocused(true);
      },
      required,
      value: value != null ? value : ''
    };
  }, [disabled, error, filled, focused, onChange, required, setValue, value]);
  const classes = useUtilityClasses(ownerState);
  const renderChildren = () => {
    if (typeof children === 'function') {
      return children(childContext);
    }
    return children;
  };
  const Root = (_ref = component != null ? component : slots.root) != null ? _ref : 'div';
  const rootProps = (0, _utils2.useSlotProps)({
    elementType: Root,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      ref,
      children: renderChildren()
    },
    ownerState,
    className: classes.root
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_FormControlUnstyledContext.default.Provider, {
    value: childContext,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, (0, _extends2.default)({}, rootProps))
  });
});
process.env.NODE_ENV !== "production" ? FormControlUnstyled.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes.default.elementType,
  /**
   * @ignore
   */
  defaultValue: _propTypes.default.any,
  /**
   * If `true`, the label, input and helper text should be displayed in a disabled state.
   * @default false
   */
  disabled: _propTypes.default.bool,
  /**
   * If `true`, the label is displayed in an error state.
   * @default false
   */
  error: _propTypes.default.bool,
  /**
   * @ignore
   */
  onChange: _propTypes.default.func,
  /**
   * If `true`, the label will indicate that the `input` is required.
   * @default false
   */
  required: _propTypes.default.bool,
  /**
   * The props used for each slot inside the FormControl.
   * @default {}
   */
  slotProps: _propTypes.default.shape({
    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
  }),
  /**
   * The components used for each slot inside the FormControl.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: _propTypes.default.shape({
    root: _propTypes.default.elementType
  }),
  /**
   * @ignore
   */
  value: _propTypes.default.any
} : void 0;
var _default = FormControlUnstyled;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9leHRlbmRzMiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcHJvcFR5cGVzIiwiX3V0aWxzIiwiX0Zvcm1Db250cm9sVW5zdHlsZWRDb250ZXh0IiwiX2Zvcm1Db250cm9sVW5zdHlsZWRDbGFzc2VzIiwiX3V0aWxzMiIsIl9jb21wb3NlQ2xhc3NlcyIsIl9DbGFzc05hbWVDb25maWd1cmF0b3IiLCJfanN4UnVudGltZSIsIl9leGNsdWRlZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJoYXNWYWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsInVzZVV0aWxpdHlDbGFzc2VzIiwib3duZXJTdGF0ZSIsImRpc2FibGVkIiwiZXJyb3IiLCJmaWxsZWQiLCJmb2N1c2VkIiwicmVxdWlyZWQiLCJzbG90cyIsInJvb3QiLCJ1c2VDbGFzc05hbWVzT3ZlcnJpZGUiLCJnZXRGb3JtQ29udHJvbFVuc3R5bGVkVXRpbGl0eUNsYXNzIiwiRm9ybUNvbnRyb2xVbnN0eWxlZCIsImZvcndhcmRSZWYiLCJwcm9wcyIsInJlZiIsIl9yZWYiLCJkZWZhdWx0VmFsdWUiLCJjaGlsZHJlbiIsImNvbXBvbmVudCIsIm9uQ2hhbmdlIiwic2xvdFByb3BzIiwiaW5jb21pbmdWYWx1ZSIsIm90aGVyIiwic2V0VmFsdWUiLCJ1bnN0YWJsZV91c2VDb250cm9sbGVkIiwiY29udHJvbGxlZCIsIm5hbWUiLCJzdGF0ZSIsImZvY3VzZWRTdGF0ZSIsInNldEZvY3VzZWQiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsImlzRm9jdXNlZCIsImNoaWxkQ29udGV4dCIsInVzZU1lbW8iLCJvbkJsdXIiLCJldmVudCIsInRhcmdldCIsIm9uRm9jdXMiLCJjbGFzc2VzIiwicmVuZGVyQ2hpbGRyZW4iLCJSb290Iiwicm9vdFByb3BzIiwidXNlU2xvdFByb3BzIiwiZWxlbWVudFR5cGUiLCJleHRlcm5hbFNsb3RQcm9wcyIsImV4dGVybmFsRm9yd2FyZGVkUHJvcHMiLCJhZGRpdGlvbmFsUHJvcHMiLCJjbGFzc05hbWUiLCJqc3giLCJQcm92aWRlciIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsInByb3BUeXBlcyIsIm9uZU9mVHlwZSIsIm5vZGUiLCJmdW5jIiwiYW55IiwiYm9vbCIsInNoYXBlIiwib2JqZWN0IiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJGb3JtQ29udHJvbFVuc3R5bGVkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtdWkvdXRpbHNcIik7XG52YXIgX0Zvcm1Db250cm9sVW5zdHlsZWRDb250ZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Gb3JtQ29udHJvbFVuc3R5bGVkQ29udGV4dFwiKSk7XG52YXIgX2Zvcm1Db250cm9sVW5zdHlsZWRDbGFzc2VzID0gcmVxdWlyZShcIi4vZm9ybUNvbnRyb2xVbnN0eWxlZENsYXNzZXNcIik7XG52YXIgX3V0aWxzMiA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbnZhciBfY29tcG9zZUNsYXNzZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb21wb3NlQ2xhc3Nlc1wiKSk7XG52YXIgX0NsYXNzTmFtZUNvbmZpZ3VyYXRvciA9IHJlcXVpcmUoXCIuLi91dGlscy9DbGFzc05hbWVDb25maWd1cmF0b3JcIik7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJkZWZhdWx0VmFsdWVcIiwgXCJjaGlsZHJlblwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJvbkNoYW5nZVwiLCBcInJlcXVpcmVkXCIsIFwic2xvdFByb3BzXCIsIFwic2xvdHNcIiwgXCJ2YWx1ZVwiXTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZUJhYmVsSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAobm9kZUludGVyb3ApIHsgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wOyB9KShub2RlSW50ZXJvcCk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHsgaWYgKCFub2RlSW50ZXJvcCAmJiBvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuZnVuY3Rpb24gaGFzVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgIShBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApICYmIHZhbHVlICE9PSAnJztcbn1cbmZ1bmN0aW9uIHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpIHtcbiAgY29uc3Qge1xuICAgIGRpc2FibGVkLFxuICAgIGVycm9yLFxuICAgIGZpbGxlZCxcbiAgICBmb2N1c2VkLFxuICAgIHJlcXVpcmVkXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBmb2N1c2VkICYmICdmb2N1c2VkJywgZXJyb3IgJiYgJ2Vycm9yJywgZmlsbGVkICYmICdmaWxsZWQnLCByZXF1aXJlZCAmJiAncmVxdWlyZWQnXVxuICB9O1xuICByZXR1cm4gKDAsIF9jb21wb3NlQ2xhc3Nlcy5kZWZhdWx0KShzbG90cywgKDAsIF9DbGFzc05hbWVDb25maWd1cmF0b3IudXNlQ2xhc3NOYW1lc092ZXJyaWRlKShfZm9ybUNvbnRyb2xVbnN0eWxlZENsYXNzZXMuZ2V0Rm9ybUNvbnRyb2xVbnN0eWxlZFV0aWxpdHlDbGFzcykpO1xufVxuXG4vKipcbiAqIFByb3ZpZGVzIGNvbnRleHQgc3VjaCBhcyBmaWxsZWQvZm9jdXNlZC9lcnJvci9yZXF1aXJlZCBmb3IgZm9ybSBpbnB1dHMuXG4gKiBSZWx5aW5nIG9uIHRoZSBjb250ZXh0IHByb3ZpZGVzIGhpZ2ggZmxleGliaWxpdHkgYW5kIGVuc3VyZXMgdGhhdCB0aGUgc3RhdGUgYWx3YXlzIHN0YXlzXG4gKiBjb25zaXN0ZW50IGFjcm9zcyB0aGUgY2hpbGRyZW4gb2YgdGhlIGBGb3JtQ29udHJvbGAuXG4gKiBUaGlzIGNvbnRleHQgaXMgdXNlZCBieSB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHM6XG4gKlxuICogKiAgIEZvcm1MYWJlbFxuICogKiAgIEZvcm1IZWxwZXJUZXh0XG4gKiAqICAgSW5wdXRcbiAqICogICBJbnB1dExhYmVsXG4gKlxuICogWW91IGNhbiBmaW5kIG9uZSBjb21wb3NpdGlvbiBleGFtcGxlIGJlbG93IGFuZCBtb3JlIGdvaW5nIHRvIFt0aGUgZGVtb3NdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9yZWFjdC10ZXh0LWZpZWxkLyNjb21wb25lbnRzKS5cbiAqXG4gKiBgYGBqc3hcbiAqIDxGb3JtQ29udHJvbD5cbiAqICAgPElucHV0TGFiZWwgaHRtbEZvcj1cIm15LWlucHV0XCI+RW1haWwgYWRkcmVzczwvSW5wdXRMYWJlbD5cbiAqICAgPElucHV0IGlkPVwibXktaW5wdXRcIiBhcmlhLWRlc2NyaWJlZGJ5PVwibXktaGVscGVyLXRleHRcIiAvPlxuICogICA8Rm9ybUhlbHBlclRleHQgaWQ9XCJteS1oZWxwZXItdGV4dFwiPldlJ2xsIG5ldmVyIHNoYXJlIHlvdXIgZW1haWwuPC9Gb3JtSGVscGVyVGV4dD5cbiAqIDwvRm9ybUNvbnRyb2w+XG4gKiBgYGBcbiAqXG4gKiDimqDvuI8gT25seSBvbmUgYElucHV0YCBjYW4gYmUgdXNlZCB3aXRoaW4gYSBGb3JtQ29udHJvbCBiZWNhdXNlIGl0IGNyZWF0ZSB2aXN1YWwgaW5jb25zaXN0ZW5jaWVzLlxuICogRm9yIGluc3RhbmNlLCBvbmx5IG9uZSBpbnB1dCBjYW4gYmUgZm9jdXNlZCBhdCB0aGUgc2FtZSB0aW1lLCB0aGUgc3RhdGUgc2hvdWxkbid0IGJlIHNoYXJlZC5cbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtVbnN0eWxlZCBGb3JtIENvbnRyb2xdKGh0dHBzOi8vbXVpLmNvbS9iYXNlL3JlYWN0LWZvcm0tY29udHJvbC8pXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW0Zvcm1Db250cm9sVW5zdHlsZWQgQVBJXShodHRwczovL211aS5jb20vYmFzZS9hcGkvZm9ybS1jb250cm9sLXVuc3R5bGVkLylcbiAqL1xuY29uc3QgRm9ybUNvbnRyb2xVbnN0eWxlZCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZvcm1Db250cm9sVW5zdHlsZWQocHJvcHMsIHJlZikge1xuICB2YXIgX3JlZjtcbiAgY29uc3Qge1xuICAgICAgZGVmYXVsdFZhbHVlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjb21wb25lbnQsXG4gICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgZXJyb3IgPSBmYWxzZSxcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgcmVxdWlyZWQgPSBmYWxzZSxcbiAgICAgIHNsb3RQcm9wcyA9IHt9LFxuICAgICAgc2xvdHMgPSB7fSxcbiAgICAgIHZhbHVlOiBpbmNvbWluZ1ZhbHVlXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSAoMCwgX3V0aWxzLnVuc3RhYmxlX3VzZUNvbnRyb2xsZWQpKHtcbiAgICBjb250cm9sbGVkOiBpbmNvbWluZ1ZhbHVlLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRWYWx1ZSxcbiAgICBuYW1lOiAnRm9ybUNvbnRyb2wnLFxuICAgIHN0YXRlOiAndmFsdWUnXG4gIH0pO1xuICBjb25zdCBmaWxsZWQgPSBoYXNWYWx1ZSh2YWx1ZSk7XG4gIGNvbnN0IFtmb2N1c2VkU3RhdGUsIHNldEZvY3VzZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBmb2N1c2VkID0gZm9jdXNlZFN0YXRlICYmICFkaXNhYmxlZDtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHNldEZvY3VzZWQoaXNGb2N1c2VkID0+IGRpc2FibGVkID8gZmFsc2UgOiBpc0ZvY3VzZWQpLCBbZGlzYWJsZWRdKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgZGlzYWJsZWQsXG4gICAgZXJyb3IsXG4gICAgZmlsbGVkLFxuICAgIGZvY3VzZWQsXG4gICAgcmVxdWlyZWRcbiAgfSk7XG4gIGNvbnN0IGNoaWxkQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBkaXNhYmxlZCxcbiAgICAgIGVycm9yLFxuICAgICAgZmlsbGVkLFxuICAgICAgZm9jdXNlZCxcbiAgICAgIG9uQmx1cjogKCkgPT4ge1xuICAgICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICAgIH0sXG4gICAgICBvbkNoYW5nZTogZXZlbnQgPT4ge1xuICAgICAgICBzZXRWYWx1ZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgICBvbkNoYW5nZSA9PSBudWxsID8gdm9pZCAwIDogb25DaGFuZ2UoZXZlbnQpO1xuICAgICAgfSxcbiAgICAgIG9uRm9jdXM6ICgpID0+IHtcbiAgICAgICAgc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICAgIH0sXG4gICAgICByZXF1aXJlZCxcbiAgICAgIHZhbHVlOiB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiAnJ1xuICAgIH07XG4gIH0sIFtkaXNhYmxlZCwgZXJyb3IsIGZpbGxlZCwgZm9jdXNlZCwgb25DaGFuZ2UsIHJlcXVpcmVkLCBzZXRWYWx1ZSwgdmFsdWVdKTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCByZW5kZXJDaGlsZHJlbiA9ICgpID0+IHtcbiAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW4oY2hpbGRDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9O1xuICBjb25zdCBSb290ID0gKF9yZWYgPSBjb21wb25lbnQgIT0gbnVsbCA/IGNvbXBvbmVudCA6IHNsb3RzLnJvb3QpICE9IG51bGwgPyBfcmVmIDogJ2Rpdic7XG4gIGNvbnN0IHJvb3RQcm9wcyA9ICgwLCBfdXRpbHMyLnVzZVNsb3RQcm9wcykoe1xuICAgIGVsZW1lbnRUeXBlOiBSb290LFxuICAgIGV4dGVybmFsU2xvdFByb3BzOiBzbG90UHJvcHMucm9vdCxcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzOiBvdGhlcixcbiAgICBhZGRpdGlvbmFsUHJvcHM6IHtcbiAgICAgIHJlZixcbiAgICAgIGNoaWxkcmVuOiByZW5kZXJDaGlsZHJlbigpXG4gICAgfSxcbiAgICBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5yb290XG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKF9Gb3JtQ29udHJvbFVuc3R5bGVkQ29udGV4dC5kZWZhdWx0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNoaWxkQ29udGV4dCxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFJvb3QsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHJvb3RQcm9wcykpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGb3JtQ29udHJvbFVuc3R5bGVkLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0IC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSwgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYW55LFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwsIGlucHV0IGFuZCBoZWxwZXIgdGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBlcnJvcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNoYW5nZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCB3aWxsIGluZGljYXRlIHRoYXQgdGhlIGBpbnB1dGAgaXMgcmVxdWlyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZXF1aXJlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgRm9ybUNvbnRyb2wuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgcm9vdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIEZvcm1Db250cm9sLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgcm9vdDogX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5hbnlcbn0gOiB2b2lkIDA7XG52YXIgX2RlZmF1bHQgPSBGb3JtQ29udHJvbFVuc3R5bGVkO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLHNCQUFzQixHQUFHQyxPQUFPLENBQUMsOENBQThDLENBQUM7QUFDcEZDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLElBQUlDLFNBQVMsR0FBR1Asc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQ2pGLElBQUlPLDhCQUE4QixHQUFHUixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7QUFDM0gsSUFBSVEsS0FBSyxHQUFHQyx1QkFBdUIsQ0FBQ1QsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JELElBQUlVLFVBQVUsR0FBR1gsc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUM5RCxJQUFJVyxNQUFNLEdBQUdYLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDbEMsSUFBSVksMkJBQTJCLEdBQUdiLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQztBQUNqRyxJQUFJYSwyQkFBMkIsR0FBR2IsT0FBTyxDQUFDLDhCQUE4QixDQUFDO0FBQ3pFLElBQUljLE9BQU8sR0FBR2QsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUNqQyxJQUFJZSxlQUFlLEdBQUdoQixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDMUUsSUFBSWdCLHNCQUFzQixHQUFHaEIsT0FBTyxDQUFDLGdDQUFnQyxDQUFDO0FBQ3RFLElBQUlpQixXQUFXLEdBQUdqQixPQUFPLENBQUMsbUJBQW1CLENBQUM7QUFDOUMsTUFBTWtCLFNBQVMsR0FBRyxDQUFDLGNBQWMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQztBQUN2SSxTQUFTQyx3QkFBd0JBLENBQUNDLFdBQVcsRUFBRTtFQUFFLElBQUksT0FBT0MsT0FBTyxLQUFLLFVBQVUsRUFBRSxPQUFPLElBQUk7RUFBRSxJQUFJQyxpQkFBaUIsR0FBRyxJQUFJRCxPQUFPLEVBQUU7RUFBRSxJQUFJRSxnQkFBZ0IsR0FBRyxJQUFJRixPQUFPLEVBQUU7RUFBRSxPQUFPLENBQUNGLHdCQUF3QixHQUFHLFNBQUFBLENBQVVDLFdBQVcsRUFBRTtJQUFFLE9BQU9BLFdBQVcsR0FBR0csZ0JBQWdCLEdBQUdELGlCQUFpQjtFQUFFLENBQUMsRUFBRUYsV0FBVyxDQUFDO0FBQUU7QUFDdFQsU0FBU1gsdUJBQXVCQSxDQUFDZSxHQUFHLEVBQUVKLFdBQVcsRUFBRTtFQUFFLElBQUksQ0FBQ0EsV0FBVyxJQUFJSSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBVSxFQUFFO0lBQUUsT0FBT0QsR0FBRztFQUFFO0VBQUUsSUFBSUEsR0FBRyxLQUFLLElBQUksSUFBSSxPQUFPQSxHQUFHLEtBQUssUUFBUSxJQUFJLE9BQU9BLEdBQUcsS0FBSyxVQUFVLEVBQUU7SUFBRSxPQUFPO01BQUVuQixPQUFPLEVBQUVtQjtJQUFJLENBQUM7RUFBRTtFQUFFLElBQUlFLEtBQUssR0FBR1Asd0JBQXdCLENBQUNDLFdBQVcsQ0FBQztFQUFFLElBQUlNLEtBQUssSUFBSUEsS0FBSyxDQUFDQyxHQUFHLENBQUNILEdBQUcsQ0FBQyxFQUFFO0lBQUUsT0FBT0UsS0FBSyxDQUFDRSxHQUFHLENBQUNKLEdBQUcsQ0FBQztFQUFFO0VBQUUsSUFBSUssTUFBTSxHQUFHLENBQUMsQ0FBQztFQUFFLElBQUlDLHFCQUFxQixHQUFHN0IsTUFBTSxDQUFDQyxjQUFjLElBQUlELE1BQU0sQ0FBQzhCLHdCQUF3QjtFQUFFLEtBQUssSUFBSUMsR0FBRyxJQUFJUixHQUFHLEVBQUU7SUFBRSxJQUFJUSxHQUFHLEtBQUssU0FBUyxJQUFJL0IsTUFBTSxDQUFDZ0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1gsR0FBRyxFQUFFUSxHQUFHLENBQUMsRUFBRTtNQUFFLElBQUlJLElBQUksR0FBR04scUJBQXFCLEdBQUc3QixNQUFNLENBQUM4Qix3QkFBd0IsQ0FBQ1AsR0FBRyxFQUFFUSxHQUFHLENBQUMsR0FBRyxJQUFJO01BQUUsSUFBSUksSUFBSSxLQUFLQSxJQUFJLENBQUNSLEdBQUcsSUFBSVEsSUFBSSxDQUFDQyxHQUFHLENBQUMsRUFBRTtRQUFFcEMsTUFBTSxDQUFDQyxjQUFjLENBQUMyQixNQUFNLEVBQUVHLEdBQUcsRUFBRUksSUFBSSxDQUFDO01BQUUsQ0FBQyxNQUFNO1FBQUVQLE1BQU0sQ0FBQ0csR0FBRyxDQUFDLEdBQUdSLEdBQUcsQ0FBQ1EsR0FBRyxDQUFDO01BQUU7SUFBRTtFQUFFO0VBQUVILE1BQU0sQ0FBQ3hCLE9BQU8sR0FBR21CLEdBQUc7RUFBRSxJQUFJRSxLQUFLLEVBQUU7SUFBRUEsS0FBSyxDQUFDVyxHQUFHLENBQUNiLEdBQUcsRUFBRUssTUFBTSxDQUFDO0VBQUU7RUFBRSxPQUFPQSxNQUFNO0FBQUU7QUFDbnlCLFNBQVNTLFFBQVFBLENBQUNsQyxLQUFLLEVBQUU7RUFDdkIsT0FBT0EsS0FBSyxJQUFJLElBQUksSUFBSSxFQUFFbUMsS0FBSyxDQUFDQyxPQUFPLENBQUNwQyxLQUFLLENBQUMsSUFBSUEsS0FBSyxDQUFDcUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxJQUFJckMsS0FBSyxLQUFLLEVBQUU7QUFDdkY7QUFDQSxTQUFTc0MsaUJBQWlCQSxDQUFDQyxVQUFVLEVBQUU7RUFDckMsTUFBTTtJQUNKQyxRQUFRO0lBQ1JDLEtBQUs7SUFDTEMsTUFBTTtJQUNOQyxPQUFPO0lBQ1BDO0VBQ0YsQ0FBQyxHQUFHTCxVQUFVO0VBQ2QsTUFBTU0sS0FBSyxHQUFHO0lBQ1pDLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRU4sUUFBUSxJQUFJLFVBQVUsRUFBRUcsT0FBTyxJQUFJLFNBQVMsRUFBRUYsS0FBSyxJQUFJLE9BQU8sRUFBRUMsTUFBTSxJQUFJLFFBQVEsRUFBRUUsUUFBUSxJQUFJLFVBQVU7RUFDM0gsQ0FBQztFQUNELE9BQU8sQ0FBQyxDQUFDLEVBQUVqQyxlQUFlLENBQUNWLE9BQU8sRUFBRTRDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRWpDLHNCQUFzQixDQUFDbUMscUJBQXFCLEVBQUV0QywyQkFBMkIsQ0FBQ3VDLGtDQUFrQyxDQUFDLENBQUM7QUFDL0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLG1CQUFtQixHQUFHLGFBQWE3QyxLQUFLLENBQUM4QyxVQUFVLENBQUMsU0FBU0QsbUJBQW1CQSxDQUFDRSxLQUFLLEVBQUVDLEdBQUcsRUFBRTtFQUNqRyxJQUFJQyxJQUFJO0VBQ1IsTUFBTTtNQUNGQyxZQUFZO01BQ1pDLFFBQVE7TUFDUkMsU0FBUztNQUNUaEIsUUFBUSxHQUFHLEtBQUs7TUFDaEJDLEtBQUssR0FBRyxLQUFLO01BQ2JnQixRQUFRO01BQ1JiLFFBQVEsR0FBRyxLQUFLO01BQ2hCYyxTQUFTLEdBQUcsQ0FBQyxDQUFDO01BQ2RiLEtBQUssR0FBRyxDQUFDLENBQUM7TUFDVjdDLEtBQUssRUFBRTJEO0lBQ1QsQ0FBQyxHQUFHUixLQUFLO0lBQ1RTLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRXpELDhCQUE4QixDQUFDRixPQUFPLEVBQUVrRCxLQUFLLEVBQUVyQyxTQUFTLENBQUM7RUFDdkUsTUFBTSxDQUFDZCxLQUFLLEVBQUU2RCxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRXRELE1BQU0sQ0FBQ3VELHNCQUFzQixFQUFFO0lBQzNEQyxVQUFVLEVBQUVKLGFBQWE7SUFDekIxRCxPQUFPLEVBQUVxRCxZQUFZO0lBQ3JCVSxJQUFJLEVBQUUsYUFBYTtJQUNuQkMsS0FBSyxFQUFFO0VBQ1QsQ0FBQyxDQUFDO0VBQ0YsTUFBTXZCLE1BQU0sR0FBR1IsUUFBUSxDQUFDbEMsS0FBSyxDQUFDO0VBQzlCLE1BQU0sQ0FBQ2tFLFlBQVksRUFBRUMsVUFBVSxDQUFDLEdBQUcvRCxLQUFLLENBQUNnRSxRQUFRLENBQUMsS0FBSyxDQUFDO0VBQ3hELE1BQU16QixPQUFPLEdBQUd1QixZQUFZLElBQUksQ0FBQzFCLFFBQVE7RUFDekNwQyxLQUFLLENBQUNpRSxTQUFTLENBQUMsTUFBTUYsVUFBVSxDQUFDRyxTQUFTLElBQUk5QixRQUFRLEdBQUcsS0FBSyxHQUFHOEIsU0FBUyxDQUFDLEVBQUUsQ0FBQzlCLFFBQVEsQ0FBQyxDQUFDO0VBQ3hGLE1BQU1ELFVBQVUsR0FBRyxDQUFDLENBQUMsRUFBRXJDLFNBQVMsQ0FBQ0QsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFa0QsS0FBSyxFQUFFO0lBQ25EWCxRQUFRO0lBQ1JDLEtBQUs7SUFDTEMsTUFBTTtJQUNOQyxPQUFPO0lBQ1BDO0VBQ0YsQ0FBQyxDQUFDO0VBQ0YsTUFBTTJCLFlBQVksR0FBR25FLEtBQUssQ0FBQ29FLE9BQU8sQ0FBQyxNQUFNO0lBQ3ZDLE9BQU87TUFDTGhDLFFBQVE7TUFDUkMsS0FBSztNQUNMQyxNQUFNO01BQ05DLE9BQU87TUFDUDhCLE1BQU0sRUFBRUEsQ0FBQSxLQUFNO1FBQ1pOLFVBQVUsQ0FBQyxLQUFLLENBQUM7TUFDbkIsQ0FBQztNQUNEVixRQUFRLEVBQUVpQixLQUFLLElBQUk7UUFDakJiLFFBQVEsQ0FBQ2EsS0FBSyxDQUFDQyxNQUFNLENBQUMzRSxLQUFLLENBQUM7UUFDNUJ5RCxRQUFRLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHQSxRQUFRLENBQUNpQixLQUFLLENBQUM7TUFDN0MsQ0FBQztNQUNERSxPQUFPLEVBQUVBLENBQUEsS0FBTTtRQUNiVCxVQUFVLENBQUMsSUFBSSxDQUFDO01BQ2xCLENBQUM7TUFDRHZCLFFBQVE7TUFDUjVDLEtBQUssRUFBRUEsS0FBSyxJQUFJLElBQUksR0FBR0EsS0FBSyxHQUFHO0lBQ2pDLENBQUM7RUFDSCxDQUFDLEVBQUUsQ0FBQ3dDLFFBQVEsRUFBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRWMsUUFBUSxFQUFFYixRQUFRLEVBQUVpQixRQUFRLEVBQUU3RCxLQUFLLENBQUMsQ0FBQztFQUMzRSxNQUFNNkUsT0FBTyxHQUFHdkMsaUJBQWlCLENBQUNDLFVBQVUsQ0FBQztFQUM3QyxNQUFNdUMsY0FBYyxHQUFHQSxDQUFBLEtBQU07SUFDM0IsSUFBSSxPQUFPdkIsUUFBUSxLQUFLLFVBQVUsRUFBRTtNQUNsQyxPQUFPQSxRQUFRLENBQUNnQixZQUFZLENBQUM7SUFDL0I7SUFDQSxPQUFPaEIsUUFBUTtFQUNqQixDQUFDO0VBQ0QsTUFBTXdCLElBQUksR0FBRyxDQUFDMUIsSUFBSSxHQUFHRyxTQUFTLElBQUksSUFBSSxHQUFHQSxTQUFTLEdBQUdYLEtBQUssQ0FBQ0MsSUFBSSxLQUFLLElBQUksR0FBR08sSUFBSSxHQUFHLEtBQUs7RUFDdkYsTUFBTTJCLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRXRFLE9BQU8sQ0FBQ3VFLFlBQVksRUFBRTtJQUMxQ0MsV0FBVyxFQUFFSCxJQUFJO0lBQ2pCSSxpQkFBaUIsRUFBRXpCLFNBQVMsQ0FBQ1osSUFBSTtJQUNqQ3NDLHNCQUFzQixFQUFFeEIsS0FBSztJQUM3QnlCLGVBQWUsRUFBRTtNQUNmakMsR0FBRztNQUNIRyxRQUFRLEVBQUV1QixjQUFjO0lBQzFCLENBQUM7SUFDRHZDLFVBQVU7SUFDVitDLFNBQVMsRUFBRVQsT0FBTyxDQUFDL0I7RUFDckIsQ0FBQyxDQUFDO0VBQ0YsT0FBTyxhQUFhLENBQUMsQ0FBQyxFQUFFakMsV0FBVyxDQUFDMEUsR0FBRyxFQUFFL0UsMkJBQTJCLENBQUNQLE9BQU8sQ0FBQ3VGLFFBQVEsRUFBRTtJQUNyRnhGLEtBQUssRUFBRXVFLFlBQVk7SUFDbkJoQixRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUMsRUFBRTFDLFdBQVcsQ0FBQzBFLEdBQUcsRUFBRVIsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFN0UsU0FBUyxDQUFDRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUrRSxTQUFTLENBQUM7RUFDekYsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBQ0ZTLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxRQUFRLEtBQUssWUFBWSxHQUFHMUMsbUJBQW1CLENBQUMyQyxTQUFTLENBQUMseUJBQXlCO0VBQzdGO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUFDRjtBQUNBO0VBQ0VyQyxRQUFRLEVBQUVqRCxVQUFVLENBQUNMLE9BQU8sQ0FBQyxzQ0FBc0M0RixTQUFTLENBQUMsQ0FBQ3ZGLFVBQVUsQ0FBQ0wsT0FBTyxDQUFDNkYsSUFBSSxFQUFFeEYsVUFBVSxDQUFDTCxPQUFPLENBQUM4RixJQUFJLENBQUMsQ0FBQztFQUNoSTtBQUNGO0FBQ0E7QUFDQTtFQUNFdkMsU0FBUyxFQUFFbEQsVUFBVSxDQUFDTCxPQUFPLENBQUNpRixXQUFXO0VBQ3pDO0FBQ0Y7QUFDQTtFQUNFNUIsWUFBWSxFQUFFaEQsVUFBVSxDQUFDTCxPQUFPLENBQUMrRixHQUFHO0VBQ3BDO0FBQ0Y7QUFDQTtBQUNBO0VBQ0V4RCxRQUFRLEVBQUVsQyxVQUFVLENBQUNMLE9BQU8sQ0FBQ2dHLElBQUk7RUFDakM7QUFDRjtBQUNBO0FBQ0E7RUFDRXhELEtBQUssRUFBRW5DLFVBQVUsQ0FBQ0wsT0FBTyxDQUFDZ0csSUFBSTtFQUM5QjtBQUNGO0FBQ0E7RUFDRXhDLFFBQVEsRUFBRW5ELFVBQVUsQ0FBQ0wsT0FBTyxDQUFDOEYsSUFBSTtFQUNqQztBQUNGO0FBQ0E7QUFDQTtFQUNFbkQsUUFBUSxFQUFFdEMsVUFBVSxDQUFDTCxPQUFPLENBQUNnRyxJQUFJO0VBQ2pDO0FBQ0Y7QUFDQTtBQUNBO0VBQ0V2QyxTQUFTLEVBQUVwRCxVQUFVLENBQUNMLE9BQU8sQ0FBQ2lHLEtBQUssQ0FBQztJQUNsQ3BELElBQUksRUFBRXhDLFVBQVUsQ0FBQ0wsT0FBTyxDQUFDNEYsU0FBUyxDQUFDLENBQUN2RixVQUFVLENBQUNMLE9BQU8sQ0FBQzhGLElBQUksRUFBRXpGLFVBQVUsQ0FBQ0wsT0FBTyxDQUFDa0csTUFBTSxDQUFDO0VBQ3pGLENBQUMsQ0FBQztFQUNGO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRXRELEtBQUssRUFBRXZDLFVBQVUsQ0FBQ0wsT0FBTyxDQUFDaUcsS0FBSyxDQUFDO0lBQzlCcEQsSUFBSSxFQUFFeEMsVUFBVSxDQUFDTCxPQUFPLENBQUNpRjtFQUMzQixDQUFDLENBQUM7RUFDRjtBQUNGO0FBQ0E7RUFDRWxGLEtBQUssRUFBRU0sVUFBVSxDQUFDTCxPQUFPLENBQUMrRjtBQUM1QixDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQ1YsSUFBSUksUUFBUSxHQUFHbkQsbUJBQW1CO0FBQ2xDbEQsT0FBTyxDQUFDRSxPQUFPLEdBQUdtRyxRQUFRIn0=