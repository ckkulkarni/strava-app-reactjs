7c5fd93fb49b62d6e08f9d28ad98e624
"use strict";

var hashClear = require('./_hashClear'),
  hashDelete = require('./_hashDelete'),
  hashGet = require('./_hashGet'),
  hashHas = require('./_hashHas'),
  hashSet = require('./_hashSet');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
    length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
module.exports = Hash;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJoYXNoQ2xlYXIiLCJyZXF1aXJlIiwiaGFzaERlbGV0ZSIsImhhc2hHZXQiLCJoYXNoSGFzIiwiaGFzaFNldCIsIkhhc2giLCJlbnRyaWVzIiwiaW5kZXgiLCJsZW5ndGgiLCJjbGVhciIsImVudHJ5Iiwic2V0IiwicHJvdG90eXBlIiwiZ2V0IiwiaGFzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIl9IYXNoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBoYXNoQ2xlYXIgPSByZXF1aXJlKCcuL19oYXNoQ2xlYXInKSxcbiAgICBoYXNoRGVsZXRlID0gcmVxdWlyZSgnLi9faGFzaERlbGV0ZScpLFxuICAgIGhhc2hHZXQgPSByZXF1aXJlKCcuL19oYXNoR2V0JyksXG4gICAgaGFzaEhhcyA9IHJlcXVpcmUoJy4vX2hhc2hIYXMnKSxcbiAgICBoYXNoU2V0ID0gcmVxdWlyZSgnLi9faGFzaFNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFNBQVMsR0FBR0MsT0FBTyxDQUFDLGNBQWMsQ0FBQztFQUNuQ0MsVUFBVSxHQUFHRCxPQUFPLENBQUMsZUFBZSxDQUFDO0VBQ3JDRSxPQUFPLEdBQUdGLE9BQU8sQ0FBQyxZQUFZLENBQUM7RUFDL0JHLE9BQU8sR0FBR0gsT0FBTyxDQUFDLFlBQVksQ0FBQztFQUMvQkksT0FBTyxHQUFHSixPQUFPLENBQUMsWUFBWSxDQUFDOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNLLElBQUlBLENBQUNDLE9BQU8sRUFBRTtFQUNyQixJQUFJQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ1ZDLE1BQU0sR0FBR0YsT0FBTyxJQUFJLElBQUksR0FBRyxDQUFDLEdBQUdBLE9BQU8sQ0FBQ0UsTUFBTTtFQUVqRCxJQUFJLENBQUNDLEtBQUssRUFBRTtFQUNaLE9BQU8sRUFBRUYsS0FBSyxHQUFHQyxNQUFNLEVBQUU7SUFDdkIsSUFBSUUsS0FBSyxHQUFHSixPQUFPLENBQUNDLEtBQUssQ0FBQztJQUMxQixJQUFJLENBQUNJLEdBQUcsQ0FBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFQSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDOUI7QUFDRjs7QUFFQTtBQUNBTCxJQUFJLENBQUNPLFNBQVMsQ0FBQ0gsS0FBSyxHQUFHVixTQUFTO0FBQ2hDTSxJQUFJLENBQUNPLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBR1gsVUFBVTtBQUNyQ0ksSUFBSSxDQUFDTyxTQUFTLENBQUNDLEdBQUcsR0FBR1gsT0FBTztBQUM1QkcsSUFBSSxDQUFDTyxTQUFTLENBQUNFLEdBQUcsR0FBR1gsT0FBTztBQUM1QkUsSUFBSSxDQUFDTyxTQUFTLENBQUNELEdBQUcsR0FBR1AsT0FBTztBQUU1QlcsTUFBTSxDQUFDQyxPQUFPLEdBQUdYLElBQUkifQ==