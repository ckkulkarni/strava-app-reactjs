15cc33e9ffe838c3d1db8be1e3b0f99e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  createFilterOptions: true,
  autocompleteClasses: true
};
Object.defineProperty(exports, "autocompleteClasses", {
  enumerable: true,
  get: function () {
    return _autocompleteClasses.default;
  }
});
Object.defineProperty(exports, "createFilterOptions", {
  enumerable: true,
  get: function () {
    return _Autocomplete.createFilterOptions;
  }
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _Autocomplete.default;
  }
});
var _Autocomplete = _interopRequireWildcard(require("./Autocomplete"));
var _autocompleteClasses = _interopRequireWildcard(require("./autocompleteClasses"));
Object.keys(_autocompleteClasses).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _autocompleteClasses[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _autocompleteClasses[key];
    }
  });
});
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9leHBvcnROYW1lcyIsImNyZWF0ZUZpbHRlck9wdGlvbnMiLCJhdXRvY29tcGxldGVDbGFzc2VzIiwiZW51bWVyYWJsZSIsImdldCIsIl9hdXRvY29tcGxldGVDbGFzc2VzIiwiZGVmYXVsdCIsIl9BdXRvY29tcGxldGUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjYWNoZSIsImhhcyIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImRlc2MiLCJzZXQiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBfZXhwb3J0TmFtZXMgPSB7XG4gIGNyZWF0ZUZpbHRlck9wdGlvbnM6IHRydWUsXG4gIGF1dG9jb21wbGV0ZUNsYXNzZXM6IHRydWVcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhdXRvY29tcGxldGVDbGFzc2VzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9hdXRvY29tcGxldGVDbGFzc2VzLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlRmlsdGVyT3B0aW9uc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfQXV0b2NvbXBsZXRlLmNyZWF0ZUZpbHRlck9wdGlvbnM7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfQXV0b2NvbXBsZXRlLmRlZmF1bHQ7XG4gIH1cbn0pO1xudmFyIF9BdXRvY29tcGxldGUgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9BdXRvY29tcGxldGVcIikpO1xudmFyIF9hdXRvY29tcGxldGVDbGFzc2VzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vYXV0b2NvbXBsZXRlQ2xhc3Nlc1wiKSk7XG5PYmplY3Qua2V5cyhfYXV0b2NvbXBsZXRlQ2xhc3NlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX2F1dG9jb21wbGV0ZUNsYXNzZXNba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfYXV0b2NvbXBsZXRlQ2xhc3Nlc1trZXldO1xuICAgIH1cbiAgfSk7XG59KTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZUJhYmVsSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAobm9kZUludGVyb3ApIHsgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wOyB9KShub2RlSW50ZXJvcCk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHsgaWYgKCFub2RlSW50ZXJvcCAmJiBvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGLElBQUlDLFlBQVksR0FBRztFQUNqQkMsbUJBQW1CLEVBQUUsSUFBSTtFQUN6QkMsbUJBQW1CLEVBQUU7QUFDdkIsQ0FBQztBQUNETixNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLHFCQUFxQixFQUFFO0VBQ3BESyxVQUFVLEVBQUUsSUFBSTtFQUNoQkMsR0FBRyxFQUFFLFNBQUFBLENBQUEsRUFBWTtJQUNmLE9BQU9DLG9CQUFvQixDQUFDQyxPQUFPO0VBQ3JDO0FBQ0YsQ0FBQyxDQUFDO0FBQ0ZWLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUscUJBQXFCLEVBQUU7RUFDcERLLFVBQVUsRUFBRSxJQUFJO0VBQ2hCQyxHQUFHLEVBQUUsU0FBQUEsQ0FBQSxFQUFZO0lBQ2YsT0FBT0csYUFBYSxDQUFDTixtQkFBbUI7RUFDMUM7QUFDRixDQUFDLENBQUM7QUFDRkwsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxTQUFTLEVBQUU7RUFDeENLLFVBQVUsRUFBRSxJQUFJO0VBQ2hCQyxHQUFHLEVBQUUsU0FBQUEsQ0FBQSxFQUFZO0lBQ2YsT0FBT0csYUFBYSxDQUFDRCxPQUFPO0VBQzlCO0FBQ0YsQ0FBQyxDQUFDO0FBQ0YsSUFBSUMsYUFBYSxHQUFHQyx1QkFBdUIsQ0FBQ0MsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDdEUsSUFBSUosb0JBQW9CLEdBQUdHLHVCQUF1QixDQUFDQyxP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