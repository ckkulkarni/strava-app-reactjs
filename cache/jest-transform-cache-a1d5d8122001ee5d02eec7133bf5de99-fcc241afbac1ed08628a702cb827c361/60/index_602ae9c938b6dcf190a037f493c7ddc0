7c35af32f52faa9966e82fe1d37a53a6
'use strict';

var forEach = require('for-each');
var availableTypedArrays = require('available-typed-arrays');
var callBound = require('call-bind/callBound');
var gOPD = require('gopd');
var $toString = callBound('Object.prototype.toString');
var hasToStringTag = require('has-tostringtag/shams')();
var g = typeof globalThis === 'undefined' ? global : globalThis;
var typedArrays = availableTypedArrays();
var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
  forEach(typedArrays, function (typedArray) {
    if (typeof g[typedArray] === 'function') {
      var arr = new g[typedArray]();
      if (Symbol.toStringTag in arr) {
        var proto = getPrototypeOf(arr);
        var descriptor = gOPD(proto, Symbol.toStringTag);
        if (!descriptor) {
          var superProto = getPrototypeOf(proto);
          descriptor = gOPD(superProto, Symbol.toStringTag);
        }
        toStrTags[typedArray] = descriptor.get;
      }
    }
  });
}
var tryTypedArrays = function tryAllTypedArrays(value) {
  var foundName = false;
  forEach(toStrTags, function (getter, typedArray) {
    if (!foundName) {
      try {
        var name = getter.call(value);
        if (name === typedArray) {
          foundName = name;
        }
      } catch (e) {}
    }
  });
  return foundName;
};
var isTypedArray = require('is-typed-array');
module.exports = function whichTypedArray(value) {
  if (!isTypedArray(value)) {
    return false;
  }
  if (!hasToStringTag || !(Symbol.toStringTag in value)) {
    return $slice($toString(value), 8, -1);
  }
  return tryTypedArrays(value);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmb3JFYWNoIiwicmVxdWlyZSIsImF2YWlsYWJsZVR5cGVkQXJyYXlzIiwiY2FsbEJvdW5kIiwiZ09QRCIsIiR0b1N0cmluZyIsImhhc1RvU3RyaW5nVGFnIiwiZyIsImdsb2JhbFRoaXMiLCJnbG9iYWwiLCJ0eXBlZEFycmF5cyIsIiRzbGljZSIsInRvU3RyVGFncyIsImdldFByb3RvdHlwZU9mIiwiT2JqZWN0IiwidHlwZWRBcnJheSIsImFyciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwicHJvdG8iLCJkZXNjcmlwdG9yIiwic3VwZXJQcm90byIsImdldCIsInRyeVR5cGVkQXJyYXlzIiwidHJ5QWxsVHlwZWRBcnJheXMiLCJ2YWx1ZSIsImZvdW5kTmFtZSIsImdldHRlciIsIm5hbWUiLCJjYWxsIiwiZSIsImlzVHlwZWRBcnJheSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ3aGljaFR5cGVkQXJyYXkiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnZm9yLWVhY2gnKTtcbnZhciBhdmFpbGFibGVUeXBlZEFycmF5cyA9IHJlcXVpcmUoJ2F2YWlsYWJsZS10eXBlZC1hcnJheXMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJ2dvcGQnKTtcblxudmFyICR0b1N0cmluZyA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZycpO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gcmVxdWlyZSgnaGFzLXRvc3RyaW5ndGFnL3NoYW1zJykoKTtcblxudmFyIGcgPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiBnbG9iYWxUaGlzO1xudmFyIHR5cGVkQXJyYXlzID0gYXZhaWxhYmxlVHlwZWRBcnJheXMoKTtcblxudmFyICRzbGljZSA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5zbGljZScpO1xudmFyIHRvU3RyVGFncyA9IHt9O1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mOyAvLyByZXF1aXJlKCdnZXRwcm90b3R5cGVvZicpO1xuaWYgKGhhc1RvU3RyaW5nVGFnICYmIGdPUEQgJiYgZ2V0UHJvdG90eXBlT2YpIHtcblx0Zm9yRWFjaCh0eXBlZEFycmF5cywgZnVuY3Rpb24gKHR5cGVkQXJyYXkpIHtcblx0XHRpZiAodHlwZW9mIGdbdHlwZWRBcnJheV0gPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdHZhciBhcnIgPSBuZXcgZ1t0eXBlZEFycmF5XSgpO1xuXHRcdFx0aWYgKFN5bWJvbC50b1N0cmluZ1RhZyBpbiBhcnIpIHtcblx0XHRcdFx0dmFyIHByb3RvID0gZ2V0UHJvdG90eXBlT2YoYXJyKTtcblx0XHRcdFx0dmFyIGRlc2NyaXB0b3IgPSBnT1BEKHByb3RvLCBTeW1ib2wudG9TdHJpbmdUYWcpO1xuXHRcdFx0XHRpZiAoIWRlc2NyaXB0b3IpIHtcblx0XHRcdFx0XHR2YXIgc3VwZXJQcm90byA9IGdldFByb3RvdHlwZU9mKHByb3RvKTtcblx0XHRcdFx0XHRkZXNjcmlwdG9yID0gZ09QRChzdXBlclByb3RvLCBTeW1ib2wudG9TdHJpbmdUYWcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRvU3RyVGFnc1t0eXBlZEFycmF5XSA9IGRlc2NyaXB0b3IuZ2V0O1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbnZhciB0cnlUeXBlZEFycmF5cyA9IGZ1bmN0aW9uIHRyeUFsbFR5cGVkQXJyYXlzKHZhbHVlKSB7XG5cdHZhciBmb3VuZE5hbWUgPSBmYWxzZTtcblx0Zm9yRWFjaCh0b1N0clRhZ3MsIGZ1bmN0aW9uIChnZXR0ZXIsIHR5cGVkQXJyYXkpIHtcblx0XHRpZiAoIWZvdW5kTmFtZSkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dmFyIG5hbWUgPSBnZXR0ZXIuY2FsbCh2YWx1ZSk7XG5cdFx0XHRcdGlmIChuYW1lID09PSB0eXBlZEFycmF5KSB7XG5cdFx0XHRcdFx0Zm91bmROYW1lID0gbmFtZTtcblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gZm91bmROYW1lO1xufTtcblxudmFyIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJ2lzLXR5cGVkLWFycmF5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSB7XG5cdGlmICghaXNUeXBlZEFycmF5KHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKCFoYXNUb1N0cmluZ1RhZyB8fCAhKFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWx1ZSkpIHsgcmV0dXJuICRzbGljZSgkdG9TdHJpbmcodmFsdWUpLCA4LCAtMSk7IH1cblx0cmV0dXJuIHRyeVR5cGVkQXJyYXlzKHZhbHVlKTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ2pDLElBQUlDLG9CQUFvQixHQUFHRCxPQUFPLENBQUMsd0JBQXdCLENBQUM7QUFDNUQsSUFBSUUsU0FBUyxHQUFHRixPQUFPLENBQUMscUJBQXFCLENBQUM7QUFDOUMsSUFBSUcsSUFBSSxHQUFHSCxPQUFPLENBQUMsTUFBTSxDQUFDO0FBRTFCLElBQUlJLFNBQVMsR0FBR0YsU0FBUyxDQUFDLDJCQUEyQixDQUFDO0FBQ3RELElBQUlHLGNBQWMsR0FBR0wsT0FBTyxDQUFDLHVCQUF1QixDQUFDLEVBQUU7QUFFdkQsSUFBSU0sQ0FBQyxHQUFHLE9BQU9DLFVBQVUsS0FBSyxXQUFXLEdBQUdDLE1BQU0sR0FBR0QsVUFBVTtBQUMvRCxJQUFJRSxXQUFXLEdBQUdSLG9CQUFvQixFQUFFO0FBRXhDLElBQUlTLE1BQU0sR0FBR1IsU0FBUyxDQUFDLHdCQUF3QixDQUFDO0FBQ2hELElBQUlTLFNBQVMsR0FBRyxDQUFDLENBQUM7QUFDbEIsSUFBSUMsY0FBYyxHQUFHQyxNQUFNLENBQUNELGNBQWMsQ0FBQyxDQUFDO0FBQzVDLElBQUlQLGNBQWMsSUFBSUYsSUFBSSxJQUFJUyxjQUFjLEVBQUU7RUFDN0NiLE9BQU8sQ0FBQ1UsV0FBVyxFQUFFLFVBQVVLLFVBQVUsRUFBRTtJQUMxQyxJQUFJLE9BQU9SLENBQUMsQ0FBQ1EsVUFBVSxDQUFDLEtBQUssVUFBVSxFQUFFO01BQ3hDLElBQUlDLEdBQUcsR0FBRyxJQUFJVCxDQUFDLENBQUNRLFVBQVUsQ0FBQyxFQUFFO01BQzdCLElBQUlFLE1BQU0sQ0FBQ0MsV0FBVyxJQUFJRixHQUFHLEVBQUU7UUFDOUIsSUFBSUcsS0FBSyxHQUFHTixjQUFjLENBQUNHLEdBQUcsQ0FBQztRQUMvQixJQUFJSSxVQUFVLEdBQUdoQixJQUFJLENBQUNlLEtBQUssRUFBRUYsTUFBTSxDQUFDQyxXQUFXLENBQUM7UUFDaEQsSUFBSSxDQUFDRSxVQUFVLEVBQUU7VUFDaEIsSUFBSUMsVUFBVSxHQUFHUixjQUFjLENBQUNNLEtBQUssQ0FBQztVQUN0Q0MsVUFBVSxHQUFHaEIsSUFBSSxDQUFDaUIsVUFBVSxFQUFFSixNQUFNLENBQUNDLFdBQVcsQ0FBQztRQUNsRDtRQUNBTixTQUFTLENBQUNHLFVBQVUsQ0FBQyxHQUFHSyxVQUFVLENBQUNFLEdBQUc7TUFDdkM7SUFDRDtFQUNELENBQUMsQ0FBQztBQUNIO0FBRUEsSUFBSUMsY0FBYyxHQUFHLFNBQVNDLGlCQUFpQkEsQ0FBQ0MsS0FBSyxFQUFFO0VBQ3RELElBQUlDLFNBQVMsR0FBRyxLQUFLO0VBQ3JCMUIsT0FBTyxDQUFDWSxTQUFTLEVBQUUsVUFBVWUsTUFBTSxFQUFFWixVQUFVLEVBQUU7SUFDaEQsSUFBSSxDQUFDVyxTQUFTLEVBQUU7TUFDZixJQUFJO1FBQ0gsSUFBSUUsSUFBSSxHQUFHRCxNQUFNLENBQUNFLElBQUksQ0FBQ0osS0FBSyxDQUFDO1FBQzdCLElBQUlHLElBQUksS0FBS2IsVUFBVSxFQUFFO1VBQ3hCVyxTQUFTLEdBQUdFLElBQUk7UUFDakI7TUFDRCxDQUFDLENBQUMsT0FBT0UsQ0FBQyxFQUFFLENBQUM7SUFDZDtFQUNELENBQUMsQ0FBQztFQUNGLE9BQU9KLFNBQVM7QUFDakIsQ0FBQztBQUVELElBQUlLLFlBQVksR0FBRzlCLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztBQUU1QytCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLGVBQWVBLENBQUNULEtBQUssRUFBRTtFQUNoRCxJQUFJLENBQUNNLFlBQVksQ0FBQ04sS0FBSyxDQUFDLEVBQUU7SUFBRSxPQUFPLEtBQUs7RUFBRTtFQUMxQyxJQUFJLENBQUNuQixjQUFjLElBQUksRUFBRVcsTUFBTSxDQUFDQyxXQUFXLElBQUlPLEtBQUssQ0FBQyxFQUFFO0lBQUUsT0FBT2QsTUFBTSxDQUFDTixTQUFTLENBQUNvQixLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFBRTtFQUNqRyxPQUFPRixjQUFjLENBQUNFLEtBQUssQ0FBQztBQUM3QixDQUFDIn0=