a314374eea6ea21fa159f7b7239e4824
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getTypeByValue = getTypeByValue;
function getTypeByValue(value) {
  const valueType = typeof value;
  switch (valueType) {
    case 'number':
      if (Number.isNaN(value)) {
        return 'NaN';
      }
      if (!Number.isFinite(value)) {
        return 'Infinity';
      }
      if (value !== Math.floor(value)) {
        return 'float';
      }
      return 'number';
    case 'object':
      if (value === null) {
        return 'null';
      }
      return value.constructor.name;
    default:
      return valueType;
  }
}

// IE 11 support
function ponyfillIsInteger(x) {
  // eslint-disable-next-line no-restricted-globals
  return typeof x === 'number' && isFinite(x) && Math.floor(x) === x;
}
const isInteger = Number.isInteger || ponyfillIsInteger;
function requiredInteger(props, propName, componentName, location) {
  const propValue = props[propName];
  if (propValue == null || !isInteger(propValue)) {
    const propType = getTypeByValue(propValue);
    return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
  }
  return null;
}
function validator(props, propName, ...other) {
  const propValue = props[propName];
  if (propValue === undefined) {
    return null;
  }
  return requiredInteger(props, propName, ...other);
}
function validatorNoop() {
  return null;
}
validator.isRequired = requiredInteger;
validatorNoop.isRequired = validatorNoop;
var _default = process.env.NODE_ENV === 'production' ? validatorNoop : validator;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJnZXRUeXBlQnlWYWx1ZSIsInZhbHVlVHlwZSIsIk51bWJlciIsImlzTmFOIiwiaXNGaW5pdGUiLCJNYXRoIiwiZmxvb3IiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJwb255ZmlsbElzSW50ZWdlciIsIngiLCJpc0ludGVnZXIiLCJyZXF1aXJlZEludGVnZXIiLCJwcm9wcyIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsImxvY2F0aW9uIiwicHJvcFZhbHVlIiwicHJvcFR5cGUiLCJSYW5nZUVycm9yIiwidmFsaWRhdG9yIiwib3RoZXIiLCJ1bmRlZmluZWQiLCJ2YWxpZGF0b3JOb29wIiwiaXNSZXF1aXJlZCIsIl9kZWZhdWx0IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIl0sInNvdXJjZXMiOlsiaW50ZWdlclByb3BUeXBlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuZXhwb3J0cy5nZXRUeXBlQnlWYWx1ZSA9IGdldFR5cGVCeVZhbHVlO1xuZnVuY3Rpb24gZ2V0VHlwZUJ5VmFsdWUodmFsdWUpIHtcbiAgY29uc3QgdmFsdWVUeXBlID0gdHlwZW9mIHZhbHVlO1xuICBzd2l0Y2ggKHZhbHVlVHlwZSkge1xuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBpZiAoTnVtYmVyLmlzTmFOKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gJ05hTic7XG4gICAgICB9XG4gICAgICBpZiAoIU51bWJlci5pc0Zpbml0ZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICdJbmZpbml0eSc7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgIT09IE1hdGguZmxvb3IodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAnZmxvYXQnO1xuICAgICAgfVxuICAgICAgcmV0dXJuICdudW1iZXInO1xuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICdudWxsJztcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdmFsdWVUeXBlO1xuICB9XG59XG5cbi8vIElFIDExIHN1cHBvcnRcbmZ1bmN0aW9uIHBvbnlmaWxsSXNJbnRlZ2VyKHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdudW1iZXInICYmIGlzRmluaXRlKHgpICYmIE1hdGguZmxvb3IoeCkgPT09IHg7XG59XG5jb25zdCBpc0ludGVnZXIgPSBOdW1iZXIuaXNJbnRlZ2VyIHx8IHBvbnlmaWxsSXNJbnRlZ2VyO1xuZnVuY3Rpb24gcmVxdWlyZWRJbnRlZ2VyKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pIHtcbiAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICBpZiAocHJvcFZhbHVlID09IG51bGwgfHwgIWlzSW50ZWdlcihwcm9wVmFsdWUpKSB7XG4gICAgY29uc3QgcHJvcFR5cGUgPSBnZXRUeXBlQnlWYWx1ZShwcm9wVmFsdWUpO1xuICAgIHJldHVybiBuZXcgUmFuZ2VFcnJvcihgSW52YWxpZCAke2xvY2F0aW9ufSBcXGAke3Byb3BOYW1lfVxcYCBvZiB0eXBlIFxcYCR7cHJvcFR5cGV9XFxgIHN1cHBsaWVkIHRvIFxcYCR7Y29tcG9uZW50TmFtZX1cXGAsIGV4cGVjdGVkIFxcYGludGVnZXJcXGAuYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiB2YWxpZGF0b3IocHJvcHMsIHByb3BOYW1lLCAuLi5vdGhlcikge1xuICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gIGlmIChwcm9wVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiByZXF1aXJlZEludGVnZXIocHJvcHMsIHByb3BOYW1lLCAuLi5vdGhlcik7XG59XG5mdW5jdGlvbiB2YWxpZGF0b3JOb29wKCkge1xuICByZXR1cm4gbnVsbDtcbn1cbnZhbGlkYXRvci5pc1JlcXVpcmVkID0gcmVxdWlyZWRJbnRlZ2VyO1xudmFsaWRhdG9yTm9vcC5pc1JlcXVpcmVkID0gdmFsaWRhdG9yTm9vcDtcbnZhciBfZGVmYXVsdCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgPyB2YWxpZGF0b3JOb29wIDogdmFsaWRhdG9yO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUN4QkYsT0FBTyxDQUFDRyxjQUFjLEdBQUdBLGNBQWM7QUFDdkMsU0FBU0EsY0FBY0EsQ0FBQ0YsS0FBSyxFQUFFO0VBQzdCLE1BQU1HLFNBQVMsR0FBRyxPQUFPSCxLQUFLO0VBQzlCLFFBQVFHLFNBQVM7SUFDZixLQUFLLFFBQVE7TUFDWCxJQUFJQyxNQUFNLENBQUNDLEtBQUssQ0FBQ0wsS0FBSyxDQUFDLEVBQUU7UUFDdkIsT0FBTyxLQUFLO01BQ2Q7TUFDQSxJQUFJLENBQUNJLE1BQU0sQ0FBQ0UsUUFBUSxDQUFDTixLQUFLLENBQUMsRUFBRTtRQUMzQixPQUFPLFVBQVU7TUFDbkI7TUFDQSxJQUFJQSxLQUFLLEtBQUtPLElBQUksQ0FBQ0MsS0FBSyxDQUFDUixLQUFLLENBQUMsRUFBRTtRQUMvQixPQUFPLE9BQU87TUFDaEI7TUFDQSxPQUFPLFFBQVE7SUFDakIsS0FBSyxRQUFRO01BQ1gsSUFBSUEsS0FBSyxLQUFLLElBQUksRUFBRTtRQUNsQixPQUFPLE1BQU07TUFDZjtNQUNBLE9BQU9BLEtBQUssQ0FBQ1MsV0FBVyxDQUFDQyxJQUFJO0lBQy9CO01BQ0UsT0FBT1AsU0FBUztFQUFDO0FBRXZCOztBQUVBO0FBQ0EsU0FBU1EsaUJBQWlCQSxDQUFDQyxDQUFDLEVBQUU7RUFDNUI7RUFDQSxPQUFPLE9BQU9BLENBQUMsS0FBSyxRQUFRLElBQUlOLFFBQVEsQ0FBQ00sQ0FBQyxDQUFDLElBQUlMLElBQUksQ0FBQ0MsS0FBSyxDQUFDSSxDQUFDLENBQUMsS0FBS0EsQ0FBQztBQUNwRTtBQUNBLE1BQU1DLFNBQVMsR0FBR1QsTUFBTSxDQUFDUyxTQUFTLElBQUlGLGlCQUFpQjtBQUN2RCxTQUFTRyxlQUFlQSxDQUFDQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsYUFBYSxFQUFFQyxRQUFRLEVBQUU7RUFDakUsTUFBTUMsU0FBUyxHQUFHSixLQUFLLENBQUNDLFFBQVEsQ0FBQztFQUNqQyxJQUFJRyxTQUFTLElBQUksSUFBSSxJQUFJLENBQUNOLFNBQVMsQ0FBQ00sU0FBUyxDQUFDLEVBQUU7SUFDOUMsTUFBTUMsUUFBUSxHQUFHbEIsY0FBYyxDQUFDaUIsU0FBUyxDQUFDO0lBQzFDLE9BQU8sSUFBSUUsVUFBVSxDQUFFLFdBQVVILFFBQVMsTUFBS0YsUUFBUyxnQkFBZUksUUFBUyxvQkFBbUJILGFBQWMsMkJBQTBCLENBQUM7RUFDOUk7RUFDQSxPQUFPLElBQUk7QUFDYjtBQUNBLFNBQVNLLFNBQVNBLENBQUNQLEtBQUssRUFBRUMsUUFBUSxFQUFFLEdBQUdPLEtBQUssRUFBRTtFQUM1QyxNQUFNSixTQUFTLEdBQUdKLEtBQUssQ0FBQ0MsUUFBUSxDQUFDO0VBQ2pDLElBQUlHLFNBQVMsS0FBS0ssU0FBUyxFQUFFO0lBQzNCLE9BQU8sSUFBSTtFQUNiO0VBQ0EsT0FBT1YsZUFBZSxDQUFDQyxLQUFLLEVBQUVDLFFBQVEsRUFBRSxHQUFHTyxLQUFLLENBQUM7QUFDbkQ7QUFDQSxTQUFTRSxhQUFhQSxDQUFBLEVBQUc7RUFDdkIsT0FBTyxJQUFJO0FBQ2I7QUFDQUgsU0FBUyxDQUFDSSxVQUFVLEdBQUdaLGVBQWU7QUFDdENXLGFBQWEsQ0FBQ0MsVUFBVSxHQUFHRCxhQUFhO0FBQ3hDLElBQUlFLFFBQVEsR0FBR0MsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFFBQVEsS0FBSyxZQUFZLEdBQUdMLGFBQWEsR0FBR0gsU0FBUztBQUNoRnZCLE9BQU8sQ0FBQ0UsT0FBTyxHQUFHMEIsUUFBUSJ9