9145c7c3337ac7a80de7322464c218b6
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveDescription = toHaveDescription;
var _utils = require("./utils");

// See algoritm: https://www.w3.org/TR/accname-1.1/#mapping_additional_nd_description
function toHaveDescription(htmlElement, checkWith) {
  (0, _utils.deprecate)('toHaveDescription', 'Please use toHaveAccessibleDescription.');
  (0, _utils.checkHtmlElement)(htmlElement, toHaveDescription, this);
  const expectsDescription = checkWith !== undefined;
  const descriptionIDRaw = htmlElement.getAttribute('aria-describedby') || '';
  const descriptionIDs = descriptionIDRaw.split(/\s+/).filter(Boolean);
  let description = '';
  if (descriptionIDs.length > 0) {
    const document = htmlElement.ownerDocument;
    const descriptionEls = descriptionIDs.map(descriptionID => document.getElementById(descriptionID)).filter(Boolean);
    description = (0, _utils.normalize)(descriptionEls.map(el => el.textContent).join(' '));
  }
  return {
    pass: expectsDescription ? checkWith instanceof RegExp ? checkWith.test(description) : this.equals(description, checkWith) : Boolean(description),
    message: () => {
      const to = this.isNot ? 'not to' : 'to';
      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveDescription`, 'element', ''), `Expected the element ${to} have description`, this.utils.printExpected(checkWith), 'Received', this.utils.printReceived(description));
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvSGF2ZURlc2NyaXB0aW9uIiwiX3V0aWxzIiwicmVxdWlyZSIsImh0bWxFbGVtZW50IiwiY2hlY2tXaXRoIiwiZGVwcmVjYXRlIiwiY2hlY2tIdG1sRWxlbWVudCIsImV4cGVjdHNEZXNjcmlwdGlvbiIsInVuZGVmaW5lZCIsImRlc2NyaXB0aW9uSURSYXciLCJnZXRBdHRyaWJ1dGUiLCJkZXNjcmlwdGlvbklEcyIsInNwbGl0IiwiZmlsdGVyIiwiQm9vbGVhbiIsImRlc2NyaXB0aW9uIiwibGVuZ3RoIiwiZG9jdW1lbnQiLCJvd25lckRvY3VtZW50IiwiZGVzY3JpcHRpb25FbHMiLCJtYXAiLCJkZXNjcmlwdGlvbklEIiwiZ2V0RWxlbWVudEJ5SWQiLCJub3JtYWxpemUiLCJlbCIsInRleHRDb250ZW50Iiwiam9pbiIsInBhc3MiLCJSZWdFeHAiLCJ0ZXN0IiwiZXF1YWxzIiwibWVzc2FnZSIsInRvIiwiaXNOb3QiLCJnZXRNZXNzYWdlIiwidXRpbHMiLCJtYXRjaGVySGludCIsInByaW50RXhwZWN0ZWQiLCJwcmludFJlY2VpdmVkIl0sInNvdXJjZXMiOlsidG8taGF2ZS1kZXNjcmlwdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudG9IYXZlRGVzY3JpcHRpb24gPSB0b0hhdmVEZXNjcmlwdGlvbjtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG4vLyBTZWUgYWxnb3JpdG06IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9hY2NuYW1lLTEuMS8jbWFwcGluZ19hZGRpdGlvbmFsX25kX2Rlc2NyaXB0aW9uXG5mdW5jdGlvbiB0b0hhdmVEZXNjcmlwdGlvbihodG1sRWxlbWVudCwgY2hlY2tXaXRoKSB7XG4gICgwLCBfdXRpbHMuZGVwcmVjYXRlKSgndG9IYXZlRGVzY3JpcHRpb24nLCAnUGxlYXNlIHVzZSB0b0hhdmVBY2Nlc3NpYmxlRGVzY3JpcHRpb24uJyk7XG4gICgwLCBfdXRpbHMuY2hlY2tIdG1sRWxlbWVudCkoaHRtbEVsZW1lbnQsIHRvSGF2ZURlc2NyaXB0aW9uLCB0aGlzKTtcbiAgY29uc3QgZXhwZWN0c0Rlc2NyaXB0aW9uID0gY2hlY2tXaXRoICE9PSB1bmRlZmluZWQ7XG4gIGNvbnN0IGRlc2NyaXB0aW9uSURSYXcgPSBodG1sRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknKSB8fCAnJztcbiAgY29uc3QgZGVzY3JpcHRpb25JRHMgPSBkZXNjcmlwdGlvbklEUmF3LnNwbGl0KC9cXHMrLykuZmlsdGVyKEJvb2xlYW4pO1xuICBsZXQgZGVzY3JpcHRpb24gPSAnJztcblxuICBpZiAoZGVzY3JpcHRpb25JRHMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGRvY3VtZW50ID0gaHRtbEVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgICBjb25zdCBkZXNjcmlwdGlvbkVscyA9IGRlc2NyaXB0aW9uSURzLm1hcChkZXNjcmlwdGlvbklEID0+IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRlc2NyaXB0aW9uSUQpKS5maWx0ZXIoQm9vbGVhbik7XG4gICAgZGVzY3JpcHRpb24gPSAoMCwgX3V0aWxzLm5vcm1hbGl6ZSkoZGVzY3JpcHRpb25FbHMubWFwKGVsID0+IGVsLnRleHRDb250ZW50KS5qb2luKCcgJykpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXNzOiBleHBlY3RzRGVzY3JpcHRpb24gPyBjaGVja1dpdGggaW5zdGFuY2VvZiBSZWdFeHAgPyBjaGVja1dpdGgudGVzdChkZXNjcmlwdGlvbikgOiB0aGlzLmVxdWFscyhkZXNjcmlwdGlvbiwgY2hlY2tXaXRoKSA6IEJvb2xlYW4oZGVzY3JpcHRpb24pLFxuICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgIGNvbnN0IHRvID0gdGhpcy5pc05vdCA/ICdub3QgdG8nIDogJ3RvJztcbiAgICAgIHJldHVybiAoMCwgX3V0aWxzLmdldE1lc3NhZ2UpKHRoaXMsIHRoaXMudXRpbHMubWF0Y2hlckhpbnQoYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0hhdmVEZXNjcmlwdGlvbmAsICdlbGVtZW50JywgJycpLCBgRXhwZWN0ZWQgdGhlIGVsZW1lbnQgJHt0b30gaGF2ZSBkZXNjcmlwdGlvbmAsIHRoaXMudXRpbHMucHJpbnRFeHBlY3RlZChjaGVja1dpdGgpLCAnUmVjZWl2ZWQnLCB0aGlzLnV0aWxzLnByaW50UmVjZWl2ZWQoZGVzY3JpcHRpb24pKTtcbiAgICB9XG4gIH07XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsaUJBQWlCLEdBQUdBLGlCQUFpQjtBQUU3QyxJQUFJQyxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxTQUFTLENBQUM7O0FBRS9CO0FBQ0EsU0FBU0YsaUJBQWlCQSxDQUFDRyxXQUFXLEVBQUVDLFNBQVMsRUFBRTtFQUNqRCxDQUFDLENBQUMsRUFBRUgsTUFBTSxDQUFDSSxTQUFTLEVBQUUsbUJBQW1CLEVBQUUseUNBQXlDLENBQUM7RUFDckYsQ0FBQyxDQUFDLEVBQUVKLE1BQU0sQ0FBQ0ssZ0JBQWdCLEVBQUVILFdBQVcsRUFBRUgsaUJBQWlCLEVBQUUsSUFBSSxDQUFDO0VBQ2xFLE1BQU1PLGtCQUFrQixHQUFHSCxTQUFTLEtBQUtJLFNBQVM7RUFDbEQsTUFBTUMsZ0JBQWdCLEdBQUdOLFdBQVcsQ0FBQ08sWUFBWSxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRTtFQUMzRSxNQUFNQyxjQUFjLEdBQUdGLGdCQUFnQixDQUFDRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUNDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDO0VBQ3BFLElBQUlDLFdBQVcsR0FBRyxFQUFFO0VBRXBCLElBQUlKLGNBQWMsQ0FBQ0ssTUFBTSxHQUFHLENBQUMsRUFBRTtJQUM3QixNQUFNQyxRQUFRLEdBQUdkLFdBQVcsQ0FBQ2UsYUFBYTtJQUMxQyxNQUFNQyxjQUFjLEdBQUdSLGNBQWMsQ0FBQ1MsR0FBRyxDQUFDQyxhQUFhLElBQUlKLFFBQVEsQ0FBQ0ssY0FBYyxDQUFDRCxhQUFhLENBQUMsQ0FBQyxDQUFDUixNQUFNLENBQUNDLE9BQU8sQ0FBQztJQUNsSEMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFZCxNQUFNLENBQUNzQixTQUFTLEVBQUVKLGNBQWMsQ0FBQ0MsR0FBRyxDQUFDSSxFQUFFLElBQUlBLEVBQUUsQ0FBQ0MsV0FBVyxDQUFDLENBQUNDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUN6RjtFQUVBLE9BQU87SUFDTEMsSUFBSSxFQUFFcEIsa0JBQWtCLEdBQUdILFNBQVMsWUFBWXdCLE1BQU0sR0FBR3hCLFNBQVMsQ0FBQ3lCLElBQUksQ0FBQ2QsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDZSxNQUFNLENBQUNmLFdBQVcsRUFBRVgsU0FBUyxDQUFDLEdBQUdVLE9BQU8sQ0FBQ0MsV0FBVyxDQUFDO0lBQ2pKZ0IsT0FBTyxFQUFFQSxDQUFBLEtBQU07TUFDYixNQUFNQyxFQUFFLEdBQUcsSUFBSSxDQUFDQyxLQUFLLEdBQUcsUUFBUSxHQUFHLElBQUk7TUFDdkMsT0FBTyxDQUFDLENBQUMsRUFBRWhDLE1BQU0sQ0FBQ2lDLFVBQVUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDQyxLQUFLLENBQUNDLFdBQVcsQ0FBRSxHQUFFLElBQUksQ0FBQ0gsS0FBSyxHQUFHLE1BQU0sR0FBRyxFQUFHLG9CQUFtQixFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsRUFBRyx3QkFBdUJELEVBQUcsbUJBQWtCLEVBQUUsSUFBSSxDQUFDRyxLQUFLLENBQUNFLGFBQWEsQ0FBQ2pDLFNBQVMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMrQixLQUFLLENBQUNHLGFBQWEsQ0FBQ3ZCLFdBQVcsQ0FBQyxDQUFDO0lBQ3BRO0VBQ0YsQ0FBQztBQUNIIn0=