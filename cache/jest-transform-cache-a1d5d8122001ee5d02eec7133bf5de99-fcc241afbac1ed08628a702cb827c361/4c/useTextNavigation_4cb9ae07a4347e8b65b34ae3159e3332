d6907b07ef0afb5aa472d7feae7e43ea
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useTextNavigation;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
const TEXT_NAVIGATION_RESET_TIMEOUT = 500; // milliseconds

/**
 * @ignore - internal hook.
 *
 * Provides a handler for text navigation.
 * It's used to navigate the listbox by typing the first letters of the options.
 *
 * @param callback A function to be called when the navigation should be performed.
 * @returns A function to be used in a keydown event handler.
 */
function useTextNavigation(callback) {
  const textCriteriaRef = React.useRef({
    searchString: '',
    lastTime: null
  });
  return React.useCallback(event => {
    if (event.key.length === 1 && event.key !== ' ') {
      const textCriteria = textCriteriaRef.current;
      const lowerKey = event.key.toLowerCase();
      const currentTime = performance.now();
      if (textCriteria.searchString.length > 0 && textCriteria.lastTime && currentTime - textCriteria.lastTime > TEXT_NAVIGATION_RESET_TIMEOUT) {
        textCriteria.searchString = lowerKey;
      } else if (textCriteria.searchString.length !== 1 || lowerKey !== textCriteria.searchString) {
        // If there is just one character in the buffer and the key is the same, do not append
        textCriteria.searchString += lowerKey;
      }
      textCriteria.lastTime = currentTime;
      callback(textCriteria.searchString, event);
    }
  }, [callback]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJ1c2VUZXh0TmF2aWdhdGlvbiIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIlRFWFRfTkFWSUdBVElPTl9SRVNFVF9USU1FT1VUIiwiY2FsbGJhY2siLCJ0ZXh0Q3JpdGVyaWFSZWYiLCJ1c2VSZWYiLCJzZWFyY2hTdHJpbmciLCJsYXN0VGltZSIsInVzZUNhbGxiYWNrIiwiZXZlbnQiLCJsZW5ndGgiLCJ0ZXh0Q3JpdGVyaWEiLCJjdXJyZW50IiwibG93ZXJLZXkiLCJ0b0xvd2VyQ2FzZSIsImN1cnJlbnRUaW1lIiwicGVyZm9ybWFuY2UiLCJub3ciXSwic291cmNlcyI6WyJ1c2VUZXh0TmF2aWdhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVzZVRleHROYXZpZ2F0aW9uO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZUJhYmVsSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAobm9kZUludGVyb3ApIHsgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wOyB9KShub2RlSW50ZXJvcCk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHsgaWYgKCFub2RlSW50ZXJvcCAmJiBvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuY29uc3QgVEVYVF9OQVZJR0FUSU9OX1JFU0VUX1RJTUVPVVQgPSA1MDA7IC8vIG1pbGxpc2Vjb25kc1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBob29rLlxuICpcbiAqIFByb3ZpZGVzIGEgaGFuZGxlciBmb3IgdGV4dCBuYXZpZ2F0aW9uLlxuICogSXQncyB1c2VkIHRvIG5hdmlnYXRlIHRoZSBsaXN0Ym94IGJ5IHR5cGluZyB0aGUgZmlyc3QgbGV0dGVycyBvZiB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gY2FsbGJhY2sgQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgbmF2aWdhdGlvbiBzaG91bGQgYmUgcGVyZm9ybWVkLlxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0byBiZSB1c2VkIGluIGEga2V5ZG93biBldmVudCBoYW5kbGVyLlxuICovXG5mdW5jdGlvbiB1c2VUZXh0TmF2aWdhdGlvbihjYWxsYmFjaykge1xuICBjb25zdCB0ZXh0Q3JpdGVyaWFSZWYgPSBSZWFjdC51c2VSZWYoe1xuICAgIHNlYXJjaFN0cmluZzogJycsXG4gICAgbGFzdFRpbWU6IG51bGxcbiAgfSk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgaWYgKGV2ZW50LmtleS5sZW5ndGggPT09IDEgJiYgZXZlbnQua2V5ICE9PSAnICcpIHtcbiAgICAgIGNvbnN0IHRleHRDcml0ZXJpYSA9IHRleHRDcml0ZXJpYVJlZi5jdXJyZW50O1xuICAgICAgY29uc3QgbG93ZXJLZXkgPSBldmVudC5rZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICBpZiAodGV4dENyaXRlcmlhLnNlYXJjaFN0cmluZy5sZW5ndGggPiAwICYmIHRleHRDcml0ZXJpYS5sYXN0VGltZSAmJiBjdXJyZW50VGltZSAtIHRleHRDcml0ZXJpYS5sYXN0VGltZSA+IFRFWFRfTkFWSUdBVElPTl9SRVNFVF9USU1FT1VUKSB7XG4gICAgICAgIHRleHRDcml0ZXJpYS5zZWFyY2hTdHJpbmcgPSBsb3dlcktleTtcbiAgICAgIH0gZWxzZSBpZiAodGV4dENyaXRlcmlhLnNlYXJjaFN0cmluZy5sZW5ndGggIT09IDEgfHwgbG93ZXJLZXkgIT09IHRleHRDcml0ZXJpYS5zZWFyY2hTdHJpbmcpIHtcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMganVzdCBvbmUgY2hhcmFjdGVyIGluIHRoZSBidWZmZXIgYW5kIHRoZSBrZXkgaXMgdGhlIHNhbWUsIGRvIG5vdCBhcHBlbmRcbiAgICAgICAgdGV4dENyaXRlcmlhLnNlYXJjaFN0cmluZyArPSBsb3dlcktleTtcbiAgICAgIH1cbiAgICAgIHRleHRDcml0ZXJpYS5sYXN0VGltZSA9IGN1cnJlbnRUaW1lO1xuICAgICAgY2FsbGJhY2sodGV4dENyaXRlcmlhLnNlYXJjaFN0cmluZywgZXZlbnQpO1xuICAgIH1cbiAgfSwgW2NhbGxiYWNrXSk7XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHQyxpQkFBaUI7QUFDbkMsSUFBSUMsS0FBSyxHQUFHQyx1QkFBdUIsQ0FBQ0MsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JELFNBQVNDLHdCQUF3QkEsQ0FBQ0MsV0FBVyxFQUFFO0VBQUUsSUFBSSxPQUFPQyxPQUFPLEtBQUssVUFBVSxFQUFFLE9BQU8sSUFBSTtFQUFFLElBQUlDLGlCQUFpQixHQUFHLElB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