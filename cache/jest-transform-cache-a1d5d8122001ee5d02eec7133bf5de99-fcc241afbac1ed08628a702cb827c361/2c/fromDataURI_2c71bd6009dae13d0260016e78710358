6f88c3cda3d6fb942638cd4acfb04c6e
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = fromDataURI;
var _AxiosError = _interopRequireDefault(require("../core/AxiosError.js"));
var _parseProtocol = _interopRequireDefault(require("./parseProtocol.js"));
var _index = _interopRequireDefault(require("../platform/index.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;

/**
 * Parse data uri to a Buffer or Blob
 *
 * @param {String} uri
 * @param {?Boolean} asBlob
 * @param {?Object} options
 * @param {?Function} options.Blob
 *
 * @returns {Buffer|Blob}
 */
function fromDataURI(uri, asBlob, options) {
  const _Blob = options && options.Blob || _index.default.classes.Blob;
  const protocol = (0, _parseProtocol.default)(uri);
  if (asBlob === undefined && _Blob) {
    asBlob = true;
  }
  if (protocol === 'data') {
    uri = protocol.length ? uri.slice(protocol.length + 1) : uri;
    const match = DATA_URL_PATTERN.exec(uri);
    if (!match) {
      throw new _AxiosError.default('Invalid URL', _AxiosError.default.ERR_INVALID_URL);
    }
    const mime = match[1];
    const isBase64 = match[2];
    const body = match[3];
    const buffer = Buffer.from(decodeURIComponent(body), isBase64 ? 'base64' : 'utf8');
    if (asBlob) {
      if (!_Blob) {
        throw new _AxiosError.default('Blob is not supported', _AxiosError.default.ERR_NOT_SUPPORT);
      }
      return new _Blob([buffer], {
        type: mime
      });
    }
    return buffer;
  }
  throw new _AxiosError.default('Unsupported protocol ' + protocol, _AxiosError.default.ERR_NOT_SUPPORT);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJmcm9tRGF0YVVSSSIsIl9BeGlvc0Vycm9yIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcGFyc2VQcm90b2NvbCIsIl9pbmRleCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJEQVRBX1VSTF9QQVRURVJOIiwidXJpIiwiYXNCbG9iIiwib3B0aW9ucyIsIl9CbG9iIiwiQmxvYiIsInBsYXRmb3JtIiwiY2xhc3NlcyIsInByb3RvY29sIiwicGFyc2VQcm90b2NvbCIsInVuZGVmaW5lZCIsImxlbmd0aCIsInNsaWNlIiwibWF0Y2giLCJleGVjIiwiQXhpb3NFcnJvciIsIkVSUl9JTlZBTElEX1VSTCIsIm1pbWUiLCJpc0Jhc2U2NCIsImJvZHkiLCJidWZmZXIiLCJCdWZmZXIiLCJmcm9tIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiRVJSX05PVF9TVVBQT1JUIiwidHlwZSJdLCJzb3VyY2VzIjpbImZyb21EYXRhVVJJLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCBwYXJzZVByb3RvY29sIGZyb20gJy4vcGFyc2VQcm90b2NvbC5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5jb25zdCBEQVRBX1VSTF9QQVRURVJOID0gL14oPzooW147XSspOyk/KD86W147XSs7KT8oYmFzZTY0fCksKFtcXHNcXFNdKikkLztcblxuLyoqXG4gKiBQYXJzZSBkYXRhIHVyaSB0byBhIEJ1ZmZlciBvciBCbG9iXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVyaVxuICogQHBhcmFtIHs/Qm9vbGVhbn0gYXNCbG9iXG4gKiBAcGFyYW0gez9PYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7P0Z1bmN0aW9ufSBvcHRpb25zLkJsb2JcbiAqXG4gKiBAcmV0dXJucyB7QnVmZmVyfEJsb2J9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZyb21EYXRhVVJJKHVyaSwgYXNCbG9iLCBvcHRpb25zKSB7XG4gIGNvbnN0IF9CbG9iID0gb3B0aW9ucyAmJiBvcHRpb25zLkJsb2IgfHwgcGxhdGZvcm0uY2xhc3Nlcy5CbG9iO1xuICBjb25zdCBwcm90b2NvbCA9IHBhcnNlUHJvdG9jb2wodXJpKTtcblxuICBpZiAoYXNCbG9iID09PSB1bmRlZmluZWQgJiYgX0Jsb2IpIHtcbiAgICBhc0Jsb2IgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHByb3RvY29sID09PSAnZGF0YScpIHtcbiAgICB1cmkgPSBwcm90b2NvbC5sZW5ndGggPyB1cmkuc2xpY2UocHJvdG9jb2wubGVuZ3RoICsgMSkgOiB1cmk7XG5cbiAgICBjb25zdCBtYXRjaCA9IERBVEFfVVJMX1BBVFRFUk4uZXhlYyh1cmkpO1xuXG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ0ludmFsaWQgVVJMJywgQXhpb3NFcnJvci5FUlJfSU5WQUxJRF9VUkwpO1xuICAgIH1cblxuICAgIGNvbnN0IG1pbWUgPSBtYXRjaFsxXTtcbiAgICBjb25zdCBpc0Jhc2U2NCA9IG1hdGNoWzJdO1xuICAgIGNvbnN0IGJvZHkgPSBtYXRjaFszXTtcbiAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuZnJvbShkZWNvZGVVUklDb21wb25lbnQoYm9keSksIGlzQmFzZTY0ID8gJ2Jhc2U2NCcgOiAndXRmOCcpO1xuXG4gICAgaWYgKGFzQmxvYikge1xuICAgICAgaWYgKCFfQmxvYikge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignQmxvYiBpcyBub3Qgc3VwcG9ydGVkJywgQXhpb3NFcnJvci5FUlJfTk9UX1NVUFBPUlQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IF9CbG9iKFtidWZmZXJdLCB7dHlwZTogbWltZX0pO1xuICAgIH1cblxuICAgIHJldHVybiBidWZmZXI7XG4gIH1cblxuICB0aHJvdyBuZXcgQXhpb3NFcnJvcignVW5zdXBwb3J0ZWQgcHJvdG9jb2wgJyArIHByb3RvY29sLCBBeGlvc0Vycm9yLkVSUl9OT1RfU1VQUE9SVCk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQUNBLE1BQUEsQ0FBQUMsY0FBQSxDQUFBQyxPQUFBO0VBQUFDLEtBQUE7QUFBQTtBQUFBRCxPQUFBLENBQUFFLE9BQUEsR0FBQUMsV0FBQTtBQUViLElBQUFDLFdBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGNBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUE0QyxTQUFBRCx1QkFBQUksR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFQLE9BQUEsRUFBQU8sR0FBQTtBQUU1QyxNQUFNRSxnQkFBZ0IsR0FBRywrQ0FBK0M7O0FBRXhFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2UsU0FBU1IsV0FBV0EsQ0FBQ1MsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtFQUN4RCxNQUFNQyxLQUFLLEdBQUdELE9BQU8sSUFBSUEsT0FBTyxDQUFDRSxJQUFJLElBQUlDLGNBQVEsQ0FBQ0MsT0FBTyxDQUFDRixJQUFJO0VBQzlELE1BQU1HLFFBQVEsR0FBRyxJQUFBQyxzQkFBYSxFQUFDUixHQUFHLENBQUM7RUFFbkMsSUFBSUMsTUFBTSxLQUFLUSxTQUFTLElBQUlOLEtBQUssRUFBRTtJQUNqQ0YsTUFBTSxHQUFHLElBQUk7RUFDZjtFQUVBLElBQUlNLFFBQVEsS0FBSyxNQUFNLEVBQUU7SUFDdkJQLEdBQUcsR0FBR08sUUFBUSxDQUFDRyxNQUFNLEdBQUdWLEdBQUcsQ0FBQ1csS0FBSyxDQUFDSixRQUFRLENBQUNHLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBR1YsR0FBRztJQUU1RCxNQUFNWSxLQUFLLEdBQUdiLGdCQUFnQixDQUFDYyxJQUFJLENBQUNiLEdBQUcsQ0FBQztJQUV4QyxJQUFJLENBQUNZLEtBQUssRUFBRTtNQUNWLE1BQU0sSUFBSUUsbUJBQVUsQ0FBQyxhQUFhLEVBQUVBLG1CQUFVLENBQUNDLGVBQWUsQ0FBQztJQUNqRTtJQUVBLE1BQU1DLElBQUksR0FBR0osS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNyQixNQUFNSyxRQUFRLEdBQUdMLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDekIsTUFBTU0sSUFBSSxHQUFHTixLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3JCLE1BQU1PLE1BQU0sR0FBR0MsTUFBTSxDQUFDQyxJQUFJLENBQUNDLGtCQUFrQixDQUFDSixJQUFJLENBQUMsRUFBRUQsUUFBUSxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUM7SUFFbEYsSUFBSWhCLE1BQU0sRUFBRTtNQUNWLElBQUksQ0FBQ0UsS0FBSyxFQUFFO1FBQ1YsTUFBTSxJQUFJVyxtQkFBVSxDQUFDLHVCQUF1QixFQUFFQSxtQkFBVSxDQUFDUyxlQUFlLENBQUM7TUFDM0U7TUFFQSxPQUFPLElBQUlwQixLQUFLLENBQUMsQ0FBQ2dCLE1BQU0sQ0FBQyxFQUFFO1FBQUNLLElBQUksRUFBRVI7TUFBSSxDQUFDLENBQUM7SUFDMUM7SUFFQSxPQUFPRyxNQUFNO0VBQ2Y7RUFFQSxNQUFNLElBQUlMLG1CQUFVLENBQUMsdUJBQXVCLEdBQUdQLFFBQVEsRUFBRU8sbUJBQVUsQ0FBQ1MsZUFBZSxDQUFDO0FBQ3RGIn0=