7e86cbf8ac34c489ecf7e3f80b4b3d3c
'use strict';

var bind = require('function-bind');
var GetIntrinsic = require('get-intrinsic');
var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);
var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');
if ($defineProperty) {
  try {
    $defineProperty({}, 'a', {
      value: 1
    });
  } catch (e) {
    // IE 8 has a broken defineProperty
    $defineProperty = null;
  }
}
module.exports = function callBind(originalFunction) {
  var func = $reflectApply(bind, $call, arguments);
  if ($gOPD && $defineProperty) {
    var desc = $gOPD(func, 'length');
    if (desc.configurable) {
      // original length, plus the receiver, minus any additional arguments (after the receiver)
      $defineProperty(func, 'length', {
        value: 1 + $max(0, originalFunction.length - (arguments.length - 1))
      });
    }
  }
  return func;
};
var applyBind = function applyBind() {
  return $reflectApply(bind, $apply, arguments);
};
if ($defineProperty) {
  $defineProperty(module.exports, 'apply', {
    value: applyBind
  });
} else {
  module.exports.apply = applyBind;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiaW5kIiwicmVxdWlyZSIsIkdldEludHJpbnNpYyIsIiRhcHBseSIsIiRjYWxsIiwiJHJlZmxlY3RBcHBseSIsImNhbGwiLCIkZ09QRCIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRtYXgiLCJ2YWx1ZSIsImUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY2FsbEJpbmQiLCJvcmlnaW5hbEZ1bmN0aW9uIiwiZnVuYyIsImFyZ3VtZW50cyIsImRlc2MiLCJjb25maWd1cmFibGUiLCJsZW5ndGgiLCJhcHBseUJpbmQiLCJhcHBseSJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJGFwcGx5ID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5JScpO1xudmFyICRjYWxsID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwlJyk7XG52YXIgJHJlZmxlY3RBcHBseSA9IEdldEludHJpbnNpYygnJVJlZmxlY3QuYXBwbHklJywgdHJ1ZSkgfHwgYmluZC5jYWxsKCRjYWxsLCAkYXBwbHkpO1xuXG52YXIgJGdPUEQgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJScsIHRydWUpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IEdldEludHJpbnNpYygnJU9iamVjdC5kZWZpbmVQcm9wZXJ0eSUnLCB0cnVlKTtcbnZhciAkbWF4ID0gR2V0SW50cmluc2ljKCclTWF0aC5tYXglJyk7XG5cbmlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0dHJ5IHtcblx0XHQkZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyB2YWx1ZTogMSB9KTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIElFIDggaGFzIGEgYnJva2VuIGRlZmluZVByb3BlcnR5XG5cdFx0JGRlZmluZVByb3BlcnR5ID0gbnVsbDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCaW5kKG9yaWdpbmFsRnVuY3Rpb24pIHtcblx0dmFyIGZ1bmMgPSAkcmVmbGVjdEFwcGx5KGJpbmQsICRjYWxsLCBhcmd1bWVudHMpO1xuXHRpZiAoJGdPUEQgJiYgJGRlZmluZVByb3BlcnR5KSB7XG5cdFx0dmFyIGRlc2MgPSAkZ09QRChmdW5jLCAnbGVuZ3RoJyk7XG5cdFx0aWYgKGRlc2MuY29uZmlndXJhYmxlKSB7XG5cdFx0XHQvLyBvcmlnaW5hbCBsZW5ndGgsIHBsdXMgdGhlIHJlY2VpdmVyLCBtaW51cyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgKGFmdGVyIHRoZSByZWNlaXZlcilcblx0XHRcdCRkZWZpbmVQcm9wZXJ0eShcblx0XHRcdFx0ZnVuYyxcblx0XHRcdFx0J2xlbmd0aCcsXG5cdFx0XHRcdHsgdmFsdWU6IDEgKyAkbWF4KDAsIG9yaWdpbmFsRnVuY3Rpb24ubGVuZ3RoIC0gKGFyZ3VtZW50cy5sZW5ndGggLSAxKSkgfVxuXHRcdFx0KTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZ1bmM7XG59O1xuXG52YXIgYXBwbHlCaW5kID0gZnVuY3Rpb24gYXBwbHlCaW5kKCkge1xuXHRyZXR1cm4gJHJlZmxlY3RBcHBseShiaW5kLCAkYXBwbHksIGFyZ3VtZW50cyk7XG59O1xuXG5pZiAoJGRlZmluZVByb3BlcnR5KSB7XG5cdCRkZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ2FwcGx5JywgeyB2YWx1ZTogYXBwbHlCaW5kIH0pO1xufSBlbHNlIHtcblx0bW9kdWxlLmV4cG9ydHMuYXBwbHkgPSBhcHBseUJpbmQ7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsZUFBZSxDQUFDO0FBQ25DLElBQUlDLFlBQVksR0FBR0QsT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUUzQyxJQUFJRSxNQUFNLEdBQUdELFlBQVksQ0FBQyw0QkFBNEIsQ0FBQztBQUN2RCxJQUFJRSxLQUFLLEdBQUdGLFlBQVksQ0FBQywyQkFBMkIsQ0FBQztBQUNyRCxJQUFJRyxhQUFhLEdBQUdILFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsSUFBSUYsSUFBSSxDQUFDTSxJQUFJLENBQUNGLEtBQUssRUFBRUQsTUFBTSxDQUFDO0FBRXJGLElBQUlJLEtBQUssR0FBR0wsWUFBWSxDQUFDLG1DQUFtQyxFQUFFLElBQUksQ0FBQztBQUNuRSxJQUFJTSxlQUFlLEdBQUdOLFlBQVksQ0FBQyx5QkFBeUIsRUFBRSxJQUFJLENBQUM7QUFDbkUsSUFBSU8sSUFBSSxHQUFHUCxZQUFZLENBQUMsWUFBWSxDQUFDO0FBRXJDLElBQUlNLGVBQWUsRUFBRTtFQUNwQixJQUFJO0lBQ0hBLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUU7TUFBRUUsS0FBSyxFQUFFO0lBQUUsQ0FBQyxDQUFDO0VBQ3ZDLENBQUMsQ0FBQyxPQUFPQyxDQUFDLEVBQUU7SUFDWDtJQUNBSCxlQUFlLEdBQUcsSUFBSTtFQUN2QjtBQUNEO0FBRUFJLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLFFBQVFBLENBQUNDLGdCQUFnQixFQUFFO0VBQ3BELElBQUlDLElBQUksR0FBR1gsYUFBYSxDQUFDTCxJQUFJLEVBQUVJLEtBQUssRUFBRWEsU0FBUyxDQUFDO0VBQ2hELElBQUlWLEtBQUssSUFBSUMsZUFBZSxFQUFFO0lBQzdCLElBQUlVLElBQUksR0FBR1gsS0FBSyxDQUFDUyxJQUFJLEVBQUUsUUFBUSxDQUFDO0lBQ2hDLElBQUlFLElBQUksQ0FBQ0MsWUFBWSxFQUFFO01BQ3RCO01BQ0FYLGVBQWUsQ0FDZFEsSUFBSSxFQUNKLFFBQVEsRUFDUjtRQUFFTixLQUFLLEVBQUUsQ0FBQyxHQUFHRCxJQUFJLENBQUMsQ0FBQyxFQUFFTSxnQkFBZ0IsQ0FBQ0ssTUFBTSxJQUFJSCxTQUFTLENBQUNHLE1BQU0sR0FBRyxDQUFDLENBQUM7TUFBRSxDQUFDLENBQ3hFO0lBQ0Y7RUFDRDtFQUNBLE9BQU9KLElBQUk7QUFDWixDQUFDO0FBRUQsSUFBSUssU0FBUyxHQUFHLFNBQVNBLFNBQVNBLENBQUEsRUFBRztFQUNwQyxPQUFPaEIsYUFBYSxDQUFDTCxJQUFJLEVBQUVHLE1BQU0sRUFBRWMsU0FBUyxDQUFDO0FBQzlDLENBQUM7QUFFRCxJQUFJVCxlQUFlLEVBQUU7RUFDcEJBLGVBQWUsQ0FBQ0ksTUFBTSxDQUFDQyxPQUFPLEVBQUUsT0FBTyxFQUFFO0lBQUVILEtBQUssRUFBRVc7RUFBVSxDQUFDLENBQUM7QUFDL0QsQ0FBQyxNQUFNO0VBQ05ULE1BQU0sQ0FBQ0MsT0FBTyxDQUFDUyxLQUFLLEdBQUdELFNBQVM7QUFDakMifQ==