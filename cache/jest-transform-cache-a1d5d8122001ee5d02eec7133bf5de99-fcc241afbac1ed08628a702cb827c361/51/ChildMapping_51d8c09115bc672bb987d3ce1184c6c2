02c76deb31246e3eca342c846cf871db
"use strict";

exports.__esModule = true;
exports.getChildMapping = getChildMapping;
exports.mergeChildMappings = mergeChildMappings;
exports.getInitialChildMapping = getInitialChildMapping;
exports.getNextChildMapping = getNextChildMapping;
var _react = require("react");

/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */
function getChildMapping(children, mapFn) {
  var mapper = function mapper(child) {
    return mapFn && (0, _react.isValidElement)(child) ? mapFn(child) : child;
  };
  var result = Object.create(null);
  if (children) _react.Children.map(children, function (c) {
    return c;
  }).forEach(function (child) {
    // run the map function here instead so that the key is the computed one
    result[child.key] = mapper(child);
  });
  return result;
}
/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */

function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};
  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  } // For each key of `next`, the list of keys to insert before that key in
  // the combined list

  var nextKeysPending = Object.create(null);
  var pendingKeys = [];
  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }
  var i;
  var childMapping = {};
  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }
    childMapping[nextKey] = getValueForKey(nextKey);
  } // Finally, add the keys which didn't appear before any key in `next`

  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }
  return childMapping;
}
function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}
function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function (child) {
    return (0, _react.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, 'appear', props),
      enter: getProp(child, 'enter', props),
      exit: getProp(child, 'exit', props)
    });
  });
}
function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children).forEach(function (key) {
    var child = children[key];
    if (!(0, _react.isValidElement)(child)) return;
    var hasPrev = (key in prevChildMapping);
    var hasNext = (key in nextChildMapping);
    var prevChild = prevChildMapping[key];
    var isLeaving = (0, _react.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)

    if (hasNext && (!hasPrev || isLeaving)) {
      // console.log('entering', key)
      children[key] = (0, _react.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      // item is old (exiting)
      // console.log('leaving', key)
      children[key] = (0, _react.cloneElement)(child, {
        in: false
      });
    } else if (hasNext && hasPrev && (0, _react.isValidElement)(prevChild)) {
      // item hasn't changed transition states
      // copy over the last transition props;
      // console.log('unchanged', key)
      children[key] = (0, _react.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    }
  });
  return children;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImdldENoaWxkTWFwcGluZyIsIm1lcmdlQ2hpbGRNYXBwaW5ncyIsImdldEluaXRpYWxDaGlsZE1hcHBpbmciLCJnZXROZXh0Q2hpbGRNYXBwaW5nIiwiX3JlYWN0IiwicmVxdWlyZSIsImNoaWxkcmVuIiwibWFwRm4iLCJtYXBwZXIiLCJjaGlsZCIsImlzVmFsaWRFbGVtZW50IiwicmVzdWx0IiwiT2JqZWN0IiwiY3JlYXRlIiwiQ2hpbGRyZW4iLCJtYXAiLCJjIiwiZm9yRWFjaCIsImtleSIsInByZXYiLCJuZXh0IiwiZ2V0VmFsdWVGb3JLZXkiLCJuZXh0S2V5c1BlbmRpbmciLCJwZW5kaW5nS2V5cyIsInByZXZLZXkiLCJsZW5ndGgiLCJwdXNoIiwiaSIsImNoaWxkTWFwcGluZyIsIm5leHRLZXkiLCJwZW5kaW5nTmV4dEtleSIsImdldFByb3AiLCJwcm9wIiwicHJvcHMiLCJvbkV4aXRlZCIsImNsb25lRWxlbWVudCIsImJpbmQiLCJpbiIsImFwcGVhciIsImVudGVyIiwiZXhpdCIsIm5leHRQcm9wcyIsInByZXZDaGlsZE1hcHBpbmciLCJuZXh0Q2hpbGRNYXBwaW5nIiwia2V5cyIsImhhc1ByZXYiLCJoYXNOZXh0IiwicHJldkNoaWxkIiwiaXNMZWF2aW5nIl0sInNvdXJjZXMiOlsiQ2hpbGRNYXBwaW5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5nZXRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmc7XG5leHBvcnRzLm1lcmdlQ2hpbGRNYXBwaW5ncyA9IG1lcmdlQ2hpbGRNYXBwaW5ncztcbmV4cG9ydHMuZ2V0SW5pdGlhbENoaWxkTWFwcGluZyA9IGdldEluaXRpYWxDaGlsZE1hcHBpbmc7XG5leHBvcnRzLmdldE5leHRDaGlsZE1hcHBpbmcgPSBnZXROZXh0Q2hpbGRNYXBwaW5nO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG4vKipcbiAqIEdpdmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYCwgcmV0dXJuIGFuIG9iamVjdCBtYXBwaW5nIGtleSB0byBjaGlsZC5cbiAqXG4gKiBAcGFyYW0geyp9IGNoaWxkcmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYFxuICogQHJldHVybiB7b2JqZWN0fSBNYXBwaW5nIG9mIGtleSB0byBjaGlsZFxuICovXG5mdW5jdGlvbiBnZXRDaGlsZE1hcHBpbmcoY2hpbGRyZW4sIG1hcEZuKSB7XG4gIHZhciBtYXBwZXIgPSBmdW5jdGlvbiBtYXBwZXIoY2hpbGQpIHtcbiAgICByZXR1cm4gbWFwRm4gJiYgKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkoY2hpbGQpID8gbWFwRm4oY2hpbGQpIDogY2hpbGQ7XG4gIH07XG5cbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChjaGlsZHJlbikgX3JlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYztcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAvLyBydW4gdGhlIG1hcCBmdW5jdGlvbiBoZXJlIGluc3RlYWQgc28gdGhhdCB0aGUga2V5IGlzIHRoZSBjb21wdXRlZCBvbmVcbiAgICByZXN1bHRbY2hpbGQua2V5XSA9IG1hcHBlcihjaGlsZCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBXaGVuIHlvdSdyZSBhZGRpbmcgb3IgcmVtb3ZpbmcgY2hpbGRyZW4gc29tZSBtYXkgYmUgYWRkZWQgb3IgcmVtb3ZlZCBpbiB0aGVcbiAqIHNhbWUgcmVuZGVyIHBhc3MuIFdlIHdhbnQgdG8gc2hvdyAqYm90aCogc2luY2Ugd2Ugd2FudCB0byBzaW11bHRhbmVvdXNseVxuICogYW5pbWF0ZSBlbGVtZW50cyBpbiBhbmQgb3V0LiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgcHJldmlvdXMgc2V0IG9mIGtleXNcbiAqIGFuZCBhIG5ldyBzZXQgb2Yga2V5cyBhbmQgbWVyZ2VzIHRoZW0gd2l0aCBpdHMgYmVzdCBndWVzcyBvZiB0aGUgY29ycmVjdFxuICogb3JkZXJpbmcuIEluIHRoZSBmdXR1cmUgd2UgbWF5IGV4cG9zZSBzb21lIG9mIHRoZSB1dGlsaXRpZXMgaW5cbiAqIFJlYWN0TXVsdGlDaGlsZCB0byBtYWtlIHRoaXMgZWFzeSwgYnV0IGZvciBub3cgUmVhY3QgaXRzZWxmIGRvZXMgbm90XG4gKiBkaXJlY3RseSBoYXZlIHRoaXMgY29uY2VwdCBvZiB0aGUgdW5pb24gb2YgcHJldkNoaWxkcmVuIGFuZCBuZXh0Q2hpbGRyZW5cbiAqIHNvIHdlIGltcGxlbWVudCBpdCBoZXJlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2IHByZXYgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcGFyYW0ge29iamVjdH0gbmV4dCBuZXh0IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHJldHVybiB7b2JqZWN0fSBhIGtleSBzZXQgdGhhdCBjb250YWlucyBhbGwga2V5cyBpbiBgcHJldmAgYW5kIGFsbCBrZXlzXG4gKiBpbiBgbmV4dGAgaW4gYSByZWFzb25hYmxlIG9yZGVyLlxuICovXG5cblxuZnVuY3Rpb24gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXYsIG5leHQpIHtcbiAgcHJldiA9IHByZXYgfHwge307XG4gIG5leHQgPSBuZXh0IHx8IHt9O1xuXG4gIGZ1bmN0aW9uIGdldFZhbHVlRm9yS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkgaW4gbmV4dCA/IG5leHRba2V5XSA6IHByZXZba2V5XTtcbiAgfSAvLyBGb3IgZWFjaCBrZXkgb2YgYG5leHRgLCB0aGUgbGlzdCBvZiBrZXlzIHRvIGluc2VydCBiZWZvcmUgdGhhdCBrZXkgaW5cbiAgLy8gdGhlIGNvbWJpbmVkIGxpc3RcblxuXG4gIHZhciBuZXh0S2V5c1BlbmRpbmcgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgcGVuZGluZ0tleXMgPSBbXTtcblxuICBmb3IgKHZhciBwcmV2S2V5IGluIHByZXYpIHtcbiAgICBpZiAocHJldktleSBpbiBuZXh0KSB7XG4gICAgICBpZiAocGVuZGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgIG5leHRLZXlzUGVuZGluZ1twcmV2S2V5XSA9IHBlbmRpbmdLZXlzO1xuICAgICAgICBwZW5kaW5nS2V5cyA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZW5kaW5nS2V5cy5wdXNoKHByZXZLZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpO1xuICB2YXIgY2hpbGRNYXBwaW5nID0ge307XG5cbiAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgaWYgKG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV07XG4gICAgICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ05leHRLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5XSA9IGdldFZhbHVlRm9yS2V5KG5leHRLZXkpO1xuICB9IC8vIEZpbmFsbHksIGFkZCB0aGUga2V5cyB3aGljaCBkaWRuJ3QgYXBwZWFyIGJlZm9yZSBhbnkga2V5IGluIGBuZXh0YFxuXG5cbiAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hpbGRNYXBwaW5nW3BlbmRpbmdLZXlzW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdLZXlzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZE1hcHBpbmc7XG59XG5cbmZ1bmN0aW9uIGdldFByb3AoY2hpbGQsIHByb3AsIHByb3BzKSB7XG4gIHJldHVybiBwcm9wc1twcm9wXSAhPSBudWxsID8gcHJvcHNbcHJvcF0gOiBjaGlsZC5wcm9wc1twcm9wXTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhwcm9wcywgb25FeGl0ZWQpIHtcbiAgcmV0dXJuIGdldENoaWxkTWFwcGluZyhwcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShjaGlsZCwge1xuICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgaW46IHRydWUsXG4gICAgICBhcHBlYXI6IGdldFByb3AoY2hpbGQsICdhcHBlYXInLCBwcm9wcyksXG4gICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgcHJvcHMpLFxuICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBwcm9wcylcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBvbkV4aXRlZCkge1xuICB2YXIgbmV4dENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZyhuZXh0UHJvcHMuY2hpbGRyZW4pO1xuICB2YXIgY2hpbGRyZW4gPSBtZXJnZUNoaWxkTWFwcGluZ3MocHJldkNoaWxkTWFwcGluZywgbmV4dENoaWxkTWFwcGluZyk7XG4gIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltrZXldO1xuICAgIGlmICghKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkoY2hpbGQpKSByZXR1cm47XG4gICAgdmFyIGhhc1ByZXYgPSAoa2V5IGluIHByZXZDaGlsZE1hcHBpbmcpO1xuICAgIHZhciBoYXNOZXh0ID0gKGtleSBpbiBuZXh0Q2hpbGRNYXBwaW5nKTtcbiAgICB2YXIgcHJldkNoaWxkID0gcHJldkNoaWxkTWFwcGluZ1trZXldO1xuICAgIHZhciBpc0xlYXZpbmcgPSAoMCwgX3JlYWN0LmlzVmFsaWRFbGVtZW50KShwcmV2Q2hpbGQpICYmICFwcmV2Q2hpbGQucHJvcHMuaW47IC8vIGl0ZW0gaXMgbmV3IChlbnRlcmluZylcblxuICAgIGlmIChoYXNOZXh0ICYmICghaGFzUHJldiB8fCBpc0xlYXZpbmcpKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygnZW50ZXJpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHRydWUsXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIWhhc05leHQgJiYgaGFzUHJldiAmJiAhaXNMZWF2aW5nKSB7XG4gICAgICAvLyBpdGVtIGlzIG9sZCAoZXhpdGluZylcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdsZWF2aW5nJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9ICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShjaGlsZCwge1xuICAgICAgICBpbjogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaGFzTmV4dCAmJiBoYXNQcmV2ICYmICgwLCBfcmVhY3QuaXNWYWxpZEVsZW1lbnQpKHByZXZDaGlsZCkpIHtcbiAgICAgIC8vIGl0ZW0gaGFzbid0IGNoYW5nZWQgdHJhbnNpdGlvbiBzdGF0ZXNcbiAgICAgIC8vIGNvcHkgb3ZlciB0aGUgbGFzdCB0cmFuc2l0aW9uIHByb3BzO1xuICAgICAgLy8gY29uc29sZS5sb2coJ3VuY2hhbmdlZCcsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogcHJldkNoaWxkLnByb3BzLmluLFxuICAgICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2hpbGRyZW47XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxPQUFPLENBQUNDLFVBQVUsR0FBRyxJQUFJO0FBQ3pCRCxPQUFPLENBQUNFLGVBQWUsR0FBR0EsZUFBZTtBQUN6Q0YsT0FBTyxDQUFDRyxrQkFBa0IsR0FBR0Esa0JBQWtCO0FBQy9DSCxPQUFPLENBQUNJLHNCQUFzQixHQUFHQSxzQkFBc0I7QUFDdkRKLE9BQU8sQ0FBQ0ssbUJBQW1CLEdBQUdBLG1CQUFtQjtBQUVqRCxJQUFJQyxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNMLGVBQWVBLENBQUNNLFFBQVEsRUFBRUMsS0FBSyxFQUFFO0VBQ3hDLElBQUlDLE1BQU0sR0FBRyxTQUFTQSxNQUFNQSxDQUFDQyxLQUFLLEVBQUU7SUFDbEMsT0FBT0YsS0FBSyxJQUFJLENBQUMsQ0FBQyxFQUFFSCxNQUFNLENBQUNNLGNBQWMsRUFBRUQsS0FBSyxDQUFDLEdBQUdGLEtBQUssQ0FBQ0UsS0FBSyxDQUFDLEdBQUdBLEtBQUs7RUFDMUUsQ0FBQztFQUVELElBQUlFLE1BQU0sR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDO0VBQ2hDLElBQUlQLFFBQVEsRUFBRUYsTUFBTSxDQUFDVSxRQUFRLENBQUNDLEdBQUcsQ0FBQ1QsUUFBUSxFQUFFLFVBQVVVLENBQUMsRUFBRTtJQUN2RCxPQUFPQSxDQUFDO0VBQ1YsQ0FBQyxDQUFDLENBQUNDLE9BQU8sQ0FBQyxVQUFVUixLQUFLLEVBQUU7SUFDMUI7SUFDQUUsTUFBTSxDQUFDRixLQUFLLENBQUNTLEdBQUcsQ0FBQyxHQUFHVixNQUFNLENBQUNDLEtBQUssQ0FBQztFQUNuQyxDQUFDLENBQUM7RUFDRixPQUFPRSxNQUFNO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLFNBQVNWLGtCQUFrQkEsQ0FBQ2tCLElBQUksRUFBRUMsSUFBSSxFQUFFO0VBQ3RDRCxJQUFJLEdBQUdBLElBQUksSUFBSSxDQUFDLENBQUM7RUFDakJDLElBQUksR0FBR0EsSUFBSSxJQUFJLENBQUMsQ0FBQztFQUVqQixTQUFTQyxjQUFjQSxDQUFDSCxHQUFHLEVBQUU7SUFDM0IsT0FBT0EsR0FBRyxJQUFJRSxJQUFJLEdBQUdBLElBQUksQ0FBQ0YsR0FBRyxDQUFDLEdBQUdDLElBQUksQ0FBQ0QsR0FBRyxDQUFDO0VBQzVDLENBQUMsQ0FBQztFQUNGOztFQUdBLElBQUlJLGVBQWUsR0FBR1YsTUFBTSxDQUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDO0VBQ3pDLElBQUlVLFdBQVcsR0FBRyxFQUFFO0VBRXBCLEtBQUssSUFBSUMsT0FBTyxJQUFJTCxJQUFJLEVBQUU7SUFDeEIsSUFBSUssT0FBTyxJQUFJSixJQUFJLEVBQUU7TUFDbkIsSUFBSUcsV0FBVyxDQUFDRSxNQUFNLEVBQUU7UUFDdEJILGVBQWUsQ0FBQ0UsT0FBTyxDQUFDLEdBQUdELFdBQVc7UUFDdENBLFdBQVcsR0FBRyxFQUFFO01BQ2xCO0lBQ0YsQ0FBQyxNQUFNO01BQ0xBLFdBQVcsQ0FBQ0csSUFBSSxDQUFDRixPQUFPLENBQUM7SUFDM0I7RUFDRjtFQUVBLElBQUlHLENBQUM7RUFDTCxJQUFJQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO0VBRXJCLEtBQUssSUFBSUMsT0FBTyxJQUFJVCxJQUFJLEVBQUU7SUFDeEIsSUFBSUUsZUFBZSxDQUFDTyxPQUFPLENBQUMsRUFBRTtNQUM1QixLQUFLRixDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdMLGVBQWUsQ0FBQ08sT0FBTyxDQUFDLENBQUNKLE1BQU0sRUFBRUUsQ0FBQyxFQUFFLEVBQUU7UUFDcEQsSUFBSUcsY0FBYyxHQUFHUixlQUFlLENBQUNPLE9BQU8sQ0FBQyxDQUFDRixDQUFDLENBQUM7UUFDaERDLFlBQVksQ0FBQ04sZUFBZSxDQUFDTyxPQUFPLENBQUMsQ0FBQ0YsQ0FBQyxDQUFDLENBQUMsR0FBR04sY0FBYyxDQUFDUyxjQUFjLENBQUM7TUFDNUU7SUFDRjtJQUVBRixZQUFZLENBQUNDLE9BQU8sQ0FBQyxHQUFHUixjQUFjLENBQUNRLE9BQU8sQ0FBQztFQUNqRCxDQUFDLENBQUM7O0VBR0YsS0FBS0YsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHSixXQUFXLENBQUNFLE1BQU0sRUFBRUUsQ0FBQyxFQUFFLEVBQUU7SUFDdkNDLFlBQVksQ0FBQ0wsV0FBVyxDQUFDSSxDQUFDLENBQUMsQ0FBQyxHQUFHTixjQUFjLENBQUNFLFdBQVcsQ0FBQ0ksQ0FBQyxDQUFDLENBQUM7RUFDL0Q7RUFFQSxPQUFPQyxZQUFZO0FBQ3JCO0FBRUEsU0FBU0csT0FBT0EsQ0FBQ3RCLEtBQUssRUFBRXVCLElBQUksRUFBRUMsS0FBSyxFQUFFO0VBQ25DLE9BQU9BLEtBQUssQ0FBQ0QsSUFBSSxDQUFDLElBQUksSUFBSSxHQUFHQyxLQUFLLENBQUNELElBQUksQ0FBQyxHQUFHdkIsS0FBSyxDQUFDd0IsS0FBSyxDQUFDRCxJQUFJLENBQUM7QUFDOUQ7QUFFQSxTQUFTOUIsc0JBQXNCQSxDQUFDK0IsS0FBSyxFQUFFQyxRQUFRLEVBQUU7RUFDL0MsT0FBT2xDLGVBQWUsQ0FBQ2lDLEtBQUssQ0FBQzNCLFFBQVEsRUFBRSxVQUFVRyxLQUFLLEVBQUU7SUFDdEQsT0FBTyxDQUFDLENBQUMsRUFBRUwsTUFBTSxDQUFDK0IsWUFBWSxFQUFFMUIsS0FBSyxFQUFFO01BQ3JDeUIsUUFBUSxFQUFFQSxRQUFRLENBQUNFLElBQUksQ0FBQyxJQUFJLEVBQUUzQixLQUFLLENBQUM7TUFDcEM0QixFQUFFLEVBQUUsSUFBSTtNQUNSQyxNQUFNLEVBQUVQLE9BQU8sQ0FBQ3RCLEtBQUssRUFBRSxRQUFRLEVBQUV3QixLQUFLLENBQUM7TUFDdkNNLEtBQUssRUFBRVIsT0FBTyxDQUFDdEIsS0FBSyxFQUFFLE9BQU8sRUFBRXdCLEtBQUssQ0FBQztNQUNyQ08sSUFBSSxFQUFFVCxPQUFPLENBQUN0QixLQUFLLEVBQUUsTUFBTSxFQUFFd0IsS0FBSztJQUNwQyxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSjtBQUVBLFNBQVM5QixtQkFBbUJBLENBQUNzQyxTQUFTLEVBQUVDLGdCQUFnQixFQUFFUixRQUFRLEVBQUU7RUFDbEUsSUFBSVMsZ0JBQWdCLEdBQUczQyxlQUFlLENBQUN5QyxTQUFTLENBQUNuQyxRQUFRLENBQUM7RUFDMUQsSUFBSUEsUUFBUSxHQUFHTCxrQkFBa0IsQ0FBQ3lDLGdCQUFnQixFQUFFQyxnQkFBZ0IsQ0FBQztFQUNyRS9CLE1BQU0sQ0FBQ2dDLElBQUksQ0FBQ3RDLFFBQVEsQ0FBQyxDQUFDVyxPQUFPLENBQUMsVUFBVUMsR0FBRyxFQUFFO0lBQzNDLElBQUlULEtBQUssR0FBR0gsUUFBUSxDQUFDWSxHQUFHLENBQUM7SUFDekIsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFZCxNQUFNLENBQUNNLGNBQWMsRUFBRUQsS0FBSyxDQUFDLEVBQUU7SUFDeEMsSUFBSW9DLE9BQU8sSUFBSTNCLEdBQUcsSUFBSXdCLGdCQUFnQixDQUFDO0lBQ3ZDLElBQUlJLE9BQU8sSUFBSTVCLEdBQUcsSUFBSXlCLGdCQUFnQixDQUFDO0lBQ3ZDLElBQUlJLFNBQVMsR0FBR0wsZ0JBQWdCLENBQUN4QixHQUFHLENBQUM7SUFDckMsSUFBSThCLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRTVDLE1BQU0sQ0FBQ00sY0FBYyxFQUFFcUMsU0FBUyxDQUFDLElBQUksQ0FBQ0EsU0FBUyxDQUFDZCxLQUFLLENBQUNJLEVBQUUsQ0FBQyxDQUFDOztJQUU5RSxJQUFJUyxPQUFPLEtBQUssQ0FBQ0QsT0FBTyxJQUFJRyxTQUFTLENBQUMsRUFBRTtNQUN0QztNQUNBMUMsUUFBUSxDQUFDWSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRWQsTUFBTSxDQUFDK0IsWUFBWSxFQUFFMUIsS0FBSyxFQUFFO1FBQzlDeUIsUUFBUSxFQUFFQSxRQUFRLENBQUNFLElBQUksQ0FBQyxJQUFJLEVBQUUzQixLQUFLLENBQUM7UUFDcEM0QixFQUFFLEVBQUUsSUFBSTtRQUNSRyxJQUFJLEVBQUVULE9BQU8sQ0FBQ3RCLEtBQUssRUFBRSxNQUFNLEVBQUVnQyxTQUFTLENBQUM7UUFDdkNGLEtBQUssRUFBRVIsT0FBTyxDQUFDdEIsS0FBSyxFQUFFLE9BQU8sRUFBRWdDLFNBQVM7TUFDMUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxNQUFNLElBQUksQ0FBQ0ssT0FBTyxJQUFJRCxPQUFPLElBQUksQ0FBQ0csU0FBUyxFQUFFO01BQzVDO01BQ0E7TUFDQTFDLFFBQVEsQ0FBQ1ksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUVkLE1BQU0sQ0FBQytCLFlBQVksRUFBRTFCLEtBQUssRUFBRTtRQUM5QzRCLEVBQUUsRUFBRTtNQUNOLENBQUMsQ0FBQztJQUNKLENBQUMsTUFBTSxJQUFJUyxPQUFPLElBQUlELE9BQU8sSUFBSSxDQUFDLENBQUMsRUFBRXpDLE1BQU0sQ0FBQ00sY0FBYyxFQUFFcUMsU0FBUyxDQUFDLEVBQUU7TUFDdEU7TUFDQTtNQUNBO01BQ0F6QyxRQUFRLENBQUNZLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFZCxNQUFNLENBQUMrQixZQUFZLEVBQUUxQixLQUFLLEVBQUU7UUFDOUN5QixRQUFRLEVBQUVBLFFBQVEsQ0FBQ0UsSUFBSSxDQUFDLElBQUksRUFBRTNCLEtBQUssQ0FBQztRQUNwQzRCLEVBQUUsRUFBRVUsU0FBUyxDQUFDZCxLQUFLLENBQUNJLEVBQUU7UUFDdEJHLElBQUksRUFBRVQsT0FBTyxDQUFDdEIsS0FBSyxFQUFFLE1BQU0sRUFBRWdDLFNBQVMsQ0FBQztRQUN2Q0YsS0FBSyxFQUFFUixPQUFPLENBQUN0QixLQUFLLEVBQUUsT0FBTyxFQUFFZ0MsU0FBUztNQUMxQyxDQUFDLENBQUM7SUFDSjtFQUNGLENBQUMsQ0FBQztFQUNGLE9BQU9uQyxRQUFRO0FBQ2pCIn0=