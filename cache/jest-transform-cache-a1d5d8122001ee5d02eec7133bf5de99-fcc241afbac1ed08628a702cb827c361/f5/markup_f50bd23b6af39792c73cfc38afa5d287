4f9c490d9ed6c6d3b0cac117d159c8cf
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.printText = exports.printProps = exports.printElementAsLeaf = exports.printElement = exports.printComment = exports.printChildren = void 0;
var _escapeHTML = _interopRequireDefault(require('./escapeHTML'));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
// Return empty string if keys is empty.
const printProps = (keys, props, config, indentation, depth, refs, printer) => {
  const indentationNext = indentation + config.indent;
  const colors = config.colors;
  return keys.map(key => {
    const value = props[key];
    let printed = printer(value, config, indentationNext, depth, refs);
    if (typeof value !== 'string') {
      if (printed.indexOf('\n') !== -1) {
        printed = config.spacingOuter + indentationNext + printed + config.spacingOuter + indentation;
      }
      printed = '{' + printed + '}';
    }
    return config.spacingInner + indentation + colors.prop.open + key + colors.prop.close + '=' + colors.value.open + printed + colors.value.close;
  }).join('');
}; // Return empty string if children is empty.

exports.printProps = printProps;
const printChildren = (children, config, indentation, depth, refs, printer) => children.map(child => config.spacingOuter + indentation + (typeof child === 'string' ? printText(child, config) : printer(child, config, indentation, depth, refs))).join('');
exports.printChildren = printChildren;
const printText = (text, config) => {
  const contentColor = config.colors.content;
  return contentColor.open + (0, _escapeHTML.default)(text) + contentColor.close;
};
exports.printText = printText;
const printComment = (comment, config) => {
  const commentColor = config.colors.comment;
  return commentColor.open + '<!--' + (0, _escapeHTML.default)(comment) + '-->' + commentColor.close;
}; // Separate the functions to format props, children, and element,
// so a plugin could override a particular function, if needed.
// Too bad, so sad: the traditional (but unnecessary) space
// in a self-closing tagColor requires a second test of printedProps.

exports.printComment = printComment;
const printElement = (type, printedProps, printedChildren, config, indentation) => {
  const tagColor = config.colors.tag;
  return tagColor.open + '<' + type + (printedProps && tagColor.close + printedProps + config.spacingOuter + indentation + tagColor.open) + (printedChildren ? '>' + tagColor.close + printedChildren + config.spacingOuter + indentation + tagColor.open + '</' + type : (printedProps && !config.min ? '' : ' ') + '/') + '>' + tagColor.close;
};
exports.printElement = printElement;
const printElementAsLeaf = (type, config) => {
  const tagColor = config.colors.tag;
  return tagColor.open + '<' + type + tagColor.close + ' â€¦' + tagColor.open + ' />' + tagColor.close;
};
exports.printElementAsLeaf = printElementAsLeaf;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInByaW50VGV4dCIsInByaW50UHJvcHMiLCJwcmludEVsZW1lbnRBc0xlYWYiLCJwcmludEVsZW1lbnQiLCJwcmludENvbW1lbnQiLCJwcmludENoaWxkcmVuIiwiX2VzY2FwZUhUTUwiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Iiwia2V5cyIsInByb3BzIiwiY29uZmlnIiwiaW5kZW50YXRpb24iLCJkZXB0aCIsInJlZnMiLCJwcmludGVyIiwiaW5kZW50YXRpb25OZXh0IiwiaW5kZW50IiwiY29sb3JzIiwibWFwIiwia2V5IiwicHJpbnRlZCIsImluZGV4T2YiLCJzcGFjaW5nT3V0ZXIiLCJzcGFjaW5nSW5uZXIiLCJwcm9wIiwib3BlbiIsImNsb3NlIiwiam9pbiIsImNoaWxkcmVuIiwiY2hpbGQiLCJ0ZXh0IiwiY29udGVudENvbG9yIiwiY29udGVudCIsImNvbW1lbnQiLCJjb21tZW50Q29sb3IiLCJ0eXBlIiwicHJpbnRlZFByb3BzIiwicHJpbnRlZENoaWxkcmVuIiwidGFnQ29sb3IiLCJ0YWciLCJtaW4iXSwic291cmNlcyI6WyJtYXJrdXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucHJpbnRUZXh0ID1cbiAgZXhwb3J0cy5wcmludFByb3BzID1cbiAgZXhwb3J0cy5wcmludEVsZW1lbnRBc0xlYWYgPVxuICBleHBvcnRzLnByaW50RWxlbWVudCA9XG4gIGV4cG9ydHMucHJpbnRDb21tZW50ID1cbiAgZXhwb3J0cy5wcmludENoaWxkcmVuID1cbiAgICB2b2lkIDA7XG5cbnZhciBfZXNjYXBlSFRNTCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgnLi9lc2NhcGVIVE1MJykpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge2RlZmF1bHQ6IG9ian07XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8vIFJldHVybiBlbXB0eSBzdHJpbmcgaWYga2V5cyBpcyBlbXB0eS5cbmNvbnN0IHByaW50UHJvcHMgPSAoa2V5cywgcHJvcHMsIGNvbmZpZywgaW5kZW50YXRpb24sIGRlcHRoLCByZWZzLCBwcmludGVyKSA9PiB7XG4gIGNvbnN0IGluZGVudGF0aW9uTmV4dCA9IGluZGVudGF0aW9uICsgY29uZmlnLmluZGVudDtcbiAgY29uc3QgY29sb3JzID0gY29uZmlnLmNvbG9ycztcbiAgcmV0dXJuIGtleXNcbiAgICAubWFwKGtleSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHByb3BzW2tleV07XG4gICAgICBsZXQgcHJpbnRlZCA9IHByaW50ZXIodmFsdWUsIGNvbmZpZywgaW5kZW50YXRpb25OZXh0LCBkZXB0aCwgcmVmcyk7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChwcmludGVkLmluZGV4T2YoJ1xcbicpICE9PSAtMSkge1xuICAgICAgICAgIHByaW50ZWQgPVxuICAgICAgICAgICAgY29uZmlnLnNwYWNpbmdPdXRlciArXG4gICAgICAgICAgICBpbmRlbnRhdGlvbk5leHQgK1xuICAgICAgICAgICAgcHJpbnRlZCArXG4gICAgICAgICAgICBjb25maWcuc3BhY2luZ091dGVyICtcbiAgICAgICAgICAgIGluZGVudGF0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpbnRlZCA9ICd7JyArIHByaW50ZWQgKyAnfSc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIGNvbmZpZy5zcGFjaW5nSW5uZXIgK1xuICAgICAgICBpbmRlbnRhdGlvbiArXG4gICAgICAgIGNvbG9ycy5wcm9wLm9wZW4gK1xuICAgICAgICBrZXkgK1xuICAgICAgICBjb2xvcnMucHJvcC5jbG9zZSArXG4gICAgICAgICc9JyArXG4gICAgICAgIGNvbG9ycy52YWx1ZS5vcGVuICtcbiAgICAgICAgcHJpbnRlZCArXG4gICAgICAgIGNvbG9ycy52YWx1ZS5jbG9zZVxuICAgICAgKTtcbiAgICB9KVxuICAgIC5qb2luKCcnKTtcbn07IC8vIFJldHVybiBlbXB0eSBzdHJpbmcgaWYgY2hpbGRyZW4gaXMgZW1wdHkuXG5cbmV4cG9ydHMucHJpbnRQcm9wcyA9IHByaW50UHJvcHM7XG5cbmNvbnN0IHByaW50Q2hpbGRyZW4gPSAoY2hpbGRyZW4sIGNvbmZpZywgaW5kZW50YXRpb24sIGRlcHRoLCByZWZzLCBwcmludGVyKSA9PlxuICBjaGlsZHJlblxuICAgIC5tYXAoXG4gICAgICBjaGlsZCA9PlxuICAgICAgICBjb25maWcuc3BhY2luZ091dGVyICtcbiAgICAgICAgaW5kZW50YXRpb24gK1xuICAgICAgICAodHlwZW9mIGNoaWxkID09PSAnc3RyaW5nJ1xuICAgICAgICAgID8gcHJpbnRUZXh0KGNoaWxkLCBjb25maWcpXG4gICAgICAgICAgOiBwcmludGVyKGNoaWxkLCBjb25maWcsIGluZGVudGF0aW9uLCBkZXB0aCwgcmVmcykpXG4gICAgKVxuICAgIC5qb2luKCcnKTtcblxuZXhwb3J0cy5wcmludENoaWxkcmVuID0gcHJpbnRDaGlsZHJlbjtcblxuY29uc3QgcHJpbnRUZXh0ID0gKHRleHQsIGNvbmZpZykgPT4ge1xuICBjb25zdCBjb250ZW50Q29sb3IgPSBjb25maWcuY29sb3JzLmNvbnRlbnQ7XG4gIHJldHVybiAoXG4gICAgY29udGVudENvbG9yLm9wZW4gKyAoMCwgX2VzY2FwZUhUTUwuZGVmYXVsdCkodGV4dCkgKyBjb250ZW50Q29sb3IuY2xvc2VcbiAgKTtcbn07XG5cbmV4cG9ydHMucHJpbnRUZXh0ID0gcHJpbnRUZXh0O1xuXG5jb25zdCBwcmludENvbW1lbnQgPSAoY29tbWVudCwgY29uZmlnKSA9PiB7XG4gIGNvbnN0IGNvbW1lbnRDb2xvciA9IGNvbmZpZy5jb2xvcnMuY29tbWVudDtcbiAgcmV0dXJuIChcbiAgICBjb21tZW50Q29sb3Iub3BlbiArXG4gICAgJzwhLS0nICtcbiAgICAoMCwgX2VzY2FwZUhUTUwuZGVmYXVsdCkoY29tbWVudCkgK1xuICAgICctLT4nICtcbiAgICBjb21tZW50Q29sb3IuY2xvc2VcbiAgKTtcbn07IC8vIFNlcGFyYXRlIHRoZSBmdW5jdGlvbnMgdG8gZm9ybWF0IHByb3BzLCBjaGlsZHJlbiwgYW5kIGVsZW1lbnQsXG4vLyBzbyBhIHBsdWdpbiBjb3VsZCBvdmVycmlkZSBhIHBhcnRpY3VsYXIgZnVuY3Rpb24sIGlmIG5lZWRlZC5cbi8vIFRvbyBiYWQsIHNvIHNhZDogdGhlIHRyYWRpdGlvbmFsIChidXQgdW5uZWNlc3NhcnkpIHNwYWNlXG4vLyBpbiBhIHNlbGYtY2xvc2luZyB0YWdDb2xvciByZXF1aXJlcyBhIHNlY29uZCB0ZXN0IG9mIHByaW50ZWRQcm9wcy5cblxuZXhwb3J0cy5wcmludENvbW1lbnQgPSBwcmludENvbW1lbnQ7XG5cbmNvbnN0IHByaW50RWxlbWVudCA9IChcbiAgdHlwZSxcbiAgcHJpbnRlZFByb3BzLFxuICBwcmludGVkQ2hpbGRyZW4sXG4gIGNvbmZpZyxcbiAgaW5kZW50YXRpb25cbikgPT4ge1xuICBjb25zdCB0YWdDb2xvciA9IGNvbmZpZy5jb2xvcnMudGFnO1xuICByZXR1cm4gKFxuICAgIHRhZ0NvbG9yLm9wZW4gK1xuICAgICc8JyArXG4gICAgdHlwZSArXG4gICAgKHByaW50ZWRQcm9wcyAmJlxuICAgICAgdGFnQ29sb3IuY2xvc2UgK1xuICAgICAgICBwcmludGVkUHJvcHMgK1xuICAgICAgICBjb25maWcuc3BhY2luZ091dGVyICtcbiAgICAgICAgaW5kZW50YXRpb24gK1xuICAgICAgICB0YWdDb2xvci5vcGVuKSArXG4gICAgKHByaW50ZWRDaGlsZHJlblxuICAgICAgPyAnPicgK1xuICAgICAgICB0YWdDb2xvci5jbG9zZSArXG4gICAgICAgIHByaW50ZWRDaGlsZHJlbiArXG4gICAgICAgIGNvbmZpZy5zcGFjaW5nT3V0ZXIgK1xuICAgICAgICBpbmRlbnRhdGlvbiArXG4gICAgICAgIHRhZ0NvbG9yLm9wZW4gK1xuICAgICAgICAnPC8nICtcbiAgICAgICAgdHlwZVxuICAgICAgOiAocHJpbnRlZFByb3BzICYmICFjb25maWcubWluID8gJycgOiAnICcpICsgJy8nKSArXG4gICAgJz4nICtcbiAgICB0YWdDb2xvci5jbG9zZVxuICApO1xufTtcblxuZXhwb3J0cy5wcmludEVsZW1lbnQgPSBwcmludEVsZW1lbnQ7XG5cbmNvbnN0IHByaW50RWxlbWVudEFzTGVhZiA9ICh0eXBlLCBjb25maWcpID0+IHtcbiAgY29uc3QgdGFnQ29sb3IgPSBjb25maWcuY29sb3JzLnRhZztcbiAgcmV0dXJuIChcbiAgICB0YWdDb2xvci5vcGVuICtcbiAgICAnPCcgK1xuICAgIHR5cGUgK1xuICAgIHRhZ0NvbG9yLmNsb3NlICtcbiAgICAnIOKApicgK1xuICAgIHRhZ0NvbG9yLm9wZW4gK1xuICAgICcgLz4nICtcbiAgICB0YWdDb2xvci5jbG9zZVxuICApO1xufTtcblxuZXhwb3J0cy5wcmludEVsZW1lbnRBc0xlYWYgPSBwcmludEVsZW1lbnRBc0xlYWY7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxD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