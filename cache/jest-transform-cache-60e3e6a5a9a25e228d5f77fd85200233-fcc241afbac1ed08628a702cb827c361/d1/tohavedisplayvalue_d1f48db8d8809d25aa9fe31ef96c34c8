4fafb661bf4629ee5a6cc831033d46b3
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveDisplayValue = toHaveDisplayValue;
var _utils = require("./utils");
function toHaveDisplayValue(htmlElement, expectedValue) {
  (0, _utils.checkHtmlElement)(htmlElement, toHaveDisplayValue, this);
  const tagName = htmlElement.tagName.toLowerCase();
  if (!['select', 'input', 'textarea'].includes(tagName)) {
    throw new Error('.toHaveDisplayValue() currently supports only input, textarea or select elements, try with another matcher instead.');
  }
  if (tagName === 'input' && ['radio', 'checkbox'].includes(htmlElement.type)) {
    throw new Error(`.toHaveDisplayValue() currently does not support input[type="${htmlElement.type}"], try with another matcher instead.`);
  }
  const values = getValues(tagName, htmlElement);
  const expectedValues = getExpectedValues(expectedValue);
  const numberOfMatchesWithValues = expectedValues.filter(expected => values.some(value => expected instanceof RegExp ? expected.test(value) : this.equals(value, String(expected)))).length;
  const matchedWithAllValues = numberOfMatchesWithValues === values.length;
  const matchedWithAllExpectedValues = numberOfMatchesWithValues === expectedValues.length;
  return {
    pass: matchedWithAllValues && matchedWithAllExpectedValues,
    message: () => (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveDisplayValue`, 'element', ''), `Expected element ${this.isNot ? 'not ' : ''}to have display value`, expectedValue, 'Received', values)
  };
}
function getValues(tagName, htmlElement) {
  return tagName === 'select' ? Array.from(htmlElement).filter(option => option.selected).map(option => option.textContent) : [htmlElement.value];
}
function getExpectedValues(expectedValue) {
  return expectedValue instanceof Array ? expectedValue : [expectedValue];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvSGF2ZURpc3BsYXlWYWx1ZSIsIl91dGlscyIsInJlcXVpcmUiLCJodG1sRWxlbWVudCIsImV4cGVjdGVkVmFsdWUiLCJjaGVja0h0bWxFbGVtZW50IiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJFcnJvciIsInR5cGUiLCJ2YWx1ZXMiLCJnZXRWYWx1ZXMiLCJleHBlY3RlZFZhbHVlcyIsImdldEV4cGVjdGVkVmFsdWVzIiwibnVtYmVyT2ZNYXRjaGVzV2l0aFZhbHVlcyIsImZpbHRlciIsImV4cGVjdGVkIiwic29tZSIsIlJlZ0V4cCIsInRlc3QiLCJlcXVhbHMiLCJTdHJpbmciLCJsZW5ndGgiLCJtYXRjaGVkV2l0aEFsbFZhbHVlcyIsIm1hdGNoZWRXaXRoQWxsRXhwZWN0ZWRWYWx1ZXMiLCJwYXNzIiwibWVzc2FnZSIsImdldE1lc3NhZ2UiLCJ1dGlscyIsIm1hdGNoZXJIaW50IiwiaXNOb3QiLCJBcnJheSIsImZyb20iLCJvcHRpb24iLCJzZWxlY3RlZCIsIm1hcCIsInRleHRDb250ZW50Il0sInNvdXJjZXMiOlsidG8taGF2ZS1kaXNwbGF5LXZhbHVlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy50b0hhdmVEaXNwbGF5VmFsdWUgPSB0b0hhdmVEaXNwbGF5VmFsdWU7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxuZnVuY3Rpb24gdG9IYXZlRGlzcGxheVZhbHVlKGh0bWxFbGVtZW50LCBleHBlY3RlZFZhbHVlKSB7XG4gICgwLCBfdXRpbHMuY2hlY2tIdG1sRWxlbWVudCkoaHRtbEVsZW1lbnQsIHRvSGF2ZURpc3BsYXlWYWx1ZSwgdGhpcyk7XG4gIGNvbnN0IHRhZ05hbWUgPSBodG1sRWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKCFbJ3NlbGVjdCcsICdpbnB1dCcsICd0ZXh0YXJlYSddLmluY2x1ZGVzKHRhZ05hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCcudG9IYXZlRGlzcGxheVZhbHVlKCkgY3VycmVudGx5IHN1cHBvcnRzIG9ubHkgaW5wdXQsIHRleHRhcmVhIG9yIHNlbGVjdCBlbGVtZW50cywgdHJ5IHdpdGggYW5vdGhlciBtYXRjaGVyIGluc3RlYWQuJyk7XG4gIH1cblxuICBpZiAodGFnTmFtZSA9PT0gJ2lucHV0JyAmJiBbJ3JhZGlvJywgJ2NoZWNrYm94J10uaW5jbHVkZXMoaHRtbEVsZW1lbnQudHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYC50b0hhdmVEaXNwbGF5VmFsdWUoKSBjdXJyZW50bHkgZG9lcyBub3Qgc3VwcG9ydCBpbnB1dFt0eXBlPVwiJHtodG1sRWxlbWVudC50eXBlfVwiXSwgdHJ5IHdpdGggYW5vdGhlciBtYXRjaGVyIGluc3RlYWQuYCk7XG4gIH1cblxuICBjb25zdCB2YWx1ZXMgPSBnZXRWYWx1ZXModGFnTmFtZSwgaHRtbEVsZW1lbnQpO1xuICBjb25zdCBleHBlY3RlZFZhbHVlcyA9IGdldEV4cGVjdGVkVmFsdWVzKGV4cGVjdGVkVmFsdWUpO1xuICBjb25zdCBudW1iZXJPZk1hdGNoZXNXaXRoVmFsdWVzID0gZXhwZWN0ZWRWYWx1ZXMuZmlsdGVyKGV4cGVjdGVkID0+IHZhbHVlcy5zb21lKHZhbHVlID0+IGV4cGVjdGVkIGluc3RhbmNlb2YgUmVnRXhwID8gZXhwZWN0ZWQudGVzdCh2YWx1ZSkgOiB0aGlzLmVxdWFscyh2YWx1ZSwgU3RyaW5nKGV4cGVjdGVkKSkpKS5sZW5ndGg7XG4gIGNvbnN0IG1hdGNoZWRXaXRoQWxsVmFsdWVzID0gbnVtYmVyT2ZNYXRjaGVzV2l0aFZhbHVlcyA9PT0gdmFsdWVzLmxlbmd0aDtcbiAgY29uc3QgbWF0Y2hlZFdpdGhBbGxFeHBlY3RlZFZhbHVlcyA9IG51bWJlck9mTWF0Y2hlc1dpdGhWYWx1ZXMgPT09IGV4cGVjdGVkVmFsdWVzLmxlbmd0aDtcbiAgcmV0dXJuIHtcbiAgICBwYXNzOiBtYXRjaGVkV2l0aEFsbFZhbHVlcyAmJiBtYXRjaGVkV2l0aEFsbEV4cGVjdGVkVmFsdWVzLFxuICAgIG1lc3NhZ2U6ICgpID0+ICgwLCBfdXRpbHMuZ2V0TWVzc2FnZSkodGhpcywgdGhpcy51dGlscy5tYXRjaGVySGludChgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvSGF2ZURpc3BsYXlWYWx1ZWAsICdlbGVtZW50JywgJycpLCBgRXhwZWN0ZWQgZWxlbWVudCAke3RoaXMuaXNOb3QgPyAnbm90ICcgOiAnJ310byBoYXZlIGRpc3BsYXkgdmFsdWVgLCBleHBlY3RlZFZhbHVlLCAnUmVjZWl2ZWQnLCB2YWx1ZXMpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlcyh0YWdOYW1lLCBodG1sRWxlbWVudCkge1xuICByZXR1cm4gdGFnTmFtZSA9PT0gJ3NlbGVjdCcgPyBBcnJheS5mcm9tKGh0bWxFbGVtZW50KS5maWx0ZXIob3B0aW9uID0+IG9wdGlvbi5zZWxlY3RlZCkubWFwKG9wdGlvbiA9PiBvcHRpb24udGV4dENvbnRlbnQpIDogW2h0bWxFbGVtZW50LnZhbHVlXTtcbn1cblxuZnVuY3Rpb24gZ2V0RXhwZWN0ZWRWYWx1ZXMoZXhwZWN0ZWRWYWx1ZSkge1xuICByZXR1cm4gZXhwZWN0ZWRWYWx1ZSBpbnN0YW5jZW9mIEFycmF5ID8gZXhwZWN0ZWRWYWx1ZSA6IFtleHBlY3RlZFZhbHVlXTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxrQkFBa0IsR0FBR0Esa0JBQWtCO0FBRS9DLElBQUlDLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFNBQVMs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