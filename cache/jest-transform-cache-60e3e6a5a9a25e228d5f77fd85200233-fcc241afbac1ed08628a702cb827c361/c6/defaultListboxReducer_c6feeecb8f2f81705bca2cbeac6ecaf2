4a6df681616c18b689308971c8b49971
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultListboxReducer;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _useListbox = require("./useListbox.types");
const pageSize = 5;
function findValidOptionToHighlight(index, lookupDirection, options, focusDisabled, isOptionDisabled, wrapAround) {
  if (options.length === 0 || options.every((o, i) => isOptionDisabled(o, i))) {
    return -1;
  }
  let nextFocus = index;
  for (;;) {
    // No valid options found
    if (!wrapAround && lookupDirection === 'next' && nextFocus === options.length || !wrapAround && lookupDirection === 'previous' && nextFocus === -1) {
      return -1;
    }
    const nextFocusDisabled = focusDisabled ? false : isOptionDisabled(options[nextFocus], nextFocus);
    if (nextFocusDisabled) {
      nextFocus += lookupDirection === 'next' ? 1 : -1;
      if (wrapAround) {
        nextFocus = (nextFocus + options.length) % options.length;
      }
    } else {
      return nextFocus;
    }
  }
}
function getNewHighlightedOption(options, previouslyHighlightedOption, diff, highlightDisabledOptions, isOptionDisabled, disableListWrap, optionComparer) {
  var _options$nextIndex;
  const maxIndex = options.length - 1;
  const defaultHighlightedIndex = -1;
  const previouslyHighlightedIndex = previouslyHighlightedOption == null ? -1 : options.findIndex(option => optionComparer(option, previouslyHighlightedOption));
  let nextIndexCandidate;
  let lookupDirection;
  let wrapAround;
  switch (diff) {
    case 'reset':
      if (defaultHighlightedIndex === -1) {
        return null;
      }
      nextIndexCandidate = 0;
      lookupDirection = 'next';
      wrapAround = false;
      break;
    case 'start':
      nextIndexCandidate = 0;
      lookupDirection = 'next';
      wrapAround = false;
      break;
    case 'end':
      nextIndexCandidate = maxIndex;
      lookupDirection = 'previous';
      wrapAround = false;
      break;
    default:
      {
        const newIndex = previouslyHighlightedIndex + diff;
        wrapAround = !disableListWrap;
        if (newIndex < 0) {
          if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(diff) > 1) {
            nextIndexCandidate = 0;
            lookupDirection = 'next';
          } else {
            nextIndexCandidate = maxIndex;
            lookupDirection = 'previous';
          }
        } else if (newIndex > maxIndex) {
          if (!wrapAround || Math.abs(diff) > 1) {
            nextIndexCandidate = maxIndex;
            lookupDirection = 'previous';
          } else {
            nextIndexCandidate = 0;
            lookupDirection = 'next';
          }
        } else {
          nextIndexCandidate = newIndex;
          lookupDirection = diff >= 0 ? 'next' : 'previous';
        }
      }
  }
  const nextIndex = findValidOptionToHighlight(nextIndexCandidate, lookupDirection, options, highlightDisabledOptions, isOptionDisabled, wrapAround);
  return (_options$nextIndex = options[nextIndex]) != null ? _options$nextIndex : null;
}
function moveHighlight(previouslyHighlightedOption, diff, props) {
  const {
    options,
    isOptionDisabled,
    disableListWrap,
    disabledItemsFocusable,
    optionComparer
  } = props;
  return getNewHighlightedOption(options, previouslyHighlightedOption, diff, disabledItemsFocusable != null ? disabledItemsFocusable : false, isOptionDisabled != null ? isOptionDisabled : () => false, disableListWrap != null ? disableListWrap : false, optionComparer != null ? optionComparer : (o1, o2) => o1 === o2);
}
function toggleSelection(option, selectedOptions, selectionLimit, optionComparer) {
  if (selectionLimit === 0) {
    return [];
  }

  // Selection limit = 1 is a special case - we don't want to allow deselecting the option.
  if (selectionLimit === 1) {
    if (optionComparer(selectedOptions[0], option)) {
      return selectedOptions;
    }
    return [option];
  }

  // The toggled option is selected; remove it from the selection.
  if (selectedOptions.some(so => optionComparer(so, option))) {
    return selectedOptions.filter(so => !optionComparer(so, option));
  }

  // The toggled option is not selected and the selected array is shorter than the limit - add to the selection.
  if (selectionLimit === null || selectedOptions.length < selectionLimit) {
    return [...selectedOptions, option];
  }

  // Truncate the selection to the limit (discard items with lower indexes).
  const newSelection = selectedOptions.slice(selectedOptions.length - selectionLimit + 1);
  newSelection.push(option);
  return newSelection;
}
function handleOptionSelection(option, state, props) {
  const {
    optionComparer = (o, v) => o === v,
    isOptionDisabled = () => false,
    selectionLimit
  } = props;
  const {
    selectedValues
  } = state;
  const optionIndex = props.options.findIndex(o => props.optionComparer(option, o));
  if (isOptionDisabled(option, optionIndex)) {
    return state;
  }

  // if the option is already selected, remove it from the selection, otherwise add it
  const newSelectedValues = toggleSelection(option, selectedValues, selectionLimit, optionComparer);
  return {
    selectedValues: newSelectedValues,
    highlightedValue: option
  };
}
function handleKeyDown(event, state, parameters) {
  const previouslySelectedValue = state.highlightedValue;
  switch (event.key) {
    case 'Home':
      return (0, _extends2.default)({}, state, {
        highlightedValue: moveHighlight(previouslySelectedValue, 'start', parameters)
      });
    case 'End':
      return (0, _extends2.default)({}, state, {
        highlightedValue: moveHighlight(previouslySelectedValue, 'end', parameters)
      });
    case 'PageUp':
      return (0, _extends2.default)({}, state, {
        highlightedValue: moveHighlight(previouslySelectedValue, -pageSize, parameters)
      });
    case 'PageDown':
      return (0, _extends2.default)({}, state, {
        highlightedValue: moveHighlight(previouslySelectedValue, pageSize, parameters)
      });
    case 'ArrowUp':
      // TODO: extend current selection with Shift modifier
      return (0, _extends2.default)({}, state, {
        highlightedValue: moveHighlight(previouslySelectedValue, -1, parameters)
      });
    case 'ArrowDown':
      // TODO: extend current selection with Shift modifier
      return (0, _extends2.default)({}, state, {
        highlightedValue: moveHighlight(previouslySelectedValue, 1, parameters)
      });
    case 'Enter':
    case ' ':
      if (state.highlightedValue === null) {
        return state;
      }
      return handleOptionSelection(state.highlightedValue, state, parameters);
    default:
      break;
  }
  return state;
}
function handleBlur(state) {
  return (0, _extends2.default)({}, state, {
    highlightedValue: null
  });
}
const textCriteriaMatches = (nextFocus, searchString, stringifyOption) => {
  var _stringifyOption;
  const text = (_stringifyOption = stringifyOption(nextFocus)) == null ? void 0 : _stringifyOption.trim().toLowerCase();
  if (!text || text.length === 0) {
    // Make option not navigable if stringification fails or results in empty string.
    return false;
  }
  return text.indexOf(searchString) === 0;
};
function handleTextNavigation(state, searchString, props) {
  const {
    options,
    isOptionDisabled,
    disableListWrap,
    disabledItemsFocusable,
    optionComparer,
    optionStringifier
  } = props;
  const startWithCurrentOption = searchString.length > 1;
  let nextOption = startWithCurrentOption ? state.highlightedValue : getNewHighlightedOption(options, state.highlightedValue, 1, disabledItemsFocusable != null ? disabledItemsFocusable : false, isOptionDisabled != null ? isOptionDisabled : () => false, disableListWrap != null ? disableListWrap : false, optionComparer);

  // use `for` instead of `while` prevent infinite loop
  for (let index = 0; index < options.length; index += 1) {
    // Return un-mutated state if looped back to the currently highlighted value
    if (!nextOption || !startWithCurrentOption && state.highlightedValue === nextOption) {
      return state;
    }
    if (textCriteriaMatches(nextOption, searchString, optionStringifier) && (!isOptionDisabled(nextOption, options.indexOf(nextOption)) || disabledItemsFocusable)) {
      // The nextOption is the element to be highlighted
      return (0, _extends2.default)({}, state, {
        highlightedValue: nextOption
      });
    }
    // Move to the next element.
    nextOption = getNewHighlightedOption(options, nextOption, 1, disabledItemsFocusable != null ? disabledItemsFocusable : false, isOptionDisabled != null ? isOptionDisabled : () => false, disableListWrap != null ? disableListWrap : false, optionComparer);
  }

  // No option match text search criteria
  return state;
}
function handleOptionsChange(options, state, props) {
  var _options$find, _state$selectedValues;
  const {
    optionComparer
  } = props;
  const newHighlightedOption = state.highlightedValue == null ? null : (_options$find = options.find(option => optionComparer(option, state.highlightedValue))) != null ? _options$find : null;

  // exclude selected values that are no longer in the options
  const selectedValues = (_state$selectedValues = state.selectedValues) != null ? _state$selectedValues : [];
  const newSelectedValues = selectedValues.filter(selectedValue => options.some(option => optionComparer(option, selectedValue)));
  return {
    highlightedValue: newHighlightedOption,
    selectedValues: newSelectedValues
  };
}
function defaultListboxReducer(state, action) {
  const {
    type
  } = action;
  switch (type) {
    case _useListbox.ActionTypes.keyDown:
      return handleKeyDown(action.event, state, action.props);
    case _useListbox.ActionTypes.optionClick:
      return handleOptionSelection(action.option, state, action.props);
    case _useListbox.ActionTypes.blur:
      return handleBlur(state);
    case _useListbox.ActionTypes.setValue:
      return (0, _extends2.default)({}, state, {
        selectedValues: action.value
      });
    case _useListbox.ActionTypes.setHighlight:
      return (0, _extends2.default)({}, state, {
        highlightedValue: action.highlight
      });
    case _useListbox.ActionTypes.textNavigation:
      return handleTextNavigation(state, action.searchString, action.props);
    case _useListbox.ActionTypes.optionsChange:
      return handleOptionsChange(action.options, state, action.props);
    default:
      return state;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,