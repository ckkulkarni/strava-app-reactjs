785ffb5cd5a92a4627095db25d12e516
"use strict";

_getJestObj().mock("axios");
var _jestCucumber = require("jest-cucumber");
var _react = require("@testing-library/react");
var _react2 = _interopRequireDefault(require("react"));
require("@testing-library/jest-dom/extend-expect");
require("text-encoding");
var router = _interopRequireWildcard(require("react-router"));
var _reactRouterDom = require("react-router-dom");
var _CreateActivity = _interopRequireDefault(require("../../pages/CreateActivity"));
var _testUtils = require("react-dom/test-utils");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _stravaSlice = _interopRequireDefault(require("../../redux/reducer/stravaSlice"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const feature = (0, _jestCucumber.loadFeature)("src/components/features/createactivity.feature");
let store;
let screen;
const {
  REACT_APP_CLIENTID
} = process.env;
const {
  REACT_APP_CLIENT_SECRET
} = process.env;
const scope = "read,activity:read";
const navigate = jest.fn();
jest.spyOn(router, "useNavigate").mockImplementation(() => navigate);
const alertMock = jest.spyOn(window, "alert").mockImplementation(() => {});
(0, _jestCucumber.defineFeature)(feature, test => {
  beforeEach(() => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        strava: _stravaSlice.default
      }
    });
    screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_CreateActivity.default, null))));
  });
  test("User fills out and submits the create activity form", ({
    given,
    when,
    then,
    and
  }) => {
    given("the user is on the Create Activity page", () => {
      expect(screen).toBeDefined();
    });
    when("the user enters the activity details and submits the form", async () => {
      const nameInput = screen.getByLabelText("Name");
      const typeInput = screen.getByLabelText("Type");
      const startTimeInput = screen.getByLabelText("Start Date");
      const elapsedTimeInput = screen.getByLabelText("Elapsed Time (seconds)");
      const distanceInput = screen.getByLabelText("Distance (meters)");
      const createButton = screen.getByText("Create");
      await (0, _testUtils.act)(async () => {
        _react.fireEvent.change(nameInput, {
          target: {
            value: "Morning Run"
          }
        });
        _react.fireEvent.change(typeInput, {
          target: {
            value: "Run"
          }
        });
        _react.fireEvent.change(startTimeInput, {
          target: {
            value: "2023-08-15T08:00"
          }
        });
        _react.fireEvent.change(elapsedTimeInput, {
          target: {
            value: "1800"
          }
        });
        _react.fireEvent.change(distanceInput, {
          target: {
            value: "5000"
          }
        });
        _react.fireEvent.click(createButton);
      });
    });
    then("the user should be redirected to the Activities page", () => {});
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,