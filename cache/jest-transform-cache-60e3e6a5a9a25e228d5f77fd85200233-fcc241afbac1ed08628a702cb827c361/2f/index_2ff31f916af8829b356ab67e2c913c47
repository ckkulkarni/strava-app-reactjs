0f07f2bdf79c863dc9c099b076cbc86c
'use strict';

var GetIntrinsic = require('get-intrinsic');
var has = require('has');
var channel = require('side-channel')();
var $TypeError = GetIntrinsic('%TypeError%');
var SLOT = {
  assert: function (O, slot) {
    if (!O || typeof O !== 'object' && typeof O !== 'function') {
      throw new $TypeError('`O` is not an object');
    }
    if (typeof slot !== 'string') {
      throw new $TypeError('`slot` must be a string');
    }
    channel.assert(O);
    if (!SLOT.has(O, slot)) {
      throw new $TypeError('`' + slot + '` is not present on `O`');
    }
  },
  get: function (O, slot) {
    if (!O || typeof O !== 'object' && typeof O !== 'function') {
      throw new $TypeError('`O` is not an object');
    }
    if (typeof slot !== 'string') {
      throw new $TypeError('`slot` must be a string');
    }
    var slots = channel.get(O);
    return slots && slots['$' + slot];
  },
  has: function (O, slot) {
    if (!O || typeof O !== 'object' && typeof O !== 'function') {
      throw new $TypeError('`O` is not an object');
    }
    if (typeof slot !== 'string') {
      throw new $TypeError('`slot` must be a string');
    }
    var slots = channel.get(O);
    return !!slots && has(slots, '$' + slot);
  },
  set: function (O, slot, V) {
    if (!O || typeof O !== 'object' && typeof O !== 'function') {
      throw new $TypeError('`O` is not an object');
    }
    if (typeof slot !== 'string') {
      throw new $TypeError('`slot` must be a string');
    }
    var slots = channel.get(O);
    if (!slots) {
      slots = {};
      channel.set(O, slots);
    }
    slots['$' + slot] = V;
  }
};
if (Object.freeze) {
  Object.freeze(SLOT);
}
module.exports = SLOT;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiaGFzIiwiY2hhbm5lbCIsIiRUeXBlRXJyb3IiLCJTTE9UIiwiYXNzZXJ0IiwiTyIsInNsb3QiLCJnZXQiLCJzbG90cyIsInNldCIsIlYiLCJPYmplY3QiLCJmcmVlemUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJ2hhcycpO1xudmFyIGNoYW5uZWwgPSByZXF1aXJlKCdzaWRlLWNoYW5uZWwnKSgpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIFNMT1QgPSB7XG5cdGFzc2VydDogZnVuY3Rpb24gKE8sIHNsb3QpIHtcblx0XHRpZiAoIU8gfHwgKHR5cGVvZiBPICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgTyAhPT0gJ2Z1bmN0aW9uJykpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgT2AgaXMgbm90IGFuIG9iamVjdCcpO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIHNsb3QgIT09ICdzdHJpbmcnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYHNsb3RgIG11c3QgYmUgYSBzdHJpbmcnKTtcblx0XHR9XG5cdFx0Y2hhbm5lbC5hc3NlcnQoTyk7XG5cdFx0aWYgKCFTTE9ULmhhcyhPLCBzbG90KSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2AnICsgc2xvdCArICdgIGlzIG5vdCBwcmVzZW50IG9uIGBPYCcpO1xuXHRcdH1cblx0fSxcblx0Z2V0OiBmdW5jdGlvbiAoTywgc2xvdCkge1xuXHRcdGlmICghTyB8fCAodHlwZW9mIE8gIT09ICdvYmplY3QnICYmIHR5cGVvZiBPICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BPYCBpcyBub3QgYW4gb2JqZWN0Jyk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2Ygc2xvdCAhPT0gJ3N0cmluZycpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgc2xvdGAgbXVzdCBiZSBhIHN0cmluZycpO1xuXHRcdH1cblx0XHR2YXIgc2xvdHMgPSBjaGFubmVsLmdldChPKTtcblx0XHRyZXR1cm4gc2xvdHMgJiYgc2xvdHNbJyQnICsgc2xvdF07XG5cdH0sXG5cdGhhczogZnVuY3Rpb24gKE8sIHNsb3QpIHtcblx0XHRpZiAoIU8gfHwgKHR5cGVvZiBPICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgTyAhPT0gJ2Z1bmN0aW9uJykpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgT2AgaXMgbm90IGFuIG9iamVjdCcpO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIHNsb3QgIT09ICdzdHJpbmcnKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYHNsb3RgIG11c3QgYmUgYSBzdHJpbmcnKTtcblx0XHR9XG5cdFx0dmFyIHNsb3RzID0gY2hhbm5lbC5nZXQoTyk7XG5cdFx0cmV0dXJuICEhc2xvdHMgJiYgaGFzKHNsb3RzLCAnJCcgKyBzbG90KTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiAoTywgc2xvdCwgVikge1xuXHRcdGlmICghTyB8fCAodHlwZW9mIE8gIT09ICdvYmplY3QnICYmIHR5cGVvZiBPICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BPYCBpcyBub3QgYW4gb2JqZWN0Jyk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2Ygc2xvdCAhPT0gJ3N0cmluZycpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgc2xvdGAgbXVzdCBiZSBhIHN0cmluZycpO1xuXHRcdH1cblx0XHR2YXIgc2xvdHMgPSBjaGFubmVsLmdldChPKTtcblx0XHRpZiAoIXNsb3RzKSB7XG5cdFx0XHRzbG90cyA9IHt9O1xuXHRcdFx0Y2hhbm5lbC5zZXQoTywgc2xvdHMpO1xuXHRcdH1cblx0XHRzbG90c1snJCcgKyBzbG90XSA9IFY7XG5cdH1cbn07XG5cbmlmIChPYmplY3QuZnJlZXplKSB7XG5cdE9iamVjdC5mcmVlemUoU0xPVCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU0xPVDtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFDM0MsSUFBSUMsR0FBRyxHQUFHRCxPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ3hCLElBQUlFLE9BQU8sR0FBR0YsT0FBTyxDQUFDLGNBQWMsQ0FBQyxFQUFFO0FBRXZDLElBQUlHLFVBQVUsR0FBR0osWUFBWSxDQUFDLGFBQWEsQ0FBQztBQUU1QyxJQUFJSyxJQUFJLEdBQUc7RUFDVkMsTUFBTSxFQUFFLFNBQUFBLENBQVVDLENBQUMsRUFBRUMsSUFBSSxFQUFFO0lBQzFCLElBQUksQ0FBQ0QsQ0FBQyxJQUFLLE9BQU9BLENBQUMsS0FBSyxRQUFRLElBQUksT0FBT0EsQ0FBQyxLQUFLLFVBQVcsRUFBRTtNQUM3RCxNQUFNLElBQUlILFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQztJQUM3QztJQUNBLElBQUksT0FBT0ksSUFBSSxLQUFLLFFBQVEsRUFBRTtNQUM3QixNQUFNLElBQUlKLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQztJQUNoRDtJQUNBRCxPQUFPLENBQUNHLE1BQU0sQ0FBQ0MsQ0FBQyxDQUFDO0lBQ2pCLElBQUksQ0FBQ0YsSUFBSSxDQUFDSCxHQUFHLENBQUNLLENBQUMsRUFBRUMsSUFBSSxDQUFDLEVBQUU7TUFDdkIsTUFBTSxJQUFJSixVQUFVLENBQUMsR0FBRyxHQUFHSSxJQUFJLEdBQUcseUJBQXlCLENBQUM7SUFDN0Q7RUFDRCxDQUFDO0VBQ0RDLEdBQUcsRUFBRSxTQUFBQSxDQUFVRixDQUFDLEVBQUVDLElBQUksRUFBRTtJQUN2QixJQUFJLENBQUNELENBQUMsSUFBSyxPQUFPQSxDQUFDLEtBQUssUUFBUSxJQUFJLE9BQU9BLENBQUMsS0FBSyxVQUFXLEVBQUU7TUFDN0QsTUFBTSxJQUFJSCxVQUFVLENBQUMsc0JBQXNCLENBQUM7SUFDN0M7SUFDQSxJQUFJLE9BQU9JLElBQUksS0FBSyxRQUFRLEVBQUU7TUFDN0IsTUFBTSxJQUFJSixVQUFVLENBQUMseUJBQXlCLENBQUM7SUFDaEQ7SUFDQSxJQUFJTSxLQUFLLEdBQUdQLE9BQU8sQ0FBQ00sR0FBRyxDQUFDRixDQUFDLENBQUM7SUFDMUIsT0FBT0csS0FBSyxJQUFJQSxLQUFLLENBQUMsR0FBRyxHQUFHRixJQUFJLENBQUM7RUFDbEMsQ0FBQztFQUNETixHQUFHLEVBQUUsU0FBQUEsQ0FBVUssQ0FBQyxFQUFFQyxJQUFJLEVBQUU7SUFDdkIsSUFBSSxDQUFDRCxDQUFDLElBQUssT0FBT0EsQ0FBQyxLQUFLLFFBQVEsSUFBSSxPQUFPQSxDQUFDLEtBQUssVUFBVyxFQUFFO01BQzdELE1BQU0sSUFBSUgsVUFBVSxDQUFDLHNCQUFzQixDQUFDO0lBQzdDO0lBQ0EsSUFBSSxPQUFPSSxJQUFJLEtBQUssUUFBUSxFQUFFO01BQzdCLE1BQU0sSUFBSUosVUFBVSxDQUFDLHlCQUF5QixDQUFDO0lBQ2hEO0lBQ0EsSUFBSU0sS0FBSyxHQUFHUCxPQUFPLENBQUNNLEdBQUcsQ0FBQ0YsQ0FBQyxDQUFDO0lBQzFCLE9BQU8sQ0FBQyxDQUFDRyxLQUFLLElBQUlSLEdBQUcsQ0FBQ1EsS0FBSyxFQUFFLEdBQUcsR0FBR0YsSUFBSSxDQUFDO0VBQ3pDLENBQUM7RUFDREcsR0FBRyxFQUFFLFNBQUFBLENBQVVKLENBQUMsRUFBRUMsSUFBSSxFQUFFSSxDQUFDLEVBQUU7SUFDMUIsSUFBSSxDQUFDTCxDQUFDLElBQUssT0FBT0EsQ0FBQyxLQUFLLFFBQVEsSUFBSSxPQUFPQSxDQUFDLEtBQUssVUFBVyxFQUFFO01BQzdELE1BQU0sSUFBSUgsVUFBVSxDQUFDLHNCQUFzQixDQUFDO0lBQzdDO0lBQ0EsSUFBSSxPQUFPSSxJQUFJLEtBQUssUUFBUSxFQUFFO01BQzdCLE1BQU0sSUFBSUosVUFBVSxDQUFDLHlCQUF5QixDQUFDO0lBQ2hEO0lBQ0EsSUFBSU0sS0FBSyxHQUFHUCxPQUFPLENBQUNNLEdBQUcsQ0FBQ0YsQ0FBQyxDQUFDO0lBQzFCLElBQUksQ0FBQ0csS0FBSyxFQUFFO01BQ1hBLEtBQUssR0FBRyxDQUFDLENBQUM7TUFDVlAsT0FBTyxDQUFDUSxHQUFHLENBQUNKLENBQUMsRUFBRUcsS0FBSyxDQUFDO0lBQ3RCO0lBQ0FBLEtBQUssQ0FBQyxHQUFHLEdBQUdGLElBQUksQ0FBQyxHQUFHSSxDQUFDO0VBQ3RCO0FBQ0QsQ0FBQztBQUVELElBQUlDLE1BQU0sQ0FBQ0MsTUFBTSxFQUFFO0VBQ2xCRCxNQUFNLENBQUNDLE1BQU0sQ0FBQ1QsSUFBSSxDQUFDO0FBQ3BCO0FBRUFVLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHWCxJQUFJIn0=