568f3dbed9adb0d1cf89c9ab5959e610
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = responsiveFontSizes;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _utils = require("@mui/utils");
var _cssUtils = require("./cssUtils");
function responsiveFontSizes(themeInput, options = {}) {
  const {
    breakpoints = ['sm', 'md', 'lg'],
    disableAlign = false,
    factor = 2,
    variants = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline']
  } = options;
  const theme = (0, _extends2.default)({}, themeInput);
  theme.typography = (0, _extends2.default)({}, theme.typography);
  const typography = theme.typography;

  // Convert between CSS lengths e.g. em->px or px->rem
  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).
  const convert = (0, _cssUtils.convertLength)(typography.htmlFontSize);
  const breakpointValues = breakpoints.map(x => theme.breakpoints.values[x]);
  variants.forEach(variant => {
    const style = typography[variant];
    const remFontSize = parseFloat(convert(style.fontSize, 'rem'));
    if (remFontSize <= 1) {
      return;
    }
    const maxFontSize = remFontSize;
    const minFontSize = 1 + (maxFontSize - 1) / factor;
    let {
      lineHeight
    } = style;
    if (!(0, _cssUtils.isUnitless)(lineHeight) && !disableAlign) {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Unsupported non-unitless line height with grid alignment.
Use unitless line heights instead.` : (0, _utils.formatMuiErrorMessage)(6));
    }
    if (!(0, _cssUtils.isUnitless)(lineHeight)) {
      // make it unitless
      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);
    }
    let transform = null;
    if (!disableAlign) {
      transform = value => (0, _cssUtils.alignProperty)({
        size: value,
        grid: (0, _cssUtils.fontGrid)({
          pixels: 4,
          lineHeight,
          htmlFontSize: typography.htmlFontSize
        })
      });
    }
    typography[variant] = (0, _extends2.default)({}, style, (0, _cssUtils.responsiveProperty)({
      cssProperty: 'fontSize',
      min: minFontSize,
      max: maxFontSize,
      unit: 'rem',
      breakpoints: breakpointValues,
      transform
    }));
  });
  return theme;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsInJlc3BvbnNpdmVGb250U2l6ZXMiLCJfZXh0ZW5kczIiLCJfdXRpbHMiLCJfY3NzVXRpbHMiLCJ0aGVtZUlucHV0Iiwib3B0aW9ucyIsImJyZWFrcG9pbnRzIiwiZGlzYWJsZUFsaWduIiwiZmFjdG9yIiwidmFyaWFudHMiLCJ0aGVtZSIsInR5cG9ncmFwaHkiLCJjb252ZXJ0IiwiY29udmVydExlbmd0aCIsImh0bWxGb250U2l6ZSIsImJyZWFrcG9pbnRWYWx1ZXMiLCJtYXAiLCJ4IiwidmFsdWVzIiwiZm9yRWFjaCIsInZhcmlhbnQiLCJzdHlsZSIsInJlbUZvbnRTaXplIiwicGFyc2VGbG9hdCIsImZvbnRTaXplIiwibWF4Rm9udFNpemUiLCJtaW5Gb250U2l6ZSIsImxpbmVIZWlnaHQiLCJpc1VuaXRsZXNzIiwiRXJyb3IiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJmb3JtYXRNdWlFcnJvck1lc3NhZ2UiLCJ0cmFuc2Zvcm0iLCJhbGlnblByb3BlcnR5Iiwic2l6ZSIsImdyaWQiLCJmb250R3JpZCIsInBpeGVscyIsInJlc3BvbnNpdmVQcm9wZXJ0eSIsImNzc1Byb3BlcnR5IiwibWluIiwibWF4IiwidW5pdCJdLCJzb3VyY2VzIjpbInJlc3BvbnNpdmVGb250U2l6ZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlc3BvbnNpdmVGb250U2l6ZXM7XG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG11aS91dGlsc1wiKTtcbnZhciBfY3NzVXRpbHMgPSByZXF1aXJlKFwiLi9jc3NVdGlsc1wiKTtcbmZ1bmN0aW9uIHJlc3BvbnNpdmVGb250U2l6ZXModGhlbWVJbnB1dCwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBicmVha3BvaW50cyA9IFsnc20nLCAnbWQnLCAnbGcnXSxcbiAgICBkaXNhYmxlQWxpZ24gPSBmYWxzZSxcbiAgICBmYWN0b3IgPSAyLFxuICAgIHZhcmlhbnRzID0gWydoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdzdWJ0aXRsZTEnLCAnc3VidGl0bGUyJywgJ2JvZHkxJywgJ2JvZHkyJywgJ2NhcHRpb24nLCAnYnV0dG9uJywgJ292ZXJsaW5lJ11cbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHRoZW1lID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgdGhlbWVJbnB1dCk7XG4gIHRoZW1lLnR5cG9ncmFwaHkgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCB0aGVtZS50eXBvZ3JhcGh5KTtcbiAgY29uc3QgdHlwb2dyYXBoeSA9IHRoZW1lLnR5cG9ncmFwaHk7XG5cbiAgLy8gQ29udmVydCBiZXR3ZWVuIENTUyBsZW5ndGhzIGUuZy4gZW0tPnB4IG9yIHB4LT5yZW1cbiAgLy8gU2V0IHRoZSBiYXNlRm9udFNpemUgZm9yIHlvdXIgcHJvamVjdC4gRGVmYXVsdHMgdG8gMTZweCAoYWxzbyB0aGUgYnJvd3NlciBkZWZhdWx0KS5cbiAgY29uc3QgY29udmVydCA9ICgwLCBfY3NzVXRpbHMuY29udmVydExlbmd0aCkodHlwb2dyYXBoeS5odG1sRm9udFNpemUpO1xuICBjb25zdCBicmVha3BvaW50VmFsdWVzID0gYnJlYWtwb2ludHMubWFwKHggPT4gdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzW3hdKTtcbiAgdmFyaWFudHMuZm9yRWFjaCh2YXJpYW50ID0+IHtcbiAgICBjb25zdCBzdHlsZSA9IHR5cG9ncmFwaHlbdmFyaWFudF07XG4gICAgY29uc3QgcmVtRm9udFNpemUgPSBwYXJzZUZsb2F0KGNvbnZlcnQoc3R5bGUuZm9udFNpemUsICdyZW0nKSk7XG4gICAgaWYgKHJlbUZvbnRTaXplIDw9IDEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbWF4Rm9udFNpemUgPSByZW1Gb250U2l6ZTtcbiAgICBjb25zdCBtaW5Gb250U2l6ZSA9IDEgKyAobWF4Rm9udFNpemUgLSAxKSAvIGZhY3RvcjtcbiAgICBsZXQge1xuICAgICAgbGluZUhlaWdodFxuICAgIH0gPSBzdHlsZTtcbiAgICBpZiAoISgwLCBfY3NzVXRpbHMuaXNVbml0bGVzcykobGluZUhlaWdodCkgJiYgIWRpc2FibGVBbGlnbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFVuc3VwcG9ydGVkIG5vbi11bml0bGVzcyBsaW5lIGhlaWdodCB3aXRoIGdyaWQgYWxpZ25tZW50LlxuVXNlIHVuaXRsZXNzIGxpbmUgaGVpZ2h0cyBpbnN0ZWFkLmAgOiAoMCwgX3V0aWxzLmZvcm1hdE11aUVycm9yTWVzc2FnZSkoNikpO1xuICAgIH1cbiAgICBpZiAoISgwLCBfY3NzVXRpbHMuaXNVbml0bGVzcykobGluZUhlaWdodCkpIHtcbiAgICAgIC8vIG1ha2UgaXQgdW5pdGxlc3NcbiAgICAgIGxpbmVIZWlnaHQgPSBwYXJzZUZsb2F0KGNvbnZlcnQobGluZUhlaWdodCwgJ3JlbScpKSAvIHBhcnNlRmxvYXQocmVtRm9udFNpemUpO1xuICAgIH1cbiAgICBsZXQgdHJhbnNmb3JtID0gbnVsbDtcbiAgICBpZiAoIWRpc2FibGVBbGlnbikge1xuICAgICAgdHJhbnNmb3JtID0gdmFsdWUgPT4gKDAsIF9jc3NVdGlscy5hbGlnblByb3BlcnR5KSh7XG4gICAgICAgIHNpemU6IHZhbHVlLFxuICAgICAgICBncmlkOiAoMCwgX2Nzc1V0aWxzLmZvbnRHcmlkKSh7XG4gICAgICAgICAgcGl4ZWxzOiA0LFxuICAgICAgICAgIGxpbmVIZWlnaHQsXG4gICAgICAgICAgaHRtbEZvbnRTaXplOiB0eXBvZ3JhcGh5Lmh0bWxGb250U2l6ZVxuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgfVxuICAgIHR5cG9ncmFwaHlbdmFyaWFudF0gPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBzdHlsZSwgKDAsIF9jc3NVdGlscy5yZXNwb25zaXZlUHJvcGVydHkpKHtcbiAgICAgIGNzc1Byb3BlcnR5OiAnZm9udFNpemUnLFxuICAgICAgbWluOiBtaW5Gb250U2l6ZSxcbiAgICAgIG1heDogbWF4Rm9udFNpemUsXG4gICAgICB1bml0OiAncmVtJyxcbiAgICAgIGJyZWFrcG9pbnRzOiBicmVha3BvaW50VmFsdWVzLFxuICAgICAgdHJhbnNmb3JtXG4gICAgfSkpO1xuICB9KTtcbiAgcmV0dXJuIHRoZW1lO1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxzQkFBc0IsR0FBR0MsT0FBTyxDQUFDLDhDQUE4QyxDQUFDO0FBQ3BGQyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHQyxtQkFBbUI7QUFDckMsSUFBSUMsU0FBUyxHQUFHUixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDakYsSUFBSVEsTUFBTSxHQUFHUixPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ2xDLElBQUlTLFNBQVMsR0FBR1QsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUNyQyxTQUFTTSxtQkFBbUJBLENBQUNJLFVBQVUsRUFBRUMsT0FBTyxHQUFHLENB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