0f588f1b614952fb0b97c6adfd03f25b
/**
 * @mui/styled-engine v5.11.11
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "GlobalStyles", {
  enumerable: true,
  get: function () {
    return _GlobalStyles.default;
  }
});
Object.defineProperty(exports, "StyledEngineProvider", {
  enumerable: true,
  get: function () {
    return _StyledEngineProvider.default;
  }
});
Object.defineProperty(exports, "ThemeContext", {
  enumerable: true,
  get: function () {
    return _react.ThemeContext;
  }
});
Object.defineProperty(exports, "css", {
  enumerable: true,
  get: function () {
    return _react.css;
  }
});
exports.default = styled;
exports.internal_processStyles = void 0;
Object.defineProperty(exports, "keyframes", {
  enumerable: true,
  get: function () {
    return _react.keyframes;
  }
});
var _styled = _interopRequireDefault(require("@emotion/styled"));
var _react = require("@emotion/react");
var _StyledEngineProvider = _interopRequireDefault(require("./StyledEngineProvider"));
var _GlobalStyles = _interopRequireDefault(require("./GlobalStyles"));
/* eslint-disable no-underscore-dangle */

function styled(tag, options) {
  const stylesFactory = (0, _styled.default)(tag, options);
  if (process.env.NODE_ENV !== 'production') {
    return (...styles) => {
      const component = typeof tag === 'string' ? `"${tag}"` : 'component';
      if (styles.length === 0) {
        console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join('\n'));
      } else if (styles.some(style => style === undefined)) {
        console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
      }
      return stylesFactory(...styles);
    };
  }
  return stylesFactory;
}

// eslint-disable-next-line @typescript-eslint/naming-convention
const internal_processStyles = (tag, processor) => {
  // Emotion attaches all the styles as `__emotion_styles`.
  // Ref: https://github.com/emotion-js/emotion/blob/16d971d0da229596d6bcc39d282ba9753c9ee7cf/packages/styled/src/base.js#L186
  if (Array.isArray(tag.__emotion_styles)) {
    tag.__emotion_styles = processor(tag.__emotion_styles);
  }
};
exports.internal_processStyles = internal_processStyles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsIl9HbG9iYWxTdHlsZXMiLCJkZWZhdWx0IiwiX1N0eWxlZEVuZ2luZVByb3ZpZGVyIiwiX3JlYWN0IiwiVGhlbWVDb250ZXh0IiwiY3NzIiwic3R5bGVkIiwiaW50ZXJuYWxfcHJvY2Vzc1N0eWxlcyIsImtleWZyYW1lcyIsIl9zdHlsZWQiLCJ0YWciLCJvcHRpb25zIiwic3R5bGVzRmFjdG9yeSIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsInN0eWxlcyIsImNvbXBvbmVudCIsImxlbmd0aCIsImNvbnNvbGUiLCJlcnJvciIsImpvaW4iLCJzb21lIiwic3R5bGUiLCJ1bmRlZmluZWQiLCJwcm9jZXNzb3IiLCJBcnJheSIsImlzQXJyYXkiLCJfX2Vtb3Rpb25fc3R5bGVzIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbXVpL3N0eWxlZC1lbmdpbmUgdjUuMTEuMTFcbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiR2xvYmFsU3R5bGVzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9HbG9iYWxTdHlsZXMuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTdHlsZWRFbmdpbmVQcm92aWRlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfU3R5bGVkRW5naW5lUHJvdmlkZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUaGVtZUNvbnRleHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3JlYWN0LlRoZW1lQ29udGV4dDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjc3NcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3JlYWN0LmNzcztcbiAgfVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzdHlsZWQ7XG5leHBvcnRzLmludGVybmFsX3Byb2Nlc3NTdHlsZXMgPSB2b2lkIDA7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJrZXlmcmFtZXNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3JlYWN0LmtleWZyYW1lcztcbiAgfVxufSk7XG52YXIgX3N0eWxlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBlbW90aW9uL3N0eWxlZFwiKSk7XG52YXIgX3JlYWN0ID0gcmVxdWlyZShcIkBlbW90aW9uL3JlYWN0XCIpO1xudmFyIF9TdHlsZWRFbmdpbmVQcm92aWRlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU3R5bGVkRW5naW5lUHJvdmlkZXJcIikpO1xudmFyIF9HbG9iYWxTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0dsb2JhbFN0eWxlc1wiKSk7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuXG5mdW5jdGlvbiBzdHlsZWQodGFnLCBvcHRpb25zKSB7XG4gIGNvbnN0IHN0eWxlc0ZhY3RvcnkgPSAoMCwgX3N0eWxlZC5kZWZhdWx0KSh0YWcsIG9wdGlvbnMpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiAoLi4uc3R5bGVzKSA9PiB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSB0eXBlb2YgdGFnID09PSAnc3RyaW5nJyA/IGBcIiR7dGFnfVwiYCA6ICdjb21wb25lbnQnO1xuICAgICAgaWYgKHN0eWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogU2VlbXMgbGlrZSB5b3UgY2FsbGVkIFxcYHN0eWxlZCgke2NvbXBvbmVudH0pKClcXGAgd2l0aG91dCBhIFxcYHN0eWxlXFxgIGFyZ3VtZW50LmAsICdZb3UgbXVzdCBwcm92aWRlIGEgYHN0eWxlc2AgYXJndW1lbnQ6IGBzdHlsZWQoXCJkaXZcIikoc3R5bGVZb3VGb3Jnb3RUb1Bhc3MpYC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9IGVsc2UgaWYgKHN0eWxlcy5zb21lKHN0eWxlID0+IHN0eWxlID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogdGhlIHN0eWxlZCgke2NvbXBvbmVudH0pKC4uLmFyZ3MpIEFQSSByZXF1aXJlcyBhbGwgaXRzIGFyZ3MgdG8gYmUgZGVmaW5lZC5gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHlsZXNGYWN0b3J5KC4uLnN0eWxlcyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gc3R5bGVzRmFjdG9yeTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuY29uc3QgaW50ZXJuYWxfcHJvY2Vzc1N0eWxlcyA9ICh0YWcsIHByb2Nlc3NvcikgPT4ge1xuICAvLyBFbW90aW9uIGF0dGFjaGVzIGFsbCB0aGUgc3R5bGVzIGFzIGBfX2Vtb3Rpb25fc3R5bGVzYC5cbiAgLy8gUmVmOiBodHRwczovL2dpdGh1Yi5jb20vZW1vdGlvbi1qcy9lbW90aW9uL2Jsb2IvMTZkOTcxZDBkYTIyOTU5NmQ2YmNjMzlkMjgyYmE5NzUzYzllZTdjZi9wYWNrYWdlcy9zdHlsZWQvc3JjL2Jhc2UuanMjTDE4NlxuICBpZiAoQXJyYXkuaXNBcnJheSh0YWcuX19lbW90aW9uX3N0eWxlcykpIHtcbiAgICB0YWcuX19lbW90aW9uX3N0eWxlcyA9IHByb2Nlc3Nvcih0YWcuX19lbW90aW9uX3N0eWxlcyk7XG4gIH1cbn07XG5leHBvcnRzLmludGVybmFsX3Byb2Nlc3NTdHlsZXMgPSBpbnRlcm5hbF9wcm9jZXNzU3R5bGVzOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZOztBQUVaLElBQUlBLHNCQUFzQixHQUFHQyxPQUFPLENBQUMsOENBQThDLENBQUM7QUFDcEZDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkgsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxjQUFjLEVBQUU7RUFDN0NFLFVBQVUsRUFBRSxJQUFJO0VBQ2hCQyxHQUFHLEVBQUUsU0FBQUEsQ0FBQSxFQUFZO0lBQ2YsT0FBT0MsYUFBYSxDQUFDQyxPQUFPO0VBQzlCO0FBQ0YsQ0FBQyxDQUFDO0FBQ0ZQLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUU7RUFDckRFLFVBQVUsRUFBRSxJQUFJO0VBQ2hCQyxHQUFHLEVBQUUs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