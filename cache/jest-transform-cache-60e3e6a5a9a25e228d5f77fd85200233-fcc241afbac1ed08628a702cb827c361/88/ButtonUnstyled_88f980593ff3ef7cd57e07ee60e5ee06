8818af622025bec8d59a3677ef647bfd
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _composeClasses = _interopRequireDefault(require("../composeClasses"));
var _buttonUnstyledClasses = require("./buttonUnstyledClasses");
var _useButton = _interopRequireDefault(require("../useButton"));
var _utils = require("../utils");
var _ClassNameConfigurator = require("../utils/ClassNameConfigurator");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["action", "children", "component", "disabled", "focusableWhenDisabled", "onBlur", "onClick", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseLeave", "slotProps", "slots"];
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
const useUtilityClasses = ownerState => {
  const {
    active,
    disabled,
    focusVisible
  } = ownerState;
  const slots = {
    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active']
  };
  return (0, _composeClasses.default)(slots, (0, _ClassNameConfigurator.useClassNamesOverride)(_buttonUnstyledClasses.getButtonUnstyledUtilityClass));
};
/**
 * The foundation for building custom-styled buttons.
 *
 * Demos:
 *
 * - [Unstyled Button](https://mui.com/base/react-button/)
 *
 * API:
 *
 * - [ButtonUnstyled API](https://mui.com/base/api/button-unstyled/)
 */
const ButtonUnstyled = /*#__PURE__*/React.forwardRef(function ButtonUnstyled(props, forwardedRef) {
  var _ref;
  const {
      action,
      children,
      component,
      focusableWhenDisabled = false,
      slotProps = {},
      slots = {}
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const buttonRef = React.useRef();
  const {
    active,
    focusVisible,
    setFocusVisible,
    getRootProps
  } = (0, _useButton.default)((0, _extends2.default)({}, props, {
    focusableWhenDisabled
  }));
  React.useImperativeHandle(action, () => ({
    focusVisible: () => {
      setFocusVisible(true);
      buttonRef.current.focus();
    }
  }), [setFocusVisible]);
  const ownerState = (0, _extends2.default)({}, props, {
    active,
    focusableWhenDisabled,
    focusVisible
  });
  const classes = useUtilityClasses(ownerState);
  const defaultElement = other.href || other.to ? 'a' : 'button';
  const Root = (_ref = component != null ? component : slots.root) != null ? _ref : defaultElement;
  const rootProps = (0, _utils.useSlotProps)({
    elementType: Root,
    getSlotProps: getRootProps,
    externalForwardedProps: other,
    externalSlotProps: slotProps.root,
    additionalProps: {
      ref: forwardedRef
    },
    ownerState,
    className: classes.root
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, (0, _extends2.default)({}, rootProps, {
    children: children
  }));
});
process.env.NODE_ENV !== "production" ? ButtonUnstyled.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * A ref for imperative actions. It currently only supports `focusVisible()` action.
   */
  action: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({
    current: _propTypes.default.shape({
      focusVisible: _propTypes.default.func.isRequired
    })
  })]),
  /**
   * @ignore
   */
  children: _propTypes.default.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes.default.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: _propTypes.default.bool,
  /**
   * If `true`, allows a disabled button to receive focus.
   * @default false
   */
  focusableWhenDisabled: _propTypes.default.bool,
  /**
   * @ignore
   */
  href: _propTypes.default.string,
  /**
   * @ignore
   */
  onBlur: _propTypes.default.func,
  /**
   * @ignore
   */
  onClick: _propTypes.default.func,
  /**
   * @ignore
   */
  onFocus: _propTypes.default.func,
  /**
   * @ignore
   */
  onFocusVisible: _propTypes.default.func,
  /**
   * @ignore
   */
  onKeyDown: _propTypes.default.func,
  /**
   * @ignore
   */
  onKeyUp: _propTypes.default.func,
  /**
   * @ignore
   */
  onMouseLeave: _propTypes.default.func,
  /**
   * The props used for each slot inside the Button.
   * @default {}
   */
  slotProps: _propTypes.default.shape({
    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
  }),
  /**
   * The components used for each slot inside the Button.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: _propTypes.default.shape({
    root: _propTypes.default.elementType
  }),
  /**
   * @ignore
   */
  to: _propTypes.default.string
} : void 0;
var _default = ButtonUnstyled;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9leHRlbmRzMiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcHJvcFR5cGVzIiwiX2NvbXBvc2VDbGFzc2VzIiwiX2J1dHRvblVuc3R5bGVkQ2xhc3NlcyIsIl91c2VCdXR0b24iLCJfdXRpbHMiLCJfQ2xhc3NOYW1lQ29uZmlndXJhdG9yIiwiX2pzeFJ1bnRpbWUiLCJfZXhjbHVkZWQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwidXNlVXRpbGl0eUNsYXNzZXMiLCJvd25lclN0YXRlIiwiYWN0aXZlIiwiZGlzYWJsZWQiLCJmb2N1c1Zpc2libGUiLCJzbG90cyIsInJvb3QiLCJ1c2VDbGFzc05hbWVzT3ZlcnJpZGUiLCJnZXRCdXR0b25VbnN0eWxlZFV0aWxpdHlDbGFzcyIsIkJ1dHRvblVuc3R5bGVkIiwiZm9yd2FyZFJlZiIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwiX3JlZiIsImFjdGlvbiIsImNoaWxkcmVuIiwiY29tcG9uZW50IiwiZm9jdXNhYmxlV2hlbkRpc2FibGVkIiwic2xvdFByb3BzIiwib3RoZXIiLCJidXR0b25SZWYiLCJ1c2VSZWYiLCJzZXRGb2N1c1Zpc2libGUiLCJnZXRSb290UHJvcHMiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwiY3VycmVudCIsImZvY3VzIiwiY2xhc3NlcyIsImRlZmF1bHRFbGVtZW50IiwiaHJlZiIsInRvIiwiUm9vdCIsInJvb3RQcm9wcyIsInVzZVNsb3RQcm9wcyIsImVsZW1lbnRUeXBlIiwiZ2V0U2xvdFByb3BzIiwiZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyIsImV4dGVybmFsU2xvdFByb3BzIiwiYWRkaXRpb25hbFByb3BzIiwicmVmIiwiY2xhc3NOYW1lIiwianN4IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwicHJvcFR5cGVzIiwib25lT2ZUeXBlIiwiZnVuYyIsInNoYXBlIiwiaXNSZXF1aXJlZCIsIm5vZGUiLCJib29sIiwic3RyaW5nIiwib25CbHVyIiwib25DbGljayIsIm9uRm9jdXMiLCJvbkZvY3VzVmlzaWJsZSIsIm9uS2V5RG93biIsIm9uS2V5VXAiLCJvbk1vdXNlTGVhdmUiLCJvYmplY3QiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIkJ1dHRvblVuc3R5bGVkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG52YXIgX2NvbXBvc2VDbGFzc2VzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29tcG9zZUNsYXNzZXNcIikpO1xudmFyIF9idXR0b25VbnN0eWxlZENsYXNzZXMgPSByZXF1aXJlKFwiLi9idXR0b25VbnN0eWxlZENsYXNzZXNcIik7XG52YXIgX3VzZUJ1dHRvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3VzZUJ1dHRvblwiKSk7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xudmFyIF9DbGFzc05hbWVDb25maWd1cmF0b3IgPSByZXF1aXJlKFwiLi4vdXRpbHMvQ2xhc3NOYW1lQ29uZmlndXJhdG9yXCIpO1xudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWN0aW9uXCIsIFwiY2hpbGRyZW5cIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImZvY3VzYWJsZVdoZW5EaXNhYmxlZFwiLCBcIm9uQmx1clwiLCBcIm9uQ2xpY2tcIiwgXCJvbkZvY3VzXCIsIFwib25Gb2N1c1Zpc2libGVcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwib25Nb3VzZUxlYXZlXCIsIFwic2xvdFByb3BzXCIsIFwic2xvdHNcIl07XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhY3RpdmUsXG4gICAgZGlzYWJsZWQsXG4gICAgZm9jdXNWaXNpYmxlXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBmb2N1c1Zpc2libGUgJiYgJ2ZvY3VzVmlzaWJsZScsIGFjdGl2ZSAmJiAnYWN0aXZlJ11cbiAgfTtcbiAgcmV0dXJuICgwLCBfY29tcG9zZUNsYXNzZXMuZGVmYXVsdCkoc2xvdHMsICgwLCBfQ2xhc3NOYW1lQ29uZmlndXJhdG9yLnVzZUNsYXNzTmFtZXNPdmVycmlkZSkoX2J1dHRvblVuc3R5bGVkQ2xhc3Nlcy5nZXRCdXR0b25VbnN0eWxlZFV0aWxpdHlDbGFzcykpO1xufTtcbi8qKlxuICogVGhlIGZvdW5kYXRpb24gZm9yIGJ1aWxkaW5nIGN1c3RvbS1zdHlsZWQgYnV0dG9ucy5cbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtVbnN0eWxlZCBCdXR0b25dKGh0dHBzOi8vbXVpLmNvbS9iYXNlL3JlYWN0LWJ1dHRvbi8pXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW0J1dHRvblVuc3R5bGVkIEFQSV0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UvYXBpL2J1dHRvbi11bnN0eWxlZC8pXG4gKi9cbmNvbnN0IEJ1dHRvblVuc3R5bGVkID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQnV0dG9uVW5zdHlsZWQocHJvcHMsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3JlZjtcbiAgY29uc3Qge1xuICAgICAgYWN0aW9uLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjb21wb25lbnQsXG4gICAgICBmb2N1c2FibGVXaGVuRGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIHNsb3RQcm9wcyA9IHt9LFxuICAgICAgc2xvdHMgPSB7fVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IGJ1dHRvblJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBjb25zdCB7XG4gICAgYWN0aXZlLFxuICAgIGZvY3VzVmlzaWJsZSxcbiAgICBzZXRGb2N1c1Zpc2libGUsXG4gICAgZ2V0Um9vdFByb3BzXG4gIH0gPSAoMCwgX3VzZUJ1dHRvbi5kZWZhdWx0KSgoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgIGZvY3VzYWJsZVdoZW5EaXNhYmxlZFxuICB9KSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9uLCAoKSA9PiAoe1xuICAgIGZvY3VzVmlzaWJsZTogKCkgPT4ge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKHRydWUpO1xuICAgICAgYnV0dG9uUmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gIH0pLCBbc2V0Rm9jdXNWaXNpYmxlXSk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgIGFjdGl2ZSxcbiAgICBmb2N1c2FibGVXaGVuRGlzYWJsZWQsXG4gICAgZm9jdXNWaXNpYmxlXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGRlZmF1bHRFbGVtZW50ID0gb3RoZXIuaHJlZiB8fCBvdGhlci50byA/ICdhJyA6ICdidXR0b24nO1xuICBjb25zdCBSb290ID0gKF9yZWYgPSBjb21wb25lbnQgIT0gbnVsbCA/IGNvbXBvbmVudCA6IHNsb3RzLnJvb3QpICE9IG51bGwgPyBfcmVmIDogZGVmYXVsdEVsZW1lbnQ7XG4gIGNvbnN0IHJvb3RQcm9wcyA9ICgwLCBfdXRpbHMudXNlU2xvdFByb3BzKSh7XG4gICAgZWxlbWVudFR5cGU6IFJvb3QsXG4gICAgZ2V0U2xvdFByb3BzOiBnZXRSb290UHJvcHMsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wczogb3RoZXIsXG4gICAgZXh0ZXJuYWxTbG90UHJvcHM6IHNsb3RQcm9wcy5yb290LFxuICAgIGFkZGl0aW9uYWxQcm9wczoge1xuICAgICAgcmVmOiBmb3J3YXJkZWRSZWZcbiAgICB9LFxuICAgIG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnJvb3RcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoUm9vdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcm9vdFByb3BzLCB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQnV0dG9uVW5zdHlsZWQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogQSByZWYgZm9yIGltcGVyYXRpdmUgYWN0aW9ucy4gSXQgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgYGZvY3VzVmlzaWJsZSgpYCBhY3Rpb24uXG4gICAqL1xuICBhY3Rpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgICBmb2N1c1Zpc2libGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KVxuICB9KV0pLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGFsbG93cyBhIGRpc2FibGVkIGJ1dHRvbiB0byByZWNlaXZlIGZvY3VzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZm9jdXNhYmxlV2hlbkRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGhyZWY6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXNWaXNpYmxlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VMZWF2ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgQnV0dG9uLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIHJvb3Q6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSlcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBCdXR0b24uXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgICByb290OiBfcHJvcFR5cGVzLmRlZmF1bHQuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0bzogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ1xufSA6IHZvaWQgMDtcbnZhciBfZGVmYXVsdCA9IEJ1dHRvblVuc3R5bGVkO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLHNCQUFzQixHQUFHQyxPQUFPLENBQUMsOENBQThDLENBQUM7QUFDcEZDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLElBQUlDLFNBQVMsR0FBR1Asc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQ2pGLElBQUlPLDhCQUE4QixHQUFHUixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7QUFDM0gsSUFBSVEsS0FBSyxHQUFHQyx1QkFBdUIsQ0FBQ1QsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JELElBQUlVLFVBQVUsR0FBR1gsc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUM5RCxJQUFJVyxlQUFlLEdBQUdaLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUMxRSxJQUFJWSxzQkFBc0IsR0FBR1osT0FBTyxDQUFDLHlCQUF5QixDQUFDO0FBQy9ELElBQUlhLFVBQVUsR0FBR2Qsc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNoRSxJQUFJYyxNQUFNLEdBQUdkLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDaEMsSUFBSWUsc0JBQXNCLEdBQUdmLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQztBQUN0RSxJQUFJZ0IsV0FBVyxHQUFHaEIsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0FBQzlDLE1BQU1pQixTQUFTLEdBQUcsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsdUJBQXVCLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLE9BQU8sQ0FBQztBQUMxTSxTQUFTQyx3QkFBd0JBLENBQUNDLFdBQVcsRUFBRTtFQUFFLElBQUksT0FBT0MsT0FBTyxLQUFLLFVBQVUsRUFBRSxPQUFPLElBQUk7RUFBRSxJQUFJQyxpQkFBaUIsR0FBRyxJQUFJRCxPQUFPLEVBQUU7RUFBRSxJQUFJRSxnQkFBZ0IsR0FBRyxJQUFJRixPQUFPLEVBQUU7RUFBRSxPQUFPLENBQUNGLHdCQUF3QixHQUFHLFNBQUFBLENBQVVDLFdBQVcsRUFBRTtJQUFFLE9BQU9BLFdBQVcsR0FBR0csZ0JBQWdCLEdBQUdELGlCQUFpQjtFQUFFLENBQUMsRUFBRUYsV0FBVyxDQUFDO0FBQUU7QUFDdFQsU0FBU1YsdUJBQXVCQSxDQUFDYyxHQUFHLEVBQUVKLFdBQVcsRUFBRTtFQUFFLElBQUksQ0FBQ0EsV0FBVyxJQUFJSSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBVSxFQUFFO0lBQUUsT0FBT0QsR0FBRztFQUFFO0VBQUUsSUFBSUEsR0FBRyxLQUFLLElBQUksSUFBSSxPQUFPQSxHQUFHLEtBQUssUUFBUSxJQUFJLE9BQU9BLEdBQUcsS0FBSyxVQUFVLEVBQUU7SUFBRSxPQUFPO01BQUVsQixPQUFPLEVBQUVrQjtJQUFJLENBQUM7RUFBRTtFQUFFLElBQUlFLEtBQUssR0FBR1Asd0JBQXdCLENBQUNDLFdBQVcsQ0FBQztFQUFFLElBQUlNLEtBQUssSUFBSUEsS0FBSyxDQUFDQyxHQUFHLENBQUNILEdBQUcsQ0FBQyxFQUFFO0lBQUUsT0FBT0UsS0FBSyxDQUFDRSxHQUFHLENBQUNKLEdBQUcsQ0FBQztFQUFFO0VBQUUsSUFBSUssTUFBTSxHQUFHLENBQUMsQ0FBQztFQUFFLElBQUlDLHFCQUFxQixHQUFHNUIsTUFBTSxDQUFDQyxjQUFjLElBQUlELE1BQU0sQ0FBQzZCLHdCQUF3QjtFQUFFLEtBQUssSUFBSUMsR0FBRyxJQUFJUixHQUFHLEVBQUU7SUFBRSxJQUFJUSxHQUFHLEtBQUssU0FBUyxJQUFJOUIsTUFBTSxDQUFDK0IsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1gsR0FBRyxFQUFFUSxHQUFHLENBQUMsRUFBRTtNQUFFLElBQUlJLElBQUksR0FBR04scUJBQXFCLEdBQUc1QixNQUFNLENBQUM2Qix3QkFBd0IsQ0FBQ1AsR0FBRyxFQUFFUSxHQUFHLENBQUMsR0FBRyxJQUFJO01BQUUsSUFBSUksSUFBSSxLQUFLQSxJQUFJLENBQUNSLEdBQUcsSUFBSVEsSUFBSSxDQUFDQyxHQUFHLENBQUMsRUFBRTtRQUFFbkMsTUFBTSxDQUFDQyxjQUFjLENBQUMwQixNQUFNLEVBQUVHLEdBQUcsRUFBRUksSUFBSSxDQUFDO01BQUUsQ0FBQyxNQUFNO1FBQUVQLE1BQU0sQ0FBQ0csR0FBRyxDQUFDLEdBQUdSLEdBQUcsQ0FBQ1EsR0FBRyxDQUFDO01BQUU7SUFBRTtFQUFFO0VBQUVILE1BQU0sQ0FBQ3ZCLE9BQU8sR0FBR2tCLEdBQUc7RUFBRSxJQUFJRSxLQUFLLEVBQUU7SUFBRUEsS0FBSyxDQUFDVyxHQUFHLENBQUNiLEdBQUcsRUFBRUssTUFBTSxDQUFDO0VBQUU7RUFBRSxPQUFPQSxNQUFNO0FBQUU7QUFDbnlCLE1BQU1TLGlCQUFpQixHQUFHQyxVQUFVLElBQUk7RUFDdEMsTUFBTTtJQUNKQyxNQUFNO0lBQ05DLFFBQVE7SUFDUkM7RUFDRixDQUFDLEdBQUdILFVBQVU7RUFDZCxNQUFNSSxLQUFLLEdBQUc7SUFDWkMsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFSCxRQUFRLElBQUksVUFBVSxFQUFFQyxZQUFZLElBQUksY0FBYyxFQUFFRixNQUFNLElBQUksUUFBUTtFQUMzRixDQUFDO0VBQ0QsT0FBTyxDQUFDLENBQUMsRUFBRTVCLGVBQWUsQ0FBQ04sT0FBTyxFQUFFcUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFM0Isc0JBQXNCLENBQUM2QixxQkFBcUIsRUFBRWhDLHNCQUFzQixDQUFDaUMsNkJBQTZCLENBQUMsQ0FBQztBQUNySixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLGNBQWMsR0FBRyxhQUFhdEMsS0FBSyxDQUFDdUMsVUFBVSxDQUFDLFNBQVNELGNBQWNBLENBQUNFLEtBQUssRUFBRUMsWUFBWSxFQUFFO0VBQ2hHLElBQUlDLElBQUk7RUFDUixNQUFNO01BQ0ZDLE1BQU07TUFDTkMsUUFBUTtNQUNSQyxTQUFTO01BQ1RDLHFCQUFxQixHQUFHLEtBQUs7TUFDN0JDLFNBQVMsR0FBRyxDQUFDLENBQUM7TUFDZGIsS0FBSyxHQUFHLENBQUM7SUFDWCxDQUFDLEdBQUdNLEtBQUs7SUFDVFEsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFakQsOEJBQThCLENBQUNGLE9BQU8sRUFBRTJDLEtBQUssRUFBRS9CLFNBQVMsQ0FBQztFQUN2RSxNQUFNd0MsU0FBUyxHQUFHakQsS0FBSyxDQUFDa0QsTUFBTSxFQUFFO0VBQ2hDLE1BQU07SUFDSm5CLE1BQU07SUFDTkUsWUFBWTtJQUNaa0IsZUFBZTtJQUNmQztFQUNGLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRS9DLFVBQVUsQ0FBQ1IsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFQyxTQUFTLENBQUNELE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRTJDLEtBQUssRUFBRTtJQUM1RE07RUFDRixDQUFDLENBQUMsQ0FBQztFQUNIOUMsS0FBSyxDQUFDcUQsbUJBQW1CLENBQUNWLE1BQU0sRUFBRSxPQUFPO0lBQ3ZDVixZQUFZLEVBQUVBLENBQUEsS0FBTTtNQUNsQmtCLGVBQWUsQ0FBQyxJQUFJLENBQUM7TUFDckJGLFNBQVMsQ0FBQ0ssT0FBTyxDQUFDQyxLQUFLLEVBQUU7SUFDM0I7RUFDRixDQUFDLENBQUMsRUFBRSxDQUFDSixlQUFlLENBQUMsQ0FBQztFQUN0QixNQUFNckIsVUFBVSxHQUFHLENBQUMsQ0FBQyxFQUFFaEMsU0FBUyxDQUFDRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUyQyxLQUFLLEVBQUU7SUFDbkRULE1BQU07SUFDTmUscUJBQXFCO0lBQ3JCYjtFQUNGLENBQUMsQ0FBQztFQUNGLE1BQU11QixPQUFPLEdBQUczQixpQkFBaUIsQ0FBQ0MsVUFBVSxDQUFDO0VBQzdDLE1BQU0yQixjQUFjLEdBQUdULEtBQUssQ0FBQ1UsSUFBSSxJQUFJVixLQUFLLENBQUNXLEVBQUUsR0FBRyxHQUFHLEdBQUcsUUFBUTtFQUM5RCxNQUFNQyxJQUFJLEdBQUcsQ0FBQ2xCLElBQUksR0FBR0csU0FBUyxJQUFJLElBQUksR0FBR0EsU0FBUyxHQUFHWCxLQUFLLENBQUNDLElBQUksS0FBSyxJQUFJLEdBQUdPLElBQUksR0FBR2UsY0FBYztFQUNoRyxNQUFNSSxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUV2RCxNQUFNLENBQUN3RCxZQUFZLEVBQUU7SUFDekNDLFdBQVcsRUFBRUgsSUFBSTtJQUNqQkksWUFBWSxFQUFFWixZQUFZO0lBQzFCYSxzQkFBc0IsRUFBRWpCLEtBQUs7SUFDN0JrQixpQkFBaUIsRUFBRW5CLFNBQVMsQ0FBQ1osSUFBSTtJQUNqQ2dDLGVBQWUsRUFBRTtNQUNmQyxHQUFHLEVBQUUzQjtJQUNQLENBQUM7SUFDRFgsVUFBVTtJQUNWdUMsU0FBUyxFQUFFYixPQUFPLENBQUNyQjtFQUNyQixDQUFDLENBQUM7RUFDRixPQUFPLGFBQWEsQ0FBQyxDQUFDLEVBQUUzQixXQUFXLENBQUM4RCxHQUFHLEVBQUVWLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRTlELFNBQVMsQ0FBQ0QsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFZ0UsU0FBUyxFQUFFO0lBQ25GakIsUUFBUSxFQUFFQTtFQUNaLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBQ0YyQixPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsUUFBUSxLQUFLLFlBQVksR0FBR25DLGNBQWMsQ0FBQ29DLFNBQVMsQ0FBQyx5QkFBeUI7RUFDeEY7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBQUNGO0FBQ0E7RUFDRS9CLE1BQU0sRUFBRXpDLFVBQVUsQ0FBQ0wsT0FBTyxDQUFDOEUsU0FBUyxDQUFDLENBQUN6RSxVQUFVLENBQUNMLE9BQU8sQ0FBQytFLElBQUksRUFBRTFFLFVBQVUsQ0FBQ0wsT0FBTyxDQUFDZ0YsS0FBSyxDQUFDO0lBQ3RGdkIsT0FBTyxFQUFFcEQsVUFBVSxDQUFDTCxPQUFPLENBQUNnRixLQUFLLENBQUM7TUFDaEM1QyxZQUFZLEVBQUUvQixVQUFVLENBQUNMLE9BQU8sQ0FBQytFLElBQUksQ0FBQ0U7SUFDeEMsQ0FBQztFQUNILENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDSjtBQUNGO0FBQ0E7RUFDRWxDLFFBQVEsRUFBRTFDLFVBQVUsQ0FBQ0wsT0FBTyxDQUFDa0YsSUFBSTtFQUNqQztBQUNGO0FBQ0E7QUFDQTtFQUNFbEMsU0FBUyxFQUFFM0MsVUFBVSxDQUFDTCxPQUFPLENBQUNrRSxXQUFXO0VBQ3pDO0FBQ0Y7QUFDQTtBQUNBO0VBQ0UvQixRQUFRLEVBQUU5QixVQUFVLENBQUNMLE9BQU8sQ0FBQ21GLElBQUk7RUFDakM7QUFDRjtBQUNBO0FBQ0E7RUFDRWxDLHFCQUFxQixFQUFFNUMsVUFBVSxDQUFDTCxPQUFPLENBQUNtRixJQUFJO0VBQzlDO0FBQ0Y7QUFDQTtFQUNFdEIsSUFBSSxFQUFFeEQsVUFBVSxDQUFDTCxPQUFPLENBQUNvRixNQUFNO0VBQy9CO0FBQ0Y7QUFDQTtFQUNFQyxNQUFNLEVBQUVoRixVQUFVLENBQUNMLE9BQU8sQ0FBQytFLElBQUk7RUFDL0I7QUFDRjtBQUNBO0VBQ0VPLE9BQU8sRUFBRWpGLFVBQVUsQ0FBQ0wsT0FBTyxDQUFDK0UsSUFBSTtFQUNoQztBQUNGO0FBQ0E7RUFDRVEsT0FBTyxFQUFFbEYsVUFBVSxDQUFDTCxPQUFPLENBQUMrRSxJQUFJO0VBQ2hDO0FBQ0Y7QUFDQTtFQUNFUyxjQUFjLEVBQUVuRixVQUFVLENBQUNMLE9BQU8sQ0FBQytFLElBQUk7RUFDdkM7QUFDRjtBQUNBO0VBQ0VVLFNBQVMsRUFBRXBGLFVBQVUsQ0FBQ0wsT0FBTyxDQUFDK0UsSUFBSTtFQUNsQztBQUNGO0FBQ0E7RUFDRVcsT0FBTyxFQUFFckYsVUFBVSxDQUFDTCxPQUFPLENBQUMrRSxJQUFJO0VBQ2hDO0FBQ0Y7QUFDQTtFQUNFWSxZQUFZLEVBQUV0RixVQUFVLENBQUNMLE9BQU8sQ0FBQytFLElBQUk7RUFDckM7QUFDRjtBQUNBO0FBQ0E7RUFDRTdCLFNBQVMsRUFBRTdDLFVBQVUsQ0FBQ0wsT0FBTyxDQUFDZ0YsS0FBSyxDQUFDO0lBQ2xDMUMsSUFBSSxFQUFFakMsVUFBVSxDQUFDTCxPQUFPLENBQUM4RSxTQUFTLENBQUMsQ0FBQ3pFLFVBQVUsQ0FBQ0wsT0FBTyxDQUFDK0UsSUFBSSxFQUFFMUUsVUFBVSxDQUFDTCxPQUFPLENBQUM0RixNQUFNLENBQUM7RUFDekYsQ0FBQyxDQUFDO0VBQ0Y7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFdkQsS0FBSyxFQUFFaEMsVUFBVSxDQUFDTCxPQUFPLENBQUNnRixLQUFLLENBQUM7SUFDOUIxQyxJQUFJLEVBQUVqQyxVQUFVLENBQUNMLE9BQU8sQ0FBQ2tFO0VBQzNCLENBQUMsQ0FBQztFQUNGO0FBQ0Y7QUFDQTtFQUNFSixFQUFFLEVBQUV6RCxVQUFVLENBQUNMLE9BQU8sQ0FBQ29GO0FBQ3pCLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDVixJQUFJUyxRQUFRLEdBQUdwRCxjQUFjO0FBQzdCM0MsT0FBTyxDQUFDRSxPQUFPLEdBQUc2RixRQUFRIn0=