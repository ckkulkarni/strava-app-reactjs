fe0f428d5db48ab5e06dbe19da649c01
"use strict";

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __values = void 0 && (void 0).__values || function (o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var generateMessages_1 = __importDefault(require("./generateMessages"));
var stream_1 = require("stream");
/**
 * Stream that reads Source messages and writes GherkinDocument and Pickle messages.
 */
var ParserMessageStream = /** @class */function (_super) {
  __extends(ParserMessageStream, _super);
  function ParserMessageStream(options) {
    var _this = _super.call(this, {
      writableObjectMode: true,
      readableObjectMode: true
    }) || this;
    _this.options = options;
    return _this;
  }
  ParserMessageStream.prototype._transform = function (envelope, encoding, callback) {
    var e_1, _a;
    if (envelope.source) {
      var messageList = generateMessages_1.default(envelope.source.data, envelope.source.uri, this.options);
      try {
        for (var messageList_1 = __values(messageList), messageList_1_1 = messageList_1.next(); !messageList_1_1.done; messageList_1_1 = messageList_1.next()) {
          var message = messageList_1_1.value;
          this.push(message);
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (messageList_1_1 && !messageList_1_1.done && (_a = messageList_1.return)) _a.call(messageList_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    }
    callback();
  };
  return ParserMessageStream;
}(stream_1.Transform);
exports.default = ParserMessageStream;
module.exports = ParserMessageStream;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZW5lcmF0ZU1lc3NhZ2VzXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZXF1aXJlIiwic3RyZWFtXzEiLCJQYXJzZXJNZXNzYWdlU3RyZWFtIiwiX3N1cGVyIiwiX19leHRlbmRzIiwib3B0aW9ucyIsIl90aGlzIiwiY2FsbCIsIndyaXRhYmxlT2JqZWN0TW9kZSIsInJlYWRhYmxlT2JqZWN0TW9kZSIsInByb3RvdHlwZSIsIl90cmFuc2Zvcm0iLCJlbnZlbG9wZSIsImVuY29kaW5nIiwiY2FsbGJhY2siLCJzb3VyY2UiLCJtZXNzYWdlTGlzdCIsImRlZmF1bHQiLCJkYXRhIiwidXJpIiwibWVzc2FnZUxpc3RfMSIsIl9fdmFsdWVzIiwibWVzc2FnZUxpc3RfMV8xIiwibmV4dCIsImRvbmUiLCJtZXNzYWdlIiwidmFsdWUiLCJwdXNoIiwiVHJhbnNmb3JtIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJlYW0vUGFyc2VyTWVzc2FnZVN0cmVhbS50cyJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsa0JBQUEsR0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsUUFBQSxHQUFBRCxPQUFBO0FBSUE7OztBQUdBLElBQUFFLG1CQUFBLDBCQUFBQyxNQUFBO0VBQWlEQyxTQUFBLENBQUFGLG1CQUFBLEVBQUFDLE1BQUE7RUFDL0MsU0FBQUQsb0JBQTZCRyxPQUF3QjtJQUFyRCxJQUFBQyxLQUFBLEdBQ0VILE1BQUEsQ0FBQUksSUFBQSxPQUFNO01BQUVDLGtCQUFrQixFQUFFLElBQUk7TUFBRUMsa0JBQWtCLEVBQUU7SUFBSSxDQUFFLENBQUM7SUFEbENILEtBQUEsQ0FBQUQsT0FBTyxHQUFQQSxPQUFPOztFQUVwQztFQUVPSCxtQkFBQSxDQUFBUSxTQUFBLENBQUFDLFVBQVUsR0FBakIsVUFDRUMsUUFBNEIsRUFDNUJDLFFBQWdCLEVBQ2hCQyxRQUEyQjs7SUFFM0IsSUFBSUYsUUFBUSxDQUFDRyxNQUFNLEVBQUU7TUFDbkIsSUFBTUMsV0FBVyxHQUFHbEIsa0JBQUEsQ0FBQW1CLE9BQWdCLENBQ2xDTCxRQUFRLENBQUNHLE1BQU0sQ0FBQ0csSUFBSSxFQUNwQk4sUUFBUSxDQUFDRyxNQUFNLENBQUNJLEdBQUcsRUFDbkIsSUFBSSxDQUFDZCxPQUFPLENBQ2I7O1FBQ0QsS0FBc0IsSUFBQWUsYUFBQSxHQUFBQyxRQUFBLENBQUFMLFdBQVcsR0FBQU0sZUFBQSxHQUFBRixhQUFBLENBQUFHLElBQUEsS0FBQUQsZUFBQSxDQUFBRSxJQUFBLEVBQUFGLGVBQUEsR0FBQUYsYUFBQSxDQUFBRyxJQUFBLElBQUU7VUFBOUIsSUFBTUUsT0FBTyxHQUFBSCxlQUFBLENBQUFJLEtBQUE7VUFDaEIsSUFBSSxDQUFDQyxJQUFJLENBQUNGLE9BQU8sQ0FBQzs7Ozs7Ozs7Ozs7Ozs7SUFHdEJYLFFBQVEsRUFBRTtFQUNaLENBQUM7RUFDSCxPQUFBWixtQkFBQztBQUFELENBQUMsQ0F0QmdERCxRQUFBLENBQUEyQixTQUFTOztBQXdCMURDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHNUIsbUJBQW1CIn0=