97090e24de14790ce9af2282776297f5
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useListbox;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _utils = require("@mui/utils");
var _useListbox = require("./useListbox.types");
var _defaultListboxReducer = _interopRequireDefault(require("./defaultListboxReducer"));
var _useControllableReducer = _interopRequireDefault(require("./useControllableReducer"));
var _areArraysEqual = _interopRequireDefault(require("../utils/areArraysEqual"));
var _useLatest = _interopRequireDefault(require("../utils/useLatest"));
var _useTextNavigation = _interopRequireDefault(require("../utils/useTextNavigation"));
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
const defaultOptionComparer = (optionA, optionB) => optionA === optionB;
const defaultIsOptionDisabled = () => false;
const defaultOptionStringifier = option => typeof option === 'string' ? option : String(option);

/**
 * @ignore - internal hook.
 *
 * The useListbox is a lower-level utility that is used to build a listbox component.
 * It's used to manage the state of the listbox and its options.
 * Contains the logic for keyboard navigation, selection, and focus management.
 */
function useListbox(props) {
  var _props$optionIdGenera;
  const {
    disabledItemsFocusable = false,
    disableListWrap = false,
    focusManagement = 'activeDescendant',
    id: idProp,
    isOptionDisabled = defaultIsOptionDisabled,
    listboxRef: externalListboxRef,
    optionComparer = defaultOptionComparer,
    optionStringifier = defaultOptionStringifier,
    options,
    stateReducer: externalReducer,
    value: valueParam,
    selectionLimit = null
  } = props;
  const id = (0, _utils.unstable_useId)(idProp);
  const defaultIdGenerator = React.useCallback((_, index) => `${id}-option-${index}`, [id]);
  const optionIdGenerator = (_props$optionIdGenera = props.optionIdGenerator) != null ? _props$optionIdGenera : defaultIdGenerator;
  const propsWithDefaults = (0, _useLatest.default)((0, _extends2.default)({}, props, {
    disabledItemsFocusable,
    disableListWrap,
    focusManagement,
    isOptionDisabled,
    optionComparer,
    optionStringifier,
    selectionLimit
  }), [props]);
  const listboxRef = React.useRef(null);
  const handleRef = (0, _utils.unstable_useForkRef)(externalListboxRef, listboxRef);
  const [{
    highlightedValue,
    selectedValues: selectedValue
  }, dispatch] = (0, _useControllableReducer.default)(_defaultListboxReducer.default, externalReducer, propsWithDefaults);
  const handleTextNavigation = (0, _useTextNavigation.default)((searchString, event) => dispatch({
    type: _useListbox.ActionTypes.textNavigation,
    event,
    searchString
  }));
  React.useEffect(() => {
    // if a controlled value changes, we need to update the state to keep things in sync
    if (valueParam !== undefined && valueParam !== selectedValue) {
      dispatch({
        type: _useListbox.ActionTypes.setValue,
        event: null,
        value: valueParam
      });
    }
  }, [valueParam, selectedValue, dispatch]);
  const highlightedIndex = React.useMemo(() => {
    return highlightedValue == null ? -1 : options.findIndex(option => optionComparer(option, highlightedValue));
  }, [highlightedValue, options, optionComparer]);

  // introducing refs to avoid recreating the getOptionState function on each change.
  const latestSelectedValue = (0, _useLatest.default)(selectedValue);
  const latestHighlightedIndex = (0, _useLatest.default)(highlightedIndex);
  const previousOptions = React.useRef([]);
  React.useEffect(() => {
    if ((0, _areArraysEqual.default)(previousOptions.current, options, optionComparer)) {
      return;
    }
    dispatch({
      type: _useListbox.ActionTypes.optionsChange,
      event: null,
      options,
      previousOptions: previousOptions.current
    });
    previousOptions.current = options;
  }, [options, optionComparer, dispatch]);
  const setSelectedValue = React.useCallback(values => {
    dispatch({
      type: _useListbox.ActionTypes.setValue,
      event: null,
      value: values
    });
  }, [dispatch]);
  const setHighlightedValue = React.useCallback(option => {
    dispatch({
      type: _useListbox.ActionTypes.setHighlight,
      event: null,
      highlight: option
    });
  }, [dispatch]);
  const createHandleOptionClick = React.useCallback((option, other) => event => {
    var _other$onClick;
    (_other$onClick = other.onClick) == null ? void 0 : _other$onClick.call(other, event);
    if (event.defaultPrevented) {
      return;
    }
    event.preventDefault();
    dispatch({
      type: _useListbox.ActionTypes.optionClick,
      option,
      event
    });
  }, [dispatch]);
  const createHandleOptionPointerOver = React.useCallback((option, other) => event => {
    var _other$onMouseOver;
    (_other$onMouseOver = other.onMouseOver) == null ? void 0 : _other$onMouseOver.call(other, event);
    if (event.defaultPrevented) {
      return;
    }
    dispatch({
      type: _useListbox.ActionTypes.optionHover,
      option,
      event
    });
  }, [dispatch]);
  const createHandleKeyDown = other => event => {
    var _other$onKeyDown;
    (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);
    if (event.defaultPrevented) {
      return;
    }
    const keysToPreventDefault = ['ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'];
    if (focusManagement === 'activeDescendant') {
      // When the child element is focused using the activeDescendant attribute,
      // the listbox handles keyboard events on its behalf.
      // We have to `preventDefault()` is this case to prevent the browser from
      // scrolling the view when space is pressed or submitting forms when enter is pressed.
      keysToPreventDefault.push(' ', 'Enter');
    }
    if (keysToPreventDefault.includes(event.key)) {
      event.preventDefault();
    }
    dispatch({
      type: _useListbox.ActionTypes.keyDown,
      event
    });
    handleTextNavigation(event);
  };
  const createHandleBlur = other => event => {
    var _other$onBlur, _listboxRef$current;
    (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);
    if (event.defaultPrevented) {
      return;
    }
    if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(document.activeElement)) {
      // focus is within the listbox
      return;
    }
    dispatch({
      type: _useListbox.ActionTypes.blur,
      event
    });
  };
  const getRootProps = (otherHandlers = {}) => {
    return (0, _extends2.default)({}, otherHandlers, {
      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? optionIdGenerator(highlightedValue, highlightedIndex) : undefined,
      id,
      onBlur: createHandleBlur(otherHandlers),
      onKeyDown: createHandleKeyDown(otherHandlers),
      role: 'listbox',
      tabIndex: focusManagement === 'DOM' ? -1 : 0,
      ref: handleRef
    });
  };
  const getOptionState = React.useCallback(option => {
    var _latestSelectedValue$;
    const index = options.findIndex(opt => optionComparer(opt, option));
    const selected = ((_latestSelectedValue$ = latestSelectedValue.current) != null ? _latestSelectedValue$ : []).some(value => value != null && optionComparer(option, value));
    const disabled = isOptionDisabled(option, index);
    const highlighted = latestHighlightedIndex.current === index && index !== -1;
    return {
      disabled,
      highlighted,
      index,
      selected
    };
  }, [options, isOptionDisabled, optionComparer, latestSelectedValue, latestHighlightedIndex]);
  const getOptionTabIndex = React.useCallback(optionState => {
    if (focusManagement === 'activeDescendant') {
      return undefined;
    }
    if (!optionState.highlighted) {
      return -1;
    }
    if (optionState.disabled && !disabledItemsFocusable) {
      return -1;
    }
    return 0;
  }, [focusManagement, disabledItemsFocusable]);
  const getOptionProps = React.useCallback((option, otherHandlers = {}) => {
    const optionState = getOptionState(option);
    return (0, _extends2.default)({}, otherHandlers, {
      'aria-disabled': optionState.disabled || undefined,
      'aria-selected': optionState.selected,
      id: optionIdGenerator(option, optionState.index),
      onClick: createHandleOptionClick(option, otherHandlers),
      onPointerOver: createHandleOptionPointerOver(option, otherHandlers),
      role: 'option',
      tabIndex: getOptionTabIndex(optionState)
    });
  }, [optionIdGenerator, createHandleOptionClick, createHandleOptionPointerOver, getOptionTabIndex, getOptionState]);
  React.useDebugValue({
    highlightedOption: highlightedValue,
    selectedOption: selectedValue
  });
  return {
    getRootProps,
    getOptionProps,
    getOptionState,
    highlightedOption: highlightedValue,
    selectedOption: selectedValue,
    setSelectedValue,
    setHighlightedValue
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsInVzZUxpc3Rib3giLCJfZXh0ZW5kczIiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3V0aWxzIiwiX3VzZUxpc3Rib3giLCJfZGVmYXVsdExpc3Rib3hSZWR1Y2VyIiwiX3VzZUNvbnRyb2xsYWJsZVJlZHVjZXIiLCJfYXJlQXJyYXlzRXF1YWwiLCJfdXNlTGF0ZXN0IiwiX3VzZVRleHROYXZpZ2F0aW9uIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsImRlZmF1bHRPcHRpb25Db21wYXJlciIsIm9wdGlvbkEiLCJvcHRpb25CIiwiZGVmYXVsdElzT3B0aW9uRGlzYWJsZWQiLCJkZWZhdWx0T3B0aW9uU3RyaW5naWZpZXIiLCJvcHRpb24iLCJTdHJpbmciLCJwcm9wcyIsIl9wcm9wcyRvcHRpb25JZEdlbmVyYSIsImRpc2FibGVkSXRlbXNGb2N1c2FibGUiLCJkaXNhYmxlTGlzdFdyYXAiLCJmb2N1c01hbmFnZW1lbnQiLCJpZCIsImlkUHJvcCIsImlzT3B0aW9uRGlzYWJsZWQiLCJsaXN0Ym94UmVmIiwiZXh0ZXJuYWxMaXN0Ym94UmVmIiwib3B0aW9uQ29tcGFyZXIiLCJvcHRpb25TdHJpbmdpZmllciIsIm9wdGlvbnMiLCJzdGF0ZVJlZHVjZXIiLCJleHRlcm5hbFJlZHVjZXIiLCJ2YWx1ZVBhcmFtIiwic2VsZWN0aW9uTGltaXQiLCJ1bnN0YWJsZV91c2VJZCIsImRlZmF1bHRJZEdlbmVyYXRvciIsInVzZUNhbGxiYWNrIiwiXyIsImluZGV4Iiwib3B0aW9uSWRHZW5lcmF0b3IiLCJwcm9wc1dpdGhEZWZhdWx0cyIsInVzZVJlZiIsImhhbmRsZVJlZiIsInVuc3RhYmxlX3VzZUZvcmtSZWYiLCJoaWdobGlnaHRlZFZhbHVlIiwic2VsZWN0ZWRWYWx1ZXMiLCJzZWxlY3RlZFZhbHVlIiwiZGlzcGF0Y2giLCJoYW5kbGVUZXh0TmF2aWdhdGlvbiIsInNlYXJjaFN0cmluZyIsImV2ZW50IiwidHlwZSIsIkFjdGlvblR5cGVzIiwidGV4dE5hdmlnYXRpb24iLCJ1c2VFZmZlY3QiLCJ1bmRlZmluZWQiLCJzZXRWYWx1ZSIsImhpZ2hsaWdodGVkSW5kZXgiLCJ1c2VNZW1vIiwiZmluZEluZGV4IiwibGF0ZXN0U2VsZWN0ZWRWYWx1ZSIsImxhdGVzdEhpZ2hsaWdodGVkSW5kZXgiLCJwcmV2aW91c09wdGlvbnMiLCJjdXJyZW50Iiwib3B0aW9uc0NoYW5nZSIsInNldFNlbGVjdGVkVmFsdWUiLCJ2YWx1ZXMiLCJzZXRIaWdobGlnaHRlZFZhbHVlIiwic2V0SGlnaGxpZ2h0IiwiaGlnaGxpZ2h0IiwiY3JlYXRlSGFuZGxlT3B0aW9uQ2xpY2siLCJvdGhlciIsIl9vdGhlciRvbkNsaWNrIiwib25DbGljayIsImRlZmF1bHRQcmV2ZW50ZWQiLCJwcmV2ZW50RGVmYXVsdCIsIm9wdGlvbkNsaWNrIiwiY3JlYXRlSGFuZGxlT3B0aW9uUG9pbnRlck92ZXIiLCJfb3RoZXIkb25Nb3VzZU92ZXIiLCJvbk1vdXNlT3ZlciIsIm9wdGlvbkhvdmVyIiwiY3JlYXRlSGFuZGxlS2V5RG93biIsIl9vdGhlciRvbktleURvd24iLCJvbktleURvd24iLCJrZXlzVG9QcmV2ZW50RGVmYXVsdCIsInB1c2giLCJpbmNsdWRlcyIsImtleURvd24iLCJjcmVhdGVIYW5kbGVCbHVyIiwiX290aGVyJG9uQmx1ciIsIl9saXN0Ym94UmVmJGN1cnJlbnQiLCJvbkJsdXIiLCJjb250YWlucyIsImRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsImJsdXIiLCJnZXRSb290UHJvcHMiLCJvdGhlckhhbmRsZXJzIiwicm9sZSIsInRhYkluZGV4IiwicmVmIiwiZ2V0T3B0aW9uU3RhdGUiLCJfbGF0ZXN0U2VsZWN0ZWRWYWx1ZSQiLCJvcHQiLCJzZWxlY3RlZCIsInNvbWUiLCJkaXNhYmxlZCIsImhpZ2hsaWdodGVkIiwiZ2V0T3B0aW9uVGFiSW5kZXgiLCJvcHRpb25TdGF0ZSIsImdldE9wdGlvblByb3BzIiwib25Qb2ludGVyT3ZlciIsInVzZURlYnVnVmFsdWUiLCJoaWdobGlnaHRlZE9wdGlvbiIsInNlbGVjdGVkT3B0aW9uIl0sInNvdXJjZXMiOlsidXNlTGlzdGJveC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXNlTGlzdGJveDtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG11aS91dGlsc1wiKTtcbnZhciBfdXNlTGlzdGJveCA9IHJlcXVpcmUoXCIuL3VzZUxpc3Rib3gudHlwZXNcIik7XG52YXIgX2RlZmF1bHRMaXN0Ym94UmVkdWNlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZGVmYXVsdExpc3Rib3hSZWR1Y2VyXCIpKTtcbnZhciBfdXNlQ29udHJvbGxhYmxlUmVkdWNlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXNlQ29udHJvbGxhYmxlUmVkdWNlclwiKSk7XG52YXIgX2FyZUFycmF5c0VxdWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvYXJlQXJyYXlzRXF1YWxcIikpO1xudmFyIF91c2VMYXRlc3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy91c2VMYXRlc3RcIikpO1xudmFyIF91c2VUZXh0TmF2aWdhdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3VzZVRleHROYXZpZ2F0aW9uXCIpKTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZUJhYmVsSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAobm9kZUludGVyb3ApIHsgcmV0dXJuIG5vZGVJbnRlcm9wID8gY2FjaGVOb2RlSW50ZXJvcCA6IGNhY2hlQmFiZWxJbnRlcm9wOyB9KShub2RlSW50ZXJvcCk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHsgaWYgKCFub2RlSW50ZXJvcCAmJiBvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKGtleSAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuY29uc3QgZGVmYXVsdE9wdGlvbkNvbXBhcmVyID0gKG9wdGlvbkEsIG9wdGlvbkIpID0+IG9wdGlvbkEgPT09IG9wdGlvbkI7XG5jb25zdCBkZWZhdWx0SXNPcHRpb25EaXNhYmxlZCA9ICgpID0+IGZhbHNlO1xuY29uc3QgZGVmYXVsdE9wdGlvblN0cmluZ2lmaWVyID0gb3B0aW9uID0+IHR5cGVvZiBvcHRpb24gPT09ICdzdHJpbmcnID8gb3B0aW9uIDogU3RyaW5nKG9wdGlvbik7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGhvb2suXG4gKlxuICogVGhlIHVzZUxpc3Rib3ggaXMgYSBsb3dlci1sZXZlbCB1dGlsaXR5IHRoYXQgaXMgdXNlZCB0byBidWlsZCBhIGxpc3Rib3ggY29tcG9uZW50LlxuICogSXQncyB1c2VkIHRvIG1hbmFnZSB0aGUgc3RhdGUgb2YgdGhlIGxpc3Rib3ggYW5kIGl0cyBvcHRpb25zLlxuICogQ29udGFpbnMgdGhlIGxvZ2ljIGZvciBrZXlib2FyZCBuYXZpZ2F0aW9uLCBzZWxlY3Rpb24sIGFuZCBmb2N1cyBtYW5hZ2VtZW50LlxuICovXG5mdW5jdGlvbiB1c2VMaXN0Ym94KHByb3BzKSB7XG4gIHZhciBfcHJvcHMkb3B0aW9uSWRHZW5lcmE7XG4gIGNvbnN0IHtcbiAgICBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlID0gZmFsc2UsXG4gICAgZGlzYWJsZUxpc3RXcmFwID0gZmFsc2UsXG4gICAgZm9jdXNNYW5hZ2VtZW50ID0gJ2FjdGl2ZURlc2NlbmRhbnQnLFxuICAgIGlkOiBpZFByb3AsXG4gICAgaXNPcHRpb25EaXNhYmxlZCA9IGRlZmF1bHRJc09wdGlvbkRpc2FibGVkLFxuICAgIGxpc3Rib3hSZWY6IGV4dGVybmFsTGlzdGJveFJlZixcbiAgICBvcHRpb25Db21wYXJlciA9IGRlZmF1bHRPcHRpb25Db21wYXJlcixcbiAgICBvcHRpb25TdHJpbmdpZmllciA9IGRlZmF1bHRPcHRpb25TdHJpbmdpZmllcixcbiAgICBvcHRpb25zLFxuICAgIHN0YXRlUmVkdWNlcjogZXh0ZXJuYWxSZWR1Y2VyLFxuICAgIHZhbHVlOiB2YWx1ZVBhcmFtLFxuICAgIHNlbGVjdGlvbkxpbWl0ID0gbnVsbFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGlkID0gKDAsIF91dGlscy51bnN0YWJsZV91c2VJZCkoaWRQcm9wKTtcbiAgY29uc3QgZGVmYXVsdElkR2VuZXJhdG9yID0gUmVhY3QudXNlQ2FsbGJhY2soKF8sIGluZGV4KSA9PiBgJHtpZH0tb3B0aW9uLSR7aW5kZXh9YCwgW2lkXSk7XG4gIGNvbnN0IG9wdGlvbklkR2VuZXJhdG9yID0gKF9wcm9wcyRvcHRpb25JZEdlbmVyYSA9IHByb3BzLm9wdGlvbklkR2VuZXJhdG9yKSAhPSBudWxsID8gX3Byb3BzJG9wdGlvbklkR2VuZXJhIDogZGVmYXVsdElkR2VuZXJhdG9yO1xuICBjb25zdCBwcm9wc1dpdGhEZWZhdWx0cyA9ICgwLCBfdXNlTGF0ZXN0LmRlZmF1bHQpKCgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSxcbiAgICBkaXNhYmxlTGlzdFdyYXAsXG4gICAgZm9jdXNNYW5hZ2VtZW50LFxuICAgIGlzT3B0aW9uRGlzYWJsZWQsXG4gICAgb3B0aW9uQ29tcGFyZXIsXG4gICAgb3B0aW9uU3RyaW5naWZpZXIsXG4gICAgc2VsZWN0aW9uTGltaXRcbiAgfSksIFtwcm9wc10pO1xuICBjb25zdCBsaXN0Ym94UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVSZWYgPSAoMCwgX3V0aWxzLnVuc3RhYmxlX3VzZUZvcmtSZWYpKGV4dGVybmFsTGlzdGJveFJlZiwgbGlzdGJveFJlZik7XG4gIGNvbnN0IFt7XG4gICAgaGlnaGxpZ2h0ZWRWYWx1ZSxcbiAgICBzZWxlY3RlZFZhbHVlczogc2VsZWN0ZWRWYWx1ZVxuICB9LCBkaXNwYXRjaF0gPSAoMCwgX3VzZUNvbnRyb2xsYWJsZVJlZHVjZXIuZGVmYXVsdCkoX2RlZmF1bHRMaXN0Ym94UmVkdWNlci5kZWZhdWx0LCBleHRlcm5hbFJlZHVjZXIsIHByb3BzV2l0aERlZmF1bHRzKTtcbiAgY29uc3QgaGFuZGxlVGV4dE5hdmlnYXRpb24gPSAoMCwgX3VzZVRleHROYXZpZ2F0aW9uLmRlZmF1bHQpKChzZWFyY2hTdHJpbmcsIGV2ZW50KSA9PiBkaXNwYXRjaCh7XG4gICAgdHlwZTogX3VzZUxpc3Rib3guQWN0aW9uVHlwZXMudGV4dE5hdmlnYXRpb24sXG4gICAgZXZlbnQsXG4gICAgc2VhcmNoU3RyaW5nXG4gIH0pKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBpZiBhIGNvbnRyb2xsZWQgdmFsdWUgY2hhbmdlcywgd2UgbmVlZCB0byB1cGRhdGUgdGhlIHN0YXRlIHRvIGtlZXAgdGhpbmdzIGluIHN5bmNcbiAgICBpZiAodmFsdWVQYXJhbSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlUGFyYW0gIT09IHNlbGVjdGVkVmFsdWUpIHtcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogX3VzZUxpc3Rib3guQWN0aW9uVHlwZXMuc2V0VmFsdWUsXG4gICAgICAgIGV2ZW50OiBudWxsLFxuICAgICAgICB2YWx1ZTogdmFsdWVQYXJhbVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbdmFsdWVQYXJhbSwgc2VsZWN0ZWRWYWx1ZSwgZGlzcGF0Y2hdKTtcbiAgY29uc3QgaGlnaGxpZ2h0ZWRJbmRleCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiBoaWdobGlnaHRlZFZhbHVlID09IG51bGwgPyAtMSA6IG9wdGlvbnMuZmluZEluZGV4KG9wdGlvbiA9PiBvcHRpb25Db21wYXJlcihvcHRpb24sIGhpZ2hsaWdodGVkVmFsdWUpKTtcbiAgfSwgW2hpZ2hsaWdodGVkVmFsdWUsIG9wdGlvbnMsIG9wdGlvbkNvbXBhcmVyXSk7XG5cbiAgLy8gaW50cm9kdWNpbmcgcmVmcyB0byBhdm9pZCByZWNyZWF0aW5nIHRoZSBnZXRPcHRpb25TdGF0ZSBmdW5jdGlvbiBvbiBlYWNoIGNoYW5nZS5cbiAgY29uc3QgbGF0ZXN0U2VsZWN0ZWRWYWx1ZSA9ICgwLCBfdXNlTGF0ZXN0LmRlZmF1bHQpKHNlbGVjdGVkVmFsdWUpO1xuICBjb25zdCBsYXRlc3RIaWdobGlnaHRlZEluZGV4ID0gKDAsIF91c2VMYXRlc3QuZGVmYXVsdCkoaGlnaGxpZ2h0ZWRJbmRleCk7XG4gIGNvbnN0IHByZXZpb3VzT3B0aW9ucyA9IFJlYWN0LnVzZVJlZihbXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCgwLCBfYXJlQXJyYXlzRXF1YWwuZGVmYXVsdCkocHJldmlvdXNPcHRpb25zLmN1cnJlbnQsIG9wdGlvbnMsIG9wdGlvbkNvbXBhcmVyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBfdXNlTGlzdGJveC5BY3Rpb25UeXBlcy5vcHRpb25zQ2hhbmdlLFxuICAgICAgZXZlbnQ6IG51bGwsXG4gICAgICBvcHRpb25zLFxuICAgICAgcHJldmlvdXNPcHRpb25zOiBwcmV2aW91c09wdGlvbnMuY3VycmVudFxuICAgIH0pO1xuICAgIHByZXZpb3VzT3B0aW9ucy5jdXJyZW50ID0gb3B0aW9ucztcbiAgfSwgW29wdGlvbnMsIG9wdGlvbkNvbXBhcmVyLCBkaXNwYXRjaF0pO1xuICBjb25zdCBzZXRTZWxlY3RlZFZhbHVlID0gUmVhY3QudXNlQ2FsbGJhY2sodmFsdWVzID0+IHtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBfdXNlTGlzdGJveC5BY3Rpb25UeXBlcy5zZXRWYWx1ZSxcbiAgICAgIGV2ZW50OiBudWxsLFxuICAgICAgdmFsdWU6IHZhbHVlc1xuICAgIH0pO1xuICB9LCBbZGlzcGF0Y2hdKTtcbiAgY29uc3Qgc2V0SGlnaGxpZ2h0ZWRWYWx1ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG9wdGlvbiA9PiB7XG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogX3VzZUxpc3Rib3guQWN0aW9uVHlwZXMuc2V0SGlnaGxpZ2h0LFxuICAgICAgZXZlbnQ6IG51bGwsXG4gICAgICBoaWdobGlnaHQ6IG9wdGlvblxuICAgIH0pO1xuICB9LCBbZGlzcGF0Y2hdKTtcbiAgY29uc3QgY3JlYXRlSGFuZGxlT3B0aW9uQ2xpY2sgPSBSZWFjdC51c2VDYWxsYmFjaygob3B0aW9uLCBvdGhlcikgPT4gZXZlbnQgPT4ge1xuICAgIHZhciBfb3RoZXIkb25DbGljaztcbiAgICAoX290aGVyJG9uQ2xpY2sgPSBvdGhlci5vbkNsaWNrKSA9PSBudWxsID8gdm9pZCAwIDogX290aGVyJG9uQ2xpY2suY2FsbChvdGhlciwgZXZlbnQpO1xuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogX3VzZUxpc3Rib3guQWN0aW9uVHlwZXMub3B0aW9uQ2xpY2ssXG4gICAgICBvcHRpb24sXG4gICAgICBldmVudFxuICAgIH0pO1xuICB9LCBbZGlzcGF0Y2hdKTtcbiAgY29uc3QgY3JlYXRlSGFuZGxlT3B0aW9uUG9pbnRlck92ZXIgPSBSZWFjdC51c2VDYWxsYmFjaygob3B0aW9uLCBvdGhlcikgPT4gZXZlbnQgPT4ge1xuICAgIHZhciBfb3RoZXIkb25Nb3VzZU92ZXI7XG4gICAgKF9vdGhlciRvbk1vdXNlT3ZlciA9IG90aGVyLm9uTW91c2VPdmVyKSA9PSBudWxsID8gdm9pZCAwIDogX290aGVyJG9uTW91c2VPdmVyLmNhbGwob3RoZXIsIGV2ZW50KTtcbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBfdXNlTGlzdGJveC5BY3Rpb25UeXBlcy5vcHRpb25Ib3ZlcixcbiAgICAgIG9wdGlvbixcbiAgICAgIGV2ZW50XG4gICAgfSk7XG4gIH0sIFtkaXNwYXRjaF0pO1xuICBjb25zdCBjcmVhdGVIYW5kbGVLZXlEb3duID0gb3RoZXIgPT4gZXZlbnQgPT4ge1xuICAgIHZhciBfb3RoZXIkb25LZXlEb3duO1xuICAgIChfb3RoZXIkb25LZXlEb3duID0gb3RoZXIub25LZXlEb3duKSA9PSBudWxsID8gdm9pZCAwIDogX290aGVyJG9uS2V5RG93bi5jYWxsKG90aGVyLCBldmVudCk7XG4gICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qga2V5c1RvUHJldmVudERlZmF1bHQgPSBbJ0Fycm93VXAnLCAnQXJyb3dEb3duJywgJ0hvbWUnLCAnRW5kJywgJ1BhZ2VVcCcsICdQYWdlRG93biddO1xuICAgIGlmIChmb2N1c01hbmFnZW1lbnQgPT09ICdhY3RpdmVEZXNjZW5kYW50Jykge1xuICAgICAgLy8gV2hlbiB0aGUgY2hpbGQgZWxlbWVudCBpcyBmb2N1c2VkIHVzaW5nIHRoZSBhY3RpdmVEZXNjZW5kYW50IGF0dHJpYnV0ZSxcbiAgICAgIC8vIHRoZSBsaXN0Ym94IGhhbmRsZXMga2V5Ym9hcmQgZXZlbnRzIG9uIGl0cyBiZWhhbGYuXG4gICAgICAvLyBXZSBoYXZlIHRvIGBwcmV2ZW50RGVmYXVsdCgpYCBpcyB0aGlzIGNhc2UgdG8gcHJldmVudCB0aGUgYnJvd3NlciBmcm9tXG4gICAgICAvLyBzY3JvbGxpbmcgdGhlIHZpZXcgd2hlbiBzcGFjZSBpcyBwcmVzc2VkIG9yIHN1Ym1pdHRpbmcgZm9ybXMgd2hlbiBlbnRlciBpcyBwcmVzc2VkLlxuICAgICAga2V5c1RvUHJldmVudERlZmF1bHQucHVzaCgnICcsICdFbnRlcicpO1xuICAgIH1cbiAgICBpZiAoa2V5c1RvUHJldmVudERlZmF1bHQuaW5jbHVkZXMoZXZlbnQua2V5KSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogX3VzZUxpc3Rib3guQWN0aW9uVHlwZXMua2V5RG93bixcbiAgICAgIGV2ZW50XG4gICAgfSk7XG4gICAgaGFuZGxlVGV4dE5hdmlnYXRpb24oZXZlbnQpO1xuICB9O1xuICBjb25zdCBjcmVhdGVIYW5kbGVCbHVyID0gb3RoZXIgPT4gZXZlbnQgPT4ge1xuICAgIHZhciBfb3RoZXIkb25CbHVyLCBfbGlzdGJveFJlZiRjdXJyZW50O1xuICAgIChfb3RoZXIkb25CbHVyID0gb3RoZXIub25CbHVyKSA9PSBudWxsID8gdm9pZCAwIDogX290aGVyJG9uQmx1ci5jYWxsKG90aGVyLCBldmVudCk7XG4gICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKChfbGlzdGJveFJlZiRjdXJyZW50ID0gbGlzdGJveFJlZi5jdXJyZW50KSAhPSBudWxsICYmIF9saXN0Ym94UmVmJGN1cnJlbnQuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIC8vIGZvY3VzIGlzIHdpdGhpbiB0aGUgbGlzdGJveFxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBfdXNlTGlzdGJveC5BY3Rpb25UeXBlcy5ibHVyLFxuICAgICAgZXZlbnRcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZ2V0Um9vdFByb3BzID0gKG90aGVySGFuZGxlcnMgPSB7fSkgPT4ge1xuICAgIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBvdGhlckhhbmRsZXJzLCB7XG4gICAgICAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JzogZm9jdXNNYW5hZ2VtZW50ID09PSAnYWN0aXZlRGVzY2VuZGFudCcgJiYgaGlnaGxpZ2h0ZWRWYWx1ZSAhPSBudWxsID8gb3B0aW9uSWRHZW5lcmF0b3IoaGlnaGxpZ2h0ZWRWYWx1ZSwgaGlnaGxpZ2h0ZWRJbmRleCkgOiB1bmRlZmluZWQsXG4gICAgICBpZCxcbiAgICAgIG9uQmx1cjogY3JlYXRlSGFuZGxlQmx1cihvdGhlckhhbmRsZXJzKSxcbiAgICAgIG9uS2V5RG93bjogY3JlYXRlSGFuZGxlS2V5RG93bihvdGhlckhhbmRsZXJzKSxcbiAgICAgIHJvbGU6ICdsaXN0Ym94JyxcbiAgICAgIHRhYkluZGV4OiBmb2N1c01hbmFnZW1lbnQgPT09ICdET00nID8gLTEgOiAwLFxuICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZ2V0T3B0aW9uU3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhvcHRpb24gPT4ge1xuICAgIHZhciBfbGF0ZXN0U2VsZWN0ZWRWYWx1ZSQ7XG4gICAgY29uc3QgaW5kZXggPSBvcHRpb25zLmZpbmRJbmRleChvcHQgPT4gb3B0aW9uQ29tcGFyZXIob3B0LCBvcHRpb24pKTtcbiAgICBjb25zdCBzZWxlY3RlZCA9ICgoX2xhdGVzdFNlbGVjdGVkVmFsdWUkID0gbGF0ZXN0U2VsZWN0ZWRWYWx1ZS5jdXJyZW50KSAhPSBudWxsID8gX2xhdGVzdFNlbGVjdGVkVmFsdWUkIDogW10pLnNvbWUodmFsdWUgPT4gdmFsdWUgIT0gbnVsbCAmJiBvcHRpb25Db21wYXJlcihvcHRpb24sIHZhbHVlKSk7XG4gICAgY29uc3QgZGlzYWJsZWQgPSBpc09wdGlvbkRpc2FibGVkKG9wdGlvbiwgaW5kZXgpO1xuICAgIGNvbnN0IGhpZ2hsaWdodGVkID0gbGF0ZXN0SGlnaGxpZ2h0ZWRJbmRleC5jdXJyZW50ID09PSBpbmRleCAmJiBpbmRleCAhPT0gLTE7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc2FibGVkLFxuICAgICAgaGlnaGxpZ2h0ZWQsXG4gICAgICBpbmRleCxcbiAgICAgIHNlbGVjdGVkXG4gICAgfTtcbiAgfSwgW29wdGlvbnMsIGlzT3B0aW9uRGlzYWJsZWQsIG9wdGlvbkNvbXBhcmVyLCBsYXRlc3RTZWxlY3RlZFZhbHVlLCBsYXRlc3RIaWdobGlnaHRlZEluZGV4XSk7XG4gIGNvbnN0IGdldE9wdGlvblRhYkluZGV4ID0gUmVhY3QudXNlQ2FsbGJhY2sob3B0aW9uU3RhdGUgPT4ge1xuICAgIGlmIChmb2N1c01hbmFnZW1lbnQgPT09ICdhY3RpdmVEZXNjZW5kYW50Jykge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKCFvcHRpb25TdGF0ZS5oaWdobGlnaHRlZCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBpZiAob3B0aW9uU3RhdGUuZGlzYWJsZWQgJiYgIWRpc2FibGVkSXRlbXNGb2N1c2FibGUpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sIFtmb2N1c01hbmFnZW1lbnQsIGRpc2FibGVkSXRlbXNGb2N1c2FibGVdKTtcbiAgY29uc3QgZ2V0T3B0aW9uUHJvcHMgPSBSZWFjdC51c2VDYWxsYmFjaygob3B0aW9uLCBvdGhlckhhbmRsZXJzID0ge30pID0+IHtcbiAgICBjb25zdCBvcHRpb25TdGF0ZSA9IGdldE9wdGlvblN0YXRlKG9wdGlvbik7XG4gICAgcmV0dXJuICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIG90aGVySGFuZGxlcnMsIHtcbiAgICAgICdhcmlhLWRpc2FibGVkJzogb3B0aW9uU3RhdGUuZGlzYWJsZWQgfHwgdW5kZWZpbmVkLFxuICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBvcHRpb25TdGF0ZS5zZWxlY3RlZCxcbiAgICAgIGlkOiBvcHRpb25JZEdlbmVyYXRvcihvcHRpb24sIG9wdGlvblN0YXRlLmluZGV4KSxcbiAgICAgIG9uQ2xpY2s6IGNyZWF0ZUhhbmRsZU9wdGlvbkNsaWNrKG9wdGlvbiwgb3RoZXJIYW5kbGVycyksXG4gICAgICBvblBvaW50ZXJPdmVyOiBjcmVhdGVIYW5kbGVPcHRpb25Qb2ludGVyT3ZlcihvcHRpb24sIG90aGVySGFuZGxlcnMpLFxuICAgICAgcm9sZTogJ29wdGlvbicsXG4gICAgICB0YWJJbmRleDogZ2V0T3B0aW9uVGFiSW5kZXgob3B0aW9uU3RhdGUpXG4gICAgfSk7XG4gIH0sIFtvcHRpb25JZEdlbmVyYXRvciwgY3JlYXRlSGFuZGxlT3B0aW9uQ2xpY2ssIGNyZWF0ZUhhbmRsZU9wdGlvblBvaW50ZXJPdmVyLCBnZXRPcHRpb25UYWJJbmRleCwgZ2V0T3B0aW9uU3RhdGVdKTtcbiAgUmVhY3QudXNlRGVidWdWYWx1ZSh7XG4gICAgaGlnaGxpZ2h0ZWRPcHRpb246IGhpZ2hsaWdodGVkVmFsdWUsXG4gICAgc2VsZWN0ZWRPcHRpb246IHNlbGVjdGVkVmFsdWVcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgZ2V0Um9vdFByb3BzLFxuICAgIGdldE9wdGlvblByb3BzLFxuICAgIGdldE9wdGlvblN0YXRlLFxuICAgIGhpZ2hsaWdodGVkT3B0aW9uOiBoaWdobGlnaHRlZFZhbHVlLFxuICAgIHNlbGVjdGVkT3B0aW9uOiBzZWxlY3RlZFZhbHVlLFxuICAgIHNldFNlbGVjdGVkVmFsdWUsXG4gICAgc2V0SGlnaGxpZ2h0ZWRWYWx1ZVxuICB9O1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxzQkFBc0IsR0FBR0MsT0FBTyxDQUFDLDhDQUE4QyxDQUFDO0FBQ3BGQyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHQyxVQUFVO0FBQzVCLElBQUlDLFNBQVMsR0FBR1Isc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQ2pGLElBQUlRLEtBQUssR0FBR0MsdUJBQXVCLENBQUNULE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNyRCxJQUFJVSxNQUFNLEdBQUdWLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDbEMsSUFBSVcsV0FBVyxHQUFHWCxPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFDL0MsSUFBSVksc0JBQXNCLEdBQUdiLHNCQUFzQixDQUFDQyxPQUFPLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUN2RixJQUFJYSx1QkFBdUIsR0FBR2Qsc0JBQXNCLENBQUNDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBQ3pGLElBQUljLGVBQWUsR0FBR2Ysc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0FBQ2hGLElBQUllLFVBQVUsR0FBR2hCLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUN0RSxJQUFJZ0Isa0JBQWtCLEdBQUdqQixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLDRCQUE0QixDQUFDLENBQUM7QUFDdEYsU0FBU2lCLHdCQUF3QkEsQ0FBQ0MsV0FBVyxFQUFFO0VBQUUsSUFBSSxPQUFPQyxPQUFPLEtBQUssVUFBVSxFQUFFLE9BQU8sSUFBSTtFQUFFLElBQUlD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