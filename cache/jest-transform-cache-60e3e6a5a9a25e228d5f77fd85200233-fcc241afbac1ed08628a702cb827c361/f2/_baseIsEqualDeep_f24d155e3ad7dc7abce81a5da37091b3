7a562a0f943848d539e2edaae4b1f9c5
"use strict";

var Stack = require('./_Stack'),
  equalArrays = require('./_equalArrays'),
  equalByTag = require('./_equalByTag'),
  equalObjects = require('./_equalObjects'),
  getTag = require('./_getTag'),
  isArray = require('./isArray'),
  isBuffer = require('./isBuffer'),
  isTypedArray = require('./isTypedArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
  arrayTag = '[object Array]',
  objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
    othIsArr = isArray(other),
    objTag = objIsArr ? arrayTag : getTag(object),
    othTag = othIsArr ? arrayTag : getTag(other);
  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;
  var objIsObj = objTag == objectTag,
    othIsObj = othTag == objectTag,
    isSameTag = objTag == othTag;
  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack());
    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
      othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
        othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new Stack());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack());
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}
module.exports = baseIsEqualDeep;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdGFjayIsInJlcXVpcmUiLCJlcXVhbEFycmF5cyIsImVxdWFsQnlUYWciLCJlcXVhbE9iamVjdHMiLCJnZXRUYWciLCJpc0FycmF5IiwiaXNCdWZmZXIiLCJpc1R5cGVkQXJyYXkiLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsImFyZ3NUYWciLCJhcnJheVRhZyIsIm9iamVjdFRhZyIsIm9iamVjdFByb3RvIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJiYXNlSXNFcXVhbERlZXAiLCJvYmplY3QiLCJvdGhlciIsImJpdG1hc2siLCJjdXN0b21pemVyIiwiZXF1YWxGdW5jIiwic3RhY2siLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsIm9iaklzV3JhcHBlZCIsImNhbGwiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJ2YWx1ZSIsIm90aFVud3JhcHBlZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJfYmFzZUlzRXF1YWxEZWVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIGVxdWFsQnlUYWcgPSByZXF1aXJlKCcuL19lcXVhbEJ5VGFnJyksXG4gICAgZXF1YWxPYmplY3RzID0gcmVxdWlyZSgnLi9fZXF1YWxPYmplY3RzJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgfVxuICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICB9XG4gIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgfVxuICBpZiAoIWlzU2FtZVRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0VxdWFsRGVlcDtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxVQUFVLENBQUM7RUFDM0JDLFdBQVcsR0FBR0QsT0FBTyxDQUFDLGdCQUFnQixDQUFDO0VBQ3ZDRSxVQUFVLEdBQUdGLE9BQU8sQ0FBQyxlQUFlLENBQUM7RUFDckNHLFlBQVksR0FBR0gsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0VBQ3pDSSxNQUFNLEdBQUdKLE9BQU8sQ0FBQyxXQUFXLENBQUM7RUFDN0JLLE9BQU8sR0FBR0wsT0FBTyxDQUFDLFdBQVcsQ0FBQztFQUM5Qk0sUUFBUSxHQUFHTixPQUFPLENBQUMsWUFBWSxDQUFDO0VBQ2hDTyxZQUFZLEdBQUdQLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQzs7QUFFNUM7QUFDQSxJQUFJUSxvQkFBb0IsR0FBRyxDQUFDOztBQUU1QjtBQUNBLElBQUlDLE9BQU8sR0FBRyxvQkFBb0I7RUFDOUJDLFFBQVEsR0FBRyxnQkFBZ0I7RUFDM0JDLFNBQVMsR0FBRyxpQkFBaUI7O0FBRWpDO0FBQ0EsSUFBSUMsV0FBVyxHQUFHQyxNQUFNLENBQUNDLFNBQVM7O0FBRWxDO0FBQ0EsSUFBSUMsY0FBYyxHQUFHSCxXQUFXLENBQUNHLGNBQWM7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxlQUFlQSxDQUFDQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsT0FBTyxFQUFFQyxVQUFVLEVBQUVDLFNBQVMsRUFBRUMsS0FBSyxFQUFFO0VBQzdFLElBQUlDLFFBQVEsR0FBR2xCLE9BQU8sQ0FBQ1ksTUFBTSxDQUFDO0lBQzFCTyxRQUFRLEdBQUduQixPQUFPLENBQUNhLEtBQUssQ0FBQztJQUN6Qk8sTUFBTSxHQUFHRixRQUFRLEdBQUdiLFFBQVEsR0FBR04sTUFBTSxDQUFDYSxNQUFNLENBQUM7SUFDN0NTLE1BQU0sR0FBR0YsUUFBUSxHQUFHZCxRQUFRLEdBQUdOLE1BQU0sQ0FBQ2MsS0FBSyxDQUFDO0VBRWhETyxNQUFNLEdBQUdBLE1BQU0sSUFBSWhCLE9BQU8sR0FBR0UsU0FBUyxHQUFHYyxNQUFNO0VBQy9DQyxNQUFNLEdBQUdBLE1BQU0sSUFBSWpCLE9BQU8sR0FBR0UsU0FBUyxHQUFHZSxNQUFNO0VBRS9DLElBQUlDLFFBQVEsR0FBR0YsTUFBTSxJQUFJZCxTQUFTO0lBQzlCaUIsUUFBUSxHQUFHRixNQUFNLElBQUlmLFNBQVM7SUFDOUJrQixTQUFTLEdBQUdKLE1BQU0sSUFBSUMsTUFBTTtFQUVoQyxJQUFJRyxTQUFTLElBQUl2QixRQUFRLENBQUNXLE1BQU0sQ0FBQyxFQUFFO0lBQ2pDLElBQUksQ0FBQ1gsUUFBUSxDQUFDWSxLQUFLLENBQUMsRUFBRTtNQUNwQixPQUFPLEtBQUs7SUFDZDtJQUNBSyxRQUFRLEdBQUcsSUFBSTtJQUNmSSxRQUFRLEdBQUcsS0FBSztFQUNsQjtFQUNBLElBQUlFLFNBQVMsSUFBSSxDQUFDRixRQUFRLEVBQUU7SUFDMUJMLEtBQUssS0FBS0EsS0FBSyxHQUFHLElBQUl2QixLQUFLLEdBQUM7SUFDNUIsT0FBUXdCLFFBQVEsSUFBSWhCLFlBQVksQ0FBQ1UsTUFBTSxDQUFDLEdBQ3BDaEIsV0FBVyxDQUFDZ0IsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxTQUFTLEVBQUVDLEtBQUssQ0FBQyxHQUNqRXBCLFVBQVUsQ0FBQ2UsTUFBTSxFQUFFQyxLQUFLLEVBQUVPLE1BQU0sRUFBRU4sT0FBTyxFQUFFQyxVQUFVLEVBQUVDLFNBQVMsRUFBRUMsS0FBSyxDQUFDO0VBQzlFO0VBQ0EsSUFBSSxFQUFFSCxPQUFPLEdBQUdYLG9CQUFvQixDQUFDLEVBQUU7SUFDckMsSUFBSXNCLFlBQVksR0FBR0gsUUFBUSxJQUFJWixjQUFjLENBQUNnQixJQUFJLENBQUNkLE1BQU0sRUFBRSxhQUFhLENBQUM7TUFDckVlLFlBQVksR0FBR0osUUFBUSxJQUFJYixjQUFjLENBQUNnQixJQUFJLENBQUNiLEtBQUssRUFBRSxhQUFhLENBQUM7SUFFeEUsSUFBSVksWUFBWSxJQUFJRSxZQUFZLEVBQUU7TUFDaEMsSUFBSUMsWUFBWSxHQUFHSCxZQUFZLEdBQUdiLE1BQU0sQ0FBQ2lCLEtBQUssRUFBRSxHQUFHakIsTUFBTTtRQUNyRGtCLFlBQVksR0FBR0gsWUFBWSxHQUFHZCxLQUFLLENBQUNnQixLQUFLLEVBQUUsR0FBR2hCLEtBQUs7TUFFdkRJLEtBQUssS0FBS0EsS0FBSyxHQUFHLElBQUl2QixLQUFLLEdBQUM7TUFDNUIsT0FBT3NCLFNBQVMsQ0FBQ1ksWUFBWSxFQUFFRSxZQUFZLEVBQUVoQixPQUFPLEVBQUVDLFVBQVUsRUFBRUUsS0FBSyxDQUFDO0lBQzFFO0VBQ0Y7RUFDQSxJQUFJLENBQUNPLFNBQVMsRUFBRTtJQUNkLE9BQU8sS0FBSztFQUNkO0VBQ0FQLEtBQUssS0FBS0EsS0FBSyxHQUFHLElBQUl2QixLQUFLLEdBQUM7RUFDNUIsT0FBT0ksWUFBWSxDQUFDYyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsT0FBTyxFQUFFQyxVQUFVLEVBQUVDLFNBQVMsRUFBRUMsS0FBSyxDQUFDO0FBQzNFO0FBRUFjLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHckIsZUFBZSJ9