823c8d1ad806cb54707588c48a91d916
"use strict";

var _jestCucumber = require("jest-cucumber");
var _react = require("@testing-library/react");
var _react2 = _interopRequireDefault(require("react"));
require("@testing-library/jest-dom/extend-expect");
require("text-encoding");
var router = _interopRequireWildcard(require("react-router"));
var _reactRouterDom = require("react-router-dom");
var _Base = _interopRequireDefault(require("../../pages/Base"));
var _testUtils = require("react-dom/test-utils");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _stravaSlice = _interopRequireDefault(require("../../redux/reducer/stravaSlice"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/components/features/base.feature");
let store;
let screen;
const {
  REACT_APP_CLIENTID
} = process.env;
const {
  REACT_APP_CLIENT_SECRET
} = process.env;
const redirectUrl = "http://localhost:3000/redirect";
const scope = "read,activity:read";
(0, _jestCucumber.defineFeature)(feature, test => {
  beforeEach(() => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        strava: _stravaSlice.default
      }
    });
    screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.Route, {
      path: "/",
      element: /*#__PURE__*/_react2.default.createElement(_Base.default, null)
    })))));
  });
  test('User is not logged in and clicks on "Login with Strava" button', ({
    given,
    when,
    then,
    and
  }) => {
    given("I am on the home page", () => {
      expect(screen).toBeDefined();
      const accessToken = localStorage.getItem("access_token");
      expect(accessToken).toBe(null);
    });
    when('I click on "Login With Strava" button', () => {
      const loginButton = screen.getByRole("button", {
        name: "Login With Strava"
      });
      (0, _testUtils.act)(() => {
        _react.fireEvent.click(loginButton);
      });
    });
  });
  test("User is logged in and opens the app", ({
    given,
    when,
    then,
    and
  }) => {
    const navigate = jest.fn();
    jest.spyOn(router, "useNavigate").mockImplementation(() => navigate);
    given("I am on the home page", () => {
      expect(screen).toBeDefined();
      localStorage.setItem("access_token", "mock-token");
    });
    and("I am already logged in", () => {
      const accessToken = localStorage.getItem("access_token");
      expect(accessToken).toBe("mock-token");
    });
    then('I should be redirected to the "Activities" screen', async () => {
      (0, _react.waitFor)(() => {
        expect(navigate).toHaveBeenCalledWith("/activities");
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,