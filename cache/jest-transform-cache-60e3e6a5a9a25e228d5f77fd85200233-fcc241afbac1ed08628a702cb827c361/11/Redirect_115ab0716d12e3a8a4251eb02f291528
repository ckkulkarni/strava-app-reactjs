d930f9261053fe59c5d7746c0767930c
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _axios = _interopRequireDefault(require("axios"));
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _stravaSlice = require("../redux/reducer/stravaSlice");
var _material = require("@mui/material");
var _reactRouter = require("react-router");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Redirect = () => {
  const urlParams = new URLSearchParams(window.location.search);
  const {
    REACT_APP_CLIENTID
  } = process.env;
  const {
    REACT_APP_CLIENT_SECRET
  } = process.env;
  const code = urlParams.get("code");
  const navigation = (0, _reactRouter.useNavigate)();
  const dispatch = (0, _reactRedux.useDispatch)();
  (0, _react.useEffect)(() => {
    if (code) {
      _axios.default.post(`https://www.strava.com/api/v3/oauth/token?client_id=${REACT_APP_CLIENTID}&client_secret=${REACT_APP_CLIENT_SECRET}&code=${code}&grant_type=authorization_code`).then(response => {
        const accessToken = response.data.access_token;
        const userID = response.data.athlete.id;
        //    console.log(response.data.athlete.id);
        if (accessToken) {
          dispatch((0, _stravaSlice.setAccessToken)(accessToken));
          dispatch((0, _stravaSlice.setUserID)(userID));
          localStorage.setItem("access_token", accessToken);
          navigation("/activities");
        }
      }).catch(error => {
        console.error("Error exchanging code for access token:", error);
      });
    }
  }, [code]);
  return /*#__PURE__*/_react.default.createElement("div", {
    style: {
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      height: "100vh"
    }
  }, /*#__PURE__*/_react.default.createElement(_material.CircularProgress, {
    sx: {
      color: "primary.main"
    },
    size: 64
  }));
};
var _default = Redirect;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXhpb3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3JlYWN0UmVkdXgiLCJfc3RyYXZhU2xpY2UiLCJfbWF0ZXJpYWwiLCJfcmVhY3RSb3V0ZXIiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiUmVkaXJlY3QiLCJ1cmxQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInNlYXJjaCIsIlJFQUNUX0FQUF9DTElFTlRJRCIsInByb2Nlc3MiLCJlbnYiLCJSRUFDVF9BUFBfQ0xJRU5UX1NFQ1JFVCIsImNvZGUiLCJuYXZpZ2F0aW9uIiwidXNlTmF2aWdhdGUiLCJkaXNwYXRjaCIsInVzZURpc3BhdGNoIiwidXNlRWZmZWN0IiwiYXhpb3MiLCJwb3N0IiwidGhlbiIsInJlc3BvbnNlIiwiYWNjZXNzVG9rZW4iLCJkYXRhIiwiYWNjZXNzX3Rva2VuIiwidXNlcklEIiwiYXRobGV0ZSIsImlkIiwic2V0QWNjZXNzVG9rZW4iLCJzZXRVc2VySUQiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiY2F0Y2giLCJlcnJvciIsImNvbnNvbGUiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJkaXNwbGF5IiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwiaGVpZ2h0IiwiQ2lyY3VsYXJQcm9ncmVzcyIsInN4IiwiY29sb3IiLCJzaXplIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiUmVkaXJlY3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgc2V0QWNjZXNzVG9rZW4sIHNldFVzZXJJRCB9IGZyb20gXCIuLi9yZWR1eC9yZWR1Y2VyL3N0cmF2YVNsaWNlXCI7XHJcbmltcG9ydCB7IENpcmN1bGFyUHJvZ3Jlc3MgfSBmcm9tIFwiQG11aS9tYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcclxuY29uc3QgUmVkaXJlY3QgPSAoKSA9PiB7XHJcbiAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICBjb25zdCB7IFJFQUNUX0FQUF9DTElFTlRJRCB9ID0gcHJvY2Vzcy5lbnY7XHJcbiAgY29uc3QgeyBSRUFDVF9BUFBfQ0xJRU5UX1NFQ1JFVCB9ID0gcHJvY2Vzcy5lbnY7XHJcbiAgY29uc3QgY29kZSA9IHVybFBhcmFtcy5nZXQoXCJjb2RlXCIpO1xyXG4gIGNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0ZSgpO1xyXG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKGNvZGUpIHtcclxuICAgICAgYXhpb3NcclxuICAgICAgICAucG9zdChcclxuICAgICAgICAgIGBodHRwczovL3d3dy5zdHJhdmEuY29tL2FwaS92My9vYXV0aC90b2tlbj9jbGllbnRfaWQ9JHtSRUFDVF9BUFBfQ0xJRU5USUR9JmNsaWVudF9zZWNyZXQ9JHtSRUFDVF9BUFBfQ0xJRU5UX1NFQ1JFVH0mY29kZT0ke2NvZGV9JmdyYW50X3R5cGU9YXV0aG9yaXphdGlvbl9jb2RlYFxyXG4gICAgICAgIClcclxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuID0gcmVzcG9uc2UuZGF0YS5hY2Nlc3NfdG9rZW47XHJcbiAgICAgICAgICBjb25zdCB1c2VySUQgPSByZXNwb25zZS5kYXRhLmF0aGxldGUuaWQ7XHJcbiAgICAgICAgICAvLyAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhLmF0aGxldGUuaWQpO1xyXG4gICAgICAgICAgaWYgKGFjY2Vzc1Rva2VuKSB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKHNldEFjY2Vzc1Rva2VuKGFjY2Vzc1Rva2VuKSk7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKHNldFVzZXJJRCh1c2VySUQpKTtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJhY2Nlc3NfdG9rZW5cIiwgYWNjZXNzVG9rZW4pO1xyXG5cclxuICAgICAgICAgICAgbmF2aWdhdGlvbihcIi9hY3Rpdml0aWVzXCIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGV4Y2hhbmdpbmcgY29kZSBmb3IgYWNjZXNzIHRva2VuOlwiLCBlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSwgW2NvZGVdKTtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdlxyXG4gICAgICBzdHlsZT17e1xyXG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxyXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxyXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXHJcbiAgICAgICAgaGVpZ2h0OiBcIjEwMHZoXCIsXHJcbiAgICAgIH19XHJcbiAgICA+XHJcbiAgICAgIDxDaXJjdWxhclByb2dyZXNzIHN4PXt7IGNvbG9yOiBcInByaW1hcnkubWFpblwiIH19IHNpemU9ezY0fSAvPlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJlZGlyZWN0O1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLFlBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLFNBQUEsR0FBQUwsT0FBQTtBQUNBLElBQUFNLFlBQUEsR0FBQU4sT0FBQTtBQUEyQyxTQUFBTyx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEsQ0FBQUMsV0FBQSxXQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFBLEtBQUFGLFdBQUE7QUFBQSxTQUFBTix3QkFBQVUsR0FBQSxFQUFBSixXQUFBLFNBQUFBLFdBQUEsSUFBQUksR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsV0FBQUQsR0FBQSxRQUFBQSxHQUFBLG9CQUFBQSxHQUFBLHdCQUFBQSxHQUFBLDRCQUFBRSxPQUFBLEVBQUFGLEdBQUEsVUFBQUcsS0FBQSxHQUFBUix3QkFBQSxDQUFBQyxXQUFBLE9BQUFPLEtBQUEsSUFBQUEsS0FBQSxDQUFBQyxHQUFBLENBQUFKLEdBQUEsWUFBQUcsS0FBQSxDQUFBRSxHQUFBLENBQUFMLEdBQUEsU0FBQU0sTUFBQSxXQUFBQyxxQkFBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxHQUFBLElBQUFYLEdBQUEsUUFBQVcsR0FBQSxrQkFBQUgsTUFBQSxDQUFB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