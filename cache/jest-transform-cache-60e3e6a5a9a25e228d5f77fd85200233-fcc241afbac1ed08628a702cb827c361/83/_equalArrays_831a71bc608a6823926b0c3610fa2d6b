3a10ded0b92928d9033e20a794015fa3
"use strict";

var SetCache = require('./_SetCache'),
  arraySome = require('./_arraySome'),
  cacheHas = require('./_cacheHas');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
  COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
    arrLength = array.length,
    othLength = other.length;
  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
    result = true,
    seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
      othValue = other[index];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function (othValue, othIndex) {
        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}
module.exports = equalArrays;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTZXRDYWNoZSIsInJlcXVpcmUiLCJhcnJheVNvbWUiLCJjYWNoZUhhcyIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiQ09NUEFSRV9VTk9SREVSRURfRkxBRyIsImVxdWFsQXJyYXlzIiwiYXJyYXkiLCJvdGhlciIsImJpdG1hc2siLCJjdXN0b21pemVyIiwiZXF1YWxGdW5jIiwic3RhY2siLCJpc1BhcnRpYWwiLCJhcnJMZW5ndGgiLCJsZW5ndGgiLCJvdGhMZW5ndGgiLCJhcnJTdGFja2VkIiwiZ2V0Iiwib3RoU3RhY2tlZCIsImluZGV4IiwicmVzdWx0Iiwic2VlbiIsInVuZGVmaW5lZCIsInNldCIsImFyclZhbHVlIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm90aEluZGV4IiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJfZXF1YWxBcnJheXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFNldENhY2hlID0gcmVxdWlyZSgnLi9fU2V0Q2FjaGUnKSxcbiAgICBhcnJheVNvbWUgPSByZXF1aXJlKCcuL19hcnJheVNvbWUnKSxcbiAgICBjYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2NhY2hlSGFzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIGFyclN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gIGlmIChhcnJTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICByZXR1cm4gYXJyU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IGFycmF5O1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKHNlZW4pIHtcbiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEFycmF5cztcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxhQUFhLENBQUM7RUFDakNDLFNBQVMsR0FBR0QsT0FBTyxDQUFDLGNBQWMsQ0FBQztFQUNuQ0UsUUFBUSxHQUFHRixPQUFPLENBQUMsYUFBYSxDQUFDOztBQUVyQztBQUNBLElBQUlHLG9CQUFvQixHQUFHLENBQUM7RUFDeEJDLHNCQUFzQixHQUFHLENBQUM7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsV0FBV0EsQ0FBQ0MsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxTQUFTLEVBQUVDLEtBQUssRUFBRTtFQUN4RSxJQUFJQyxTQUFTLEdBQUdKLE9BQU8sR0FBR0wsb0JBQW9CO0lBQzFDVSxTQUFTLEdBQUdQLEtBQUssQ0FBQ1EsTUFBTTtJQUN4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