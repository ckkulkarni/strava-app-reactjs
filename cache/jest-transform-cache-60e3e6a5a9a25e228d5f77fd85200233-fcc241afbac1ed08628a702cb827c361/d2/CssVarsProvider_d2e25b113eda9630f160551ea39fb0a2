82af6f719d8be6f85695b3583e449e6b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useColorScheme = exports.getInitColorSchemeScript = exports.Experimental_CssVarsProvider = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _system = require("@mui/system");
var _experimental_extendTheme = _interopRequireDefault(require("./experimental_extendTheme"));
var _createTypography = _interopRequireDefault(require("./createTypography"));
var _excludeVariablesFromRoot = _interopRequireDefault(require("./excludeVariablesFromRoot"));
const defaultTheme = (0, _experimental_extendTheme.default)();
const {
  CssVarsProvider,
  useColorScheme,
  getInitColorSchemeScript
} = (0, _system.unstable_createCssVarsProvider)({
  theme: defaultTheme,
  attribute: 'data-mui-color-scheme',
  modeStorageKey: 'mui-mode',
  colorSchemeStorageKey: 'mui-color-scheme',
  defaultColorScheme: {
    light: 'light',
    dark: 'dark'
  },
  resolveTheme: theme => {
    const newTheme = (0, _extends2.default)({}, theme, {
      typography: (0, _createTypography.default)(theme.palette, theme.typography)
    });
    newTheme.unstable_sx = function sx(props) {
      return (0, _system.unstable_styleFunctionSx)({
        sx: props,
        theme: this
      });
    };
    return newTheme;
  },
  excludeVariablesFromRoot: _excludeVariablesFromRoot.default
});
exports.getInitColorSchemeScript = getInitColorSchemeScript;
exports.useColorScheme = useColorScheme;
exports.Experimental_CssVarsProvider = CssVarsProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidXNlQ29sb3JTY2hlbWUiLCJnZXRJbml0Q29sb3JTY2hlbWVTY3JpcHQiLCJFeHBlcmltZW50YWxfQ3NzVmFyc1Byb3ZpZGVyIiwiX2V4dGVuZHMyIiwiX3N5c3RlbSIsIl9leHBlcmltZW50YWxfZXh0ZW5kVGhlbWUiLCJfY3JlYXRlVHlwb2dyYXBoeSIsIl9leGNsdWRlVmFyaWFibGVzRnJvbVJvb3QiLCJkZWZhdWx0VGhlbWUiLCJkZWZhdWx0IiwiQ3NzVmFyc1Byb3ZpZGVyIiwidW5zdGFibGVfY3JlYXRlQ3NzVmFyc1Byb3ZpZGVyIiwidGhlbWUiLCJhdHRyaWJ1dGUiLCJtb2RlU3RvcmFnZUtleSIsImNvbG9yU2NoZW1lU3RvcmFnZUtleSIsImRlZmF1bHRDb2xvclNjaGVtZSIsImxpZ2h0IiwiZGFyayIsInJlc29sdmVUaGVtZSIsIm5ld1RoZW1lIiwidHlwb2dyYXBoeSIsInBhbGV0dGUiLCJ1bnN0YWJsZV9zeCIsInN4IiwicHJvcHMiLCJ1bnN0YWJsZV9zdHlsZUZ1bmN0aW9uU3giLCJleGNsdWRlVmFyaWFibGVzRnJvbVJvb3QiXSwic291cmNlcyI6WyJDc3NWYXJzUHJvdmlkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudXNlQ29sb3JTY2hlbWUgPSBleHBvcnRzLmdldEluaXRDb2xvclNjaGVtZVNjcmlwdCA9IGV4cG9ydHMuRXhwZXJpbWVudGFsX0Nzc1ZhcnNQcm92aWRlciA9IHZvaWQgMDtcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF9zeXN0ZW0gPSByZXF1aXJlKFwiQG11aS9zeXN0ZW1cIik7XG52YXIgX2V4cGVyaW1lbnRhbF9leHRlbmRUaGVtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZXhwZXJpbWVudGFsX2V4dGVuZFRoZW1lXCIpKTtcbnZhciBfY3JlYXRlVHlwb2dyYXBoeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlVHlwb2dyYXBoeVwiKSk7XG52YXIgX2V4Y2x1ZGVWYXJpYWJsZXNGcm9tUm9vdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZXhjbHVkZVZhcmlhYmxlc0Zyb21Sb290XCIpKTtcbmNvbnN0IGRlZmF1bHRUaGVtZSA9ICgwLCBfZXhwZXJpbWVudGFsX2V4dGVuZFRoZW1lLmRlZmF1bHQpKCk7XG5jb25zdCB7XG4gIENzc1ZhcnNQcm92aWRlcixcbiAgdXNlQ29sb3JTY2hlbWUsXG4gIGdldEluaXRDb2xvclNjaGVtZVNjcmlwdFxufSA9ICgwLCBfc3lzdGVtLnVuc3RhYmxlX2NyZWF0ZUNzc1ZhcnNQcm92aWRlcikoe1xuICB0aGVtZTogZGVmYXVsdFRoZW1lLFxuICBhdHRyaWJ1dGU6ICdkYXRhLW11aS1jb2xvci1zY2hlbWUnLFxuICBtb2RlU3RvcmFnZUtleTogJ211aS1tb2RlJyxcbiAgY29sb3JTY2hlbWVTdG9yYWdlS2V5OiAnbXVpLWNvbG9yLXNjaGVtZScsXG4gIGRlZmF1bHRDb2xvclNjaGVtZToge1xuICAgIGxpZ2h0OiAnbGlnaHQnLFxuICAgIGRhcms6ICdkYXJrJ1xuICB9LFxuICByZXNvbHZlVGhlbWU6IHRoZW1lID0+IHtcbiAgICBjb25zdCBuZXdUaGVtZSA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHRoZW1lLCB7XG4gICAgICB0eXBvZ3JhcGh5OiAoMCwgX2NyZWF0ZVR5cG9ncmFwaHkuZGVmYXVsdCkodGhlbWUucGFsZXR0ZSwgdGhlbWUudHlwb2dyYXBoeSlcbiAgICB9KTtcbiAgICBuZXdUaGVtZS51bnN0YWJsZV9zeCA9IGZ1bmN0aW9uIHN4KHByb3BzKSB7XG4gICAgICByZXR1cm4gKDAsIF9zeXN0ZW0udW5zdGFibGVfc3R5bGVGdW5jdGlvblN4KSh7XG4gICAgICAgIHN4OiBwcm9wcyxcbiAgICAgICAgdGhlbWU6IHRoaXNcbiAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIG5ld1RoZW1lO1xuICB9LFxuICBleGNsdWRlVmFyaWFibGVzRnJvbVJvb3Q6IF9leGNsdWRlVmFyaWFibGVzRnJvbVJvb3QuZGVmYXVsdFxufSk7XG5leHBvcnRzLmdldEluaXRDb2xvclNjaGVtZVNjcmlwdCA9IGdldEluaXRDb2xvclNjaGVtZVNjcmlwdDtcbmV4cG9ydHMudXNlQ29sb3JTY2hlbWUgPSB1c2VDb2xvclNjaGVtZTtcbmV4cG9ydHMuRXhwZXJpbWVudGFsX0Nzc1ZhcnNQcm92aWRlciA9IENzc1ZhcnNQcm92aWRlcjsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsc0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQztBQUNwRkMsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLGNBQWMsR0FBR0YsT0FBTyxDQUFDRyx3QkFBd0IsR0FBR0gsT0FBTyxDQUFDSSw0QkFBNEIsR0FBRyxLQUFLLENBQUM7QUFDekcsSUFBSUMsU0FBUyxHQUFHVCxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDakYsSUFBSVMsT0FBTyxHQUFHVCxPQUFPLENBQUMsYUFBYSxDQUFDO0FBQ3BDLElBQUlVLHlCQUF5QixHQUFHWCxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLDRCQUE0QixDQUFDLENBQUM7QUFDN0YsSUFBSVcsaUJBQWlCLEdBQUdaLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUM3RSxJQUFJWSx5QkFBeUIsR0FBR2Isc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBQzdGLE1BQU1hLFlBQVksR0FBRyxDQUFDLENBQUMsRUFBRUgseUJBQXlCLENBQUNJLE9BQU8sR0FBRztBQUM3RCxNQUFNO0VBQ0pDLGVBQWU7RUFDZlYsY0FBYztFQUNkQztBQUNGLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRUcsT0FBTyxDQUFDTyw4QkFBOEIsRUFBRTtFQUM5Q0MsS0FBSyxFQUFFSixZQUFZO0VBQ25CSyxTQUFTLEVBQUUsdUJBQXVCO0VBQ2xDQyxjQUFjLEVBQUUsVUFBVTtFQUMxQkMscUJBQXFCLEVBQUUsa0JBQWtCO0VBQ3pDQyxrQkFBa0IsRUFBRTtJQUNsQkMsS0FBSyxFQUFFLE9BQU87SUFDZEMsSUFBSSxFQUFFO0VBQ1IsQ0FBQztFQUNEQyxZQUFZLEVBQUVQLEtBQUssSUFBSTtJQUNyQixNQUFNUSxRQUFRLEdBQUcsQ0FBQyxDQUFDLEVBQUVqQixTQUFTLENBQUNNLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRUcsS0FBSyxFQUFFO01BQ2pEUyxVQUFVLEVBQUUsQ0FBQyxDQUFDLEVBQUVmLGlCQUFpQixDQUFDRyxPQUFPLEVBQUVHLEtBQUssQ0FBQ1UsT0FBTyxFQUFFVixLQUFLLENBQUNTLFVBQVU7SUFDNUUsQ0FBQyxDQUFDO0lBQ0ZELFFBQVEsQ0FBQ0csV0FBVyxHQUFHLFNBQVNDLEVBQUVBLENBQUNDLEtBQUssRUFBRTtNQUN4QyxPQUFPLENBQUMsQ0FBQyxFQUFFckIsT0FBTyxDQUFDc0Isd0JBQXdCLEVBQUU7UUFDM0NGLEVBQUUsRUFBRUMsS0FBSztRQUNUYixLQUFLLEVBQUU7TUFDVCxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0QsT0FBT1EsUUFBUTtFQUNqQixDQUFDO0VBQ0RPLHdCQUF3QixFQUFFcEIseUJBQXlCLENBQUNFO0FBQ3RELENBQUMsQ0FBQztBQUNGWCxPQUFPLENBQUNHLHdCQUF3QixHQUFHQSx3QkFBd0I7QUFDM0RILE9BQU8sQ0FBQ0UsY0FBYyxHQUFHQSxjQUFjO0FBQ3ZDRixPQUFPLENBQUNJLDRCQUE0QixHQUFHUSxlQUFlIn0=