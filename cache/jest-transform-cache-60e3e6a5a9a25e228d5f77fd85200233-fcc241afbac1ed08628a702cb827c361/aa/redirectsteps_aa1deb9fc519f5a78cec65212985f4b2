7cf8b798000c837f7bdb0b0bb302b559
"use strict";

_getJestObj().mock("axios");
var _jestCucumber = require("jest-cucumber");
var _react = require("@testing-library/react");
var _react2 = _interopRequireDefault(require("react"));
require("@testing-library/jest-dom/extend-expect");
require("text-encoding");
var router = _interopRequireWildcard(require("react-router"));
var _reactRouterDom = require("react-router-dom");
var _Redirect = _interopRequireDefault(require("../../pages/Redirect"));
var _axios = _interopRequireDefault(require("axios"));
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _stravaSlice = _interopRequireDefault(require("../../redux/reducer/stravaSlice"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const feature = (0, _jestCucumber.loadFeature)("src/components/features/redirect.feature");
let store;
let screen;
const {
  REACT_APP_CLIENTID
} = process.env;
const {
  REACT_APP_CLIENT_SECRET
} = process.env;
const redirectUrl = "http://localhost:3000/redirect";
const scope = "read,activity:read";
(0, _jestCucumber.defineFeature)(feature, test => {
  beforeEach(() => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        strava: _stravaSlice.default
      }
    });
    screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_Redirect.default, null))));
  });
  test("User logs in and gets redirected to Activities screen", ({
    given,
    when,
    then,
    and
  }) => {
    given('the Strava client ID is "mock-id"', () => {
      process.env.REACT_APP_CLIENTID = "mock-id";
    });
    when('the Strava client secret is "mock-secret"', () => {
      process.env.REACT_APP_CLIENT_SECRET = "mock-secret";
    });
    and("the user is on the redirect page", () => {
      expect(screen).toBeDefined();
    });
    when('the user is redirected with code "mock-code"', async () => {
      const navigate = jest.fn();
      jest.spyOn(router, "useNavigate").mockImplementation(() => navigate);
      jest.spyOn(_axios.default, "post").mockResolvedValueOnce({
        data: {
          access_token: "mock-access-token",
          athlete: {
            id: "mock-user-id"
          }
        }
      });
      (0, _react.waitFor)(() => {
        expect(navigate).toHaveBeenCalled();
      });
    });
    then("the access token and user ID are set in Redux", () => {
      localStorage.setItem("access_token", "mock-access-token");
    });
    and("the access token is stored in local storage", () => {
      expect(localStorage.getItem("access_token")).toBe("mock-access-token");
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfamVzdEN1Y3VtYmVyIiwicmVxdWlyZSIsIl9yZWFjdCIsIl9yZWFjdDIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwicm91dGVyIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcmVhY3RSb3V0ZXJEb20iLCJfUmVkaXJlY3QiLCJfYXhpb3MiLCJfcmVhY3RSZWR1eCIsIl90b29sa2l0IiwiX3N0cmF2YVNsaWNlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsImplc3QiLCJmZWF0dXJlIiwibG9hZEZlYXR1cmUiLCJzdG9yZSIsInNjcmVlbiIsIlJFQUNUX0FQUF9DTElFTlRJRCIsInByb2Nlc3MiLCJlbnYiLCJSRUFDVF9BUFBfQ0xJRU5UX1NFQ1JFVCIsInJlZGlyZWN0VXJsIiwic2NvcGUiLCJkZWZpbmVGZWF0dXJlIiwidGVzdCIsImJlZm9yZUVhY2giLCJjb25maWd1cmVTdG9yZSIsInJlZHVjZXIiLCJzdHJhdmEiLCJzdHJhdmFTbGljZSIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsIk1lbW9yeVJvdXRlciIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJhbmQiLCJleHBlY3QiLCJ0b0JlRGVmaW5lZCIsIm5hdmlnYXRlIiwiZm4iLCJzcHlPbiIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsImF4aW9zIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiZGF0YSIsImFjY2Vzc190b2tlbiIsImF0aGxldGUiLCJpZCIsIndhaXRGb3IiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImdldEl0ZW0iLCJ0b0JlIl0sInNvdXJjZXMiOlsicmVkaXJlY3Quc3RlcHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmluZUZlYXR1cmUsIGxvYWRGZWF0dXJlIH0gZnJvbSBcImplc3QtY3VjdW1iZXJcIjtcclxuaW1wb3J0IHsgZmlyZUV2ZW50LCByZW5kZXIsIHdhaXRGb3IgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBcIkB0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20vZXh0ZW5kLWV4cGVjdFwiO1xyXG5pbXBvcnQgXCJ0ZXh0LWVuY29kaW5nXCI7XHJcbmltcG9ydCAqIGFzIHJvdXRlciBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XHJcbmltcG9ydCB7XHJcbiAgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsXHJcbiAgUm91dGVzLFxyXG4gIFJvdXRlLFxyXG4gIE1lbW9yeVJvdXRlcixcclxufSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgUmVkaXJlY3QgZnJvbSBcIi4uLy4uL3BhZ2VzL1JlZGlyZWN0XCI7XHJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0IHsgYWN0IH0gZnJvbSBcInJlYWN0LWRvbS90ZXN0LXV0aWxzXCI7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IGNvbmZpZ3VyZVN0b3JlIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcclxuaW1wb3J0IHN0cmF2YVNsaWNlIGZyb20gXCIuLi8uLi9yZWR1eC9yZWR1Y2VyL3N0cmF2YVNsaWNlXCI7XHJcbmNvbnN0IGZlYXR1cmUgPSBsb2FkRmVhdHVyZShcInNyYy9jb21wb25lbnRzL2ZlYXR1cmVzL3JlZGlyZWN0LmZlYXR1cmVcIik7XHJcbmxldCBzdG9yZTogYW55O1xyXG5sZXQgc2NyZWVuOiBhbnk7XHJcbmplc3QubW9jayhcImF4aW9zXCIpO1xyXG5jb25zdCB7IFJFQUNUX0FQUF9DTElFTlRJRCB9ID0gcHJvY2Vzcy5lbnY7XHJcbmNvbnN0IHsgUkVBQ1RfQVBQX0NMSUVOVF9TRUNSRVQgfSA9IHByb2Nlc3MuZW52O1xyXG5jb25zdCByZWRpcmVjdFVybCA9IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwL3JlZGlyZWN0XCI7XHJcbmNvbnN0IHNjb3BlID0gXCJyZWFkLGFjdGl2aXR5OnJlYWRcIjtcclxuZGVmaW5lRmVhdHVyZShmZWF0dXJlLCAodGVzdCkgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgc3RvcmUgPSBjb25maWd1cmVTdG9yZSh7XHJcbiAgICAgIHJlZHVjZXI6IHtcclxuICAgICAgICBzdHJhdmE6IHN0cmF2YVNsaWNlLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgICBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxyXG4gICAgICAgIDxNZW1vcnlSb3V0ZXI+XHJcbiAgICAgICAgICA8UmVkaXJlY3QgLz5cclxuICAgICAgICA8L01lbW9yeVJvdXRlcj5cclxuICAgICAgPC9Qcm92aWRlcj5cclxuICAgICk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoXCJVc2VyIGxvZ3MgaW4gYW5kIGdldHMgcmVkaXJlY3RlZCB0byBBY3Rpdml0aWVzIHNjcmVlblwiLCAoe1xyXG4gICAgZ2l2ZW4sXHJcbiAgICB3aGVuLFxyXG4gICAgdGhlbixcclxuICAgIGFuZCxcclxuICB9KSA9PiB7XHJcbiAgICBnaXZlbigndGhlIFN0cmF2YSBjbGllbnQgSUQgaXMgXCJtb2NrLWlkXCInLCAoKSA9PiB7XHJcbiAgICAgIHByb2Nlc3MuZW52LlJFQUNUX0FQUF9DTElFTlRJRCA9IFwibW9jay1pZFwiO1xyXG4gICAgfSk7XHJcbiAgICB3aGVuKCd0aGUgU3RyYXZhIGNsaWVudCBzZWNyZXQgaXMgXCJtb2NrLXNlY3JldFwiJywgKCkgPT4ge1xyXG4gICAgICBwcm9jZXNzLmVudi5SRUFDVF9BUFBfQ0xJRU5UX1NFQ1JFVCA9IFwibW9jay1zZWNyZXRcIjtcclxuICAgIH0pO1xyXG4gICAgYW5kKFwidGhlIHVzZXIgaXMgb24gdGhlIHJlZGlyZWN0IHBhZ2VcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc2NyZWVuKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgfSk7XHJcbiAgICB3aGVuKCd0aGUgdXNlciBpcyByZWRpcmVjdGVkIHdpdGggY29kZSBcIm1vY2stY29kZVwiJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBuYXZpZ2F0ZSA9IGplc3QuZm4oKTtcclxuICAgICAgamVzdC5zcHlPbihyb3V0ZXIsIFwidXNlTmF2aWdhdGVcIikubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IG5hdmlnYXRlKTtcclxuICAgICAgamVzdC5zcHlPbihheGlvcywgXCJwb3N0XCIpLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgYWNjZXNzX3Rva2VuOiBcIm1vY2stYWNjZXNzLXRva2VuXCIsXHJcbiAgICAgICAgICBhdGhsZXRlOiB7IGlkOiBcIm1vY2stdXNlci1pZFwiIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgfSk7XHJcbiAgICAgIHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChuYXZpZ2F0ZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgdGhlbihcInRoZSBhY2Nlc3MgdG9rZW4gYW5kIHVzZXIgSUQgYXJlIHNldCBpbiBSZWR1eFwiLCAoKSA9PiB7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiYWNjZXNzX3Rva2VuXCIsIFwibW9jay1hY2Nlc3MtdG9rZW5cIik7XHJcbiAgICB9KTtcclxuXHJcbiAgICBhbmQoXCJ0aGUgYWNjZXNzIHRva2VuIGlzIHN0b3JlZCBpbiBsb2NhbCBzdG9yYWdlXCIsICgpID0+IHtcclxuICAgICAgZXhwZWN0KGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiYWNjZXNzX3Rva2VuXCIpKS50b0JlKFwibW9jay1hY2Nlc3MtdG9rZW5cIik7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFxQkFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQXJCbEIsSUFBQUMsYUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBQyxzQkFBQSxDQUFBSCxPQUFBO0FBQ0FBLE9BQUE7QUFDQUEsT0FBQTtBQUNBLElBQUFJLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUwsT0FBQTtBQUNBLElBQUFNLGVBQUEsR0FBQU4sT0FBQTtBQU1BLElBQUFPLFNBQUEsR0FBQUosc0JBQUEsQ0FBQUgsT0FBQTtBQUNBLElBQUFRLE1BQUEsR0FBQUwsc0JBQUEsQ0FBQUgsT0FBQTtBQUVBLElBQUFTLFdBQUEsR0FBQVQsT0FBQTtBQUNBLElBQUFVLFFBQUEsR0FBQVYsT0FBQTtBQUNBLElBQUFXLFlBQUEsR0FBQVIsc0JBQUEsQ0FBQUgsT0FBQTtBQUEwRCxTQUFBWSx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEsQ0FBQUMsV0FBQSxXQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFBLEtBQUFGLFdBQUE7QUFBQSxTQUFBUix3QkFBQVksR0FBQSxFQUFBSixXQUFBLFNBQUFBLFdBQUEsSUFBQUksR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsV0FBQUQsR0FBQSxRQUFBQSxHQUFBLG9CQUFBQSxHQUFBLHdCQUFB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