25924b56ac46c1a57578f403ad8fcb67
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _utils = _interopRequireDefault(require("../utils.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */
function parsePropPath(name) {
  // foo[x][y][z]
  // foo.x.y.z
  // foo-x-y-z
  // foo x y z
  return _utils.default.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && _utils.default.isArray(target) ? target.length : name;
    if (isLast) {
      if (_utils.default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !_utils.default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && _utils.default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (_utils.default.isFormData(formData) && _utils.default.isFunction(formData.entries)) {
    const obj = {};
    _utils.default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var _default = formDataToJSON;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfdXRpbHMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJwYXJzZVByb3BQYXRoIiwibmFtZSIsInV0aWxzIiwibWF0Y2hBbGwiLCJtYXAiLCJtYXRjaCIsImFycmF5VG9PYmplY3QiLCJhcnIiLCJrZXlzIiwiaSIsImxlbiIsImxlbmd0aCIsImtleSIsImZvcm1EYXRhVG9KU09OIiwiZm9ybURhdGEiLCJidWlsZFBhdGgiLCJwYXRoIiwidGFyZ2V0IiwiaW5kZXgiLCJpc051bWVyaWNLZXkiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsImlzTGFzdCIsImlzQXJyYXkiLCJoYXNPd25Qcm9wIiwiaXNPYmplY3QiLCJyZXN1bHQiLCJpc0Zvcm1EYXRhIiwiaXNGdW5jdGlvbiIsImVudHJpZXMiLCJmb3JFYWNoRW50cnkiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbImZvcm1EYXRhVG9KU09OLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZyBsaWtlIGBmb29beF1beV1bel1gIGFuZCByZXR1cm5zIGFuIGFycmF5IGxpa2UgYFsnZm9vJywgJ3gnLCAneScsICd6J11cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKlxuICogQHJldHVybnMgQW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQcm9wUGF0aChuYW1lKSB7XG4gIC8vIGZvb1t4XVt5XVt6XVxuICAvLyBmb28ueC55LnpcbiAgLy8gZm9vLXgteS16XG4gIC8vIGZvbyB4IHkgelxuICByZXR1cm4gdXRpbHMubWF0Y2hBbGwoL1xcdyt8XFxbKFxcdyopXS9nLCBuYW1lKS5tYXAobWF0Y2ggPT4ge1xuICAgIHJldHVybiBtYXRjaFswXSA9PT0gJ1tdJyA/ICcnIDogbWF0Y2hbMV0gfHwgbWF0Y2hbMF07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gYXJyYXkgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNvbnZlcnQgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYW5kIHZhbHVlcyBhcyB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9PYmplY3QoYXJyKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXJyKTtcbiAgbGV0IGk7XG4gIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICBsZXQga2V5O1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIG9ialtrZXldID0gYXJyW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIEZvcm1EYXRhIG9iamVjdCBhbmQgcmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gY29udmVydCB0byBKU09OLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBhbnk+IHwgbnVsbH0gVGhlIGNvbnZlcnRlZCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGZvcm1EYXRhVG9KU09OKGZvcm1EYXRhKSB7XG4gIGZ1bmN0aW9uIGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0LCBpbmRleCkge1xuICAgIGxldCBuYW1lID0gcGF0aFtpbmRleCsrXTtcbiAgICBjb25zdCBpc051bWVyaWNLZXkgPSBOdW1iZXIuaXNGaW5pdGUoK25hbWUpO1xuICAgIGNvbnN0IGlzTGFzdCA9IGluZGV4ID49IHBhdGgubGVuZ3RoO1xuICAgIG5hbWUgPSAhbmFtZSAmJiB1dGlscy5pc0FycmF5KHRhcmdldCkgPyB0YXJnZXQubGVuZ3RoIDogbmFtZTtcblxuICAgIGlmIChpc0xhc3QpIHtcbiAgICAgIGlmICh1dGlscy5oYXNPd25Qcm9wKHRhcmdldCwgbmFtZSkpIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gW3RhcmdldFtuYW1lXSwgdmFsdWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0W25hbWVdIHx8ICF1dGlscy5pc09iamVjdCh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldFtuYW1lXSwgaW5kZXgpO1xuXG4gICAgaWYgKHJlc3VsdCAmJiB1dGlscy5pc0FycmF5KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IGFycmF5VG9PYmplY3QodGFyZ2V0W25hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc0Zvcm1EYXRhKGZvcm1EYXRhKSAmJiB1dGlscy5pc0Z1bmN0aW9uKGZvcm1EYXRhLmVudHJpZXMpKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoRW50cnkoZm9ybURhdGEsIChuYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgYnVpbGRQYXRoKHBhcnNlUHJvcFBhdGgobmFtZSksIHZhbHVlLCBvYmosIDApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBv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