84ae2e794ca392c16ba05742bea9807f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByText = exports.queryAllByText = exports.getByText = exports.getAllByText = exports.findByText = exports.findAllByText = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
const queryAllByText = (container, text, {
  selector = '*',
  exact = true,
  collapseWhitespace,
  trim,
  ignore = (0, _allUtils.getConfig)().defaultIgnore,
  normalizer
} = {}) => {
  (0, _helpers.checkContainerType)(container);
  const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
  const matchNormalizer = (0, _allUtils.makeNormalizer)({
    collapseWhitespace,
    trim,
    normalizer
  });
  let baseArray = [];
  if (typeof container.matches === 'function' && container.matches(selector)) {
    baseArray = [container];
  }
  return [...baseArray, ...Array.from(container.querySelectorAll(selector))]
  // TODO: `matches` according lib.dom.d.ts can get only `string` but according our code it can handle also boolean :)
  .filter(node => !ignore || !node.matches(ignore)).filter(node => matcher((0, _allUtils.getNodeText)(node), node, text, matchNormalizer));
};
const getMultipleError = (c, text) => `Found multiple elements with the text: ${text}`;
const getMissingError = (c, text, options = {}) => {
  const {
    collapseWhitespace,
    trim,
    normalizer,
    selector
  } = options;
  const matchNormalizer = (0, _allUtils.makeNormalizer)({
    collapseWhitespace,
    trim,
    normalizer
  });
  const normalizedText = matchNormalizer(text.toString());
  const isNormalizedDifferent = normalizedText !== text.toString();
  const isCustomSelector = (selector ?? '*') !== '*';
  return `Unable to find an element with the text: ${isNormalizedDifferent ? `${normalizedText} (normalized from '${text}')` : text}${isCustomSelector ? `, which matches selector '${selector}'` : ''}. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.`;
};
const queryAllByTextWithSuggestions = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByText, queryAllByText.name, 'queryAll');
exports.queryAllByText = queryAllByTextWithSuggestions;
const [queryByText, getAllByText, getByText, findAllByText, findByText] = (0, _allUtils.buildQueries)(queryAllByText, getMultipleError, getMissingError);
exports.findByText = findByText;
exports.findAllByText = findAllByText;
exports.getByText = getByText;
exports.getAllByText = getAllByText;
exports.queryByText = queryByText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXJ5QnlUZXh0IiwicXVlcnlBbGxCeVRleHQiLCJnZXRCeVRleHQiLCJnZXRBbGxCeVRleHQiLCJmaW5kQnlUZXh0IiwiZmluZEFsbEJ5VGV4dCIsIl9xdWVyeUhlbHBlcnMiLCJyZXF1aXJlIiwiX2hlbHBlcnMiLCJfYWxsVXRpbHMiLCJjb250YWluZXIiLCJ0ZXh0Iiwic2VsZWN0b3IiLCJleGFjdCIsImNvbGxhcHNlV2hpdGVzcGFjZSIsInRyaW0iLCJpZ25vcmUiLCJnZXRDb25maWciLCJkZWZhdWx0SWdub3JlIiwibm9ybWFsaXplciIsImNoZWNrQ29udGFpbmVyVHlwZSIsIm1hdGNoZXIiLCJtYXRjaGVzIiwiZnV6enlNYXRjaGVzIiwibWF0Y2hOb3JtYWxpemVyIiwibWFrZU5vcm1hbGl6ZXIiLCJiYXNlQXJyYXkiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZmlsdGVyIiwibm9kZSIsImdldE5vZGVUZXh0IiwiZ2V0TXVsdGlwbGVFcnJvciIsImMiLCJnZXRNaXNzaW5nRXJyb3IiLCJvcHRpb25zIiwibm9ybWFsaXplZFRleHQiLCJ0b1N0cmluZyIsImlzTm9ybWFsaXplZERpZmZlcmVudCIsImlzQ3VzdG9tU2VsZWN0b3IiLCJxdWVyeUFsbEJ5VGV4dFdpdGhTdWdnZXN0aW9ucyIsIndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24iLCJuYW1lIiwiYnVpbGRRdWVyaWVzIl0sInNvdXJjZXMiOlsidGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucXVlcnlCeVRleHQgPSBleHBvcnRzLnF1ZXJ5QWxsQnlUZXh0ID0gZXhwb3J0cy5nZXRCeVRleHQgPSBleHBvcnRzLmdldEFsbEJ5VGV4dCA9IGV4cG9ydHMuZmluZEJ5VGV4dCA9IGV4cG9ydHMuZmluZEFsbEJ5VGV4dCA9IHZvaWQgMDtcbnZhciBfcXVlcnlIZWxwZXJzID0gcmVxdWlyZShcIi4uL3F1ZXJ5LWhlbHBlcnNcIik7XG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vaGVscGVyc1wiKTtcbnZhciBfYWxsVXRpbHMgPSByZXF1aXJlKFwiLi9hbGwtdXRpbHNcIik7XG5jb25zdCBxdWVyeUFsbEJ5VGV4dCA9IChjb250YWluZXIsIHRleHQsIHtcbiAgc2VsZWN0b3IgPSAnKicsXG4gIGV4YWN0ID0gdHJ1ZSxcbiAgY29sbGFwc2VXaGl0ZXNwYWNlLFxuICB0cmltLFxuICBpZ25vcmUgPSAoMCwgX2FsbFV0aWxzLmdldENvbmZpZykoKS5kZWZhdWx0SWdub3JlLFxuICBub3JtYWxpemVyXG59ID0ge30pID0+IHtcbiAgKDAsIF9oZWxwZXJzLmNoZWNrQ29udGFpbmVyVHlwZSkoY29udGFpbmVyKTtcbiAgY29uc3QgbWF0Y2hlciA9IGV4YWN0ID8gX2FsbFV0aWxzLm1hdGNoZXMgOiBfYWxsVXRpbHMuZnV6enlNYXRjaGVzO1xuICBjb25zdCBtYXRjaE5vcm1hbGl6ZXIgPSAoMCwgX2FsbFV0aWxzLm1ha2VOb3JtYWxpemVyKSh7XG4gICAgY29sbGFwc2VXaGl0ZXNwYWNlLFxuICAgIHRyaW0sXG4gICAgbm9ybWFsaXplclxuICB9KTtcbiAgbGV0IGJhc2VBcnJheSA9IFtdO1xuICBpZiAodHlwZW9mIGNvbnRhaW5lci5tYXRjaGVzID09PSAnZnVuY3Rpb24nICYmIGNvbnRhaW5lci5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgIGJhc2VBcnJheSA9IFtjb250YWluZXJdO1xuICB9XG4gIHJldHVybiBbLi4uYmFzZUFycmF5LCAuLi5BcnJheS5mcm9tKGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSldXG4gIC8vIFRPRE86IGBtYXRjaGVzYCBhY2NvcmRpbmcgbGliLmRvbS5kLnRzIGNhbiBnZXQgb25seSBgc3RyaW5nYCBidXQgYWNjb3JkaW5nIG91ciBjb2RlIGl0IGNhbiBoYW5kbGUgYWxzbyBib29sZWFuIDopXG4gIC5maWx0ZXIobm9kZSA9PiAhaWdub3JlIHx8ICFub2RlLm1hdGNoZXMoaWdub3JlKSkuZmlsdGVyKG5vZGUgPT4gbWF0Y2hlcigoMCwgX2FsbFV0aWxzLmdldE5vZGVUZXh0KShub2RlKSwgbm9kZSwgdGV4dCwgbWF0Y2hOb3JtYWxpemVyKSk7XG59O1xuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9IChjLCB0ZXh0KSA9PiBgRm91bmQgbXVsdGlwbGUgZWxlbWVudHMgd2l0aCB0aGUgdGV4dDogJHt0ZXh0fWA7XG5jb25zdCBnZXRNaXNzaW5nRXJyb3IgPSAoYywgdGV4dCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb2xsYXBzZVdoaXRlc3BhY2UsXG4gICAgdHJpbSxcbiAgICBub3JtYWxpemVyLFxuICAgIHNlbGVjdG9yXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBtYXRjaE5vcm1hbGl6ZXIgPSAoMCwgX2FsbFV0aWxzLm1ha2VOb3JtYWxpemVyKSh7XG4gICAgY29sbGFwc2VXaGl0ZXNwYWNlLFxuICAgIHRyaW0sXG4gICAgbm9ybWFsaXplclxuICB9KTtcbiAgY29uc3Qgbm9ybWFsaXplZFRleHQgPSBtYXRjaE5vcm1hbGl6ZXIodGV4dC50b1N0cmluZygpKTtcbiAgY29uc3QgaXNOb3JtYWxpemVkRGlmZmVyZW50ID0gbm9ybWFsaXplZFRleHQgIT09IHRleHQudG9TdHJpbmcoKTtcbiAgY29uc3QgaXNDdXN0b21TZWxlY3RvciA9IChzZWxlY3RvciA/PyAnKicpICE9PSAnKic7XG4gIHJldHVybiBgVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCB3aXRoIHRoZSB0ZXh0OiAke2lzTm9ybWFsaXplZERpZmZlcmVudCA/IGAke25vcm1hbGl6ZWRUZXh0fSAobm9ybWFsaXplZCBmcm9tICcke3RleHR9JylgIDogdGV4dH0ke2lzQ3VzdG9tU2VsZWN0b3IgPyBgLCB3aGljaCBtYXRjaGVzIHNlbGVjdG9yICcke3NlbGVjdG9yfSdgIDogJyd9LiBUaGlzIGNvdWxkIGJlIGJlY2F1c2UgdGhlIHRleHQgaXMgYnJva2VuIHVwIGJ5IG11bHRpcGxlIGVsZW1lbnRzLiBJbiB0aGlzIGNhc2UsIHlvdSBjYW4gcHJvdmlkZSBhIGZ1bmN0aW9uIGZvciB5b3VyIHRleHQgbWF0Y2hlciB0byBtYWtlIHlvdXIgbWF0Y2hlciBtb3JlIGZsZXhpYmxlLmA7XG59O1xuY29uc3QgcXVlcnlBbGxCeVRleHRXaXRoU3VnZ2VzdGlvbnMgPSAoMCwgX3F1ZXJ5SGVscGVycy53cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uKShxdWVyeUFsbEJ5VGV4dCwgcXVlcnlBbGxCeVRleHQubmFtZSwgJ3F1ZXJ5QWxsJyk7XG5leHBvcnRzLnF1ZXJ5QWxsQnlUZXh0ID0gcXVlcnlBbGxCeVRleHRXaXRoU3VnZ2VzdGlvbnM7XG5jb25zdCBbcXVlcnlCeVRleHQsIGdldEFsbEJ5VGV4dCwgZ2V0QnlUZXh0LCBmaW5kQWxsQnlUZXh0LCBmaW5kQnlUZXh0XSA9ICgwLCBfYWxsVXRpbHMuYnVpbGRRdWVyaWVzKShxdWVyeUFsbEJ5VGV4dCwgZ2V0TXVsdGlwbGVFcnJvciwgZ2V0TWlzc2luZ0Vycm9yKTtcbmV4cG9ydHMuZmluZEJ5VGV4dCA9IGZpbmRCeVRleHQ7XG5leHBvcnRzLmZpbmRBbGxCeVRleHQgPSBmaW5kQWxsQnlUZXh0O1xuZXhwb3J0cy5nZXRCeVRleHQgPSBnZXRCeVRleHQ7XG5leHBvcnRzLmdldEFsbEJ5VGV4dCA9IGdldEFsbEJ5VGV4dDtcbmV4cG9ydHMucXVlcnlCeVRleHQgPSBxdWVyeUJ5VGV4dDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxXQUFXLEdBQUdGLE9BQU8sQ0FBQ0cs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