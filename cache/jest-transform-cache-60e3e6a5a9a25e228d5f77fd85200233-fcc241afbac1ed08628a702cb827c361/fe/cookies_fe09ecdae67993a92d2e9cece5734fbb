a2c2497f256acd4ff60150bf0cd9cff0
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _utils = _interopRequireDefault(require("./../utils.js"));
var _index = _interopRequireDefault(require("../platform/index.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _index.default.isStandardBrowserEnv ?
// Standard browser envs support document.cookie
function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      const cookie = [];
      cookie.push(name + '=' + encodeURIComponent(value));
      if (_utils.default.isNumber(expires)) {
        cookie.push('expires=' + new Date(expires).toGMTString());
      }
      if (_utils.default.isString(path)) {
        cookie.push('path=' + path);
      }
      if (_utils.default.isString(domain)) {
        cookie.push('domain=' + domain);
      }
      if (secure === true) {
        cookie.push('secure');
      }
      document.cookie = cookie.join('; ');
    },
    read: function read(name) {
      const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  };
}() :
// Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return {
    write: function write() {},
    read: function read() {
      return null;
    },
    remove: function remove() {}
  };
}();
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfdXRpbHMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9pbmRleCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZGVmYXVsdCIsInBsYXRmb3JtIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJzdGFuZGFyZEJyb3dzZXJFbnYiLCJ3cml0ZSIsIm5hbWUiLCJleHBpcmVzIiwicGF0aCIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInB1c2giLCJlbmNvZGVVUklDb21wb25lbnQiLCJ1dGlscyIsImlzTnVtYmVyIiwiRGF0ZSIsInRvR01UU3RyaW5nIiwiaXNTdHJpbmciLCJkb2N1bWVudCIsImpvaW4iLCJyZWFkIiwibWF0Y2giLCJSZWdFeHAiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJub3ciLCJub25TdGFuZGFyZEJyb3dzZXJFbnYiXSwic291cmNlcyI6WyJjb29raWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm0uaXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4vLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICBjb25zdCBjb29raWUgPSBbXTtcbiAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICBjb25zdCBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkoKSA6XG5cbi8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9KSgpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUFDQSxNQUFBLENBQUFDLGNBQUEsQ0FBQUMsT0FBQTtFQUFBQyxLQUFBO0FBQUE7QUFBQUQsT0FBQSxDQUFBRSxPQUFBO0FBRWIsSUFBQUMsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQTRDLFNBQUFELHVCQUFBRyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUwsT0FBQSxFQUFBSyxHQUFBO0FBQUEsSUFBQUUsUUFBQSxHQUU3QkMsY0FBUSxDQUFDQyxvQkFBb0I7QUFFNUM7QUFDRyxTQUFTQyxrQkFBa0JBLENBQUEsRUFBRztFQUM3QixPQUFPO0lBQ0xDLEtBQUssRUFBRSxTQUFTQSxLQUFLQSxDQUFDQyxJQUFJLEVBQUViLEtBQUssRUFBRWMsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFO01BQ2hFLE1BQU1DLE1BQU0sR0FBRyxFQUFFO01BQ2pCQSxNQUFNLENBQUNDLElBQUksQ0FBQ04sSUFBSSxHQUFHLEdBQUcsR0FBR08sa0JBQWtCLENBQUNwQixLQUFLLENBQUMsQ0FBQztNQUVuRCxJQUFJcUIsY0FBSyxDQUFDQyxRQUFRLENBQUNSLE9BQU8sQ0FBQyxFQUFFO1FBQzNCSSxNQUFNLENBQUNDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSUksSUFBSSxDQUFDVCxPQUFPLENBQUMsQ0FBQ1UsV0FBVyxFQUFFLENBQUM7TUFDM0Q7TUFFQSxJQUFJSCxjQUFLLENBQUNJLFFBQVEsQ0FBQ1YsSUFBSSxDQUFDLEVBQUU7UUFDeEJHLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLE9BQU8sR0FBR0osSUFBSSxDQUFDO01BQzdCO01BRUEsSUFBSU0sY0FBSyxDQUFDSSxRQUFRLENBQUNULE1BQU0sQ0FBQyxFQUFFO1FBQzFCRSxNQUFNLENBQUNDLElBQUksQ0FBQyxTQUFTLEdBQUdILE1BQU0sQ0FBQztNQUNqQztNQUVBLElBQUlDLE1BQU0sS0FBSyxJQUFJLEVBQUU7UUFDbkJDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLFFBQVEsQ0FBQztNQUN2QjtNQUVBTyxRQUFRLENBQUNSLE1BQU0sR0FBR0EsTUFBTSxDQUFDUyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JDLENBQUM7SUFFREMsSUFBSSxFQUFFLFNBQVNBLElBQUlBLENBQUNmLElBQUksRUFBRTtNQUN4QixNQUFNZ0IsS0FBSyxHQUFHSCxRQUFRLENBQUNSLE1BQU0sQ0FBQ1csS0FBSyxDQUFDLElBQUlDLE1BQU0sQ0FBQyxZQUFZLEdBQUdqQixJQUFJLEdBQUcsV0FBVyxDQUFDLENBQUM7TUFDbEYsT0FBUWdCLEtBQUssR0FBR0Usa0JBQWtCLENBQUNGLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUk7SUFDckQsQ0FBQztJQUVERyxNQUFNLEVBQUUsU0FBU0EsTUFBTUEsQ0FBQ25CLElBQUksRUFBRTtNQUM1QixJQUFJLENBQUNELEtBQUssQ0FBQ0MsSUFBSSxFQUFFLEVBQUUsRUFBRVUsSUFBSSxDQUFDVSxHQUFHLEVBQUUsR0FBRyxRQUFRLENBQUM7SUFDN0M7RUFDRixDQUFDO0FBQ0gsQ0FBQyxFQUFHO0FBRU47QUFDRyxTQUFTQyxxQkFBcUJBLENBQUEsRUFBRztFQUNoQyxPQUFPO0lBQ0x0QixLQUFLLEVBQUUsU0FBU0EsS0FBS0EsQ0FBQSxFQUFHLENBQUMsQ0FBQztJQUMxQmdCLElBQUksRUFBRSxTQUFTQSxJQUFJQSxDQUFBLEVBQUc7TUFBRSxPQUFPLElBQUk7SUFBRSxDQUFDO0lBQ3RDSSxNQUFNLEVBQUUsU0FBU0EsTUFBTUEsQ0FBQSxFQUFHLENBQUM7RUFDN0IsQ0FBQztBQUNILENBQUMsRUFBRztBQUFBakMsT0FBQSxDQUFBRSxPQUFBLEdBQUFPLFFBQUEifQ==