957e77f84b0f947936b7667808017564
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _clsx = _interopRequireDefault(require("clsx"));
var _base = require("@mui/base");
var _styled = _interopRequireDefault(require("../styles/styled"));
var _useThemeProps = _interopRequireDefault(require("../styles/useThemeProps"));
var _ButtonBase = _interopRequireDefault(require("../ButtonBase"));
var _unsupportedProp = _interopRequireDefault(require("../utils/unsupportedProp"));
var _bottomNavigationActionClasses = _interopRequireWildcard(require("./bottomNavigationActionClasses"));
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["className", "icon", "label", "onChange", "onClick", "selected", "showLabel", "value"];
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
const useUtilityClasses = ownerState => {
  const {
    classes,
    showLabel,
    selected
  } = ownerState;
  const slots = {
    root: ['root', !showLabel && !selected && 'iconOnly', selected && 'selected'],
    label: ['label', !showLabel && !selected && 'iconOnly', selected && 'selected']
  };
  return (0, _base.unstable_composeClasses)(slots, _bottomNavigationActionClasses.getBottomNavigationActionUtilityClass, classes);
};
const BottomNavigationActionRoot = (0, _styled.default)(_ButtonBase.default, {
  name: 'MuiBottomNavigationAction',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, !ownerState.showLabel && !ownerState.selected && styles.iconOnly];
  }
})(({
  theme,
  ownerState
}) => (0, _extends2.default)({
  transition: theme.transitions.create(['color', 'padding-top'], {
    duration: theme.transitions.duration.short
  }),
  padding: '0px 12px',
  minWidth: 80,
  maxWidth: 168,
  color: (theme.vars || theme).palette.text.secondary,
  flexDirection: 'column',
  flex: '1'
}, !ownerState.showLabel && !ownerState.selected && {
  paddingTop: 14
}, !ownerState.showLabel && !ownerState.selected && !ownerState.label && {
  paddingTop: 0
}, {
  [`&.${_bottomNavigationActionClasses.default.selected}`]: {
    color: (theme.vars || theme).palette.primary.main
  }
}));
const BottomNavigationActionLabel = (0, _styled.default)('span', {
  name: 'MuiBottomNavigationAction',
  slot: 'Label',
  overridesResolver: (props, styles) => styles.label
})(({
  theme,
  ownerState
}) => (0, _extends2.default)({
  fontFamily: theme.typography.fontFamily,
  fontSize: theme.typography.pxToRem(12),
  opacity: 1,
  transition: 'font-size 0.2s, opacity 0.2s',
  transitionDelay: '0.1s'
}, !ownerState.showLabel && !ownerState.selected && {
  opacity: 0,
  transitionDelay: '0s'
}, {
  [`&.${_bottomNavigationActionClasses.default.selected}`]: {
    fontSize: theme.typography.pxToRem(14)
  }
}));
const BottomNavigationAction = /*#__PURE__*/React.forwardRef(function BottomNavigationAction(inProps, ref) {
  const props = (0, _useThemeProps.default)({
    props: inProps,
    name: 'MuiBottomNavigationAction'
  });
  const {
      className,
      icon,
      label,
      onChange,
      onClick,
      value
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const ownerState = props;
  const classes = useUtilityClasses(ownerState);
  const handleChange = event => {
    if (onChange) {
      onChange(event, value);
    }
    if (onClick) {
      onClick(event);
    }
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(BottomNavigationActionRoot, (0, _extends2.default)({
    ref: ref,
    className: (0, _clsx.default)(classes.root, className),
    focusRipple: true,
    onClick: handleChange,
    ownerState: ownerState
  }, other, {
    children: [icon, /*#__PURE__*/(0, _jsxRuntime.jsx)(BottomNavigationActionLabel, {
      className: classes.label,
      ownerState: ownerState,
      children: label
    })]
  }));
});
process.env.NODE_ENV !== "production" ? BottomNavigationAction.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * This prop isn't supported.
   * Use the `component` prop if you need to change the children structure.
   */
  children: _unsupportedProp.default,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,
  /**
   * @ignore
   */
  className: _propTypes.default.string,
  /**
   * The icon to display.
   */
  icon: _propTypes.default.node,
  /**
   * The label element.
   */
  label: _propTypes.default.node,
  /**
   * @ignore
   */
  onChange: _propTypes.default.func,
  /**
   * @ignore
   */
  onClick: _propTypes.default.func,
  /**
   * If `true`, the `BottomNavigationAction` will show its label.
   * By default, only the selected `BottomNavigationAction`
   * inside `BottomNavigation` will show its label.
   *
   * The prop defaults to the value (`false`) inherited from the parent BottomNavigation component.
   */
  showLabel: _propTypes.default.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
  /**
   * You can provide your own value. Otherwise, we fallback to the child position index.
   */
  value: _propTypes.default.any
} : void 0;
var _default = BottomNavigationAction;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiIsIl9leHRlbmRzMiIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcHJvcFR5cGVzIiwiX2Nsc3giLCJfYmFzZSIsIl9zdHlsZWQiLCJfdXNlVGhlbWVQcm9wcyIsIl9CdXR0b25CYXNlIiwiX3Vuc3VwcG9ydGVkUHJvcCIsIl9ib3R0b21OYXZpZ2F0aW9uQWN0aW9uQ2xhc3NlcyIsIl9qc3hSdW50aW1lIiwiX2V4Y2x1ZGVkIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsInVzZVV0aWxpdHlDbGFzc2VzIiwib3duZXJTdGF0ZSIsImNsYXNzZXMiLCJzaG93TGFiZWwiLCJzZWxlY3RlZCIsInNsb3RzIiwicm9vdCIsImxhYmVsIiwidW5zdGFibGVfY29tcG9zZUNsYXNzZXMiLCJnZXRCb3R0b21OYXZpZ2F0aW9uQWN0aW9uVXRpbGl0eUNsYXNzIiwiQm90dG9tTmF2aWdhdGlvbkFjdGlvblJvb3QiLCJuYW1lIiwic2xvdCIsIm92ZXJyaWRlc1Jlc29sdmVyIiwicHJvcHMiLCJzdHlsZXMiLCJpY29uT25seSIsInRoZW1lIiwidHJhbnNpdGlvbiIsInRyYW5zaXRpb25zIiwiY3JlYXRlIiwiZHVyYXRpb24iLCJzaG9ydCIsInBhZGRpbmciLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiY29sb3IiLCJ2YXJzIiwicGFsZXR0ZSIsInRleHQiLCJzZWNvbmRhcnkiLCJmbGV4RGlyZWN0aW9uIiwiZmxleCIsInBhZGRpbmdUb3AiLCJwcmltYXJ5IiwibWFpbiIsIkJvdHRvbU5hdmlnYXRpb25BY3Rpb25MYWJlbCIsImZvbnRGYW1pbHkiLCJ0eXBvZ3JhcGh5IiwiZm9udFNpemUiLCJweFRvUmVtIiwib3BhY2l0eSIsInRyYW5zaXRpb25EZWxheSIsIkJvdHRvbU5hdmlnYXRpb25BY3Rpb24iLCJmb3J3YXJkUmVmIiwiaW5Qcm9wcyIsInJlZiIsImNsYXNzTmFtZSIsImljb24iLCJvbkNoYW5nZSIsIm9uQ2xpY2siLCJvdGhlciIsImhhbmRsZUNoYW5nZSIsImV2ZW50IiwianN4cyIsImZvY3VzUmlwcGxlIiwiY2hpbGRyZW4iLCJqc3giLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJwcm9wVHlwZXMiLCJvYmplY3QiLCJzdHJpbmciLCJub2RlIiwiZnVuYyIsImJvb2wiLCJzeCIsIm9uZU9mVHlwZSIsImFycmF5T2YiLCJhbnkiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIkJvdHRvbU5hdmlnYXRpb25BY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcbnZhciBfY2xzeCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsc3hcIikpO1xudmFyIF9iYXNlID0gcmVxdWlyZShcIkBtdWkvYmFzZVwiKTtcbnZhciBfc3R5bGVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3N0eWxlZFwiKSk7XG52YXIgX3VzZVRoZW1lUHJvcHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvdXNlVGhlbWVQcm9wc1wiKSk7XG52YXIgX0J1dHRvbkJhc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9CdXR0b25CYXNlXCIpKTtcbnZhciBfdW5zdXBwb3J0ZWRQcm9wID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvdW5zdXBwb3J0ZWRQcm9wXCIpKTtcbnZhciBfYm90dG9tTmF2aWdhdGlvbkFjdGlvbkNsYXNzZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9ib3R0b21OYXZpZ2F0aW9uQWN0aW9uQ2xhc3Nlc1wiKSk7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJpY29uXCIsIFwibGFiZWxcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xpY2tcIiwgXCJzZWxlY3RlZFwiLCBcInNob3dMYWJlbFwiLCBcInZhbHVlXCJdO1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlQmFiZWxJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgdmFyIGNhY2hlTm9kZUludGVyb3AgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIChub2RlSW50ZXJvcCkgeyByZXR1cm4gbm9kZUludGVyb3AgPyBjYWNoZU5vZGVJbnRlcm9wIDogY2FjaGVCYWJlbEludGVyb3A7IH0pKG5vZGVJbnRlcm9wKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqLCBub2RlSW50ZXJvcCkgeyBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBzaG93TGFiZWwsXG4gICAgc2VsZWN0ZWRcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFzaG93TGFiZWwgJiYgIXNlbGVjdGVkICYmICdpY29uT25seScsIHNlbGVjdGVkICYmICdzZWxlY3RlZCddLFxuICAgIGxhYmVsOiBbJ2xhYmVsJywgIXNob3dMYWJlbCAmJiAhc2VsZWN0ZWQgJiYgJ2ljb25Pbmx5Jywgc2VsZWN0ZWQgJiYgJ3NlbGVjdGVkJ11cbiAgfTtcbiAgcmV0dXJuICgwLCBfYmFzZS51bnN0YWJsZV9jb21wb3NlQ2xhc3Nlcykoc2xvdHMsIF9ib3R0b21OYXZpZ2F0aW9uQWN0aW9uQ2xhc3Nlcy5nZXRCb3R0b21OYXZpZ2F0aW9uQWN0aW9uVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBCb3R0b21OYXZpZ2F0aW9uQWN0aW9uUm9vdCA9ICgwLCBfc3R5bGVkLmRlZmF1bHQpKF9CdXR0b25CYXNlLmRlZmF1bHQsIHtcbiAgbmFtZTogJ011aUJvdHRvbU5hdmlnYXRpb25BY3Rpb24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgIW93bmVyU3RhdGUuc2hvd0xhYmVsICYmICFvd25lclN0YXRlLnNlbGVjdGVkICYmIHN0eWxlcy5pY29uT25seV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnY29sb3InLCAncGFkZGluZy10b3AnXSwge1xuICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydFxuICB9KSxcbiAgcGFkZGluZzogJzBweCAxMnB4JyxcbiAgbWluV2lkdGg6IDgwLFxuICBtYXhXaWR0aDogMTY4LFxuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICBmbGV4OiAnMSdcbn0sICFvd25lclN0YXRlLnNob3dMYWJlbCAmJiAhb3duZXJTdGF0ZS5zZWxlY3RlZCAmJiB7XG4gIHBhZGRpbmdUb3A6IDE0XG59LCAhb3duZXJTdGF0ZS5zaG93TGFiZWwgJiYgIW93bmVyU3RhdGUuc2VsZWN0ZWQgJiYgIW93bmVyU3RhdGUubGFiZWwgJiYge1xuICBwYWRkaW5nVG9wOiAwXG59LCB7XG4gIFtgJi4ke19ib3R0b21OYXZpZ2F0aW9uQWN0aW9uQ2xhc3Nlcy5kZWZhdWx0LnNlbGVjdGVkfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnByaW1hcnkubWFpblxuICB9XG59KSk7XG5jb25zdCBCb3R0b21OYXZpZ2F0aW9uQWN0aW9uTGFiZWwgPSAoMCwgX3N0eWxlZC5kZWZhdWx0KSgnc3BhbicsIHtcbiAgbmFtZTogJ011aUJvdHRvbU5hdmlnYXRpb25BY3Rpb24nLFxuICBzbG90OiAnTGFiZWwnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5sYWJlbFxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHksXG4gIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTIpLFxuICBvcGFjaXR5OiAxLFxuICB0cmFuc2l0aW9uOiAnZm9udC1zaXplIDAuMnMsIG9wYWNpdHkgMC4ycycsXG4gIHRyYW5zaXRpb25EZWxheTogJzAuMXMnXG59LCAhb3duZXJTdGF0ZS5zaG93TGFiZWwgJiYgIW93bmVyU3RhdGUuc2VsZWN0ZWQgJiYge1xuICBvcGFjaXR5OiAwLFxuICB0cmFuc2l0aW9uRGVsYXk6ICcwcydcbn0sIHtcbiAgW2AmLiR7X2JvdHRvbU5hdmlnYXRpb25BY3Rpb25DbGFzc2VzLmRlZmF1bHQuc2VsZWN0ZWR9YF06IHtcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE0KVxuICB9XG59KSk7XG5jb25zdCBCb3R0b21OYXZpZ2F0aW9uQWN0aW9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQm90dG9tTmF2aWdhdGlvbkFjdGlvbihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSAoMCwgX3VzZVRoZW1lUHJvcHMuZGVmYXVsdCkoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlCb3R0b21OYXZpZ2F0aW9uQWN0aW9uJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgaWNvbixcbiAgICAgIGxhYmVsLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBvbkNsaWNrLFxuICAgICAgdmFsdWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gcHJvcHM7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gZXZlbnQgPT4ge1xuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UoZXZlbnQsIHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4cykoQm90dG9tTmF2aWdhdGlvbkFjdGlvblJvb3QsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogKDAsIF9jbHN4LmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBmb2N1c1JpcHBsZTogdHJ1ZSxcbiAgICBvbkNsaWNrOiBoYW5kbGVDaGFuZ2UsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbaWNvbiwgLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKEJvdHRvbU5hdmlnYXRpb25BY3Rpb25MYWJlbCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmxhYmVsLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiBsYWJlbFxuICAgIH0pXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJvdHRvbU5hdmlnYXRpb25BY3Rpb24ucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogVGhpcyBwcm9wIGlzbid0IHN1cHBvcnRlZC5cbiAgICogVXNlIHRoZSBgY29tcG9uZW50YCBwcm9wIGlmIHlvdSBuZWVkIHRvIGNoYW5nZSB0aGUgY2hpbGRyZW4gc3RydWN0dXJlLlxuICAgKi9cbiAgY2hpbGRyZW46IF91bnN1cHBvcnRlZFByb3AuZGVmYXVsdCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5LlxuICAgKi9cbiAgaWNvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwgZWxlbWVudC5cbiAgICovXG4gIGxhYmVsOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2xpY2s6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYEJvdHRvbU5hdmlnYXRpb25BY3Rpb25gIHdpbGwgc2hvdyBpdHMgbGFiZWwuXG4gICAqIEJ5IGRlZmF1bHQsIG9ubHkgdGhlIHNlbGVjdGVkIGBCb3R0b21OYXZpZ2F0aW9uQWN0aW9uYFxuICAgKiBpbnNpZGUgYEJvdHRvbU5hdmlnYXRpb25gIHdpbGwgc2hvdyBpdHMgbGFiZWwuXG4gICAqXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBCb3R0b21OYXZpZ2F0aW9uIGNvbXBvbmVudC5cbiAgICovXG4gIHNob3dMYWJlbDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCwgX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xdKSksIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSksXG4gIC8qKlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgeW91ciBvd24gdmFsdWUuIE90aGVyd2lzZSwgd2UgZmFsbGJhY2sgdG8gdGhlIGNoaWxkIHBvc2l0aW9uIGluZGV4LlxuICAgKi9cbiAgdmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5hbnlcbn0gOiB2b2lkIDA7XG52YXIgX2RlZmF1bHQgPSBCb3R0b21OYXZpZ2F0aW9uQWN0aW9uO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLHNCQUFzQixHQUFHQyxPQUFPLENBQUMsOENBQThDLENBQUM7QUFD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