47609b1ad1018464e2272796f48a26aa
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEvent = createEvent;
exports.fireEvent = fireEvent;
var _config = require("./config");
var _helpers = require("./helpers");
var _eventMap = require("./event-map");
function fireEvent(element, event) {
  return (0, _config.getConfig)().eventWrapper(() => {
    if (!event) {
      throw new Error(`Unable to fire an event - please provide an event object.`);
    }
    if (!element) {
      throw new Error(`Unable to fire a "${event.type}" event - please provide a DOM element.`);
    }
    return element.dispatchEvent(event);
  });
}
function createEvent(eventName, node, init, {
  EventType = 'Event',
  defaultInit = {}
} = {}) {
  if (!node) {
    throw new Error(`Unable to fire a "${eventName}" event - please provide a DOM element.`);
  }
  const eventInit = {
    ...defaultInit,
    ...init
  };
  const {
    target: {
      value,
      files,
      ...targetProperties
    } = {}
  } = eventInit;
  if (value !== undefined) {
    setNativeValue(node, value);
  }
  if (files !== undefined) {
    // input.files is a read-only property so this is not allowed:
    // input.files = [file]
    // so we have to use this workaround to set the property
    Object.defineProperty(node, 'files', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: files
    });
  }
  Object.assign(node, targetProperties);
  const window = (0, _helpers.getWindowFromNode)(node);
  const EventConstructor = window[EventType] || window.Event;
  let event;
  /* istanbul ignore else  */
  if (typeof EventConstructor === 'function') {
    event = new EventConstructor(eventName, eventInit);
  } else {
    // IE11 polyfill from https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill
    event = window.document.createEvent(EventType);
    const {
      bubbles,
      cancelable,
      detail,
      ...otherInit
    } = eventInit;
    event.initEvent(eventName, bubbles, cancelable, detail);
    Object.keys(otherInit).forEach(eventKey => {
      event[eventKey] = otherInit[eventKey];
    });
  }

  // DataTransfer is not supported in jsdom: https://github.com/jsdom/jsdom/issues/1568
  const dataTransferProperties = ['dataTransfer', 'clipboardData'];
  dataTransferProperties.forEach(dataTransferKey => {
    const dataTransferValue = eventInit[dataTransferKey];
    if (typeof dataTransferValue === 'object') {
      /* istanbul ignore if  */
      if (typeof window.DataTransfer === 'function') {
        Object.defineProperty(event, dataTransferKey, {
          value: Object.getOwnPropertyNames(dataTransferValue).reduce((acc, propName) => {
            Object.defineProperty(acc, propName, {
              value: dataTransferValue[propName]
            });
            return acc;
          }, new window.DataTransfer())
        });
      } else {
        Object.defineProperty(event, dataTransferKey, {
          value: dataTransferValue
        });
      }
    }
  });
  return event;
}
Object.keys(_eventMap.eventMap).forEach(key => {
  const {
    EventType,
    defaultInit
  } = _eventMap.eventMap[key];
  const eventName = key.toLowerCase();
  createEvent[key] = (node, init) => createEvent(eventName, node, init, {
    EventType,
    defaultInit
  });
  fireEvent[key] = (node, init) => fireEvent(node, createEvent[key](node, init));
});

// function written after some investigation here:
// https://github.com/facebook/react/issues/10135#issuecomment-401496776
function setNativeValue(element, value) {
  const {
    set: valueSetter
  } = Object.getOwnPropertyDescriptor(element, 'value') || {};
  const prototype = Object.getPrototypeOf(element);
  const {
    set: prototypeValueSetter
  } = Object.getOwnPropertyDescriptor(prototype, 'value') || {};
  if (prototypeValueSetter && valueSetter !== prototypeValueSetter) {
    prototypeValueSetter.call(element, value);
  } else {
    /* istanbul ignore if */
    // eslint-disable-next-line no-lonely-if -- Can't be ignored by istanbul otherwise
    if (valueSetter) {
      valueSetter.call(element, value);
    } else {
      throw new Error('The given element does not have a value setter');
    }
  }
}
Object.keys(_eventMap.eventAliasMap).forEach(aliasKey => {
  const key = _eventMap.eventAliasMap[aliasKey];
  fireEvent[aliasKey] = (...args) => fireEvent[key](...args);
});

/* eslint complexity:["error", 9] */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNyZWF0ZUV2ZW50IiwiZmlyZUV2ZW50IiwiX2NvbmZpZyIsInJlcXVpcmUiLCJfaGVscGVycyIsIl9ldmVudE1hcCIsImVsZW1lbnQiLCJldmVudCIsImdldENvbmZpZyIsImV2ZW50V3JhcHBlciIsIkVycm9yIiwidHlwZSIsImRpc3BhdGNoRXZlbnQiLCJldmVudE5hbWUiLCJub2RlIiwiaW5pdCIsIkV2ZW50VHlwZSIsImRlZmF1bHRJbml0IiwiZXZlbnRJbml0IiwidGFyZ2V0IiwiZmlsZXMiLCJ0YXJnZXRQcm9wZXJ0aWVzIiwidW5kZWZpbmVkIiwic2V0TmF0aXZlVmFsdWUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJhc3NpZ24iLCJ3aW5kb3ciLCJnZXRXaW5kb3dGcm9tTm9kZSIsIkV2ZW50Q29uc3RydWN0b3IiLCJFdmVudCIsImRvY3VtZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkZXRhaWwiLCJvdGhlckluaXQiLCJpbml0RXZlbnQiLCJrZXlzIiwiZm9yRWFjaCIsImV2ZW50S2V5IiwiZGF0YVRyYW5zZmVyUHJvcGVydGllcyIsImRhdGFUcmFuc2ZlcktleSIsImRhdGFUcmFuc2ZlclZhbHVlIiwiRGF0YVRyYW5zZmVyIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInJlZHVjZSIsImFjYyIsInByb3BOYW1lIiwiZXZlbnRNYXAiLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsInNldCIsInZhbHVlU2V0dGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwicHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGVWYWx1ZVNldHRlciIsImNhbGwiLCJldmVudEFsaWFzTWFwIiwiYWxpYXNLZXkiLCJhcmdzIl0sInNvdXJjZXMiOlsiZXZlbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jcmVhdGVFdmVudCA9IGNyZWF0ZUV2ZW50O1xuZXhwb3J0cy5maXJlRXZlbnQgPSBmaXJlRXZlbnQ7XG52YXIgX2NvbmZpZyA9IHJlcXVpcmUoXCIuL2NvbmZpZ1wiKTtcbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuL2hlbHBlcnNcIik7XG52YXIgX2V2ZW50TWFwID0gcmVxdWlyZShcIi4vZXZlbnQtbWFwXCIpO1xuZnVuY3Rpb24gZmlyZUV2ZW50KGVsZW1lbnQsIGV2ZW50KSB7XG4gIHJldHVybiAoMCwgX2NvbmZpZy5nZXRDb25maWcpKCkuZXZlbnRXcmFwcGVyKCgpID0+IHtcbiAgICBpZiAoIWV2ZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBmaXJlIGFuIGV2ZW50IC0gcGxlYXNlIHByb3ZpZGUgYW4gZXZlbnQgb2JqZWN0LmApO1xuICAgIH1cbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGZpcmUgYSBcIiR7ZXZlbnQudHlwZX1cIiBldmVudCAtIHBsZWFzZSBwcm92aWRlIGEgRE9NIGVsZW1lbnQuYCk7XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50KGV2ZW50TmFtZSwgbm9kZSwgaW5pdCwge1xuICBFdmVudFR5cGUgPSAnRXZlbnQnLFxuICBkZWZhdWx0SW5pdCA9IHt9XG59ID0ge30pIHtcbiAgaWYgKCFub2RlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZmlyZSBhIFwiJHtldmVudE5hbWV9XCIgZXZlbnQgLSBwbGVhc2UgcHJvdmlkZSBhIERPTSBlbGVtZW50LmApO1xuICB9XG4gIGNvbnN0IGV2ZW50SW5pdCA9IHtcbiAgICAuLi5kZWZhdWx0SW5pdCxcbiAgICAuLi5pbml0XG4gIH07XG4gIGNvbnN0IHtcbiAgICB0YXJnZXQ6IHtcbiAgICAgIHZhbHVlLFxuICAgICAgZmlsZXMsXG4gICAgICAuLi50YXJnZXRQcm9wZXJ0aWVzXG4gICAgfSA9IHt9XG4gIH0gPSBldmVudEluaXQ7XG4gIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc2V0TmF0aXZlVmFsdWUobm9kZSwgdmFsdWUpO1xuICB9XG4gIGlmIChmaWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gaW5wdXQuZmlsZXMgaXMgYSByZWFkLW9ubHkgcHJvcGVydHkgc28gdGhpcyBpcyBub3QgYWxsb3dlZDpcbiAgICAvLyBpbnB1dC5maWxlcyA9IFtmaWxlXVxuICAgIC8vIHNvIHdlIGhhdmUgdG8gdXNlIHRoaXMgd29ya2Fyb3VuZCB0byBzZXQgdGhlIHByb3BlcnR5XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5vZGUsICdmaWxlcycsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBmaWxlc1xuICAgIH0pO1xuICB9XG4gIE9iamVjdC5hc3NpZ24obm9kZSwgdGFyZ2V0UHJvcGVydGllcyk7XG4gIGNvbnN0IHdpbmRvdyA9ICgwLCBfaGVscGVycy5nZXRXaW5kb3dGcm9tTm9kZSkobm9kZSk7XG4gIGNvbnN0IEV2ZW50Q29uc3RydWN0b3IgPSB3aW5kb3dbRXZlbnRUeXBlXSB8fCB3aW5kb3cuRXZlbnQ7XG4gIGxldCBldmVudDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgICovXG4gIGlmICh0eXBlb2YgRXZlbnRDb25zdHJ1Y3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50ID0gbmV3IEV2ZW50Q29uc3RydWN0b3IoZXZlbnROYW1lLCBldmVudEluaXQpO1xuICB9IGVsc2Uge1xuICAgIC8vIElFMTEgcG9seWZpbGwgZnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ3VzdG9tRXZlbnQvQ3VzdG9tRXZlbnQjUG9seWZpbGxcbiAgICBldmVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFdmVudChFdmVudFR5cGUpO1xuICAgIGNvbnN0IHtcbiAgICAgIGJ1YmJsZXMsXG4gICAgICBjYW5jZWxhYmxlLFxuICAgICAgZGV0YWlsLFxuICAgICAgLi4ub3RoZXJJbml0XG4gICAgfSA9IGV2ZW50SW5pdDtcbiAgICBldmVudC5pbml0RXZlbnQoZXZlbnROYW1lLCBidWJibGVzLCBjYW5jZWxhYmxlLCBkZXRhaWwpO1xuICAgIE9iamVjdC5rZXlzKG90aGVySW5pdCkuZm9yRWFjaChldmVudEtleSA9PiB7XG4gICAgICBldmVudFtldmVudEtleV0gPSBvdGhlckluaXRbZXZlbnRLZXldO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gRGF0YVRyYW5zZmVyIGlzIG5vdCBzdXBwb3J0ZWQgaW4ganNkb206IGh0dHBzOi8vZ2l0aHViLmNvbS9qc2RvbS9qc2RvbS9pc3N1ZXMvMTU2OFxuICBjb25zdCBkYXRhVHJhbnNmZXJQcm9wZXJ0aWVzID0gWydkYXRhVHJhbnNmZXInLCAnY2xpcGJvYXJkRGF0YSddO1xuICBkYXRhVHJhbnNmZXJQcm9wZXJ0aWVzLmZvckVhY2goZGF0YVRyYW5zZmVyS2V5ID0+IHtcbiAgICBjb25zdCBkYXRhVHJhbnNmZXJWYWx1ZSA9IGV2ZW50SW5pdFtkYXRhVHJhbnNmZXJLZXldO1xuICAgIGlmICh0eXBlb2YgZGF0YVRyYW5zZmVyVmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gICAgICBpZiAodHlwZW9mIHdpbmRvdy5EYXRhVHJhbnNmZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV2ZW50LCBkYXRhVHJhbnNmZXJLZXksIHtcbiAgICAgICAgICB2YWx1ZTogT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZGF0YVRyYW5zZmVyVmFsdWUpLnJlZHVjZSgoYWNjLCBwcm9wTmFtZSkgPT4ge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFjYywgcHJvcE5hbWUsIHtcbiAgICAgICAgICAgICAgdmFsdWU6IGRhdGFUcmFuc2ZlclZhbHVlW3Byb3BOYW1lXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgIH0sIG5ldyB3aW5kb3cuRGF0YVRyYW5zZmVyKCkpXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV2ZW50LCBkYXRhVHJhbnNmZXJLZXksIHtcbiAgICAgICAgICB2YWx1ZTogZGF0YVRyYW5zZmVyVmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGV2ZW50O1xufVxuT2JqZWN0LmtleXMoX2V2ZW50TWFwLmV2ZW50TWFwKS5mb3JFYWNoKGtleSA9PiB7XG4gIGNvbnN0IHtcbiAgICBFdmVudFR5cGUsXG4gICAgZGVmYXVsdEluaXRcbiAgfSA9IF9ldmVudE1hcC5ldmVudE1hcFtrZXldO1xuICBjb25zdCBldmVudE5hbWUgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgY3JlYXRlRXZlbnRba2V5XSA9IChub2RlLCBpbml0KSA9PiBjcmVhdGVFdmVudChldmVudE5hbWUsIG5vZGUsIGluaXQsIHtcbiAgICBFdmVudFR5cGUsXG4gICAgZGVmYXVsdEluaXRcbiAgfSk7XG4gIGZpcmVFdmVudFtrZXldID0gKG5vZGUsIGluaXQpID0+IGZpcmVFdmVudChub2RlLCBjcmVhdGVFdmVudFtrZXldKG5vZGUsIGluaXQpKTtcbn0pO1xuXG4vLyBmdW5jdGlvbiB3cml0dGVuIGFmdGVyIHNvbWUgaW52ZXN0aWdhdGlvbiBoZXJlOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMDEzNSNpc3N1ZWNvbW1lbnQtNDAxNDk2Nzc2XG5mdW5jdGlvbiBzZXROYXRpdmVWYWx1ZShlbGVtZW50LCB2YWx1ZSkge1xuICBjb25zdCB7XG4gICAgc2V0OiB2YWx1ZVNldHRlclxuICB9ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlbGVtZW50LCAndmFsdWUnKSB8fCB7fTtcbiAgY29uc3QgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGVsZW1lbnQpO1xuICBjb25zdCB7XG4gICAgc2V0OiBwcm90b3R5cGVWYWx1ZVNldHRlclxuICB9ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm90b3R5cGUsICd2YWx1ZScpIHx8IHt9O1xuICBpZiAocHJvdG90eXBlVmFsdWVTZXR0ZXIgJiYgdmFsdWVTZXR0ZXIgIT09IHByb3RvdHlwZVZhbHVlU2V0dGVyKSB7XG4gICAgcHJvdG90eXBlVmFsdWVTZXR0ZXIuY2FsbChlbGVtZW50LCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmVseS1pZiAtLSBDYW4ndCBiZSBpZ25vcmVkIGJ5IGlzdGFuYnVsIG90aGVyd2lzZVxuICAgIGlmICh2YWx1ZVNldHRlcikge1xuICAgICAgdmFsdWVTZXR0ZXIuY2FsbChlbGVtZW50LCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGdpdmVuIGVsZW1lbnQgZG9lcyBub3QgaGF2ZSBhIHZhbHVlIHNldHRlcicpO1xuICAgIH1cbiAgfVxufVxuT2JqZWN0LmtleXMoX2V2ZW50TWFwLmV2ZW50QWxpYXNNYXApLmZvckVhY2goYWxpYXNLZXkgPT4ge1xuICBjb25zdCBrZXkgPSBfZXZlbnRNYXAuZXZlbnRBbGlhc01hcFthbGlhc0tleV07XG4gIGZpcmVFdmVudFthbGlhc0tleV0gPSAoLi4uYXJncykgPT4gZmlyZUV2ZW50W2tleV0oLi4uYXJncyk7XG59KTtcblxuLyogZXNsaW50IGNvbXBsZXhpdHk6W1wiZXJyb3JcIiwgOV0gKi8iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxXQUFXLEdBQUdBLFdBQVc7QUFDakNGLE9BQU8sQ0FBQ0csU0FBUyxHQUFHQSxTQUFTO0FBQzdCLElBQUlDLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUNqQyxJQUFJQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDbkMsSUFBSUUsU0FBUyxHQUFHRixPQUFPLENBQUMsYUFBYSxDQUFDO0FBQ3RDLFNBQVNGLFNBQVNBLENBQUNLLE9BQU8sRUFBRUMsS0FBSyxFQUFFO0VBQ2pDLE9BQU8sQ0FBQyxDQUFDLEVBQUVMLE9BQU8sQ0FBQ00sU0FBUyxHQUFHLENBQUNDLFlBQVksQ0FBQyxNQUFNO0lBQ2pELElBQUksQ0FBQ0YsS0FBSyxFQUFFO01BQ1YsTUFBTSxJQUFJRyxLQUFLLENBQUUsMkRBQTBELENBQUM7SUFDOUU7SUFDQSxJQUFJLENBQUNKLE9BQU8sRUFBRTtNQUNaLE1BQU0sSUFBSUksS0FBSyxDQUFFLHFCQUFvQkgsS0FBSyxDQUFDSSxJQUFLLHlDQUF3QyxDQUFDO0lBQzNGO0lBQ0EsT0FBT0wsT0FBTyxDQUFDTSxhQUFhLENBQUNMLEtBQUssQ0FBQztFQUNyQyxDQUFDLENBQUM7QUFDSjtBQUNBLFNBQVNQLFdBQVdBLENBQUNhLFNBQVMsRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUU7RUFDMUNDLFNBQVMsR0FBRyxPQUFPO0VBQ25CQyxXQUFXLEdBQUcsQ0FBQztBQUNqQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7RUFDTixJQUFJLENBQUNILElBQUksRUFBRTtJQUNULE1BQU0sSUFBSUosS0FBSyxDQUFFLHFCQUFv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