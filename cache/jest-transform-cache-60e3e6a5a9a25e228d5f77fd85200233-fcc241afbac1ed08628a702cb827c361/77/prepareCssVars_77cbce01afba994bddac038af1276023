cc7717feef0da2e3f85729a64b696040
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _utils = require("@mui/utils");
var _cssVarsParser = _interopRequireDefault(require("./cssVarsParser"));
const _excluded = ["colorSchemes", "components"],
  _excluded2 = ["light"];
function prepareCssVars(theme, parserConfig) {
  // @ts-ignore - ignore components do not exist
  const {
      colorSchemes = {}
    } = theme,
    otherTheme = (0, _objectWithoutPropertiesLoose2.default)(theme, _excluded);
  const {
    vars: rootVars,
    css: rootCss,
    varsWithDefaults: rootVarsWithDefaults
  } = (0, _cssVarsParser.default)(otherTheme, parserConfig);
  let themeVars = rootVarsWithDefaults;
  const colorSchemesMap = {};
  const {
      light
    } = colorSchemes,
    otherColorSchemes = (0, _objectWithoutPropertiesLoose2.default)(colorSchemes, _excluded2);
  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {
    const {
      vars,
      css,
      varsWithDefaults
    } = (0, _cssVarsParser.default)(scheme, parserConfig);
    themeVars = (0, _utils.deepmerge)(themeVars, varsWithDefaults);
    colorSchemesMap[key] = {
      css,
      vars
    };
  });
  if (light) {
    // light color scheme vars should be merged last to set as default
    const {
      css,
      vars,
      varsWithDefaults
    } = (0, _cssVarsParser.default)(light, parserConfig);
    themeVars = (0, _utils.deepmerge)(themeVars, varsWithDefaults);
    colorSchemesMap.light = {
      css,
      vars
    };
  }
  const generateCssVars = colorScheme => {
    if (!colorScheme) {
      return {
        css: rootCss,
        vars: rootVars
      };
    }
    return colorSchemesMap[colorScheme];
  };
  return {
    vars: themeVars,
    generateCssVars
  };
}
var _default = prepareCssVars;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiIsIl91dGlscyIsIl9jc3NWYXJzUGFyc2VyIiwiX2V4Y2x1ZGVkIiwiX2V4Y2x1ZGVkMiIsInByZXBhcmVDc3NWYXJzIiwidGhlbWUiLCJwYXJzZXJDb25maWciLCJjb2xvclNjaGVtZXMiLCJvdGhlclRoZW1lIiwidmFycyIsInJvb3RWYXJzIiwiY3NzIiwicm9vdENzcyIsInZhcnNXaXRoRGVmYXVsdHMiLCJyb290VmFyc1dpdGhEZWZhdWx0cyIsInRoZW1lVmFycyIsImNvbG9yU2NoZW1lc01hcCIsImxpZ2h0Iiwib3RoZXJDb2xvclNjaGVtZXMiLCJlbnRyaWVzIiwiZm9yRWFjaCIsImtleSIsInNjaGVtZSIsImRlZXBtZXJnZSIsImdlbmVyYXRlQ3NzVmFycyIsImNvbG9yU2NoZW1lIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJwcmVwYXJlQ3NzVmFycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtdWkvdXRpbHNcIik7XG52YXIgX2Nzc1ZhcnNQYXJzZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2Nzc1ZhcnNQYXJzZXJcIikpO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY29sb3JTY2hlbWVzXCIsIFwiY29tcG9uZW50c1wiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcImxpZ2h0XCJdO1xuZnVuY3Rpb24gcHJlcGFyZUNzc1ZhcnModGhlbWUsIHBhcnNlckNvbmZpZykge1xuICAvLyBAdHMtaWdub3JlIC0gaWdub3JlIGNvbXBvbmVudHMgZG8gbm90IGV4aXN0XG4gIGNvbnN0IHtcbiAgICAgIGNvbG9yU2NoZW1lcyA9IHt9XG4gICAgfSA9IHRoZW1lLFxuICAgIG90aGVyVGhlbWUgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyLmRlZmF1bHQpKHRoZW1lLCBfZXhjbHVkZWQpO1xuICBjb25zdCB7XG4gICAgdmFyczogcm9vdFZhcnMsXG4gICAgY3NzOiByb290Q3NzLFxuICAgIHZhcnNXaXRoRGVmYXVsdHM6IHJvb3RWYXJzV2l0aERlZmF1bHRzXG4gIH0gPSAoMCwgX2Nzc1ZhcnNQYXJzZXIuZGVmYXVsdCkob3RoZXJUaGVtZSwgcGFyc2VyQ29uZmlnKTtcbiAgbGV0IHRoZW1lVmFycyA9IHJvb3RWYXJzV2l0aERlZmF1bHRzO1xuICBjb25zdCBjb2xvclNjaGVtZXNNYXAgPSB7fTtcbiAgY29uc3Qge1xuICAgICAgbGlnaHRcbiAgICB9ID0gY29sb3JTY2hlbWVzLFxuICAgIG90aGVyQ29sb3JTY2hlbWVzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShjb2xvclNjaGVtZXMsIF9leGNsdWRlZDIpO1xuICBPYmplY3QuZW50cmllcyhvdGhlckNvbG9yU2NoZW1lcyB8fCB7fSkuZm9yRWFjaCgoW2tleSwgc2NoZW1lXSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHZhcnMsXG4gICAgICBjc3MsXG4gICAgICB2YXJzV2l0aERlZmF1bHRzXG4gICAgfSA9ICgwLCBfY3NzVmFyc1BhcnNlci5kZWZhdWx0KShzY2hlbWUsIHBhcnNlckNvbmZpZyk7XG4gICAgdGhlbWVWYXJzID0gKDAsIF91dGlscy5kZWVwbWVyZ2UpKHRoZW1lVmFycywgdmFyc1dpdGhEZWZhdWx0cyk7XG4gICAgY29sb3JTY2hlbWVzTWFwW2tleV0gPSB7XG4gICAgICBjc3MsXG4gICAgICB2YXJzXG4gICAgfTtcbiAgfSk7XG4gIGlmIChsaWdodCkge1xuICAgIC8vIGxpZ2h0IGNvbG9yIHNjaGVtZSB2YXJzIHNob3VsZCBiZSBtZXJnZWQgbGFzdCB0byBzZXQgYXMgZGVmYXVsdFxuICAgIGNvbnN0IHtcbiAgICAgIGNzcyxcbiAgICAgIHZhcnMsXG4gICAgICB2YXJzV2l0aERlZmF1bHRzXG4gICAgfSA9ICgwLCBfY3NzVmFyc1BhcnNlci5kZWZhdWx0KShsaWdodCwgcGFyc2VyQ29uZmlnKTtcbiAgICB0aGVtZVZhcnMgPSAoMCwgX3V0aWxzLmRlZXBtZXJnZSkodGhlbWVWYXJzLCB2YXJzV2l0aERlZmF1bHRzKTtcbiAgICBjb2xvclNjaGVtZXNNYXAubGlnaHQgPSB7XG4gICAgICBjc3MsXG4gICAgICB2YXJzXG4gICAgfTtcbiAgfVxuICBjb25zdCBnZW5lcmF0ZUNzc1ZhcnMgPSBjb2xvclNjaGVtZSA9PiB7XG4gICAgaWYgKCFjb2xvclNjaGVtZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY3NzOiByb290Q3NzLFxuICAgICAgICB2YXJzOiByb290VmFyc1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yU2NoZW1lc01hcFtjb2xvclNjaGVtZV07XG4gIH07XG4gIHJldHVybiB7XG4gICAgdmFyczogdGhlbWVWYXJzLFxuICAgIGdlbmVyYXRlQ3NzVmFyc1xuICB9O1xufVxudmFyIF9kZWZhdWx0ID0gcHJlcGFyZUNzc1ZhcnM7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FB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