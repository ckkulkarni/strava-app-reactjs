1d5252dcaffa9d6b23462b3f83137146
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var isBrowser = typeof document !== 'undefined';
function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = '';
  classNames.split(' ').forEach(function (className) {
    if (registered[className] !== undefined) {
      registeredStyles.push(registered[className] + ";");
    } else {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var registerStyles = function registerStyles(cache, serialized, isStringTag) {
  var className = cache.key + "-" + serialized.name;
  if (
  // we only need to add the styles to the registered cache if the
  // class name could be used further down
  // the tree but if it's a string tag, we know it won't
  // so we don't have to add it to registered cache.
  // this improves memory usage since we can avoid storing the whole style string
  (isStringTag === false ||
  // we need to always store it if we're in compat mode and
  // in node since emotion-server relies on whether a style is in
  // the registered cache to know whether a style is global or not
  // also, note that this check will be dead code eliminated in the browser
  isBrowser === false && cache.compat !== undefined) && cache.registered[className] === undefined) {
    cache.registered[className] = serialized.styles;
  }
};
var insertStyles = function insertStyles(cache, serialized, isStringTag) {
  registerStyles(cache, serialized, isStringTag);
  var className = cache.key + "-" + serialized.name;
  if (cache.inserted[serialized.name] === undefined) {
    var stylesForSSR = '';
    var current = serialized;
    do {
      var maybeStyles = cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);
      if (!isBrowser && maybeStyles !== undefined) {
        stylesForSSR += maybeStyles;
      }
      current = current.next;
    } while (current !== undefined);
    if (!isBrowser && stylesForSSR.length !== 0) {
      return stylesForSSR;
    }
  }
};
exports.getRegisteredStyles = getRegisteredStyles;
exports.insertStyles = insertStyles;
exports.registerStyles = registerStyles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzQnJvd3NlciIsImRvY3VtZW50IiwiZ2V0UmVnaXN0ZXJlZFN0eWxlcyIsInJlZ2lzdGVyZWQiLCJyZWdpc3RlcmVkU3R5bGVzIiwiY2xhc3NOYW1lcyIsInJhd0NsYXNzTmFtZSIsInNwbGl0IiwiZm9yRWFjaCIsImNsYXNzTmFtZSIsInVuZGVmaW5lZCIsInB1c2giLCJyZWdpc3RlclN0eWxlcyIsImNhY2hlIiwic2VyaWFsaXplZCIsImlzU3RyaW5nVGFnIiwia2V5IiwibmFtZSIsImNvbXBhdCIsInN0eWxlcyIsImluc2VydFN0eWxlcyIsImluc2VydGVkIiwic3R5bGVzRm9yU1NSIiwiY3VycmVudCIsIm1heWJlU3R5bGVzIiwiaW5zZXJ0Iiwic2hlZXQiLCJuZXh0IiwibGVuZ3RoIl0sInNvdXJjZXMiOlsiZW1vdGlvbi11dGlscy5janMuZGV2LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIGlzQnJvd3NlciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5mdW5jdGlvbiBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZXMpIHtcbiAgdmFyIHJhd0NsYXNzTmFtZSA9ICcnO1xuICBjbGFzc05hbWVzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgaWYgKHJlZ2lzdGVyZWRbY2xhc3NOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZWdpc3RlcmVkU3R5bGVzLnB1c2gocmVnaXN0ZXJlZFtjbGFzc05hbWVdICsgXCI7XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByYXdDbGFzc05hbWUgKz0gY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJhd0NsYXNzTmFtZTtcbn1cbnZhciByZWdpc3RlclN0eWxlcyA9IGZ1bmN0aW9uIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZykge1xuICB2YXIgY2xhc3NOYW1lID0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgaWYgKCAvLyB3ZSBvbmx5IG5lZWQgdG8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIHJlZ2lzdGVyZWQgY2FjaGUgaWYgdGhlXG4gIC8vIGNsYXNzIG5hbWUgY291bGQgYmUgdXNlZCBmdXJ0aGVyIGRvd25cbiAgLy8gdGhlIHRyZWUgYnV0IGlmIGl0J3MgYSBzdHJpbmcgdGFnLCB3ZSBrbm93IGl0IHdvbid0XG4gIC8vIHNvIHdlIGRvbid0IGhhdmUgdG8gYWRkIGl0IHRvIHJlZ2lzdGVyZWQgY2FjaGUuXG4gIC8vIHRoaXMgaW1wcm92ZXMgbWVtb3J5IHVzYWdlIHNpbmNlIHdlIGNhbiBhdm9pZCBzdG9yaW5nIHRoZSB3aG9sZSBzdHlsZSBzdHJpbmdcbiAgKGlzU3RyaW5nVGFnID09PSBmYWxzZSB8fCAvLyB3ZSBuZWVkIHRvIGFsd2F5cyBzdG9yZSBpdCBpZiB3ZSdyZSBpbiBjb21wYXQgbW9kZSBhbmRcbiAgLy8gaW4gbm9kZSBzaW5jZSBlbW90aW9uLXNlcnZlciByZWxpZXMgb24gd2hldGhlciBhIHN0eWxlIGlzIGluXG4gIC8vIHRoZSByZWdpc3RlcmVkIGNhY2hlIHRvIGtub3cgd2hldGhlciBhIHN0eWxlIGlzIGdsb2JhbCBvciBub3RcbiAgLy8gYWxzbywgbm90ZSB0aGF0IHRoaXMgY2hlY2sgd2lsbCBiZSBkZWFkIGNvZGUgZWxpbWluYXRlZCBpbiB0aGUgYnJvd3NlclxuICBpc0Jyb3dzZXIgPT09IGZhbHNlICYmIGNhY2hlLmNvbXBhdCAhPT0gdW5kZWZpbmVkKSAmJiBjYWNoZS5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIGNhY2hlLnJlZ2lzdGVyZWRbY2xhc3NOYW1lXSA9IHNlcmlhbGl6ZWQuc3R5bGVzO1xuICB9XG59O1xudmFyIGluc2VydFN0eWxlcyA9IGZ1bmN0aW9uIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpIHtcbiAgcmVnaXN0ZXJTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgdmFyIGNsYXNzTmFtZSA9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuXG4gIGlmIChjYWNoZS5pbnNlcnRlZFtzZXJpYWxpemVkLm5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgc3R5bGVzRm9yU1NSID0gJyc7XG4gICAgdmFyIGN1cnJlbnQgPSBzZXJpYWxpemVkO1xuXG4gICAgZG8ge1xuICAgICAgdmFyIG1heWJlU3R5bGVzID0gY2FjaGUuaW5zZXJ0KHNlcmlhbGl6ZWQgPT09IGN1cnJlbnQgPyBcIi5cIiArIGNsYXNzTmFtZSA6ICcnLCBjdXJyZW50LCBjYWNoZS5zaGVldCwgdHJ1ZSk7XG5cbiAgICAgIGlmICghaXNCcm93c2VyICYmIG1heWJlU3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3R5bGVzRm9yU1NSICs9IG1heWJlU3R5bGVzO1xuICAgICAgfVxuXG4gICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgIH0gd2hpbGUgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCk7XG5cbiAgICBpZiAoIWlzQnJvd3NlciAmJiBzdHlsZXNGb3JTU1IubGVuZ3RoICE9PSAwKSB7XG4gICAgICByZXR1cm4gc3R5bGVzRm9yU1NSO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0cy5nZXRSZWdpc3RlcmVkU3R5bGVzID0gZ2V0UmVnaXN0ZXJlZFN0eWxlcztcbmV4cG9ydHMuaW5zZXJ0U3R5bGVzID0gaW5zZXJ0U3R5bGVzO1xuZXhwb3J0cy5yZWdpc3RlclN0eWxlcyA9IHJlZ2lzdGVyU3R5bGVz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