5a1005059543978a41f931ed27f95f0e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var buttonRole = {
  abstract: false,
  accessibleNameRequired: true,
  baseConcepts: [],
  childrenPresentational: true,
  nameFrom: ['author', 'contents'],
  prohibitedProps: [],
  props: {
    'aria-disabled': null,
    'aria-expanded': null,
    'aria-haspopup': null,
    'aria-pressed': null
  },
  relatedConcepts: [{
    concept: {
      attributes: [{
        constraints: ['set'],
        name: 'aria-pressed'
      }, {
        name: 'type',
        value: 'checkbox'
      }],
      name: 'input'
    },
    module: 'HTML'
  }, {
    concept: {
      attributes: [{
        name: 'aria-expanded',
        value: 'false'
      }],
      name: 'summary'
    },
    module: 'HTML'
  }, {
    concept: {
      attributes: [{
        name: 'aria-expanded',
        value: 'true'
      }],
      constraints: ['direct descendant of details element with the open attribute defined'],
      name: 'summary'
    },
    module: 'HTML'
  }, {
    concept: {
      attributes: [{
        name: 'type',
        value: 'button'
      }],
      name: 'input'
    },
    module: 'HTML'
  }, {
    concept: {
      attributes: [{
        name: 'type',
        value: 'image'
      }],
      name: 'input'
    },
    module: 'HTML'
  }, {
    concept: {
      attributes: [{
        name: 'type',
        value: 'reset'
      }],
      name: 'input'
    },
    module: 'HTML'
  }, {
    concept: {
      attributes: [{
        name: 'type',
        value: 'submit'
      }],
      name: 'input'
    },
    module: 'HTML'
  }, {
    concept: {
      name: 'button'
    },
    module: 'HTML'
  }, {
    concept: {
      name: 'trigger'
    },
    module: 'XForms'
  }],
  requireContextRole: [],
  requiredContextRole: [],
  requiredOwnedElements: [],
  requiredProps: {},
  superClass: [['roletype', 'widget', 'command']]
};
var _default = buttonRole;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJidXR0b25Sb2xlIiwiYWJzdHJhY3QiLCJhY2Nlc3NpYmxlTmFtZVJlcXVpcmVkIiwiYmFzZUNvbmNlcHRzIiwiY2hpbGRyZW5QcmVzZW50YXRpb25hbCIsIm5hbWVGcm9tIiwicHJvaGliaXRlZFByb3BzIiwicHJvcHMiLCJyZWxhdGVkQ29uY2VwdHMiLCJjb25jZXB0IiwiYXR0cmlidXRlcyIsImNvbnN0cmFpbnRzIiwibmFtZSIsIm1vZHVsZSIsInJlcXVpcmVDb250ZXh0Um9sZSIsInJlcXVpcmVkQ29udGV4dFJvbGUiLCJyZXF1aXJlZE93bmVkRWxlbWVudHMiLCJyZXF1aXJlZFByb3BzIiwic3VwZXJDbGFzcyIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiYnV0dG9uUm9sZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBidXR0b25Sb2xlID0ge1xuICBhYnN0cmFjdDogZmFsc2UsXG4gIGFjY2Vzc2libGVOYW1lUmVxdWlyZWQ6IHRydWUsXG4gIGJhc2VDb25jZXB0czogW10sXG4gIGNoaWxkcmVuUHJlc2VudGF0aW9uYWw6IHRydWUsXG4gIG5hbWVGcm9tOiBbJ2F1dGhvcicsICdjb250ZW50cyddLFxuICBwcm9oaWJpdGVkUHJvcHM6IFtdLFxuICBwcm9wczoge1xuICAgICdhcmlhLWRpc2FibGVkJzogbnVsbCxcbiAgICAnYXJpYS1leHBhbmRlZCc6IG51bGwsXG4gICAgJ2FyaWEtaGFzcG9wdXAnOiBudWxsLFxuICAgICdhcmlhLXByZXNzZWQnOiBudWxsXG4gIH0sXG4gIHJlbGF0ZWRDb25jZXB0czogW3tcbiAgICBjb25jZXB0OiB7XG4gICAgICBhdHRyaWJ1dGVzOiBbe1xuICAgICAgICBjb25zdHJhaW50czogWydzZXQnXSxcbiAgICAgICAgbmFtZTogJ2FyaWEtcHJlc3NlZCdcbiAgICAgIH0sIHtcbiAgICAgICAgbmFtZTogJ3R5cGUnLFxuICAgICAgICB2YWx1ZTogJ2NoZWNrYm94J1xuICAgICAgfV0sXG4gICAgICBuYW1lOiAnaW5wdXQnXG4gICAgfSxcbiAgICBtb2R1bGU6ICdIVE1MJ1xuICB9LCB7XG4gICAgY29uY2VwdDoge1xuICAgICAgYXR0cmlidXRlczogW3tcbiAgICAgICAgbmFtZTogJ2FyaWEtZXhwYW5kZWQnLFxuICAgICAgICB2YWx1ZTogJ2ZhbHNlJ1xuICAgICAgfV0sXG4gICAgICBuYW1lOiAnc3VtbWFyeSdcbiAgICB9LFxuICAgIG1vZHVsZTogJ0hUTUwnXG4gIH0sIHtcbiAgICBjb25jZXB0OiB7XG4gICAgICBhdHRyaWJ1dGVzOiBbe1xuICAgICAgICBuYW1lOiAnYXJpYS1leHBhbmRlZCcsXG4gICAgICAgIHZhbHVlOiAndHJ1ZSdcbiAgICAgIH1dLFxuICAgICAgY29uc3RyYWludHM6IFsnZGlyZWN0IGRlc2NlbmRhbnQgb2YgZGV0YWlscyBlbGVtZW50IHdpdGggdGhlIG9wZW4gYXR0cmlidXRlIGRlZmluZWQnXSxcbiAgICAgIG5hbWU6ICdzdW1tYXJ5J1xuICAgIH0sXG4gICAgbW9kdWxlOiAnSFRNTCdcbiAgfSwge1xuICAgIGNvbmNlcHQ6IHtcbiAgICAgIGF0dHJpYnV0ZXM6IFt7XG4gICAgICAgIG5hbWU6ICd0eXBlJyxcbiAgICAgICAgdmFsdWU6ICdidXR0b24nXG4gICAgICB9XSxcbiAgICAgIG5hbWU6ICdpbnB1dCdcbiAgICB9LFxuICAgIG1vZHVsZTogJ0hUTUwnXG4gIH0sIHtcbiAgICBjb25jZXB0OiB7XG4gICAgICBhdHRyaWJ1dGVzOiBbe1xuICAgICAgICBuYW1lOiAndHlwZScsXG4gICAgICAgIHZhbHVlOiAnaW1hZ2UnXG4gICAgICB9XSxcbiAgICAgIG5hbWU6ICdpbnB1dCdcbiAgICB9LFxuICAgIG1vZHVsZTogJ0hUTUwnXG4gIH0sIHtcbiAgICBjb25jZXB0OiB7XG4gICAgICBhdHRyaWJ1dGVzOiBbe1xuICAgICAgICBuYW1lOiAndHlwZScsXG4gICAgICAgIHZhbHVlOiAncmVzZXQnXG4gICAgICB9XSxcbiAgICAgIG5hbWU6ICdpbnB1dCdcbiAgICB9LFxuICAgIG1vZHVsZTogJ0hUTUwnXG4gIH0sIHtcbiAgICBjb25jZXB0OiB7XG4gICAgICBhdHRyaWJ1dGVzOiBbe1xuICAgICAgICBuYW1lOiAndHlwZScsXG4gICAgICAgIHZhbHVlOiAnc3VibWl0J1xuICAgICAgfV0sXG4gICAgICBuYW1lOiAnaW5wdXQnXG4gICAgfSxcbiAgICBtb2R1bGU6ICdIVE1MJ1xuICB9LCB7XG4gICAgY29uY2VwdDoge1xuICAgICAgbmFtZTogJ2J1dHRvbidcbiAgICB9LFxuICAgIG1vZHVsZTogJ0hUTUwnXG4gIH0sIHtcbiAgICBjb25jZXB0OiB7XG4gICAgICBuYW1lOiAndHJpZ2dlcidcbiAgICB9LFxuICAgIG1vZHVsZTogJ1hGb3JtcydcbiAgfV0sXG4gIHJlcXVpcmVDb250ZXh0Um9sZTogW10sXG4gIHJlcXVpcmVkQ29udGV4dFJvbGU6IFtdLFxuICByZXF1aXJlZE93bmVkRWxlbWVudHM6IFtdLFxuICByZXF1aXJlZFByb3BzOiB7fSxcbiAgc3VwZXJDbGFzczogW1sncm9sZXR5cGUnLCAnd2lkZ2V0JywgJ2NvbW1hbmQnXV1cbn07XG52YXIgX2RlZmF1bHQgPSBidXR0b25Sb2xlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUN4QixJQUFJQyxVQUFVLEdBQUc7RUFDZkMsUUFBUSxFQUFFLEtBQUs7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