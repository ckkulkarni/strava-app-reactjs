7dbd7ceb00d364effa9af4d326fe65a4
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  within: true,
  queries: true,
  queryHelpers: true,
  getDefaultNormalizer: true,
  getRoles: true,
  logRoles: true,
  isInaccessible: true,
  configure: true,
  getConfig: true
};
Object.defineProperty(exports, "configure", {
  enumerable: true,
  get: function () {
    return _config.configure;
  }
});
Object.defineProperty(exports, "getConfig", {
  enumerable: true,
  get: function () {
    return _config.getConfig;
  }
});
Object.defineProperty(exports, "getDefaultNormalizer", {
  enumerable: true,
  get: function () {
    return _matches.getDefaultNormalizer;
  }
});
Object.defineProperty(exports, "getRoles", {
  enumerable: true,
  get: function () {
    return _roleHelpers.getRoles;
  }
});
Object.defineProperty(exports, "isInaccessible", {
  enumerable: true,
  get: function () {
    return _roleHelpers.isInaccessible;
  }
});
Object.defineProperty(exports, "logRoles", {
  enumerable: true,
  get: function () {
    return _roleHelpers.logRoles;
  }
});
exports.queryHelpers = exports.queries = void 0;
Object.defineProperty(exports, "within", {
  enumerable: true,
  get: function () {
    return _getQueriesForElement.getQueriesForElement;
  }
});
var _getQueriesForElement = require("./get-queries-for-element");
Object.keys(_getQueriesForElement).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _getQueriesForElement[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getQueriesForElement[key];
    }
  });
});
var queries = _interopRequireWildcard(require("./queries"));
exports.queries = queries;
Object.keys(queries).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === queries[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return queries[key];
    }
  });
});
var queryHelpers = _interopRequireWildcard(require("./query-helpers"));
exports.queryHelpers = queryHelpers;
Object.keys(queryHelpers).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === queryHelpers[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return queryHelpers[key];
    }
  });
});
var _waitFor = require("./wait-for");
Object.keys(_waitFor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _waitFor[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _waitFor[key];
    }
  });
});
var _waitForElementToBeRemoved = require("./wait-for-element-to-be-removed");
Object.keys(_waitForElementToBeRemoved).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _waitForElementToBeRemoved[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _waitForElementToBeRemoved[key];
    }
  });
});
var _matches = require("./matches");
var _getNodeText = require("./get-node-text");
Object.keys(_getNodeText).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _getNodeText[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getNodeText[key];
    }
  });
});
var _events = require("./events");
Object.keys(_events).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _events[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _events[key];
    }
  });
});
var _screen = require("./screen");
Object.keys(_screen).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _screen[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _screen[key];
    }
  });
});
var _roleHelpers = require("./role-helpers");
var _prettyDom = require("./pretty-dom");
Object.keys(_prettyDom).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _prettyDom[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _prettyDom[key];
    }
  });
});
var _config = require("./config");
var _suggestions = require("./suggestions");
Object.keys(_suggestions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _suggestions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _suggestions[key];
    }
  });
});
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9leHBvcnROYW1lcyIsIndpdGhpbiIsInF1ZXJpZXMiLCJxdWVyeUhlbHBlcnMiLCJnZXREZWZhdWx0Tm9ybWFsaXplciIsImdldFJvbGVzIiwibG9nUm9sZXMiLCJpc0luYWNjZXNzaWJsZSIsImNvbmZpZ3VyZSIsImdldENvbmZpZyIsImVudW1lcmFibGUiLCJnZXQiLCJfY29uZmlnIiwiX21hdGNoZXMiLCJfcm9sZUhlbHBlcnMiLCJfZ2V0UXVlcmllc0ZvckVsZW1lbnQiLCJnZXRRdWVyaWVzRm9yRWxlbWVudCIsInJlcXVpcmUiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3dhaXRGb3IiLCJfd2FpdEZvckVsZW1lbnRUb0JlUmVtb3ZlZCIsIl9nZXROb2RlVGV4dCIsIl9ldmVudHMiLCJfc2NyZWVuIiwiX3ByZXR0eURvbSIsIl9zdWdnZXN0aW9ucyIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkZXNjIiwic2V0Il0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgX2V4cG9ydE5hbWVzID0ge1xuICB3aXRoaW46IHRydWUsXG4gIHF1ZXJpZXM6IHRydWUsXG4gIHF1ZXJ5SGVscGVyczogdHJ1ZSxcbiAgZ2V0RGVmYXVsdE5vcm1hbGl6ZXI6IHRydWUsXG4gIGdldFJvbGVzOiB0cnVlLFxuICBsb2dSb2xlczogdHJ1ZSxcbiAgaXNJbmFjY2Vzc2libGU6IHRydWUsXG4gIGNvbmZpZ3VyZTogdHJ1ZSxcbiAgZ2V0Q29uZmlnOiB0cnVlXG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29uZmlndXJlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9jb25maWcuY29uZmlndXJlO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldENvbmZpZ1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfY29uZmlnLmdldENvbmZpZztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXREZWZhdWx0Tm9ybWFsaXplclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfbWF0Y2hlcy5nZXREZWZhdWx0Tm9ybWFsaXplcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRSb2xlc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfcm9sZUhlbHBlcnMuZ2V0Um9sZXM7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNJbmFjY2Vzc2libGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3JvbGVIZWxwZXJzLmlzSW5hY2Nlc3NpYmxlO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImxvZ1JvbGVzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9yb2xlSGVscGVycy5sb2dSb2xlcztcbiAgfVxufSk7XG5leHBvcnRzLnF1ZXJ5SGVscGVycyA9IGV4cG9ydHMucXVlcmllcyA9IHZvaWQgMDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIndpdGhpblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZ2V0UXVlcmllc0ZvckVsZW1lbnQuZ2V0UXVlcmllc0ZvckVsZW1lbnQ7XG4gIH1cbn0pO1xudmFyIF9nZXRRdWVyaWVzRm9yRWxlbWVudCA9IHJlcXVpcmUoXCIuL2dldC1xdWVyaWVzLWZvci1lbGVtZW50XCIpO1xuT2JqZWN0LmtleXMoX2dldFF1ZXJpZXNGb3JFbGVtZW50KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBpZiAoa2V5IGluIGV4cG9ydHMgJiYgZXhwb3J0c1trZXldID09PSBfZ2V0UXVlcmllc0ZvckVsZW1lbnRba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfZ2V0UXVlcmllc0ZvckVsZW1lbnRba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG52YXIgcXVlcmllcyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL3F1ZXJpZXNcIikpO1xuZXhwb3J0cy5xdWVyaWVzID0gcXVlcmllcztcbk9iamVjdC5rZXlzKHF1ZXJpZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IHF1ZXJpZXNba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBxdWVyaWVzW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xudmFyIHF1ZXJ5SGVscGVycyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL3F1ZXJ5LWhlbHBlcnNcIikpO1xuZXhwb3J0cy5xdWVyeUhlbHBlcnMgPSBxdWVyeUhlbHBlcnM7XG5PYmplY3Qua2V5cyhxdWVyeUhlbHBlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IHF1ZXJ5SGVscGVyc1trZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHF1ZXJ5SGVscGVyc1trZXldO1xuICAgIH1cbiAgfSk7XG59KTtcbnZhciBfd2FpdEZvciA9IHJlcXVpcmUoXCIuL3dhaXQtZm9yXCIpO1xuT2JqZWN0LmtleXMoX3dhaXRGb3IpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF93YWl0Rm9yW2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3dhaXRGb3Jba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG52YXIgX3dhaXRGb3JFbGVtZW50VG9CZVJlbW92ZWQgPSByZXF1aXJlKFwiLi93YWl0LWZvci1lbGVtZW50LXRvLWJlLXJlbW92ZWRcIik7XG5PYmplY3Qua2V5cyhfd2FpdEZvckVsZW1lbnRUb0JlUmVtb3ZlZCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX3dhaXRGb3JFbGVtZW50VG9CZVJlbW92ZWRba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfd2FpdEZvckVsZW1lbnRUb0JlUmVtb3ZlZFtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcbnZhciBfbWF0Y2hlcyA9IHJlcXVpcmUoXCIuL21hdGNoZXNcIik7XG52YXIgX2dldE5vZGVUZXh0ID0gcmVxdWlyZShcIi4vZ2V0LW5vZGUtdGV4dFwiKTtcbk9iamVjdC5rZXlzKF9nZXROb2RlVGV4dCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX2dldE5vZGVUZXh0W2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX2dldE5vZGVUZXh0W2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xudmFyIF9ldmVudHMgPSByZXF1aXJlKFwiLi9ldmVudHNcIik7XG5PYmplY3Qua2V5cyhfZXZlbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBpZiAoa2V5IGluIGV4cG9ydHMgJiYgZXhwb3J0c1trZXldID09PSBfZXZlbnRzW2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX2V2ZW50c1trZXldO1xuICAgIH1cbiAgfSk7XG59KTtcbnZhciBfc2NyZWVuID0gcmVxdWlyZShcIi4vc2NyZWVuXCIpO1xuT2JqZWN0LmtleXMoX3NjcmVlbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX3NjcmVlbltrZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9zY3JlZW5ba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG52YXIgX3JvbGVIZWxwZXJzID0gcmVxdWlyZShcIi4vcm9sZS1oZWxwZXJzXCIpO1xudmFyIF9wcmV0dHlEb20gPSByZXF1aXJlKFwiLi9wcmV0dHktZG9tXCIpO1xuT2JqZWN0LmtleXMoX3ByZXR0eURvbSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX3ByZXR0eURvbVtrZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9wcmV0dHlEb21ba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG52YXIgX2NvbmZpZyA9IHJlcXVpcmUoXCIuL2NvbmZpZ1wiKTtcbnZhciBfc3VnZ2VzdGlvbnMgPSByZXF1aXJlKFwiLi9zdWdnZXN0aW9uc1wiKTtcbk9iamVjdC5rZXlzKF9zdWdnZXN0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX3N1Z2dlc3Rpb25zW2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3N1Z2dlc3Rpb25zW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlQmFiZWxJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgdmFyIGNhY2hlTm9kZUludGVyb3AgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIChub2RlSW50ZXJvcCkgeyByZXR1cm4gbm9kZUludGVyb3AgPyBjYWNoZU5vZGVJbnRlcm9wIDogY2FjaGVCYWJlbEludGVyb3A7IH0pKG5vZGVJbnRlcm9wKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqLCBub2RlSW50ZXJvcCkgeyBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0YsSUFBSUMsWUFBWSxHQUFHO0VBQ2pCQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxPQUFPLEVBQUUsSUFBSTtFQUNiQyxZQUFZLEVBQUUsSUFBSTtFQUNsQkMsb0JBQW9CLEVBQUUsSUFBSTtFQUMxQkMsUUFBUSxFQUFFLElBQUk7RUFDZEMsUUFBUSxFQUFFLElBQUk7RUFDZEMsY0FBYyxFQUFFLElBQUk7RUFDcEJDLFNBQVMsRUFBRSxJQUFJO0VBQ2ZDLFNBQVMsRUFBRTtBQUNiLENBQUM7QUFDRGIsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxXQUFXLEVBQUU7RUFDMUNZLFVBQVUsRUFBRSxJQUFJO0VBQ2hCQyxHQUFHLEVBQUUsU0FBQUEsQ0FBQSxFQUFZO0lBQ2YsT0FBT0MsT0FBTyxDQUFDSixTQUFTO0VBQzFCO0FBQ0YsQ0FBQyxDQUFDO0FBQ0ZaLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsV0FBVyxFQUFFO0VBQzFDWSxVQUFVLEVBQUUsSUFBSTtFQUNoQkMsR0FBRyxFQUFFLFNBQUFBLENBQUEsRUFBWTtJQUNmLE9BQU9DLE9BQU8sQ0FBQ0gsU0FBUztFQUMxQjtBQUNGLENBQUMsQ0FBQztBQUNGYixNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFO0VBQ3JEWSxVQUFVLEVBQUUsSUFBSTtFQUNoQkMsR0FBRyxFQUFFLFNBQUFBLENBQUEsRUFBWTtJQUNmLE9BQU9FLFFBQVEsQ0FBQ1Qsb0JBQW9CO0VBQ3RDO0FBQ0YsQ0FBQyxDQUFDO0FBQ0ZSLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsVUFBVSxFQUFFO0VBQ3pDWSxVQUFVLEVBQUUsSUFBSTtFQUNoQkMsR0FBRyxFQUFFLFNBQUFBLENBQUEsRUFBWTtJQUNmLE9BQU9HLFlBQVksQ0FBQ1QsUUFBUTtFQUM5QjtBQUNGLENBQUMsQ0FBQztBQUNGVCxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFO0VBQy9DWSxVQUFVLEVBQUUsSUFBSTtFQUNoQkMsR0FBRyxFQUFFLFNBQUFBLENBQUEsRUFBWTtJQUNmLE9BQU9HLFlBQVksQ0FBQ1AsY0FBYztFQUNwQztBQUNGLENBQUMsQ0FBQztBQUNGWCxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFVBQVUsRUFBRTtFQUN6Q1ksVUFBVSxFQUFFLElBQUk7RUFDaEJDLEdBQUcsRUFBRSxTQUFBQSxDQUFBLEVBQVk7SUFDZixPQUFPRyxZQUFZLENBQUNSLFFBQVE7RUFDOUI7QUFDRixDQUFDLENBQUM7QUFDRlIsT0FBTyxDQUFDSyxZQUFZLEdBQUdMLE9BQU8sQ0FBQ0ksT0FBTyxHQUFHLEtBQUssQ0FBQztBQUMvQ04sTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxRQUFRLEVBQUU7RUFDdkNZLFVBQVUsRUFBRSxJQUFJO0VBQ2hCQyxHQUFHLEVBQUUsU0FBQUEsQ0FBQSxFQUFZO0lBQ2YsT0FBT0kscUJBQXFCLENBQUNDLG9CQUFvQjtFQUNuRDtBQUNGLENBQUMsQ0FBQztBQUNGLElBQUlELHFCQUFxQixHQUFHRSxPQUFPLENBQUMsMkJBQTJCLENBQUM7QUFDaEVyQixNQUFNLENBQUNzQixJQUFJLENBQUNILHFCQUFxQixDQUFDLENBQUNJLE9BQU8sQ0FBQyxVQUFVQyxHQUFHLEVBQUU7RUFDeEQsSUFBSUEsR0FBRyxLQUFLLFNBQVMsSUFBSUEsR0FBRyxLQUFLLFlBQVksRUFBRTtFQUMvQyxJQUFJeEIsTUFBTSxDQUFDeUIsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ3ZCLFlBQVksRUFBRW9CLEdBQUcsQ0FBQyxFQUFFO0VBQzdELElBQUlBLEdBQUcsSUFBSXRCLE9BQU8sSUFBSUEsT0FBTyxDQUFDc0IsR0FBRyxDQUFDLEtBQUtMLHFCQUFxQixDQUFDSyxHQUFHLENBQUMsRUFBRTtFQUNuRXhCLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUVzQixHQUFHLEVBQUU7SUFDbENWLFVBQVUsRUFBRSxJQUFJO0lBQ2hCQyxHQUFHLEVBQUUsU0FBQUEsQ0FBQSxFQUFZO01BQ2YsT0FBT0kscUJBQXFCLENBQUNLLEdBQUcsQ0FBQztJQUNuQztFQUNGLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUNGLElBQUlsQixPQUFPLEdBQUdzQix1QkFBdUIsQ0FBQ1AsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzNEbkIsT0FBTyxDQUFDSSxPQUFPLEdBQUdBLE9BQU87QUFDekJOLE1BQU0sQ0FBQ3NCLElBQUksQ0FBQ2hCLE9BQU8sQ0FBQyxDQUFDaUIsT0FBTyxDQUFDLFVBQVVDLEdBQUcsRUFBRTtFQUMxQyxJQUFJQSxHQUFHLEtBQUssU0FBUyxJQUFJQSxHQUFHLEtBQUssWUFBWSxFQUFFO0VBQy9DLElBQUl4QixNQUFNLENBQUN5QixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDdkIsWUFBWSxFQUFFb0IsR0FBRyxDQUFDLEVBQUU7RUFDN0QsSUFBSUEsR0FBRyxJQUFJdEIsT0FBTyxJQUFJQSxPQUFPLENBQUNzQixHQUFHLENBQUMsS0FBS2xCLE9BQU8sQ0FBQ2tCLEdBQUcsQ0FBQyxFQUFFO0VBQ3JEeEIsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRXNCLEdBQUcsRUFBRTtJQUNsQ1YsVUFBVSxFQUFFLElBQUk7SUFDaEJDLEdBQUcsRUFBRSxTQUFBQSxDQUFBLEVBQVk7TUFDZixPQUFPVCxPQUFPLENBQUNrQixHQUFHLENBQUM7SUFDckI7RUFDRixDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFDRixJQUFJakIsWUFBWSxHQUFHcUIsdUJBQXVCLENBQUNQLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3RFbkIsT0FBTyxDQUFDSyxZQUFZLEdBQUdBLFlBQVk7QUFDbkNQLE1BQU0sQ0FBQ3NCLElBQUksQ0FBQ2YsWUFBWSxDQUFDLENBQUNnQixPQUFPLENBQUMsVUFBVUMsR0FBRyxFQUFFO0VBQy9DLElBQUlBLEdBQUcsS0FBSyxTQUFTLElBQUlBLEdBQUcsS0FBSyxZQUFZLEVBQUU7RUFDL0MsSUFBSXhCLE1BQU0sQ0FBQ3lCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUN2QixZQUFZLEVBQUVvQixHQUFHLENBQUMsRUFBRTtFQUM3RCxJQUFJQSxHQUFHLElBQUl0QixPQUFPLElBQUlBLE9BQU8sQ0FBQ3NCLEdBQUcsQ0FBQyxLQUFLakIsWUFBWSxDQUFDaUIsR0FBRyxDQUFDLEVBQUU7RUFDMUR4QixNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFc0IsR0FBRyxFQUFFO0lBQ2xDVixVQUFVLEVBQUUsSUFBSTtJQUNoQkMsR0FBRyxFQUFFLFNBQUFBLENBQUEsRUFBWTtNQUNmLE9BQU9SLFlBQVksQ0FBQ2lCLEdBQUcsQ0FBQztJQUMxQjtFQUNGLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUNGLElBQUlLLFFBQVEsR0FBR1IsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUNwQ3JCLE1BQU0sQ0FBQ3NCLElBQUksQ0FBQ08sUUFBUSxDQUFDLENBQUNOLE9BQU8sQ0FBQyxVQUFVQyxHQUFHLEVBQUU7RUFDM0MsSUFBSUEsR0FBRyxLQUFLLFNBQVMsSUFBSUEsR0FBRyxLQUFLLFlBQVksRUFBRTtFQUMvQyxJQUFJeEIsTUFBTSxDQUFDeUIsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ3ZCLFlBQVksRUFBRW9CLEdBQUcsQ0FBQyxFQUFFO0VBQzdELElBQUlBLEdBQUcsSUFBSXRCLE9BQU8sSUFBSUEsT0FBTyxDQUFDc0IsR0FBRyxDQUFDLEtBQUtLLFFBQVEsQ0FBQ0wsR0FBRyxDQUFDLEVBQUU7RUFDdER4QixNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFc0IsR0FBRyxFQUFFO0lBQ2xDVixVQUFVLEVBQUUsSUFBSTtJQUNoQkMsR0FBRyxFQUFFLFNBQUFBLENBQUEsRUFBWTtNQUNmLE9BQU9jLFFBQVEsQ0FBQ0wsR0FBRyxDQUFDO0lBQ3RCO0VBQ0YsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBQ0YsSUFBSU0sMEJBQTBCLEdBQUdULE9BQU8sQ0FBQyxrQ0FBa0MsQ0FBQztBQUM1RXJCLE1BQU0sQ0FBQ3NCLElBQUksQ0FBQ1EsMEJBQTBCLENBQUMsQ0FBQ1AsT0FBTyxDQUFDLFVBQVVDLEdBQUcsRUFBRTtFQUM3RCxJQUFJQSxHQUFHLEtBQUssU0FBUyxJQUFJQSxHQUFHLEtBQUssWUFBWSxFQUFFO0VBQy9DLElBQUl4QixNQUFNLENBQUN5QixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDdkIsWUFBWSxFQUFFb0IsR0FBRyxDQUFDLEVBQUU7RUFDN0QsSUFBSUEsR0FBRyxJQUFJdEIsT0FBTyxJQUFJQSxPQUFPLENBQUNzQixHQUFHLENBQUMsS0FBS00sMEJBQTBCLENBQUNOLEdBQUcsQ0FBQyxFQUFFO0VBQ3hFeEIsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRXNCLEdBQUcsRUFBRTtJQUNsQ1YsVUFBVSxFQUFFLElBQUk7SUFDaEJDLEdBQUcsRUFBRSxTQUFBQSxDQUFBLEVBQVk7TUFDZixPQUFPZSwwQkFBMEIsQ0FBQ04sR0FBRyxDQUFDO0lBQ3hDO0VBQ0YsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBQ0YsSUFBSVAsUUFBUSxHQUFHSSxPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ25DLElBQUlVLFlBQVksR0FBR1YsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBQzdDckIsTUFBTSxDQUFDc0IsSUFBSSxDQUFDUyxZQUFZLENBQUMsQ0FBQ1IsT0FBTyxDQUFDLFVBQVVDLEdBQUcsRUFBRTtFQUMvQyxJQUFJQSxHQUFHLEtBQUssU0FBUyxJQUFJQSxHQUFHLEtBQUssWUFBWSxFQUFFO0VBQy9DLElBQUl4QixNQUFNLENBQUN5QixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDdkIsWUFBWSxFQUFFb0IsR0FBRyxDQUFDLEVBQUU7RUFDN0QsSUFBSUEsR0FBRyxJQUFJdEIsT0FBTyxJQUFJQSxPQUFPLENBQUNzQixHQUFHLENBQUMsS0FBS08sWUFBWSxDQUFDUCxHQUFHLENBQUMsRUFBRTtFQUMxRHhCLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUVzQixHQUFHLEVBQUU7SUFDbENWLFVBQVUsRUFBRSxJQUFJO0lBQ2hCQyxHQUFHLEVBQUUsU0FBQUEsQ0FBQSxFQUFZO01BQ2YsT0FBT2dCLFlBQVksQ0FBQ1AsR0FBRyxDQUFDO0lBQzFCO0VBQ0YsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBQ0YsSUFBSVEsT0FBTyxHQUFHWCxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ2pDckIsTUFBTSxDQUFDc0IsSUFBSSxDQUFDVSxPQUFPLENBQUMsQ0FBQ1QsT0FBTyxDQUFDLFVBQVVDLEdBQUcsRUFBRTtFQUMxQyxJQUFJQSxHQUFHLEtBQUssU0FBUyxJQUFJQSxHQUFHLEtBQUssWUFBWSxFQUFFO0VBQy9DLElBQUl4QixNQUFNLENBQUN5QixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDdkIsWUFBWSxFQUFFb0IsR0FBRyxDQUFDLEVBQUU7RUFDN0QsSUFBSUEsR0FBRyxJQUFJdEIsT0FBTyxJQUFJQSxPQUFPLENBQUNzQixHQUFHLENBQUMsS0FBS1EsT0FBTyxDQUFDUixHQUFHLENBQUMsRUFBRTtFQUNyRHhCLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUVzQixHQUFHLEVBQUU7SUFDbENWLFVBQVUsRUFBRSxJQUFJO0lBQ2hCQyxHQUFHLEVBQUUsU0FBQUEsQ0FBQSxFQUFZO01BQ2YsT0FBT2lCLE9BQU8sQ0FBQ1IsR0FBRyxDQUFDO0lBQ3JCO0VBQ0YsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBQ0YsSUFBSVMsT0FBTyxHQUFHWixPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ2pDckIsTUFBTSxDQUFDc0IsSUFBSSxDQUFDVyxPQUFPLENBQUMsQ0FBQ1YsT0FBTyxDQUFDLFVBQVVDLEdBQUcsRUFBRTtFQUMxQyxJQUFJQSxHQUFHLEtBQUssU0FBUyxJQUFJQSxHQUFHLEtBQUssWUFBWSxFQUFFO0VBQy9DLElBQUl4QixNQUFNLENBQUN5QixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDdkIsWUFBWSxFQUFFb0IsR0FBRyxDQUFDLEVBQUU7RUFDN0QsSUFBSUEsR0FBRyxJQUFJdEIsT0FBTyxJQUFJQSxPQUFPLENBQUNzQixHQUFHLENBQUMsS0FBS1MsT0FBTyxDQUFDVCxHQUFHLENBQUMsRUFBRTtFQUNyRHhCLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUVzQixHQUFHLEVBQUU7SUFDbENWLFVBQVUsRUFBRSxJQUFJO0lBQ2hCQyxHQUFHLEVBQUUsU0FBQUEsQ0FBQSxFQUFZO01BQ2YsT0FBT2tCLE9BQU8sQ0FBQ1QsR0FBRyxDQUFDO0lBQ3JCO0VBQ0YsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBQ0YsSUFBSU4sWUFBWSxHQUFHRyxPQUFPLENBQUMsZ0JBQWdCLENBQUM7QUFDNUMsSUFBSWEsVUFBVSxHQUFHYixPQUFPLENBQUMsY0FBYyxDQUFDO0FBQ3hDckIsTUFBTSxDQUFDc0IsSUFBSSxDQUFDWSxVQUFVLENBQUMsQ0FBQ1gsT0FBTyxDQUFDLFVBQVVDLEdBQUcsRUFBRTtFQUM3QyxJQUFJQSxHQUFHLEtBQUssU0FBUyxJQUFJQSxHQUFHLEtBQUssWUFBWSxFQUFFO0VBQy9DLElBQUl4QixNQUFNLENBQUN5QixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDdkIsWUFBWSxFQUFFb0IsR0FBRyxDQUFDLEVBQUU7RUFDN0QsSUFBSUEsR0FBRyxJQUFJdEIsT0FBTyxJQUFJQSxPQUFPLENBQUNzQixHQUFHLENBQUMsS0FBS1UsVUFBVSxDQUFDVixHQUFHLENBQUMsRUFBRTtFQUN4RHhCLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUVzQixHQUFHLEVBQUU7SUFDbENWLFVBQVUsRUFBRSxJQUFJO0lBQ2hCQyxHQUFHLEVBQUUsU0FBQUEsQ0FBQSxFQUFZO01BQ2YsT0FBT21CLFVBQVUsQ0FBQ1YsR0FBRyxDQUFDO0lBQ3hCO0VBQ0YsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBQ0YsSUFBSVIsT0FBTyxHQUFHSyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ2pDLElBQUljLFlBQVksR0FBR2QsT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUMzQ3JCLE1BQU0sQ0FBQ3NCLElBQUksQ0FBQ2EsWUFBWSxDQUFDLENBQUNaLE9BQU8sQ0FBQyxVQUFVQyxHQUFHLEVBQUU7RUFDL0MsSUFBSUEsR0FBRyxLQUFLLFNBQVMsSUFBSUEsR0FBRyxLQUFLLFlBQVksRUFBRTtFQUMvQyxJQUFJeEIsTUFBTSxDQUFDeUIsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ3ZCLFlBQVksRUFBRW9CLEdBQUcsQ0FBQyxFQUFFO0VBQzdELElBQUlBLEdBQUcsSUFBSXRCLE9BQU8sSUFBSUEsT0FBTyxDQUFDc0IsR0FBRyxDQUFDLEtBQUtXLFlBQVksQ0FBQ1gsR0FBRyxDQUFDLEVBQUU7RUFDMUR4QixNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFc0IsR0FBRyxFQUFFO0lBQ2xDVixVQUFVLEVBQUUsSUFBSTtJQUNoQkMsR0FBRyxFQUFFLFNBQUFBLENBQUEsRUFBWTtNQUNmLE9BQU9vQixZQUFZLENBQUNYLEdBQUcsQ0FBQztJQUMxQjtFQUNGLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUNGLFNBQVNZLHdCQUF3QkEsQ0FBQ0MsV0FBVyxFQUFFO0VBQUUsSUFBSSxPQUFPQyxPQUFPLEtBQUssVUFBVSxFQUFFLE9BQU8sSUFBSTtFQUFFLElBQUlDLGlCQUFpQixHQUFHLElBQUlELE9BQU8sRUFBRTtFQUFFLElBQUlFLGdCQUFnQixHQUFHLElBQUlGLE9BQU8sRUFBRTtFQUFFLE9BQU8sQ0FBQ0Ysd0JBQXdCLEdBQUcsU0FBQUEsQ0FBVUMsV0FBVyxFQUFFO0lBQUUsT0FBT0EsV0FBVyxHQUFHRyxnQkFBZ0IsR0FBR0QsaUJBQWlCO0VBQUUsQ0FBQyxFQUFFRixXQUFXLENBQUM7QUFBRTtBQUN0VCxTQUFTVCx1QkFBdUJBLENBQUNhLEdBQUcsRUFBRUosV0FBVyxFQUFFO0VBQUUsSUFBSSxDQUFDQSxXQUFXLElBQUlJLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFVLEVBQUU7SUFBRSxPQUFPRCxHQUFHO0VBQUU7RUFBRSxJQUFJQSxHQUFHLEtBQUssSUFBSSxJQUFJLE9BQU9BLEdBQUcsS0FBSyxRQUFRLElBQUksT0FBT0EsR0FBRyxLQUFLLFVBQVUsRUFBRTtJQUFFLE9BQU87TUFBRUUsT0FBTyxFQUFFRjtJQUFJLENBQUM7RUFBRTtFQUFFLElBQUlHLEtBQUssR0FBR1Isd0JBQXdCLENBQUNDLFdBQVcsQ0FBQztFQUFFLElBQUlPLEtBQUssSUFBSUEsS0FBSyxDQUFDQyxHQUFHLENBQUNKLEdBQUcsQ0FBQyxFQUFFO0lBQUUsT0FBT0csS0FBSyxDQUFDN0IsR0FBRyxDQUFDMEIsR0FBRyxDQUFDO0VBQUU7RUFBRSxJQUFJSyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0VBQUUsSUFBSUMscUJBQXFCLEdBQUcvQyxNQUFNLENBQUNDLGNBQWMsSUFBSUQsTUFBTSxDQUFDZ0Qsd0JBQXdCO0VBQUUsS0FBSyxJQUFJeEIsR0FBRyxJQUFJaUIsR0FBRyxFQUFFO0lBQUUsSUFBSWpCLEdBQUcsS0FBSyxTQUFTLElBQUl4QixNQUFNLENBQUN5QixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDYyxHQUFHLEVBQUVqQixHQUFHLENBQUMsRUFBRTtNQUFFLElBQUl5QixJQUFJLEdBQUdGLHFCQUFxQixHQUFHL0MsTUFBTSxDQUFDZ0Qsd0JBQXdCLENBQUNQLEdBQUcsRUFBRWpCLEdBQUcsQ0FBQyxHQUFHLElBQUk7TUFBRSxJQUFJeUIsSUFBSSxLQUFLQSxJQUFJLENBQUNsQyxHQUFHLElBQUlrQyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxFQUFFO1FBQUVsRCxNQUFNLENBQUNDLGNBQWMsQ0FBQzZDLE1BQU0sRUFBRXRCLEdBQUcsRUFBRXlCLElBQUksQ0FBQztNQUFFLENBQUMsTUFBTTtRQUFFSCxNQUFNLENBQUN0QixHQUFHLENBQUMsR0FBR2lCLEdBQUcsQ0FBQ2pCLEdBQUcsQ0FBQztNQUFFO0lBQUU7RUFBRTtFQUFFc0IsTUFBTSxDQUFDSCxPQUFPLEdBQUdGLEdBQUc7RUFBRSxJQUFJRyxLQUFLLEVBQUU7SUFBRUEsS0FBSyxDQUFDTSxHQUFHLENBQUNULEdBQUcsRUFBRUssTUFBTSxDQUFDO0VBQUU7RUFBRSxPQUFPQSxNQUFNO0FBQUUifQ==