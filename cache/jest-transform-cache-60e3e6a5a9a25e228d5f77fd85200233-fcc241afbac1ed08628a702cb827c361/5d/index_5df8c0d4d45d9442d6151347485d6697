a798ae7a8f141822028208b8cfd42a68
'use strict';

var keys = require('object-keys');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';
var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;
var isFunction = function (fn) {
  return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};
var hasPropertyDescriptors = require('has-property-descriptors')();
var supportsDescriptors = origDefineProperty && hasPropertyDescriptors;
var defineProperty = function (object, name, value, predicate) {
  if (name in object) {
    if (predicate === true) {
      if (object[name] === value) {
        return;
      }
    } else if (!isFunction(predicate) || !predicate()) {
      return;
    }
  }
  if (supportsDescriptors) {
    origDefineProperty(object, name, {
      configurable: true,
      enumerable: false,
      value: value,
      writable: true
    });
  } else {
    object[name] = value; // eslint-disable-line no-param-reassign
  }
};

var defineProperties = function (object, map) {
  var predicates = arguments.length > 2 ? arguments[2] : {};
  var props = keys(map);
  if (hasSymbols) {
    props = concat.call(props, Object.getOwnPropertySymbols(map));
  }
  for (var i = 0; i < props.length; i += 1) {
    defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
  }
};
defineProperties.supportsDescriptors = !!supportsDescriptors;
module.exports = defineProperties;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJrZXlzIiwicmVxdWlyZSIsImhhc1N5bWJvbHMiLCJTeW1ib2wiLCJ0b1N0ciIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY29uY2F0IiwiQXJyYXkiLCJvcmlnRGVmaW5lUHJvcGVydHkiLCJkZWZpbmVQcm9wZXJ0eSIsImlzRnVuY3Rpb24iLCJmbiIsImNhbGwiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3JzIiwic3VwcG9ydHNEZXNjcmlwdG9ycyIsIm9iamVjdCIsIm5hbWUiLCJ2YWx1ZSIsInByZWRpY2F0ZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImRlZmluZVByb3BlcnRpZXMiLCJtYXAiLCJwcmVkaWNhdGVzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicHJvcHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJpIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGtleXMgPSByZXF1aXJlKCdvYmplY3Qta2V5cycpO1xudmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2woJ2ZvbycpID09PSAnc3ltYm9sJztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBjb25jYXQgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0O1xudmFyIG9yaWdEZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAoZm4pIHtcblx0cmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0ci5jYWxsKGZuKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbnZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzID0gcmVxdWlyZSgnaGFzLXByb3BlcnR5LWRlc2NyaXB0b3JzJykoKTtcblxudmFyIHN1cHBvcnRzRGVzY3JpcHRvcnMgPSBvcmlnRGVmaW5lUHJvcGVydHkgJiYgaGFzUHJvcGVydHlEZXNjcmlwdG9ycztcblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgdmFsdWUsIHByZWRpY2F0ZSkge1xuXHRpZiAobmFtZSBpbiBvYmplY3QpIHtcblx0XHRpZiAocHJlZGljYXRlID09PSB0cnVlKSB7XG5cdFx0XHRpZiAob2JqZWN0W25hbWVdID09PSB2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICghaXNGdW5jdGlvbihwcmVkaWNhdGUpIHx8ICFwcmVkaWNhdGUoKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXHRpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuXHRcdG9yaWdEZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRvYmplY3RbbmFtZV0gPSB2YWx1ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXHR9XG59O1xuXG52YXIgZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIChvYmplY3QsIG1hcCkge1xuXHR2YXIgcHJlZGljYXRlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDoge307XG5cdHZhciBwcm9wcyA9IGtleXMobWFwKTtcblx0aWYgKGhhc1N5bWJvbHMpIHtcblx0XHRwcm9wcyA9IGNvbmNhdC5jYWxsKHByb3BzLCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG1hcCkpO1xuXHR9XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRkZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BzW2ldLCBtYXBbcHJvcHNbaV1dLCBwcmVkaWNhdGVzW3Byb3BzW2ldXSk7XG5cdH1cbn07XG5cbmRlZmluZVByb3BlcnRpZXMuc3VwcG9ydHNEZXNjcmlwdG9ycyA9ICEhc3VwcG9ydHNEZXNjcmlwdG9ycztcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVQcm9wZXJ0aWVzO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLElBQUksR0FBR0MsT0FBTyxDQUFDLGFBQWEsQ0FBQztBQUNqQyxJQUFJQyxVQUFVLEdBQUcsT0FBT0MsTUFBTSxLQUFLLFVBQVUsSUFBSSxPQUFPQSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssUUFBUTtBQUVsRixJQUFJQyxLQUFLLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDQyxRQUFRO0FBQ3JDLElBQUlDLE1BQU0sR0FBR0MsS0FBSyxDQUFDSCxTQUFTLENBQUNFLE1BQU07QUFDbkMsSUFBSUUsa0JBQWtCLEdBQUdMLE1BQU0sQ0FBQ00sY0FBYztBQUU5QyxJQUFJQyxVQUFVLEdBQUcsU0FBQUEsQ0FBVUMsRUFBRSxFQUFFO0VBQzlCLE9BQU8sT0FBT0EsRUFBRSxLQUFLLFVBQVUsSUFBSVQsS0FBSyxDQUFDVSxJQUFJLENBQUNELEVBQUUsQ0FBQyxLQUFLLG1CQUFtQjtBQUMxRSxDQUFDO0FBRUQsSUFBSUUsc0JBQXNCLEdBQUdkLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxFQUFFO0FBRWxFLElBQUllLG1CQUFtQixHQUFHTixrQkFBa0IsSUFBSUssc0JBQXNCO0FBRXRFLElBQUlKLGNBQWMsR0FBRyxTQUFBQSxDQUFVTSxNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxTQUFTLEVBQUU7RUFDOUQsSUFBSUYsSUFBSSxJQUFJRCxNQUFNLEVBQUU7SUFDbkIsSUFBSUcsU0FBUyxLQUFLLElBQUksRUFBRTtNQUN2QixJQUFJSCxNQUFNLENBQUNDLElBQUksQ0FBQyxLQUFLQyxLQUFLLEVBQUU7UUFDM0I7TUFDRDtJQUNELENBQUMsTUFBTSxJQUFJLENBQUNQLFVBQVUsQ0FBQ1EsU0FBUyxDQUFDLElBQUksQ0FBQ0EsU0FBUyxFQUFFLEVBQUU7TUFDbEQ7SUFDRDtFQUNEO0VBQ0EsSUFBSUosbUJBQW1CLEVBQUU7SUFDeEJOLGtCQUFrQixDQUFDTyxNQUFNLEVBQUVDLElBQUksRUFBRTtNQUNoQ0csWUFBWSxFQUFFLElBQUk7TUFDbEJDLFVBQVUsRUFBRSxLQUFLO01BQ2pCSCxLQUFLLEVBQUVBLEtBQUs7TUFDWkksUUFBUSxFQUFFO0lBQ1gsQ0FBQyxDQUFDO0VBQ0gsQ0FBQyxNQUFNO0lBQ05OLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLEdBQUdDLEtBQUssQ0FBQyxDQUFDO0VBQ3ZCO0FBQ0QsQ0FBQzs7QUFFRCxJQUFJSyxnQkFBZ0IsR0FBRyxTQUFBQSxDQUFVUCxNQUFNLEVBQUVRLEdBQUcsRUFBRTtFQUM3QyxJQUFJQyxVQUFVLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBTSxHQUFHLENBQUMsR0FBR0QsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUN6RCxJQUFJRSxLQUFLLEdBQUc3QixJQUFJLENBQUN5QixHQUFHLENBQUM7RUFDckIsSUFBSXZCLFVBQVUsRUFBRTtJQUNmMkIsS0FBSyxHQUFHckIsTUFBTSxDQUFDTSxJQUFJLENBQUNlLEtBQUssRUFBRXhCLE1BQU0sQ0FBQ3lCLHFCQUFxQixDQUFDTCxHQUFHLENBQUMsQ0FBQztFQUM5RDtFQUNBLEtBQUssSUFBSU0sQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHRixLQUFLLENBQUNELE1BQU0sRUFBRUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUN6Q3BCLGNBQWMsQ0FBQ00sTUFBTSxFQUFFWSxLQUFLLENBQUNFLENBQUMsQ0FBQyxFQUFFTixHQUFHLENBQUNJLEtBQUssQ0FBQ0UsQ0FBQyxDQUFDLENBQUMsRUFBRUwsVUFBVSxDQUFDRyxLQUFLLENBQUNFLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDdEU7QUFDRCxDQUFDO0FBRURQLGdCQUFnQixDQUFDUixtQkFBbUIsR0FBRyxDQUFDLENBQUNBLG1CQUFtQjtBQUU1RGdCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHVCxnQkFBZ0IifQ==