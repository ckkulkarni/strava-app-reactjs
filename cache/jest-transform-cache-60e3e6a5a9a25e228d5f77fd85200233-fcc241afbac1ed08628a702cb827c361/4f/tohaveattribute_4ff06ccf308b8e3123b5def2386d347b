b6a1ecc8778bf79dc230aab4cc246da7
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveAttribute = toHaveAttribute;
var _utils = require("./utils");
function printAttribute(stringify, name, value) {
  return value === undefined ? name : `${name}=${stringify(value)}`;
}
function getAttributeComment(stringify, name, value) {
  return value === undefined ? `element.hasAttribute(${stringify(name)})` : `element.getAttribute(${stringify(name)}) === ${stringify(value)}`;
}
function toHaveAttribute(htmlElement, name, expectedValue) {
  (0, _utils.checkHtmlElement)(htmlElement, toHaveAttribute, this);
  const isExpectedValuePresent = expectedValue !== undefined;
  const hasAttribute = htmlElement.hasAttribute(name);
  const receivedValue = htmlElement.getAttribute(name);
  return {
    pass: isExpectedValuePresent ? hasAttribute && this.equals(receivedValue, expectedValue) : hasAttribute,
    message: () => {
      const to = this.isNot ? 'not to' : 'to';
      const receivedAttribute = hasAttribute ? printAttribute(this.utils.stringify, name, receivedValue) : null;
      const matcher = this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveAttribute`, 'element', this.utils.printExpected(name), {
        secondArgument: isExpectedValuePresent ? this.utils.printExpected(expectedValue) : undefined,
        comment: getAttributeComment(this.utils.stringify, name, expectedValue)
      });
      return (0, _utils.getMessage)(this, matcher, `Expected the element ${to} have attribute`, printAttribute(this.utils.stringify, name, expectedValue), 'Received', receivedAttribute);
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvSGF2ZUF0dHJpYnV0ZSIsIl91dGlscyIsInJlcXVpcmUiLCJwcmludEF0dHJpYnV0ZSIsInN0cmluZ2lmeSIsIm5hbWUiLCJ1bmRlZmluZWQiLCJnZXRBdHRyaWJ1dGVDb21tZW50IiwiaHRtbEVsZW1lbnQiLCJleHBlY3RlZFZhbHVlIiwiY2hlY2tIdG1sRWxlbWVudCIsImlzRXhwZWN0ZWRWYWx1ZVByZXNlbnQiLCJoYXNBdHRyaWJ1dGUiLCJyZWNlaXZlZFZhbHVlIiwiZ2V0QXR0cmlidXRlIiwicGFzcyIsImVxdWFscyIsIm1lc3NhZ2UiLCJ0byIsImlzTm90IiwicmVjZWl2ZWRBdHRyaWJ1dGUiLCJ1dGlscyIsIm1hdGNoZXIiLCJtYXRjaGVySGludCIsInByaW50RXhwZWN0ZWQiLCJzZWNvbmRBcmd1bWVudCIsImNvbW1lbnQiLCJnZXRNZXNzYWdlIl0sInNvdXJjZXMiOlsidG8taGF2ZS1hdHRyaWJ1dGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnRvSGF2ZUF0dHJpYnV0ZSA9IHRvSGF2ZUF0dHJpYnV0ZTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBwcmludEF0dHJpYnV0ZShzdHJpbmdpZnksIG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gbmFtZSA6IGAke25hbWV9PSR7c3RyaW5naWZ5KHZhbHVlKX1gO1xufVxuXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGVDb21tZW50KHN0cmluZ2lmeSwgbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyBgZWxlbWVudC5oYXNBdHRyaWJ1dGUoJHtzdHJpbmdpZnkobmFtZSl9KWAgOiBgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJHtzdHJpbmdpZnkobmFtZSl9KSA9PT0gJHtzdHJpbmdpZnkodmFsdWUpfWA7XG59XG5cbmZ1bmN0aW9uIHRvSGF2ZUF0dHJpYnV0ZShodG1sRWxlbWVudCwgbmFtZSwgZXhwZWN0ZWRWYWx1ZSkge1xuICAoMCwgX3V0aWxzLmNoZWNrSHRtbEVsZW1lbnQpKGh0bWxFbGVtZW50LCB0b0hhdmVBdHRyaWJ1dGUsIHRoaXMpO1xuICBjb25zdCBpc0V4cGVjdGVkVmFsdWVQcmVzZW50ID0gZXhwZWN0ZWRWYWx1ZSAhPT0gdW5kZWZpbmVkO1xuICBjb25zdCBoYXNBdHRyaWJ1dGUgPSBodG1sRWxlbWVudC5oYXNBdHRyaWJ1dGUobmFtZSk7XG4gIGNvbnN0IHJlY2VpdmVkVmFsdWUgPSBodG1sRWxlbWVudC5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gIHJldHVybiB7XG4gICAgcGFzczogaXNFeHBlY3RlZFZhbHVlUHJlc2VudCA/IGhhc0F0dHJpYnV0ZSAmJiB0aGlzLmVxdWFscyhyZWNlaXZlZFZhbHVlLCBleHBlY3RlZFZhbHVlKSA6IGhhc0F0dHJpYnV0ZSxcbiAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICBjb25zdCB0byA9IHRoaXMuaXNOb3QgPyAnbm90IHRvJyA6ICd0byc7XG4gICAgICBjb25zdCByZWNlaXZlZEF0dHJpYnV0ZSA9IGhhc0F0dHJpYnV0ZSA/IHByaW50QXR0cmlidXRlKHRoaXMudXRpbHMuc3RyaW5naWZ5LCBuYW1lLCByZWNlaXZlZFZhbHVlKSA6IG51bGw7XG4gICAgICBjb25zdCBtYXRjaGVyID0gdGhpcy51dGlscy5tYXRjaGVySGludChgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvSGF2ZUF0dHJpYnV0ZWAsICdlbGVtZW50JywgdGhpcy51dGlscy5wcmludEV4cGVjdGVkKG5hbWUpLCB7XG4gICAgICAgIHNlY29uZEFyZ3VtZW50OiBpc0V4cGVjdGVkVmFsdWVQcmVzZW50ID8gdGhpcy51dGlscy5wcmludEV4cGVjdGVkKGV4cGVjdGVkVmFsdWUpIDogdW5kZWZpbmVkLFxuICAgICAgICBjb21tZW50OiBnZXRBdHRyaWJ1dGVDb21tZW50KHRoaXMudXRpbHMuc3RyaW5naWZ5LCBuYW1lLCBleHBlY3RlZFZhbHVlKVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gKDAsIF91dGlscy5nZXRNZXNzYWdlKSh0aGlzLCBtYXRjaGVyLCBgRXhwZWN0ZWQgdGhlIGVsZW1lbnQgJHt0b30gaGF2ZSBhdHRyaWJ1dGVgLCBwcmludEF0dHJpYnV0ZSh0aGlzLnV0aWxzLnN0cmluZ2lmeSwgbmFtZSwgZXhwZWN0ZWRWYWx1ZSksICdSZWNlaXZlZCcsIHJlY2VpdmVkQXR0cmlidXRlKTtcbiAgICB9XG4gIH07XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsZUFBZSxHQUFHQSxlQUFlO0FBRXpDLElBQUlDLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUUvQixTQUFTQyxjQUFjQSxDQUFDQyxTQUFTLEVBQUVDLElBQUksRUFBRU4sS0FBSyxFQUFFO0VBQzlDLE9BQU9BLEtBQUssS0FBS08sU0FBUyxHQUFHRCxJQUFJLEdBQUksR0FBRUEsSUFBSyxJQUFHRCxTQUFTLENBQUNMLEtBQUssQ0FBRSxFQUFDO0FBQ25FO0FBRUEsU0FBU1EsbUJBQW1CQSxDQUFDSCxTQUFTLEVBQUVDLElBQUksRUFBRU4sS0FBSyxFQUFFO0VBQ25ELE9BQU9BLEtBQUssS0FBS08sU0FBUyxHQUFJLHdCQUF1QkYsU0FBUyxDQUFDQyxJQUFJLENBQUUsR0FBRSxHQUFJLHdCQUF1QkQsU0FBUyxDQUFDQyxJQUFJLENBQUUsU0FBUUQsU0FBUyxDQUFDTCxLQUFLLENBQUUsRUFBQztBQUM5STtBQUVBLFNBQVNDLGVBQWVBLENBQUNRLFdBQVcsRUFBRUgsSUFBSSxFQUFFSSxhQUFhLEVBQUU7RUFDekQsQ0FBQyxDQUFDLEVBQUVSLE1BQU0sQ0FBQ1MsZ0JBQWdCLEVBQUVGLFdBQVcsRUFBRVIsZUFBZSxFQUFFLElBQUksQ0FBQztFQUNoRSxNQUFNVyxzQkFBc0IsR0FBR0YsYUFBYSxLQUFLSCxTQUFTO0VBQzFELE1BQU1NLFlBQVksR0FBR0osV0FBVyxDQUFDSSxZQUFZLENBQUNQLElBQUksQ0FBQztFQUNuRCxNQUFNUSxhQUFhLEdBQUdMLFdBQVcsQ0FBQ00sWUFBWSxDQUFDVCxJQUFJLENBQUM7RUFDcEQsT0FBTztJQUNMVSxJQUFJLEVBQUVKLHNCQUFzQixHQUFHQyxZQUFZLElBQUksSUFBSSxDQUFDSSxNQUFNLENBQUNILGFBQWEsRUFBRUosYUFBYSxDQUFDLEdBQUdHLFlBQVk7SUFDdkdLLE9BQU8sRUFBRUEsQ0FBQSxLQUFNO01BQ2IsTUFBTUMsRUFBRSxHQUFHLElBQUksQ0FBQ0MsS0FBSyxHQUFHLFFBQVEsR0FBRyxJQUFJO01BQ3ZDLE1BQU1DLGlCQUFpQixHQUFHUixZQUFZLEdBQUdULGNBQWMsQ0FBQyxJQUFJLENBQUNrQixLQUFLLENBQUNqQixTQUFTLEVBQUVDLElBQUksRUFBRVEsYUFBYSxDQUFDLEdBQUcsSUFBSTtNQUN6RyxNQUFNUyxPQUFPLEdBQUcsSUFBSSxDQUFDRCxLQUFLLENBQUNFLFdBQVcsQ0FBRSxHQUFFLElBQUksQ0FBQ0osS0FBSyxHQUFHLE1BQU0sR0FBRyxFQUFHLGtCQUFpQixFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUNFLEtBQUssQ0FBQ0csYUFBYSxDQUFDbkIsSUFBSSxDQUFDLEVBQUU7UUFDL0hvQixjQUFjLEVBQUVkLHNCQUFzQixHQUFHLElBQUksQ0FBQ1UsS0FBSyxDQUFDRyxhQUFhLENBQUNmLGFBQWEsQ0FBQyxHQUFHSCxTQUFTO1FBQzVGb0IsT0FBTyxFQUFFbkIsbUJBQW1CLENBQUMsSUFBSSxDQUFDYyxLQUFLLENBQUNqQixTQUFTLEVBQUVDLElBQUksRUFBRUksYUFBYTtNQUN4RSxDQUFDLENBQUM7TUFDRixPQUFPLENBQUMsQ0FBQyxFQUFFUixNQUFNLENBQUMwQixVQUFVLEVBQUUsSUFBSSxFQUFFTCxPQUFPLEVBQUcsd0JBQXVCSixFQUFHLGlCQUFnQixFQUFFZixjQUFjLENBQUMsSUFBSSxDQUFDa0IsS0FBSyxDQUFDakIsU0FBUyxFQUFFQyxJQUFJLEVBQUVJLGFBQWEsQ0FBQyxFQUFFLFVBQVUsRUFBRVcsaUJBQWlCLENBQUM7SUFDckw7RUFDRixDQUFDO0FBQ0gifQ==