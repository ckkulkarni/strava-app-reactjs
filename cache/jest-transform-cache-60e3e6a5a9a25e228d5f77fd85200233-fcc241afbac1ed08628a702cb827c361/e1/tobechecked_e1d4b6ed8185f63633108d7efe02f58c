75655b83d8b4e7327c55278a261e53ad
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toBeChecked = toBeChecked;
var _ariaQuery = require("aria-query");
var _utils = require("./utils");
function toBeChecked(element) {
  (0, _utils.checkHtmlElement)(element, toBeChecked, this);
  const isValidInput = () => {
    return element.tagName.toLowerCase() === 'input' && ['checkbox', 'radio'].includes(element.type);
  };
  const isValidAriaElement = () => {
    return roleSupportsChecked(element.getAttribute('role')) && ['true', 'false'].includes(element.getAttribute('aria-checked'));
  };
  if (!isValidInput() && !isValidAriaElement()) {
    return {
      pass: false,
      message: () => `only inputs with type="checkbox" or type="radio" or elements with ${supportedRolesSentence()} and a valid aria-checked attribute can be used with .toBeChecked(). Use .toHaveValue() instead`
    };
  }
  const isChecked = () => {
    if (isValidInput()) return element.checked;
    return element.getAttribute('aria-checked') === 'true';
  };
  return {
    pass: isChecked(),
    message: () => {
      const is = isChecked() ? 'is' : 'is not';
      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeChecked`, 'element', ''), '', `Received element ${is} checked:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\n');
    }
  };
}
function supportedRolesSentence() {
  return (0, _utils.toSentence)(supportedRoles().map(role => `role="${role}"`), {
    lastWordConnector: ' or '
  });
}
function supportedRoles() {
  return _ariaQuery.roles.keys().filter(roleSupportsChecked);
}
function roleSupportsChecked(role) {
  var _roles$get;
  return ((_roles$get = _ariaQuery.roles.get(role)) == null ? void 0 : _roles$get.props['aria-checked']) !== undefined;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvQmVDaGVja2VkIiwiX2FyaWFRdWVyeSIsInJlcXVpcmUiLCJfdXRpbHMiLCJlbGVtZW50IiwiY2hlY2tIdG1sRWxlbWVudCIsImlzVmFsaWRJbnB1dCIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwidHlwZSIsImlzVmFsaWRBcmlhRWxlbWVudCIsInJvbGVTdXBwb3J0c0NoZWNrZWQiLCJnZXRBdHRyaWJ1dGUiLCJwYXNzIiwibWVzc2FnZSIsInN1cHBvcnRlZFJvbGVzU2VudGVuY2UiLCJpc0NoZWNrZWQiLCJjaGVja2VkIiwiaXMiLCJ1dGlscyIsIm1hdGNoZXJIaW50IiwiaXNOb3QiLCJwcmludFJlY2VpdmVkIiwiY2xvbmVOb2RlIiwiam9pbiIsInRvU2VudGVuY2UiLCJzdXBwb3J0ZWRSb2xlcyIsIm1hcCIsInJvbGUiLCJsYXN0V29yZENvbm5lY3RvciIsInJvbGVzIiwia2V5cyIsImZpbHRlciIsIl9yb2xlcyRnZXQiLCJnZXQiLCJwcm9wcyIsInVuZGVmaW5lZCJdLCJzb3VyY2VzIjpbInRvLWJlLWNoZWNrZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnRvQmVDaGVja2VkID0gdG9CZUNoZWNrZWQ7XG5cbnZhciBfYXJpYVF1ZXJ5ID0gcmVxdWlyZShcImFyaWEtcXVlcnlcIik7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxuZnVuY3Rpb24gdG9CZUNoZWNrZWQoZWxlbWVudCkge1xuICAoMCwgX3V0aWxzLmNoZWNrSHRtbEVsZW1lbnQpKGVsZW1lbnQsIHRvQmVDaGVja2VkLCB0aGlzKTtcblxuICBjb25zdCBpc1ZhbGlkSW5wdXQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnICYmIFsnY2hlY2tib3gnLCAncmFkaW8nXS5pbmNsdWRlcyhlbGVtZW50LnR5cGUpO1xuICB9O1xuXG4gIGNvbnN0IGlzVmFsaWRBcmlhRWxlbWVudCA9ICgpID0+IHtcbiAgICByZXR1cm4gcm9sZVN1cHBvcnRzQ2hlY2tlZChlbGVtZW50LmdldEF0dHJpYnV0ZSgncm9sZScpKSAmJiBbJ3RydWUnLCAnZmFsc2UnXS5pbmNsdWRlcyhlbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1jaGVja2VkJykpO1xuICB9O1xuXG4gIGlmICghaXNWYWxpZElucHV0KCkgJiYgIWlzVmFsaWRBcmlhRWxlbWVudCgpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhc3M6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogKCkgPT4gYG9ubHkgaW5wdXRzIHdpdGggdHlwZT1cImNoZWNrYm94XCIgb3IgdHlwZT1cInJhZGlvXCIgb3IgZWxlbWVudHMgd2l0aCAke3N1cHBvcnRlZFJvbGVzU2VudGVuY2UoKX0gYW5kIGEgdmFsaWQgYXJpYS1jaGVja2VkIGF0dHJpYnV0ZSBjYW4gYmUgdXNlZCB3aXRoIC50b0JlQ2hlY2tlZCgpLiBVc2UgLnRvSGF2ZVZhbHVlKCkgaW5zdGVhZGBcbiAgICB9O1xuICB9XG5cbiAgY29uc3QgaXNDaGVja2VkID0gKCkgPT4ge1xuICAgIGlmIChpc1ZhbGlkSW5wdXQoKSkgcmV0dXJuIGVsZW1lbnQuY2hlY2tlZDtcbiAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtY2hlY2tlZCcpID09PSAndHJ1ZSc7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBwYXNzOiBpc0NoZWNrZWQoKSxcbiAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICBjb25zdCBpcyA9IGlzQ2hlY2tlZCgpID8gJ2lzJyA6ICdpcyBub3QnO1xuICAgICAgcmV0dXJuIFt0aGlzLnV0aWxzLm1hdGNoZXJIaW50KGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9CZUNoZWNrZWRgLCAnZWxlbWVudCcsICcnKSwgJycsIGBSZWNlaXZlZCBlbGVtZW50ICR7aXN9IGNoZWNrZWQ6YCwgYCAgJHt0aGlzLnV0aWxzLnByaW50UmVjZWl2ZWQoZWxlbWVudC5jbG9uZU5vZGUoZmFsc2UpKX1gXS5qb2luKCdcXG4nKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN1cHBvcnRlZFJvbGVzU2VudGVuY2UoKSB7XG4gIHJldHVybiAoMCwgX3V0aWxzLnRvU2VudGVuY2UpKHN1cHBvcnRlZFJvbGVzKCkubWFwKHJvbGUgPT4gYHJvbGU9XCIke3JvbGV9XCJgKSwge1xuICAgIGxhc3RXb3JkQ29ubmVjdG9yOiAnIG9yICdcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN1cHBvcnRlZFJvbGVzKCkge1xuICByZXR1cm4gX2FyaWFRdWVyeS5yb2xlcy5rZXlzKCkuZmlsdGVyKHJvbGVTdXBwb3J0c0NoZWNrZWQpO1xufVxuXG5mdW5jdGlvbiByb2xlU3VwcG9ydHNDaGVja2VkKHJvbGUpIHtcbiAgdmFyIF9yb2xlcyRnZXQ7XG5cbiAgcmV0dXJuICgoX3JvbGVzJGdldCA9IF9hcmlhUXVlcnkucm9sZXMuZ2V0KHJvbGUpKSA9PSBudWxsID8gdm9pZCAwIDogX3JvbGVzJGdldC5wcm9wc1snYXJpYS1jaGVja2VkJ10pICE9PSB1bmRlZmluZWQ7XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsV0FBVyxHQUFHQSxXQUFXO0FBRWpDLElBQUlDLFVBQVUsR0FBR0MsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUV0QyxJQUFJQyxNQUFNLEdBQUdELE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFFL0IsU0FBU0YsV0FBV0EsQ0FBQ0ksT0FBTyxFQUFFO0VBQzVCLENB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