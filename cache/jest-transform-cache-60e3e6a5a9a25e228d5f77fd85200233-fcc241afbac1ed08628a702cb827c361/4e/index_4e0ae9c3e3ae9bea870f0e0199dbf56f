e45b6ec33a5148f5972505fd05baa835
'use strict';

var callBind = require('call-bind');
var callBound = require('call-bind/callBound');
var GetIntrinsic = require('get-intrinsic');
var isTypedArray = require('is-typed-array');
var $ArrayBuffer = GetIntrinsic('ArrayBuffer', true);
var $Float32Array = GetIntrinsic('Float32Array', true);
var $byteLength = callBound('ArrayBuffer.prototype.byteLength', true);

// in node 0.10, ArrayBuffers have no prototype methods, but have an own slot-checking `slice` method
var abSlice = $ArrayBuffer && !$byteLength && new $ArrayBuffer().slice;
var $abSlice = abSlice && callBind(abSlice);
module.exports = $byteLength || $abSlice ? function isArrayBuffer(obj) {
  if (!obj || typeof obj !== 'object') {
    return false;
  }
  try {
    if ($byteLength) {
      $byteLength(obj);
    } else {
      $abSlice(obj, 0);
    }
    return true;
  } catch (e) {
    return false;
  }
} : $Float32Array
// in node 0.8, ArrayBuffers have no prototype or own methods
? function IsArrayBuffer(obj) {
  try {
    return new $Float32Array(obj).buffer === obj && !isTypedArray(obj);
  } catch (e) {
    return typeof obj === 'object' && e.name === 'RangeError';
  }
} : function isArrayBuffer(obj) {
  // eslint-disable-line no-unused-vars
  return false;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjYWxsQmluZCIsInJlcXVpcmUiLCJjYWxsQm91bmQiLCJHZXRJbnRyaW5zaWMiLCJpc1R5cGVkQXJyYXkiLCIkQXJyYXlCdWZmZXIiLCIkRmxvYXQzMkFycmF5IiwiJGJ5dGVMZW5ndGgiLCJhYlNsaWNlIiwic2xpY2UiLCIkYWJTbGljZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpc0FycmF5QnVmZmVyIiwib2JqIiwiZSIsIklzQXJyYXlCdWZmZXIiLCJidWZmZXIiLCJuYW1lIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCdjYWxsLWJpbmQnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xudmFyIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJ2lzLXR5cGVkLWFycmF5Jyk7XG5cbnZhciAkQXJyYXlCdWZmZXIgPSBHZXRJbnRyaW5zaWMoJ0FycmF5QnVmZmVyJywgdHJ1ZSk7XG52YXIgJEZsb2F0MzJBcnJheSA9IEdldEludHJpbnNpYygnRmxvYXQzMkFycmF5JywgdHJ1ZSk7XG52YXIgJGJ5dGVMZW5ndGggPSBjYWxsQm91bmQoJ0FycmF5QnVmZmVyLnByb3RvdHlwZS5ieXRlTGVuZ3RoJywgdHJ1ZSk7XG5cbi8vIGluIG5vZGUgMC4xMCwgQXJyYXlCdWZmZXJzIGhhdmUgbm8gcHJvdG90eXBlIG1ldGhvZHMsIGJ1dCBoYXZlIGFuIG93biBzbG90LWNoZWNraW5nIGBzbGljZWAgbWV0aG9kXG52YXIgYWJTbGljZSA9ICRBcnJheUJ1ZmZlciAmJiAhJGJ5dGVMZW5ndGggJiYgbmV3ICRBcnJheUJ1ZmZlcigpLnNsaWNlO1xudmFyICRhYlNsaWNlID0gYWJTbGljZSAmJiBjYWxsQmluZChhYlNsaWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSAkYnl0ZUxlbmd0aCB8fCAkYWJTbGljZVxuXHQ/IGZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIob2JqKSB7XG5cdFx0aWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0dHJ5IHtcblx0XHRcdGlmICgkYnl0ZUxlbmd0aCkge1xuXHRcdFx0XHQkYnl0ZUxlbmd0aChvYmopO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0JGFiU2xpY2Uob2JqLCAwKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblx0OiAkRmxvYXQzMkFycmF5XG5cdFx0Ly8gaW4gbm9kZSAwLjgsIEFycmF5QnVmZmVycyBoYXZlIG5vIHByb3RvdHlwZSBvciBvd24gbWV0aG9kc1xuXHRcdD8gZnVuY3Rpb24gSXNBcnJheUJ1ZmZlcihvYmopIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHJldHVybiAobmV3ICRGbG9hdDMyQXJyYXkob2JqKSkuYnVmZmVyID09PSBvYmogJiYgIWlzVHlwZWRBcnJheShvYmopO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgZS5uYW1lID09PSAnUmFuZ2VFcnJvcic7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdDogZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcihvYmopIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ25DLElBQUlDLFNBQVMsR0FBR0QsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0FBQzlDLElBQUlFLFlBQVksR0FBR0YsT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUMzQyxJQUFJRyxZQUFZLEdBQUdILE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztBQUU1QyxJQUFJSSxZQUFZLEdBQUdGLFlBQVksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDO0FBQ3BELElBQUlHLGFBQWEsR0FBR0gsWUFBWSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUM7QUFDdEQsSUFBSUksV0FBVyxHQUFHTCxTQUFTLENBQUMsa0NBQWtDLEVBQUUsSUFBSSxDQUFDOztBQUVyRTtBQUNBLElBQUlNLE9BQU8sR0FBR0gsWUFBWSxJQUFJLENBQUNFLFdBQVcsSUFBSSxJQUFJRixZQUFZLEVBQUUsQ0FBQ0ksS0FBSztBQUN0RSxJQUFJQyxRQUFRLEdBQUdGLE9BQU8sSUFBSVIsUUFBUSxDQUFDUSxPQUFPLENBQUM7QUFFM0NHLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHTCxXQUFXLElBQUlHLFFBQVEsR0FDckMsU0FBU0csYUFBYUEsQ0FBQ0MsR0FBRyxFQUFFO0VBQzdCLElBQUksQ0FBQ0EsR0FBRyxJQUFJLE9BQU9BLEdBQUcsS0FBSyxRQUFRLEVBQUU7SUFDcEMsT0FBTyxLQUFLO0VBQ2I7RUFDQSxJQUFJO0lBQ0gsSUFBSVAsV0FBVyxFQUFFO01BQ2hCQSxXQUFXLENBQUNPLEdBQUcsQ0FBQztJQUNqQixDQUFDLE1BQU07TUFDTkosUUFBUSxDQUFDSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2pCO0lBQ0EsT0FBTyxJQUFJO0VBQ1osQ0FBQyxDQUFDLE9BQU9DLENBQUMsRUFBRTtJQUNYLE9BQU8sS0FBSztFQUNiO0FBQ0QsQ0FBQyxHQUNDVDtBQUNEO0FBQUEsRUFDRSxTQUFTVSxhQUFhQSxDQUFDRixHQUFHLEVBQUU7RUFDN0IsSUFBSTtJQUNILE9BQVEsSUFBSVIsYUFBYSxDQUFDUSxHQUFHLENBQUMsQ0FBRUcsTUFBTSxLQUFLSCxHQUFHLElBQUksQ0FBQ1YsWUFBWSxDQUFDVSxHQUFHLENBQUM7RUFDckUsQ0FBQyxDQUFDLE9BQU9DLENBQUMsRUFBRTtJQUNYLE9BQU8sT0FBT0QsR0FBRyxLQUFLLFFBQVEsSUFBSUMsQ0FBQyxDQUFDRyxJQUFJLEtBQUssWUFBWTtFQUMxRDtBQUNELENBQUMsR0FDQyxTQUFTTCxhQUFhQSxDQUFDQyxHQUFHLEVBQUU7RUFBRTtFQUMvQixPQUFPLEtBQUs7QUFDYixDQUFDIn0=