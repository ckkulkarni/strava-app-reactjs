66ef427452b13c700a18d12658f85c9c
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getDisplayName;
exports.getFunctionName = getFunctionName;
var _reactIs = require("react-is");
// Simplified polyfill for IE11 support
// https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3
const fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
function getFunctionName(fn) {
  const match = `${fn}`.match(fnNameMatchRegex);
  const name = match && match[1];
  return name || '';
}
function getFunctionComponentName(Component, fallback = '') {
  return Component.displayName || Component.name || getFunctionName(Component) || fallback;
}
function getWrappedName(outerType, innerType, wrapperName) {
  const functionName = getFunctionComponentName(innerType);
  return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);
}

/**
 * cherry-pick from
 * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js
 * originally forked from recompose/getDisplayName with added IE11 support
 */
function getDisplayName(Component) {
  if (Component == null) {
    return undefined;
  }
  if (typeof Component === 'string') {
    return Component;
  }
  if (typeof Component === 'function') {
    return getFunctionComponentName(Component, 'Component');
  }

  // TypeScript can't have components as objects but they exist in the form of `memo` or `Suspense`
  if (typeof Component === 'object') {
    switch (Component.$$typeof) {
      case _reactIs.ForwardRef:
        return getWrappedName(Component, Component.render, 'ForwardRef');
      case _reactIs.Memo:
        return getWrappedName(Component, Component.type, 'memo');
      default:
        return undefined;
    }
  }
  return undefined;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJnZXREaXNwbGF5TmFtZSIsImdldEZ1bmN0aW9uTmFtZSIsIl9yZWFjdElzIiwicmVxdWlyZSIsImZuTmFtZU1hdGNoUmVnZXgiLCJmbiIsIm1hdGNoIiwibmFtZSIsImdldEZ1bmN0aW9uQ29tcG9uZW50TmFtZSIsIkNvbXBvbmVudCIsImZhbGxiYWNrIiwiZGlzcGxheU5hbWUiLCJnZXRXcmFwcGVkTmFtZSIsIm91dGVyVHlwZSIsImlubmVyVHlwZSIsIndyYXBwZXJOYW1lIiwiZnVuY3Rpb25OYW1lIiwidW5kZWZpbmVkIiwiJCR0eXBlb2YiLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsInR5cGUiXSwic291cmNlcyI6WyJnZXREaXNwbGF5TmFtZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdldERpc3BsYXlOYW1lO1xuZXhwb3J0cy5nZXRGdW5jdGlvbk5hbWUgPSBnZXRGdW5jdGlvbk5hbWU7XG52YXIgX3JlYWN0SXMgPSByZXF1aXJlKFwicmVhY3QtaXNcIik7XG4vLyBTaW1wbGlmaWVkIHBvbHlmaWxsIGZvciBJRTExIHN1cHBvcnRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9KYW1lc01HcmVlbmUvRnVuY3Rpb24ubmFtZS9ibG9iLzU4YjMxNGQ0YTk4MzExMGMzNjgyZjEyMjhmODQ1ZDM5Y2NjYTE4MTcvRnVuY3Rpb24ubmFtZS5qcyNMM1xuY29uc3QgZm5OYW1lTWF0Y2hSZWdleCA9IC9eXFxzKmZ1bmN0aW9uKD86XFxzfFxccypcXC9cXCouKlxcKlxcL1xccyopKyhbXihcXHMvXSopXFxzKi87XG5mdW5jdGlvbiBnZXRGdW5jdGlvbk5hbWUoZm4pIHtcbiAgY29uc3QgbWF0Y2ggPSBgJHtmbn1gLm1hdGNoKGZuTmFtZU1hdGNoUmVnZXgpO1xuICBjb25zdCBuYW1lID0gbWF0Y2ggJiYgbWF0Y2hbMV07XG4gIHJldHVybiBuYW1lIHx8ICcnO1xufVxuZnVuY3Rpb24gZ2V0RnVuY3Rpb25Db21wb25lbnROYW1lKENvbXBvbmVudCwgZmFsbGJhY2sgPSAnJykge1xuICByZXR1cm4gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8IGdldEZ1bmN0aW9uTmFtZShDb21wb25lbnQpIHx8IGZhbGxiYWNrO1xufVxuZnVuY3Rpb24gZ2V0V3JhcHBlZE5hbWUob3V0ZXJUeXBlLCBpbm5lclR5cGUsIHdyYXBwZXJOYW1lKSB7XG4gIGNvbnN0IGZ1bmN0aW9uTmFtZSA9IGdldEZ1bmN0aW9uQ29tcG9uZW50TmFtZShpbm5lclR5cGUpO1xuICByZXR1cm4gb3V0ZXJUeXBlLmRpc3BsYXlOYW1lIHx8IChmdW5jdGlvbk5hbWUgIT09ICcnID8gYCR7d3JhcHBlck5hbWV9KCR7ZnVuY3Rpb25OYW1lfSlgIDogd3JhcHBlck5hbWUpO1xufVxuXG4vKipcbiAqIGNoZXJyeS1waWNrIGZyb21cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzc2OWIxZjI3MGUxMjUxZDlkYmRjZTBmY2JkOWU5MmU1MDJkMDU5YjgvcGFja2FnZXMvc2hhcmVkL2dldENvbXBvbmVudE5hbWUuanNcbiAqIG9yaWdpbmFsbHkgZm9ya2VkIGZyb20gcmVjb21wb3NlL2dldERpc3BsYXlOYW1lIHdpdGggYWRkZWQgSUUxMSBzdXBwb3J0XG4gKi9cbmZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKENvbXBvbmVudCkge1xuICBpZiAoQ29tcG9uZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGlmICh0eXBlb2YgQ29tcG9uZW50ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBDb21wb25lbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBDb21wb25lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZ2V0RnVuY3Rpb25Db21wb25lbnROYW1lKENvbXBvbmVudCwgJ0NvbXBvbmVudCcpO1xuICB9XG5cbiAgLy8gVHlwZVNjcmlwdCBjYW4ndCBoYXZlIGNvbXBvbmVudHMgYXMgb2JqZWN0cyBidXQgdGhleSBleGlzdCBpbiB0aGUgZm9ybSBvZiBgbWVtb2Agb3IgYFN1c3BlbnNlYFxuICBpZiAodHlwZW9mIENvbXBvbmVudCA9PT0gJ29iamVjdCcpIHtcbiAgICBzd2l0Y2ggKENvbXBvbmVudC4kJHR5cGVvZikge1xuICAgICAgY2FzZSBfcmVhY3RJcy5Gb3J3YXJkUmVmOlxuICAgICAgICByZXR1cm4gZ2V0V3JhcHBlZE5hbWUoQ29tcG9uZW50LCBDb21wb25lbnQucmVuZGVyLCAnRm9yd2FyZFJlZicpO1xuICAgICAgY2FzZSBfcmVhY3RJcy5NZW1vOlxuICAgICAgICByZXR1cm4gZ2V0V3JhcHBlZE5hbWUoQ29tcG9uZW50LCBDb21wb25lbnQudHlwZSwgJ21lbW8nKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHQyxjQUFjO0FBQ2hDSCxPQUFPLENBQUNJLGVBQWUsR0FBR0EsZUFBZTtBQUN6QyxJQUFJQyxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDbEM7QUFDQTtBQUNBLE1BQU1DLGdCQUFnQixHQUFHLG1EQUFtRDtBQUM1RSxTQUFTSCxlQUFlQSxDQUFDSSxFQUFFLEVBQUU7RUFDM0IsTUFBTUMsS0FBSyxHQUFJLEdBQUVELEVBQUcsRUFBQyxDQUFDQyxLQUFLLENBQUNGLGdCQUFnQixDQUFDO0VBQzdDLE1BQU1HLElBQUksR0FBR0QsS0FBSyxJQUFJQSxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzlCLE9BQU9DLElBQUksSUFBSSxFQUFFO0FBQ25CO0FBQ0EsU0FBU0Msd0JBQXdCQSxDQUFDQyxTQUFTLEVBQUVDLFFBQVEsR0FBRyxFQUFFLEVBQUU7RUFDMUQsT0FBT0QsU0FBUyxDQUFDRSxXQUFXLElBQUlGLFNBQVMsQ0FBQ0YsSUFBSSxJQUFJTixlQUFlLENBQUNRLFNBQVMsQ0FBQyxJQUFJQyxRQUFRO0FBQzFGO0FBQ0EsU0FBU0UsY0FBY0EsQ0FBQ0MsU0FBUyxFQUFFQyxTQUFTLEVBQUVDLFdBQVcsRUFBRTtFQUN6RCxNQUFNQyxZQUFZLEdBQUdSLHdCQUF3QixDQUFDTSxTQUFTLENBQUM7RUFDeEQsT0FBT0QsU0FBUyxDQUFDRixXQUFXLEtBQUtLLFlBQVksS0FBSyxFQUFFLEdBQUksR0FBRUQsV0FBWSxJQUFHQyxZQUFhLEdBQUUsR0FBR0QsV0FBVyxDQUFDO0FBQ3pHOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTZixjQUFjQSxDQUFDUyxTQUFTLEVBQUU7RUFDakMsSUFBSUEsU0FBUyxJQUFJLElBQUksRUFBRTtJQUNyQixPQUFPUSxTQUFTO0VBQ2xCO0VBQ0EsSUFBSSxPQUFPUixTQUFTLEtBQUssUUFBUSxFQUFFO0lBQ2pDLE9BQU9BLFNBQVM7RUFDbEI7RUFDQSxJQUFJLE9BQU9BLFNBQVMsS0FBSyxVQUFVLEVBQUU7SUFDbkMsT0FBT0Qsd0JBQXdCLENBQUNDLFNBQVMsRUFBRSxXQUFXLENBQUM7RUFDekQ7O0VBRUE7RUFDQSxJQUFJLE9BQU9BLFNBQVMsS0FBSyxRQUFRLEVBQUU7SUFDakMsUUFBUUEsU0FBUyxDQUFDUyxRQUFRO01BQ3hCLEtBQUtoQixRQUFRLENBQUNpQixVQUFVO1FBQ3RCLE9BQU9QLGNBQWMsQ0FBQ0gsU0FBUyxFQUFFQSxTQUFTLENBQUNXLE1BQU0sRUFBRSxZQUFZLENBQUM7TUFDbEUsS0FBS2xCLFFBQVEsQ0FBQ21CLElBQUk7UUFDaEIsT0FBT1QsY0FBYyxDQUFDSCxTQUFTLEVBQUVBLFNBQVMsQ0FBQ2EsSUFBSSxFQUFFLE1BQU0sQ0FBQztNQUMxRDtRQUNFLE9BQU9MLFNBQVM7SUFBQztFQUV2QjtFQUNBLE9BQU9BLFNBQVM7QUFDbEIifQ==