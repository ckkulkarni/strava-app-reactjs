96f9268b08a4c982711c71f0917bc026
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toBeRequired = toBeRequired;
var _utils = require("./utils");

// form elements that support 'required'
const FORM_TAGS = ['select', 'textarea'];
const ARIA_FORM_TAGS = ['input', 'select', 'textarea'];
const UNSUPPORTED_INPUT_TYPES = ['color', 'hidden', 'range', 'submit', 'image', 'reset'];
const SUPPORTED_ARIA_ROLES = ['combobox', 'gridcell', 'radiogroup', 'spinbutton', 'tree'];
function isRequiredOnFormTagsExceptInput(element) {
  return FORM_TAGS.includes((0, _utils.getTag)(element)) && element.hasAttribute('required');
}
function isRequiredOnSupportedInput(element) {
  return (0, _utils.getTag)(element) === 'input' && element.hasAttribute('required') && (element.hasAttribute('type') && !UNSUPPORTED_INPUT_TYPES.includes(element.getAttribute('type')) || !element.hasAttribute('type'));
}
function isElementRequiredByARIA(element) {
  return element.hasAttribute('aria-required') && element.getAttribute('aria-required') === 'true' && (ARIA_FORM_TAGS.includes((0, _utils.getTag)(element)) || element.hasAttribute('role') && SUPPORTED_ARIA_ROLES.includes(element.getAttribute('role')));
}
function toBeRequired(element) {
  (0, _utils.checkHtmlElement)(element, toBeRequired, this);
  const isRequired = isRequiredOnFormTagsExceptInput(element) || isRequiredOnSupportedInput(element) || isElementRequiredByARIA(element);
  return {
    pass: isRequired,
    message: () => {
      const is = isRequired ? 'is' : 'is not';
      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeRequired`, 'element', ''), '', `Received element ${is} required:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\n');
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvQmVSZXF1aXJlZCIsIl91dGlscyIsInJlcXVpcmUiLCJGT1JNX1RBR1MiLCJBUklBX0ZPUk1fVEFHUyIsIlVOU1VQUE9SVEVEX0lOUFVUX1RZUEVTIiwiU1VQUE9SVEVEX0FSSUFfUk9MRVMiLCJpc1JlcXVpcmVkT25Gb3JtVGFnc0V4Y2VwdElucHV0IiwiZWxlbWVudCIsImluY2x1ZGVzIiwiZ2V0VGFnIiwiaGFzQXR0cmlidXRlIiwiaXNSZXF1aXJlZE9uU3VwcG9ydGVkSW5wdXQiLCJnZXRBdHRyaWJ1dGUiLCJpc0VsZW1lbnRSZXF1aXJlZEJ5QVJJQSIsImNoZWNrSHRtbEVsZW1lbnQiLCJpc1JlcXVpcmVkIiwicGFzcyIsIm1lc3NhZ2UiLCJpcyIsInV0aWxzIiwibWF0Y2hlckhpbnQiLCJpc05vdCIsInByaW50UmVjZWl2ZWQiLCJjbG9uZU5vZGUiLCJqb2luIl0sInNvdXJjZXMiOlsidG8tYmUtcmVxdWlyZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnRvQmVSZXF1aXJlZCA9IHRvQmVSZXF1aXJlZDtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG4vLyBmb3JtIGVsZW1lbnRzIHRoYXQgc3VwcG9ydCAncmVxdWlyZWQnXG5jb25zdCBGT1JNX1RBR1MgPSBbJ3NlbGVjdCcsICd0ZXh0YXJlYSddO1xuY29uc3QgQVJJQV9GT1JNX1RBR1MgPSBbJ2lucHV0JywgJ3NlbGVjdCcsICd0ZXh0YXJlYSddO1xuY29uc3QgVU5TVVBQT1JURURfSU5QVVRfVFlQRVMgPSBbJ2NvbG9yJywgJ2hpZGRlbicsICdyYW5nZScsICdzdWJtaXQnLCAnaW1hZ2UnLCAncmVzZXQnXTtcbmNvbnN0IFNVUFBPUlRFRF9BUklBX1JPTEVTID0gWydjb21ib2JveCcsICdncmlkY2VsbCcsICdyYWRpb2dyb3VwJywgJ3NwaW5idXR0b24nLCAndHJlZSddO1xuXG5mdW5jdGlvbiBpc1JlcXVpcmVkT25Gb3JtVGFnc0V4Y2VwdElucHV0KGVsZW1lbnQpIHtcbiAgcmV0dXJuIEZPUk1fVEFHUy5pbmNsdWRlcygoMCwgX3V0aWxzLmdldFRhZykoZWxlbWVudCkpICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlKCdyZXF1aXJlZCcpO1xufVxuXG5mdW5jdGlvbiBpc1JlcXVpcmVkT25TdXBwb3J0ZWRJbnB1dChlbGVtZW50KSB7XG4gIHJldHVybiAoMCwgX3V0aWxzLmdldFRhZykoZWxlbWVudCkgPT09ICdpbnB1dCcgJiYgZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3JlcXVpcmVkJykgJiYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCd0eXBlJykgJiYgIVVOU1VQUE9SVEVEX0lOUFVUX1RZUEVTLmluY2x1ZGVzKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJykpIHx8ICFlbGVtZW50Lmhhc0F0dHJpYnV0ZSgndHlwZScpKTtcbn1cblxuZnVuY3Rpb24gaXNFbGVtZW50UmVxdWlyZWRCeUFSSUEoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2FyaWEtcmVxdWlyZWQnKSAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1yZXF1aXJlZCcpID09PSAndHJ1ZScgJiYgKEFSSUFfRk9STV9UQUdTLmluY2x1ZGVzKCgwLCBfdXRpbHMuZ2V0VGFnKShlbGVtZW50KSkgfHwgZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3JvbGUnKSAmJiBTVVBQT1JURURfQVJJQV9ST0xFUy5pbmNsdWRlcyhlbGVtZW50LmdldEF0dHJpYnV0ZSgncm9sZScpKSk7XG59XG5cbmZ1bmN0aW9uIHRvQmVSZXF1aXJlZChlbGVtZW50KSB7XG4gICgwLCBfdXRpbHMuY2hlY2tIdG1sRWxlbWVudCkoZWxlbWVudCwgdG9CZVJlcXVpcmVkLCB0aGlzKTtcbiAgY29uc3QgaXNSZXF1aXJlZCA9IGlzUmVxdWlyZWRPbkZvcm1UYWdzRXhjZXB0SW5wdXQoZWxlbWVudCkgfHwgaXNSZXF1aXJlZE9uU3VwcG9ydGVkSW5wdXQoZWxlbWVudCkgfHwgaXNFbGVtZW50UmVxdWlyZWRCeUFSSUEoZWxlbWVudCk7XG4gIHJldHVybiB7XG4gICAgcGFzczogaXNSZXF1aXJlZCxcbiAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICBjb25zdCBpcyA9IGlzUmVxdWlyZWQgPyAnaXMnIDogJ2lzIG5vdCc7XG4gICAgICByZXR1cm4gW3RoaXMudXRpbHMubWF0Y2hlckhpbnQoYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0JlUmVxdWlyZWRgLCAnZWxlbWVudCcsICcnKSwgJycsIGBSZWNlaXZlZCBlbGVtZW50ICR7aXN9IHJlcXVpcmVkOmAsIGAgICR7dGhpcy51dGlscy5wcmludFJlY2VpdmVkKGVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKSl9YF0uam9pbignXFxuJyk7XG4gICAgfVxuICB9O1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLFlBQVksR0FBR0EsWUFBWTtBQUVuQyxJQUFJQyxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxTQUFTLENBQUM7O0FBRS9CO0FBQ0EsTUFBTUMsU0FBUyxHQUFHLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQztBQUN4QyxNQUFNQyxjQUFjLEdBQUcsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQztBQUN0RCxNQUFNQyx1QkFBdUIsR0FBRyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDO0FBQ3hGLE1BQU1DLG9CQUFvQixHQUFHLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLE1BQU0sQ0FBQztBQUV6RixTQUFTQywrQkFBK0JBLENBQUNDLE9BQU8sRUFBRTtFQUNoRCxPQUFPTCxTQUFTLENBQUNNLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRVIsTUFBTSxDQUFDUyxNQUFNLEVBQUVGLE9BQU8sQ0FBQyxDQUFDLElBQUlBLE9BQU8sQ0FBQ0csWUFBWSxDQUFDLFVBQVUsQ0FBQztBQUM1RjtBQUVBLFNBQVNDLDBCQUEwQkEsQ0FBQ0osT0FBTyxFQUFFO0VBQzNDLE9BQU8sQ0FBQyxDQUFDLEVBQUVQLE1BQU0sQ0FBQ1MsTUFBTSxFQUFFRixPQUFPLENBQUMsS0FBSyxPQUFPLElBQUlBLE9BQU8sQ0FBQ0csWUFBWSxDQUFDLFVBQVUsQ0FBQyxLQUFLSCxPQUFPLENBQUNHLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDTix1QkFBdUIsQ0FBQ0ksUUFBUSxDQUFDRCxPQUFPLENBQUNLLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUNMLE9BQU8sQ0FBQ0csWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzFOO0FBRUEsU0FBU0csdUJBQXVCQSxDQUFDTixPQUFPLEVBQUU7RUFDeEMsT0FBT0EsT0FBTyxDQUFDRyxZQUFZLENBQUMsZUFBZSxDQUFDLElBQUlILE9BQU8sQ0FBQ0ssWUFBWSxDQUFDLGVBQWUsQ0FBQyxLQUFLLE1BQU0sS0FBS1QsY0FBYyxDQUFDSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUVSLE1BQU0sQ0FBQ1MsTUFBTSxFQUFFRixPQUFPLENBQUMsQ0FBQyxJQUFJQSxPQUFPLENBQUNHLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSUwsb0JBQW9CLENBQUNHLFFBQVEsQ0FBQ0QsT0FBTyxDQUFDSyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUMzUDtBQUVBLFNBQVNiLFlBQVlBLENBQUNRLE9BQU8sRUFBRTtFQUM3QixDQUFDLENBQUMsRUFBRVAsTUFBTSxDQUFDYyxnQkFBZ0IsRUFBRVAsT0FBTyxFQUFFUixZQUFZLEVBQUUsSUFBSSxDQUFDO0VBQ3pELE1BQU1nQixVQUFVLEdBQUdULCtCQUErQixDQUFDQyxPQUFPLENBQUMsSUFBSUksMEJBQTBCLENBQUNKLE9BQU8sQ0FBQyxJQUFJTSx1QkFBdUIsQ0FBQ04sT0FBTyxDQUFDO0VBQ3RJLE9BQU87SUFDTFMsSUFBSSxFQUFFRCxVQUFVO0lBQ2hCRSxPQUFPLEVBQUVBLENBQUEsS0FBTTtNQUNiLE1BQU1DLEVBQUUsR0FBR0gsVUFBVSxHQUFHLElBQUksR0FBRyxRQUFRO01BQ3ZDLE9BQU8sQ0FBQyxJQUFJLENBQUNJLEtBQUssQ0FBQ0MsV0FBVyxDQUFFLEdBQUUsSUFBSSxDQUFDQyxLQUFLLEdBQUcsTUFBTSxHQUFHLEVBQUcsZUFBYyxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUcsb0JBQW1CSCxFQUFHLFlBQVcsRUFBRyxLQUFJLElBQUksQ0FBQ0MsS0FBSyxDQUFDRyxhQUFhLENBQUNmLE9BQU8sQ0FBQ2dCLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBRSxFQUFDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQztJQUMxTTtFQUNGLENBQUM7QUFDSCJ9