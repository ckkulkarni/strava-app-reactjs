536565ed3e7a777e0f6873811f295f96
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByAltText = exports.queryAllByAltText = exports.getByAltText = exports.getAllByAltText = exports.findByAltText = exports.findAllByAltText = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
// Valid tags are img, input, area and custom elements
const VALID_TAG_REGEXP = /^(img|input|area|.+-.+)$/i;
const queryAllByAltText = (container, alt, options = {}) => {
  (0, _helpers.checkContainerType)(container);
  return (0, _queryHelpers.queryAllByAttribute)('alt', container, alt, options).filter(node => VALID_TAG_REGEXP.test(node.tagName));
};
const getMultipleError = (c, alt) => `Found multiple elements with the alt text: ${alt}`;
const getMissingError = (c, alt) => `Unable to find an element with the alt text: ${alt}`;
const queryAllByAltTextWithSuggestions = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByAltText, queryAllByAltText.name, 'queryAll');
exports.queryAllByAltText = queryAllByAltTextWithSuggestions;
const [queryByAltText, getAllByAltText, getByAltText, findAllByAltText, findByAltText] = (0, _allUtils.buildQueries)(queryAllByAltText, getMultipleError, getMissingError);
exports.findByAltText = findByAltText;
exports.findAllByAltText = findAllByAltText;
exports.getByAltText = getByAltText;
exports.getAllByAltText = getAllByAltText;
exports.queryByAltText = queryByAltText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXJ5QnlBbHRUZXh0IiwicXVlcnlBbGxCeUFsdFRleHQiLCJnZXRCeUFsdFRleHQiLCJnZXRBbGxCeUFsdFRleHQiLCJmaW5kQnlBbHRUZXh0IiwiZmluZEFsbEJ5QWx0VGV4dCIsIl9xdWVyeUhlbHBlcnMiLCJyZXF1aXJlIiwiX2hlbHBlcnMiLCJfYWxsVXRpbHMiLCJWQUxJRF9UQUdfUkVHRVhQIiwiY29udGFpbmVyIiwiYWx0Iiwib3B0aW9ucyIsImNoZWNrQ29udGFpbmVyVHlwZSIsInF1ZXJ5QWxsQnlBdHRyaWJ1dGUiLCJmaWx0ZXIiLCJub2RlIiwidGVzdCIsInRhZ05hbWUiLCJnZXRNdWx0aXBsZUVycm9yIiwiYyIsImdldE1pc3NpbmdFcnJvciIsInF1ZXJ5QWxsQnlBbHRUZXh0V2l0aFN1Z2dlc3Rpb25zIiwid3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbiIsIm5hbWUiLCJidWlsZFF1ZXJpZXMiXSwic291cmNlcyI6WyJhbHQtdGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucXVlcnlCeUFsdFRleHQgPSBleHBvcnRzLnF1ZXJ5QWxsQnlBbHRUZXh0ID0gZXhwb3J0cy5nZXRCeUFsdFRleHQgPSBleHBvcnRzLmdldEFsbEJ5QWx0VGV4dCA9IGV4cG9ydHMuZmluZEJ5QWx0VGV4dCA9IGV4cG9ydHMuZmluZEFsbEJ5QWx0VGV4dCA9IHZvaWQgMDtcbnZhciBfcXVlcnlIZWxwZXJzID0gcmVxdWlyZShcIi4uL3F1ZXJ5LWhlbHBlcnNcIik7XG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vaGVscGVyc1wiKTtcbnZhciBfYWxsVXRpbHMgPSByZXF1aXJlKFwiLi9hbGwtdXRpbHNcIik7XG4vLyBWYWxpZCB0YWdzIGFyZSBpbWcsIGlucHV0LCBhcmVhIGFuZCBjdXN0b20gZWxlbWVudHNcbmNvbnN0IFZBTElEX1RBR19SRUdFWFAgPSAvXihpbWd8aW5wdXR8YXJlYXwuKy0uKykkL2k7XG5jb25zdCBxdWVyeUFsbEJ5QWx0VGV4dCA9IChjb250YWluZXIsIGFsdCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICgwLCBfaGVscGVycy5jaGVja0NvbnRhaW5lclR5cGUpKGNvbnRhaW5lcik7XG4gIHJldHVybiAoMCwgX3F1ZXJ5SGVscGVycy5xdWVyeUFsbEJ5QXR0cmlidXRlKSgnYWx0JywgY29udGFpbmVyLCBhbHQsIG9wdGlvbnMpLmZpbHRlcihub2RlID0+IFZBTElEX1RBR19SRUdFWFAudGVzdChub2RlLnRhZ05hbWUpKTtcbn07XG5jb25zdCBnZXRNdWx0aXBsZUVycm9yID0gKGMsIGFsdCkgPT4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGhlIGFsdCB0ZXh0OiAke2FsdH1gO1xuY29uc3QgZ2V0TWlzc2luZ0Vycm9yID0gKGMsIGFsdCkgPT4gYFVuYWJsZSB0byBmaW5kIGFuIGVsZW1lbnQgd2l0aCB0aGUgYWx0IHRleHQ6ICR7YWx0fWA7XG5jb25zdCBxdWVyeUFsbEJ5QWx0VGV4dFdpdGhTdWdnZXN0aW9ucyA9ICgwLCBfcXVlcnlIZWxwZXJzLndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKHF1ZXJ5QWxsQnlBbHRUZXh0LCBxdWVyeUFsbEJ5QWx0VGV4dC5uYW1lLCAncXVlcnlBbGwnKTtcbmV4cG9ydHMucXVlcnlBbGxCeUFsdFRleHQgPSBxdWVyeUFsbEJ5QWx0VGV4dFdpdGhTdWdnZXN0aW9ucztcbmNvbnN0IFtxdWVyeUJ5QWx0VGV4dCwgZ2V0QWxsQnlBbHRUZXh0LCBnZXRCeUFsdFRleHQsIGZpbmRBbGxCeUFsdFRleHQsIGZpbmRCeUFsdFRleHRdID0gKDAsIF9hbGxVdGlscy5idWlsZFF1ZXJpZXMpKHF1ZXJ5QWxsQnlBbHRUZXh0LCBnZXRNdWx0aXBsZUVycm9yLCBnZXRNaXNzaW5nRXJyb3IpO1xuZXhwb3J0cy5maW5kQnlBbHRUZXh0ID0gZmluZEJ5QWx0VGV4dDtcbmV4cG9ydHMuZmluZEFsbEJ5QWx0VGV4dCA9IGZpbmRBbGxCeUFsdFRleHQ7XG5leHBvcnRzLmdldEJ5QWx0VGV4dCA9IGdldEJ5QWx0VGV4dDtcbmV4cG9ydHMuZ2V0QWxsQnlBbHRUZXh0ID0gZ2V0QWxsQnlBbHRUZXh0O1xuZXhwb3J0cy5xdWVyeUJ5QWx0VGV4dCA9IHF1ZXJ5QnlBbHRUZXh0OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLGNBQWMsR0FBR0YsT0FBTyxDQUFDRyxpQkFBaUIsR0FBR0gsT0FBTyxDQUFDSSxZQUFZLEdBQUdKLE9BQU8sQ0FBQ0ssZUFBZSxHQUFHTCxPQUFPLENBQUNNLGFBQWEsR0FBR04sT0FBTyxDQUFDTyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7QUFDL0osSUFBSUMsYUFBYSxHQUFHQyxPQUFPLENBQUMsa0JBQWtCLENBQUM7QUFDL0MsSUFBSUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ3BDLElBQUlFLFNBQVMsR0FBR0YsT0FBTyxDQUFDLGFBQWEsQ0FBQztBQUN0QztBQUNBLE1BQU1HLGdCQUFnQixHQUFHLDJCQUEyQjtBQUNwRCxNQUFNVCxpQkFBaUIsR0FBR0EsQ0FBQ1UsU0FBUyxFQUFFQyxHQUFHLEVBQUVDLE9BQU8sR0FBRyxDQUFDLENBQUMsS0FBSztFQUMxRCxDQUFDLENBQUMsRUFBRUwsUUFBUSxDQUFDTSxrQkFBa0IsRUFBRUgsU0FBUyxDQUFDO0VBQzNDLE9BQU8sQ0FBQyxDQUFDLEVBQUVMLGFBQWEsQ0FBQ1MsbUJBQW1CLEVBQUUsS0FBSyxFQUFFSixTQUFTLEVBQUVDLEdBQUcsRUFBRUMsT0FBTyxDQUFDLENBQUNHLE1BQU0sQ0FBQ0MsSUFBSSxJQUFJUCxnQkFBZ0IsQ0FBQ1EsSUFBSSxDQUFDRCxJQUFJLENBQUNFLE9BQU8sQ0FBQyxDQUFDO0FBQ25JLENBQUM7QUFDRCxNQUFNQyxnQkFBZ0IsR0FBR0EsQ0FBQ0MsQ0FBQyxFQUFFVCxHQUFHLEtBQU0sOENBQTZDQSxHQUFJLEVBQUM7QUFDeEYsTUFBTVUsZUFBZSxHQUFHQSxDQUFDRCxDQUFDLEVBQUVULEdBQUcsS0FBTSxnREFBK0NBLEdBQUksRUFBQztBQUN6RixNQUFNVyxnQ0FBZ0MsR0FBRyxDQUFDLENBQUMsRUFBRWpCLGFBQWEsQ0FBQ2tCLDRCQUE0QixFQUFFdkIsaUJBQWlCLEVBQUVBLGlCQUFpQixDQUFDd0IsSUFBSSxFQUFFLFVBQVUsQ0FBQztBQUMvSTNCLE9BQU8sQ0FBQ0csaUJBQWlCLEdBQUdzQixnQ0FBZ0M7QUFDNUQsTUFBTSxDQUFDdkIsY0FBYyxFQUFFRyxlQUFlLEVBQUVELFlBQVksRUFBRUcsZ0JBQWdCLEVBQUVELGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFSyxTQUFTLENBQUNpQixZQUFZLEVBQUV6QixpQkFBaUIsRUFBRW1CLGdCQUFnQixFQUFFRSxlQUFlLENBQUM7QUFDMUt4QixPQUFPLENBQUNNLGFBQWEsR0FBR0EsYUFBYTtBQUNyQ04sT0FBTyxDQUFDTyxnQkFBZ0IsR0FBR0EsZ0JBQWdCO0FBQzNDUCxPQUFPLENBQUNJLFlBQVksR0FBR0EsWUFBWTtBQUNuQ0osT0FBTyxDQUFDSyxlQUFlLEdBQUdBLGVBQWU7QUFDekNMLE9BQU8sQ0FBQ0UsY0FBYyxHQUFHQSxjQUFjIn0=