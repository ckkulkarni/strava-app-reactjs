7af95bbe950ea21f086b46fee0cb004f
"use strict";

var conversions = require('./conversions');
var route = require('./route');
var convert = {};
var models = Object.keys(conversions);
function wrapRaw(fn) {
  var wrappedFn = function (args) {
    if (args === undefined || args === null) {
      return args;
    }
    if (arguments.length > 1) {
      args = Array.prototype.slice.call(arguments);
    }
    return fn(args);
  };

  // preserve .conversion property if there is one
  if ('conversion' in fn) {
    wrappedFn.conversion = fn.conversion;
  }
  return wrappedFn;
}
function wrapRounded(fn) {
  var wrappedFn = function (args) {
    if (args === undefined || args === null) {
      return args;
    }
    if (arguments.length > 1) {
      args = Array.prototype.slice.call(arguments);
    }
    var result = fn(args);

    // we're assuming the result is an array here.
    // see notice in conversions.js; don't use box types
    // in conversion functions.
    if (typeof result === 'object') {
      for (var len = result.length, i = 0; i < len; i++) {
        result[i] = Math.round(result[i]);
      }
    }
    return result;
  };

  // preserve .conversion property if there is one
  if ('conversion' in fn) {
    wrappedFn.conversion = fn.conversion;
  }
  return wrappedFn;
}
models.forEach(function (fromModel) {
  convert[fromModel] = {};
  Object.defineProperty(convert[fromModel], 'channels', {
    value: conversions[fromModel].channels
  });
  Object.defineProperty(convert[fromModel], 'labels', {
    value: conversions[fromModel].labels
  });
  var routes = route(fromModel);
  var routeModels = Object.keys(routes);
  routeModels.forEach(function (toModel) {
    var fn = routes[toModel];
    convert[fromModel][toModel] = wrapRounded(fn);
    convert[fromModel][toModel].raw = wrapRaw(fn);
  });
});
module.exports = convert;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb252ZXJzaW9ucyIsInJlcXVpcmUiLCJyb3V0ZSIsImNvbnZlcnQiLCJtb2RlbHMiLCJPYmplY3QiLCJrZXlzIiwid3JhcFJhdyIsImZuIiwid3JhcHBlZEZuIiwiYXJncyIsInVuZGVmaW5lZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiY29udmVyc2lvbiIsIndyYXBSb3VuZGVkIiwicmVzdWx0IiwibGVuIiwiaSIsIk1hdGgiLCJyb3VuZCIsImZvckVhY2giLCJmcm9tTW9kZWwiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiY2hhbm5lbHMiLCJsYWJlbHMiLCJyb3V0ZXMiLCJyb3V0ZU1vZGVscyIsInRvTW9kZWwiLCJyYXciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbnZlcnNpb25zID0gcmVxdWlyZSgnLi9jb252ZXJzaW9ucycpO1xudmFyIHJvdXRlID0gcmVxdWlyZSgnLi9yb3V0ZScpO1xuXG52YXIgY29udmVydCA9IHt9O1xuXG52YXIgbW9kZWxzID0gT2JqZWN0LmtleXMoY29udmVyc2lvbnMpO1xuXG5mdW5jdGlvbiB3cmFwUmF3KGZuKSB7XG5cdHZhciB3cmFwcGVkRm4gPSBmdW5jdGlvbiAoYXJncykge1xuXHRcdGlmIChhcmdzID09PSB1bmRlZmluZWQgfHwgYXJncyA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIGFyZ3M7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG5cdFx0XHRhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZm4oYXJncyk7XG5cdH07XG5cblx0Ly8gcHJlc2VydmUgLmNvbnZlcnNpb24gcHJvcGVydHkgaWYgdGhlcmUgaXMgb25lXG5cdGlmICgnY29udmVyc2lvbicgaW4gZm4pIHtcblx0XHR3cmFwcGVkRm4uY29udmVyc2lvbiA9IGZuLmNvbnZlcnNpb247XG5cdH1cblxuXHRyZXR1cm4gd3JhcHBlZEZuO1xufVxuXG5mdW5jdGlvbiB3cmFwUm91bmRlZChmbikge1xuXHR2YXIgd3JhcHBlZEZuID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0XHRpZiAoYXJncyA9PT0gdW5kZWZpbmVkIHx8IGFyZ3MgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBhcmdzO1xuXHRcdH1cblxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdFx0YXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlc3VsdCA9IGZuKGFyZ3MpO1xuXG5cdFx0Ly8gd2UncmUgYXNzdW1pbmcgdGhlIHJlc3VsdCBpcyBhbiBhcnJheSBoZXJlLlxuXHRcdC8vIHNlZSBub3RpY2UgaW4gY29udmVyc2lvbnMuanM7IGRvbid0IHVzZSBib3ggdHlwZXNcblx0XHQvLyBpbiBjb252ZXJzaW9uIGZ1bmN0aW9ucy5cblx0XHRpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcpIHtcblx0XHRcdGZvciAodmFyIGxlbiA9IHJlc3VsdC5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0cmVzdWx0W2ldID0gTWF0aC5yb3VuZChyZXN1bHRbaV0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Ly8gcHJlc2VydmUgLmNvbnZlcnNpb24gcHJvcGVydHkgaWYgdGhlcmUgaXMgb25lXG5cdGlmICgnY29udmVyc2lvbicgaW4gZm4pIHtcblx0XHR3cmFwcGVkRm4uY29udmVyc2lvbiA9IGZuLmNvbnZlcnNpb247XG5cdH1cblxuXHRyZXR1cm4gd3JhcHBlZEZuO1xufVxuXG5tb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAoZnJvbU1vZGVsKSB7XG5cdGNvbnZlcnRbZnJvbU1vZGVsXSA9IHt9O1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb252ZXJ0W2Zyb21Nb2RlbF0sICdjaGFubmVscycsIHt2YWx1ZTogY29udmVyc2lvbnNbZnJvbU1vZGVsXS5jaGFubmVsc30pO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udmVydFtmcm9tTW9kZWxdLCAnbGFiZWxzJywge3ZhbHVlOiBjb252ZXJzaW9uc1tmcm9tTW9kZWxdLmxhYmVsc30pO1xuXG5cdHZhciByb3V0ZXMgPSByb3V0ZShmcm9tTW9kZWwpO1xuXHR2YXIgcm91dGVNb2RlbHMgPSBPYmplY3Qua2V5cyhyb3V0ZXMpO1xuXG5cdHJvdXRlTW9kZWxzLmZvckVhY2goZnVuY3Rpb24gKHRvTW9kZWwpIHtcblx0XHR2YXIgZm4gPSByb3V0ZXNbdG9Nb2RlbF07XG5cblx0XHRjb252ZXJ0W2Zyb21Nb2RlbF1bdG9Nb2RlbF0gPSB3cmFwUm91bmRlZChmbik7XG5cdFx0Y29udmVydFtmcm9tTW9kZWxdW3RvTW9kZWxdLnJhdyA9IHdyYXBSYXcoZm4pO1xuXHR9KTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnZlcnQ7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsV0FBVyxHQUFHQyxPQUFPLENBQUMsZUFBZSxDQUFDO0FBQzFDLElBQUlDLEtBQUssR0FBR0QsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUU5QixJQUFJRSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBRWhCLElBQUlDLE1BQU0sR0FBR0MsTUFBTSxDQUFDQyxJQUFJLENBQUNOLFdBQVcsQ0FBQztBQUVyQyxTQUFTTyxPQUFPQSxDQUFDQyxFQUFFLEVBQUU7RUFDcEIsSUFBSUMsU0FBUyxHQUFHLFNBQUFBLENBQVVDLElBQUksRUFBRTtJQUMvQixJQUFJQSxJQUFJLEtBQUtDLFNBQVMsSUFBSUQsSUFBSSxLQUFLLElBQUksRUFBRTtNQUN4QyxPQUFPQSxJQUFJO0lBQ1o7SUFFQSxJQUFJRSxTQUFTLENBQUNDLE1BQU0sR0FBRyxDQUFDLEVBQUU7TUFDekJILElBQUksR0FBR0ksS0FBSyxDQUFDQyxTQUFTLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDTCxTQUFTLENBQUM7SUFDN0M7SUFFQSxPQUFPSixFQUFFLENBQUNFLElBQUksQ0FBQztFQUNoQixDQUFDOztFQUVEO0VBQ0EsSUFBSSxZQUFZLElBQUlGLEVBQUUsRUFBRTtJQUN2QkMsU0FBUyxDQUFDUyxVQUFVLEdBQUdWLEVBQUUsQ0FBQ1UsVUFBVTtFQUNyQztFQUVBLE9BQU9ULFNBQVM7QUFDakI7QUFFQSxTQUFTVSxXQUFXQSxDQUFDWCxFQUFFLEVBQUU7RUFDeEIsSUFBSUMsU0FBUyxHQUFHLFNBQUFBLENBQVVDLElBQUksRUFBRTtJQUMvQixJQUFJQSxJQUFJLEtBQUtDLFNBQVMsSUFBSUQsSUFBSSxLQUFLLElBQUksRUFBRTtNQUN4QyxPQUFPQSxJQUFJO0lBQ1o7SUFFQSxJQUFJRSxTQUFTLENBQUNDLE1BQU0sR0FBRyxDQUFDLEVBQUU7TUFDekJILElBQUksR0FBR0ksS0FBSyxDQUFDQyxTQUFTLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDTCxTQUFTLENBQUM7SUFDN0M7SUFFQSxJQUFJUSxNQUFNLEdBQUdaLEVBQUUsQ0FBQ0UsSUFBSSxDQUFDOztJQUVyQjtJQUNBO0lBQ0E7SUFDQSxJQUFJLE9BQU9VLE1BQU0sS0FBSyxRQUFRLEVBQUU7TUFDL0IsS0FBSyxJQUFJQyxHQUFHLEdBQUdELE1BQU0sQ0FBQ1AsTUFBTSxFQUFFUyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdELEdBQUcsRUFBRUMsQ0FBQyxFQUFFLEVBQUU7UUFDbERGLE1BQU0sQ0FBQ0UsQ0FBQyxDQUFDLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDSixNQUFNLENBQUNFLENBQUMsQ0FBQyxDQUFDO01BQ2xDO0lBQ0Q7SUFFQSxPQUFPRixNQUFNO0VBQ2QsQ0FBQzs7RUFFRDtFQUNBLElBQUksWUFBWSxJQUFJWixFQUFFLEVBQUU7SUFDdkJDLFNBQVMsQ0FBQ1MsVUFBVSxHQUFHVixFQUFFLENBQUNVLFVBQVU7RUFDckM7RUFFQSxPQUFPVCxTQUFTO0FBQ2pCO0FBRUFMLE1BQU0sQ0FBQ3FCLE9BQU8sQ0FBQyxVQUFVQyxTQUFTLEVBQUU7RUFDbkN2QixPQUFPLENBQUN1QixTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7RUFFdkJyQixNQUFNLENBQUNzQixjQUFjLENBQUN4QixPQUFPLENBQUN1QixTQUFTLENBQUMsRUFBRSxVQUFVLEVBQUU7SUFBQ0UsS0FBSyxFQUFFNUIsV0FBVyxDQUFDMEIsU0FBUyxDQUFDLENBQUNHO0VBQVEsQ0FBQyxDQUFDO0VBQy9GeEIsTUFBTSxDQUFDc0IsY0FBYyxDQUFDeEIsT0FBTyxDQUFDdUIsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFO0lBQUNFLEtBQUssRUFBRTVCLFdBQVcsQ0FBQzBCLFNBQVMsQ0FBQyxDQUFDSTtFQUFNLENBQUMsQ0FBQztFQUUzRixJQUFJQyxNQUFNLEdBQUc3QixLQUFLLENBQUN3QixTQUFTLENBQUM7RUFDN0IsSUFBSU0sV0FBVyxHQUFHM0IsTUFBTSxDQUFDQyxJQUFJLENBQUN5QixNQUFNLENBQUM7RUFFckNDLFdBQVcsQ0FBQ1AsT0FBTyxDQUFDLFVBQVVRLE9BQU8sRUFBRTtJQUN0QyxJQUFJekIsRUFBRSxHQUFHdUIsTUFBTSxDQUFDRSxPQUFPLENBQUM7SUFFeEI5QixPQUFPLENBQUN1QixTQUFTLENBQUMsQ0FBQ08sT0FBTyxDQUFDLEdBQUdkLFdBQVcsQ0FBQ1gsRUFBRSxDQUFDO0lBQzdDTCxPQUFPLENBQUN1QixTQUFTLENBQUMsQ0FBQ08sT0FBTyxDQUFDLENBQUNDLEdBQUcsR0FBRzNCLE9BQU8sQ0FBQ0MsRUFBRSxDQUFDO0VBQzlDLENBQUMsQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGMkIsTUFBTSxDQUFDQyxPQUFPLEdBQUdqQyxPQUFPIn0=