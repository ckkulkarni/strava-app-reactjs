fc50dc52893f7e21d037e44387329cc3
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useSlotProps;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _utils = require("@mui/utils");
var _appendOwnerState = _interopRequireDefault(require("./appendOwnerState"));
var _mergeSlotProps = _interopRequireDefault(require("./mergeSlotProps"));
var _resolveComponentProps = _interopRequireDefault(require("./resolveComponentProps"));
const _excluded = ["elementType", "externalSlotProps", "ownerState"];
/**
 * @ignore - do not document.
 * Builds the props to be passed into the slot of an unstyled component.
 * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.
 * If the slot component is not a host component, it also merges in the `ownerState`.
 *
 * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.
 */
function useSlotProps(parameters) {
  var _parameters$additiona;
  const {
      elementType,
      externalSlotProps,
      ownerState
    } = parameters,
    rest = (0, _objectWithoutPropertiesLoose2.default)(parameters, _excluded);
  const resolvedComponentsProps = (0, _resolveComponentProps.default)(externalSlotProps, ownerState);
  const {
    props: mergedProps,
    internalRef
  } = (0, _mergeSlotProps.default)((0, _extends2.default)({}, rest, {
    externalSlotProps: resolvedComponentsProps
  }));
  const ref = (0, _utils.unstable_useForkRef)(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
  const props = (0, _appendOwnerState.default)(elementType, (0, _extends2.default)({}, mergedProps, {
    ref
  }), ownerState);
  return props;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsInVzZVNsb3RQcm9wcyIsIl9leHRlbmRzMiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiIsIl91dGlscyIsIl9hcHBlbmRPd25lclN0YXRlIiwiX21lcmdlU2xvdFByb3BzIiwiX3Jlc29sdmVDb21wb25lbnRQcm9wcyIsIl9leGNsdWRlZCIsInBhcmFtZXRlcnMiLCJfcGFyYW1ldGVycyRhZGRpdGlvbmEiLCJlbGVtZW50VHlwZSIsImV4dGVybmFsU2xvdFByb3BzIiwib3duZXJTdGF0ZSIsInJlc3QiLCJyZXNvbHZlZENvbXBvbmVudHNQcm9wcyIsInByb3BzIiwibWVyZ2VkUHJvcHMiLCJpbnRlcm5hbFJlZiIsInJlZiIsInVuc3RhYmxlX3VzZUZvcmtSZWYiLCJhZGRpdGlvbmFsUHJvcHMiXSwic291cmNlcyI6WyJ1c2VTbG90UHJvcHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVzZVNsb3RQcm9wcztcbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKSk7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtdWkvdXRpbHNcIik7XG52YXIgX2FwcGVuZE93bmVyU3RhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2FwcGVuZE93bmVyU3RhdGVcIikpO1xudmFyIF9tZXJnZVNsb3RQcm9wcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbWVyZ2VTbG90UHJvcHNcIikpO1xudmFyIF9yZXNvbHZlQ29tcG9uZW50UHJvcHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3Jlc29sdmVDb21wb25lbnRQcm9wc1wiKSk7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJlbGVtZW50VHlwZVwiLCBcImV4dGVybmFsU2xvdFByb3BzXCIsIFwib3duZXJTdGF0ZVwiXTtcbi8qKlxuICogQGlnbm9yZSAtIGRvIG5vdCBkb2N1bWVudC5cbiAqIEJ1aWxkcyB0aGUgcHJvcHMgdG8gYmUgcGFzc2VkIGludG8gdGhlIHNsb3Qgb2YgYW4gdW5zdHlsZWQgY29tcG9uZW50LlxuICogSXQgbWVyZ2VzIHRoZSBpbnRlcm5hbCBwcm9wcyBvZiB0aGUgY29tcG9uZW50IHdpdGggdGhlIG9uZXMgc3VwcGxpZWQgYnkgdGhlIHVzZXIsIGFsbG93aW5nIHRvIGN1c3RvbWl6ZSB0aGUgYmVoYXZpb3IuXG4gKiBJZiB0aGUgc2xvdCBjb21wb25lbnQgaXMgbm90IGEgaG9zdCBjb21wb25lbnQsIGl0IGFsc28gbWVyZ2VzIGluIHRoZSBgb3duZXJTdGF0ZWAuXG4gKlxuICogQHBhcmFtIHBhcmFtZXRlcnMuZ2V0U2xvdFByb3BzIC0gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHByb3BzIHRvIGJlIHBhc3NlZCB0byB0aGUgc2xvdCBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIHVzZVNsb3RQcm9wcyhwYXJhbWV0ZXJzKSB7XG4gIHZhciBfcGFyYW1ldGVycyRhZGRpdGlvbmE7XG4gIGNvbnN0IHtcbiAgICAgIGVsZW1lbnRUeXBlLFxuICAgICAgZXh0ZXJuYWxTbG90UHJvcHMsXG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHBhcmFtZXRlcnMsXG4gICAgcmVzdCA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkocGFyYW1ldGVycywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgcmVzb2x2ZWRDb21wb25lbnRzUHJvcHMgPSAoMCwgX3Jlc29sdmVDb21wb25lbnRQcm9wcy5kZWZhdWx0KShleHRlcm5hbFNsb3RQcm9wcywgb3duZXJTdGF0ZSk7XG4gIGNvbnN0IHtcbiAgICBwcm9wczogbWVyZ2VkUHJvcHMsXG4gICAgaW50ZXJuYWxSZWZcbiAgfSA9ICgwLCBfbWVyZ2VTbG90UHJvcHMuZGVmYXVsdCkoKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcmVzdCwge1xuICAgIGV4dGVybmFsU2xvdFByb3BzOiByZXNvbHZlZENvbXBvbmVudHNQcm9wc1xuICB9KSk7XG4gIGNvbnN0IHJlZiA9ICgwLCBfdXRpbHMudW5zdGFibGVfdXNlRm9ya1JlZikoaW50ZXJuYWxSZWYsIHJlc29sdmVkQ29tcG9uZW50c1Byb3BzID09IG51bGwgPyB2b2lkIDAgOiByZXNvbHZlZENvbXBvbmVudHNQcm9wcy5yZWYsIChfcGFyYW1ldGVycyRhZGRpdGlvbmEgPSBwYXJhbWV0ZXJzLmFkZGl0aW9uYWxQcm9wcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYXJhbWV0ZXJzJGFkZGl0aW9uYS5yZWYpO1xuICBjb25zdCBwcm9wcyA9ICgwLCBfYXBwZW5kT3duZXJTdGF0ZS5kZWZhdWx0KShlbGVtZW50VHlwZSwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgbWVyZ2VkUHJvcHMsIHtcbiAgICByZWZcbiAgfSksIG93bmVyU3RhdGUpO1xuICByZXR1cm4gcHJvcHM7XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLHNCQUFzQixHQUFHQyxPQUFPLENBQUMsOENBQThDLENBQUM7QUFDcEZDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxPQUFPLEdBQUdDLFlBQVk7QUFDOUIsSUFBSUMsU0FBUyxHQUFHUixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDakYsSUFBSVEsOEJBQThCLEdBQUdULHNCQUFzQixDQUFDQyxPQUFPLENBQUMscURBQXFELENBQUMsQ0FBQztBQUMzSCxJQUFJUyxNQUFNLEdBQUdULE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDbEMsSUFBSVUsaUJBQWlCLEdBQUdYLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUM3RSxJQUFJVyxlQUFlLEdBQUdaLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUN6RSxJQUFJWSxzQkFBc0IsR0FBR2Isc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0FBQ3ZGLE1BQU1hLFNBQVMsR0FBRyxDQUFDLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxZQUFZLENBQUM7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNQLFlBQVlBLENBQUNRLFVBQVUsRUFBRTtFQUNoQyxJQUFJQyxxQkFBcUI7RUFDekIsTUFBTTtNQUNGQyxXQUFXO01BQ1hDLGlCQUFpQjtNQUNqQkM7SUFDRixDQUFDLEdBQUdKLFVBQVU7SUFDZEssSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFWCw4QkFBOEIsQ0FBQ0gsT0FBTyxFQUFFUyxVQUFVLEVBQUVELFNBQVMsQ0FBQztFQUMzRSxNQUFNTyx1QkFBdUIsR0FBRyxDQUFDLENBQUMsRUFBRVIsc0JBQXNCLENBQUNQLE9BQU8sRUFBRVksaUJBQWlCLEVBQUVDLFVBQVUsQ0FBQztFQUNsRyxNQUFNO0lBQ0pHLEtBQUssRUFBRUMsV0FBVztJQUNsQkM7RUFDRixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUVaLGVBQWUsQ0FBQ04sT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFRSxTQUFTLENBQUNGLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRWMsSUFBSSxFQUFFO0lBQ2hFRixpQkFBaUIsRUFBRUc7RUFDckIsQ0FBQyxDQUFDLENBQUM7RUFDSCxNQUFNSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUVmLE1BQU0sQ0FBQ2dCLG1CQUFtQixFQUFFRixXQUFXLEVBQUVILHVCQUF1QixJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBR0EsdUJBQXVCLENBQUNJLEdBQUcsRUFBRSxDQUFDVCxxQkFBcUIsR0FBR0QsVUFBVSxDQUFDWSxlQUFlLEtBQUssSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHWCxxQkFBcUIsQ0FBQ1MsR0FBRyxDQUFDO0VBQ25PLE1BQU1ILEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRVgsaUJBQWlCLENBQUNMLE9BQU8sRUFBRVcsV0FBVyxFQUFFLENBQUMsQ0FBQyxFQUFFVCxTQUFTLENBQUNGLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRWlCLFdBQVcsRUFBRTtJQUNoR0U7RUFDRixDQUFDLENBQUMsRUFBRU4sVUFBVSxDQUFDO0VBQ2YsT0FBT0csS0FBSztBQUNkIn0=