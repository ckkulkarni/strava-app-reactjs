40794019eb7c45a753f67b4ba9a639fe
/**
 * @mui/base v5.0.0-alpha.122
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  BadgeUnstyled: true,
  ButtonUnstyled: true,
  ClickAwayListener: true,
  unstable_composeClasses: true,
  FocusTrap: true,
  FormControlUnstyled: true,
  InputUnstyled: true,
  MenuUnstyled: true,
  MenuItemUnstyled: true,
  ModalUnstyled: true,
  NoSsr: true,
  OptionGroupUnstyled: true,
  OptionUnstyled: true,
  PopperUnstyled: true,
  Portal: true,
  SelectUnstyled: true,
  SliderUnstyled: true,
  SnackbarUnstyled: true,
  SwitchUnstyled: true,
  TablePaginationUnstyled: true,
  TabPanelUnstyled: true,
  TabsListUnstyled: true,
  TabsUnstyled: true,
  TabUnstyled: true,
  TextareaAutosize: true,
  useAutocomplete: true,
  useBadge: true,
  useButton: true,
  useInput: true,
  useListbox: true,
  useMenu: true,
  useMenuItem: true,
  useOption: true,
  useSelect: true,
  useSlider: true,
  useSnackbar: true,
  useSwitch: true,
  useTab: true,
  useTabPanel: true,
  useTabs: true,
  useTabsList: true
};
Object.defineProperty(exports, "BadgeUnstyled", {
  enumerable: true,
  get: function () {
    return _BadgeUnstyled.default;
  }
});
Object.defineProperty(exports, "ButtonUnstyled", {
  enumerable: true,
  get: function () {
    return _ButtonUnstyled.default;
  }
});
Object.defineProperty(exports, "ClickAwayListener", {
  enumerable: true,
  get: function () {
    return _ClickAwayListener.default;
  }
});
Object.defineProperty(exports, "FocusTrap", {
  enumerable: true,
  get: function () {
    return _FocusTrap.default;
  }
});
Object.defineProperty(exports, "FormControlUnstyled", {
  enumerable: true,
  get: function () {
    return _FormControlUnstyled.default;
  }
});
Object.defineProperty(exports, "InputUnstyled", {
  enumerable: true,
  get: function () {
    return _InputUnstyled.default;
  }
});
Object.defineProperty(exports, "MenuItemUnstyled", {
  enumerable: true,
  get: function () {
    return _MenuItemUnstyled.default;
  }
});
Object.defineProperty(exports, "MenuUnstyled", {
  enumerable: true,
  get: function () {
    return _MenuUnstyled.default;
  }
});
Object.defineProperty(exports, "ModalUnstyled", {
  enumerable: true,
  get: function () {
    return _ModalUnstyled.default;
  }
});
Object.defineProperty(exports, "NoSsr", {
  enumerable: true,
  get: function () {
    return _NoSsr.default;
  }
});
Object.defineProperty(exports, "OptionGroupUnstyled", {
  enumerable: true,
  get: function () {
    return _OptionGroupUnstyled.default;
  }
});
Object.defineProperty(exports, "OptionUnstyled", {
  enumerable: true,
  get: function () {
    return _OptionUnstyled.default;
  }
});
Object.defineProperty(exports, "PopperUnstyled", {
  enumerable: true,
  get: function () {
    return _PopperUnstyled.default;
  }
});
Object.defineProperty(exports, "Portal", {
  enumerable: true,
  get: function () {
    return _Portal.default;
  }
});
Object.defineProperty(exports, "SelectUnstyled", {
  enumerable: true,
  get: function () {
    return _SelectUnstyled.default;
  }
});
Object.defineProperty(exports, "SliderUnstyled", {
  enumerable: true,
  get: function () {
    return _SliderUnstyled.default;
  }
});
Object.defineProperty(exports, "SnackbarUnstyled", {
  enumerable: true,
  get: function () {
    return _SnackbarUnstyled.default;
  }
});
Object.defineProperty(exports, "SwitchUnstyled", {
  enumerable: true,
  get: function () {
    return _SwitchUnstyled.default;
  }
});
Object.defineProperty(exports, "TabPanelUnstyled", {
  enumerable: true,
  get: function () {
    return _TabPanelUnstyled.default;
  }
});
Object.defineProperty(exports, "TabUnstyled", {
  enumerable: true,
  get: function () {
    return _TabUnstyled.default;
  }
});
Object.defineProperty(exports, "TablePaginationUnstyled", {
  enumerable: true,
  get: function () {
    return _TablePaginationUnstyled.default;
  }
});
Object.defineProperty(exports, "TabsListUnstyled", {
  enumerable: true,
  get: function () {
    return _TabsListUnstyled.default;
  }
});
Object.defineProperty(exports, "TabsUnstyled", {
  enumerable: true,
  get: function () {
    return _TabsUnstyled.default;
  }
});
Object.defineProperty(exports, "TextareaAutosize", {
  enumerable: true,
  get: function () {
    return _TextareaAutosize.default;
  }
});
Object.defineProperty(exports, "unstable_composeClasses", {
  enumerable: true,
  get: function () {
    return _composeClasses.default;
  }
});
Object.defineProperty(exports, "useAutocomplete", {
  enumerable: true,
  get: function () {
    return _useAutocomplete.default;
  }
});
Object.defineProperty(exports, "useBadge", {
  enumerable: true,
  get: function () {
    return _useBadge.default;
  }
});
Object.defineProperty(exports, "useButton", {
  enumerable: true,
  get: function () {
    return _useButton.default;
  }
});
Object.defineProperty(exports, "useInput", {
  enumerable: true,
  get: function () {
    return _useInput.default;
  }
});
Object.defineProperty(exports, "useListbox", {
  enumerable: true,
  get: function () {
    return _useListbox.default;
  }
});
Object.defineProperty(exports, "useMenu", {
  enumerable: true,
  get: function () {
    return _useMenu.default;
  }
});
Object.defineProperty(exports, "useMenuItem", {
  enumerable: true,
  get: function () {
    return _useMenuItem.default;
  }
});
Object.defineProperty(exports, "useOption", {
  enumerable: true,
  get: function () {
    return _useOption.default;
  }
});
Object.defineProperty(exports, "useSelect", {
  enumerable: true,
  get: function () {
    return _useSelect.default;
  }
});
Object.defineProperty(exports, "useSlider", {
  enumerable: true,
  get: function () {
    return _useSlider.default;
  }
});
Object.defineProperty(exports, "useSnackbar", {
  enumerable: true,
  get: function () {
    return _useSnackbar.default;
  }
});
Object.defineProperty(exports, "useSwitch", {
  enumerable: true,
  get: function () {
    return _useSwitch.default;
  }
});
Object.defineProperty(exports, "useTab", {
  enumerable: true,
  get: function () {
    return _useTab.default;
  }
});
Object.defineProperty(exports, "useTabPanel", {
  enumerable: true,
  get: function () {
    return _useTabPanel.default;
  }
});
Object.defineProperty(exports, "useTabs", {
  enumerable: true,
  get: function () {
    return _useTabs.default;
  }
});
Object.defineProperty(exports, "useTabsList", {
  enumerable: true,
  get: function () {
    return _useTabsList.default;
  }
});
var _utils = require("./utils");
Object.keys(_utils).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _utils[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _utils[key];
    }
  });
});
var _BadgeUnstyled = _interopRequireWildcard(require("./BadgeUnstyled"));
Object.keys(_BadgeUnstyled).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _BadgeUnstyled[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BadgeUnstyled[key];
    }
  });
});
var _ButtonUnstyled = _interopRequireWildcard(require("./ButtonUnstyled"));
Object.keys(_ButtonUnstyled).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _ButtonUnstyled[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ButtonUnstyled[key];
    }
  });
});
var _ClickAwayListener = _interopRequireDefault(require("./ClickAwayListener"));
var _composeClasses = _interopRequireDefault(require("./composeClasses"));
var _FocusTrap = _interopRequireDefault(require("./FocusTrap"));
var _FormControlUnstyled = _interopRequireWildcard(require("./FormControlUnstyled"));
Object.keys(_FormControlUnstyled).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _FormControlUnstyled[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _FormControlUnstyled[key];
    }
  });
});
var _InputUnstyled = _interopRequireWildcard(require("./InputUnstyled"));
Object.keys(_InputUnstyled).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _InputUnstyled[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _InputUnstyled[key];
    }
  });
});
var _MenuUnstyled = _interopRequireWildcard(require("./MenuUnstyled"));
Object.keys(_MenuUnstyled).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _MenuUnstyled[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _MenuUnstyled[key];
    }
  });
});
var _MenuItemUnstyled = _interopRequireWildcard(require("./MenuItemUnstyled"));
Object.keys(_MenuItemUnstyled).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _MenuItemUnstyled[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _MenuItemUnstyled[key];
    }
  });
});
var _ModalUnstyled = _interopRequireWildcard(require("./ModalUnstyled"));
Object.keys(_ModalUnstyled).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _ModalUnstyled[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ModalUnstyled[key];
    }
  });
});
var _NoSsr = _interopRequireDefault(require("./NoSsr"));
var _OptionGroupUnstyled = _interopRequireWildcard(require("./OptionGroupUnstyled"));
Object.keys(_OptionGroupUnstyled).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _OptionGroupUnstyled[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _OptionGroupUnstyled[key];
    }
  });
});
var _OptionUnstyled = _interopRequireWildcard(require("./OptionUnstyled"));
Object.keys(_OptionUnstyled).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _OptionUnstyled[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _OptionUnstyled[key];
    }
  });
});
var _PopperUnstyled = _interopRequireDefault(require("./PopperUnstyled"));
var _Portal = _interopRequireDefault(require("./Portal"));
var _SelectUnstyled = _interopRequireWildcard(require("./SelectUnstyled"));
Object.keys(_SelectUnstyled).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _SelectUnstyled[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _SelectUnstyled[key];
    }
  });
});
var _SliderUnstyled = _interopRequireWildcard(require("./SliderUnstyled"));
Object.keys(_SliderUnstyled).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _SliderUnstyled[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _SliderUnstyled[key];
    }
  });
});
var _SnackbarUnstyled = _interopRequireWildcard(require("./SnackbarUnstyled"));
Object.keys(_SnackbarUnstyled).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _SnackbarUnstyled[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _SnackbarUnstyled[key];
    }
  });
});
var _SwitchUnstyled = _interopRequireWildcard(require("./SwitchUnstyled"));
Object.keys(_SwitchUnstyled).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _SwitchUnstyled[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _SwitchUnstyled[key];
    }
  });
});
var _TablePaginationUnstyled = _interopRequireWildcard(require("./TablePaginationUnstyled"));
Object.keys(_TablePaginationUnstyled).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _TablePaginationUnstyled[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _TablePaginationUnstyled[key];
    }
  });
});
var _TabPanelUnstyled = _interopRequireWildcard(require("./TabPanelUnstyled"));
Object.keys(_TabPanelUnstyled).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _TabPanelUnstyled[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _TabPanelUnstyled[key];
    }
  });
});
var _TabsListUnstyled = _interopRequireWildcard(require("./TabsListUnstyled"));
Object.keys(_TabsListUnstyled).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _TabsListUnstyled[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _TabsListUnstyled[key];
    }
  });
});
var _TabsUnstyled = _interopRequireWildcard(require("./TabsUnstyled"));
Object.keys(_TabsUnstyled).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _TabsUnstyled[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _TabsUnstyled[key];
    }
  });
});
var _TabUnstyled = _interopRequireWildcard(require("./TabUnstyled"));
Object.keys(_TabUnstyled).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _TabUnstyled[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _TabUnstyled[key];
    }
  });
});
var _TextareaAutosize = _interopRequireDefault(require("./TextareaAutosize"));
var _useAutocomplete = _interopRequireWildcard(require("./useAutocomplete"));
Object.keys(_useAutocomplete).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useAutocomplete[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useAutocomplete[key];
    }
  });
});
var _useBadge = _interopRequireWildcard(require("./useBadge"));
Object.keys(_useBadge).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useBadge[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useBadge[key];
    }
  });
});
var _useButton = _interopRequireWildcard(require("./useButton"));
Object.keys(_useButton).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useButton[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useButton[key];
    }
  });
});
var _useInput = _interopRequireWildcard(require("./useInput"));
Object.keys(_useInput).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useInput[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useInput[key];
    }
  });
});
var _useListbox = _interopRequireWildcard(require("./useListbox"));
Object.keys(_useListbox).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useListbox[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useListbox[key];
    }
  });
});
var _useMenu = _interopRequireWildcard(require("./useMenu"));
Object.keys(_useMenu).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useMenu[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useMenu[key];
    }
  });
});
var _useMenuItem = _interopRequireWildcard(require("./useMenuItem"));
Object.keys(_useMenuItem).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useMenuItem[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useMenuItem[key];
    }
  });
});
var _useOption = _interopRequireWildcard(require("./useOption"));
Object.keys(_useOption).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useOption[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useOption[key];
    }
  });
});
var _useSelect = _interopRequireWildcard(require("./useSelect"));
Object.keys(_useSelect).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useSelect[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useSelect[key];
    }
  });
});
var _useSlider = _interopRequireWildcard(require("./useSlider"));
Object.keys(_useSlider).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useSlider[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useSlider[key];
    }
  });
});
var _useSnackbar = _interopRequireWildcard(require("./useSnackbar"));
Object.keys(_useSnackbar).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useSnackbar[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useSnackbar[key];
    }
  });
});
var _useSwitch = _interopRequireWildcard(require("./useSwitch"));
Object.keys(_useSwitch).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useSwitch[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useSwitch[key];
    }
  });
});
var _useTab = _interopRequireWildcard(require("./useTab"));
Object.keys(_useTab).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useTab[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useTab[key];
    }
  });
});
var _useTabPanel = _interopRequireWildcard(require("./useTabPanel"));
Object.keys(_useTabPanel).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useTabPanel[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useTabPanel[key];
    }
  });
});
var _useTabs = _interopRequireWildcard(require("./useTabs"));
Object.keys(_useTabs).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useTabs[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useTabs[key];
    }
  });
});
var _useTabsList = _interopRequireWildcard(require("./useTabsList"));
Object.keys(_useTabsList).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _useTabsList[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _useTabsList[key];
    }
  });
});
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,