52878f83fcc549ad9b0dac7c331a4c9f
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.test = exports.serialize = exports.default = void 0;
var _collections = require('../collections');
var global = function () {
  if (typeof globalThis !== 'undefined') {
    return globalThis;
  } else if (typeof global !== 'undefined') {
    return global;
  } else if (typeof self !== 'undefined') {
    return self;
  } else if (typeof window !== 'undefined') {
    return window;
  } else {
    return Function('return this')();
  }
}();
var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
const asymmetricMatcher = typeof Symbol === 'function' && Symbol.for ? Symbol.for('jest.asymmetricMatcher') : 0x1357a5;
const SPACE = ' ';
const serialize = (val, config, indentation, depth, refs, printer) => {
  const stringedValue = val.toString();
  if (stringedValue === 'ArrayContaining' || stringedValue === 'ArrayNotContaining') {
    if (++depth > config.maxDepth) {
      return '[' + stringedValue + ']';
    }
    return stringedValue + SPACE + '[' + (0, _collections.printListItems)(val.sample, config, indentation, depth, refs, printer) + ']';
  }
  if (stringedValue === 'ObjectContaining' || stringedValue === 'ObjectNotContaining') {
    if (++depth > config.maxDepth) {
      return '[' + stringedValue + ']';
    }
    return stringedValue + SPACE + '{' + (0, _collections.printObjectProperties)(val.sample, config, indentation, depth, refs, printer) + '}';
  }
  if (stringedValue === 'StringMatching' || stringedValue === 'StringNotMatching') {
    return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
  }
  if (stringedValue === 'StringContaining' || stringedValue === 'StringNotContaining') {
    return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
  }
  return val.toAsymmetricMatcher();
};
exports.serialize = serialize;
const test = val => val && val.$$typeof === asymmetricMatcher;
exports.test = test;
const plugin = {
  serialize,
  test
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRlc3QiLCJzZXJpYWxpemUiLCJkZWZhdWx0IiwiX2NvbGxlY3Rpb25zIiwicmVxdWlyZSIsImdsb2JhbCIsImdsb2JhbFRoaXMiLCJzZWxmIiwid2luZG93IiwiRnVuY3Rpb24iLCJTeW1ib2wiLCJhc3ltbWV0cmljTWF0Y2hlciIsImZvciIsIlNQQUNFIiwidmFsIiwiY29uZmlnIiwiaW5kZW50YXRpb24iLCJkZXB0aCIsInJlZnMiLCJwcmludGVyIiwic3RyaW5nZWRWYWx1ZSIsInRvU3RyaW5nIiwibWF4RGVwdGgiLCJwcmludExpc3RJdGVtcyIsInNhbXBsZSIsInByaW50T2JqZWN0UHJvcGVydGllcyIsInRvQXN5bW1ldHJpY01hdGNoZXIiLCIkJHR5cGVvZiIsInBsdWdpbiIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiQXN5bW1ldHJpY01hdGNoZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudGVzdCA9IGV4cG9ydHMuc2VyaWFsaXplID0gZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2NvbGxlY3Rpb25zID0gcmVxdWlyZSgnLi4vY29sbGVjdGlvbnMnKTtcblxudmFyIGdsb2JhbCA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZ2xvYmFsVGhpcztcbiAgfSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBnbG9iYWw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuICB9XG59KSgpO1xuXG52YXIgU3ltYm9sID0gZ2xvYmFsWydqZXN0LXN5bWJvbC1kby1ub3QtdG91Y2gnXSB8fCBnbG9iYWwuU3ltYm9sO1xuY29uc3QgYXN5bW1ldHJpY01hdGNoZXIgPVxuICB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3JcbiAgICA/IFN5bWJvbC5mb3IoJ2plc3QuYXN5bW1ldHJpY01hdGNoZXInKVxuICAgIDogMHgxMzU3YTU7XG5jb25zdCBTUEFDRSA9ICcgJztcblxuY29uc3Qgc2VyaWFsaXplID0gKHZhbCwgY29uZmlnLCBpbmRlbnRhdGlvbiwgZGVwdGgsIHJlZnMsIHByaW50ZXIpID0+IHtcbiAgY29uc3Qgc3RyaW5nZWRWYWx1ZSA9IHZhbC50b1N0cmluZygpO1xuXG4gIGlmIChcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnQXJyYXlDb250YWluaW5nJyB8fFxuICAgIHN0cmluZ2VkVmFsdWUgPT09ICdBcnJheU5vdENvbnRhaW5pbmcnXG4gICkge1xuICAgIGlmICgrK2RlcHRoID4gY29uZmlnLm1heERlcHRoKSB7XG4gICAgICByZXR1cm4gJ1snICsgc3RyaW5nZWRWYWx1ZSArICddJztcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgc3RyaW5nZWRWYWx1ZSArXG4gICAgICBTUEFDRSArXG4gICAgICAnWycgK1xuICAgICAgKDAsIF9jb2xsZWN0aW9ucy5wcmludExpc3RJdGVtcykoXG4gICAgICAgIHZhbC5zYW1wbGUsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgaW5kZW50YXRpb24sXG4gICAgICAgIGRlcHRoLFxuICAgICAgICByZWZzLFxuICAgICAgICBwcmludGVyXG4gICAgICApICtcbiAgICAgICddJ1xuICAgICk7XG4gIH1cblxuICBpZiAoXG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ09iamVjdENvbnRhaW5pbmcnIHx8XG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ09iamVjdE5vdENvbnRhaW5pbmcnXG4gICkge1xuICAgIGlmICgrK2RlcHRoID4gY29uZmlnLm1heERlcHRoKSB7XG4gICAgICByZXR1cm4gJ1snICsgc3RyaW5nZWRWYWx1ZSArICddJztcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgc3RyaW5nZWRWYWx1ZSArXG4gICAgICBTUEFDRSArXG4gICAgICAneycgK1xuICAgICAgKDAsIF9jb2xsZWN0aW9ucy5wcmludE9iamVjdFByb3BlcnRpZXMpKFxuICAgICAgICB2YWwuc2FtcGxlLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIGluZGVudGF0aW9uLFxuICAgICAgICBkZXB0aCxcbiAgICAgICAgcmVmcyxcbiAgICAgICAgcHJpbnRlclxuICAgICAgKSArXG4gICAgICAnfSdcbiAgICApO1xuICB9XG5cbiAgaWYgKFxuICAgIHN0cmluZ2VkVmFsdWUgPT09ICdTdHJpbmdNYXRjaGluZycgfHxcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnU3RyaW5nTm90TWF0Y2hpbmcnXG4gICkge1xuICAgIHJldHVybiAoXG4gICAgICBzdHJpbmdlZFZhbHVlICtcbiAgICAgIFNQQUNFICtcbiAgICAgIHByaW50ZXIodmFsLnNhbXBsZSwgY29uZmlnLCBpbmRlbnRhdGlvbiwgZGVwdGgsIHJlZnMpXG4gICAgKTtcbiAgfVxuXG4gIGlmIChcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnU3RyaW5nQ29udGFpbmluZycgfHxcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnU3RyaW5nTm90Q29udGFpbmluZydcbiAgKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHN0cmluZ2VkVmFsdWUgK1xuICAgICAgU1BBQ0UgK1xuICAgICAgcHJpbnRlcih2YWwuc2FtcGxlLCBjb25maWcsIGluZGVudGF0aW9uLCBkZXB0aCwgcmVmcylcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHZhbC50b0FzeW1tZXRyaWNNYXRjaGVyKCk7XG59O1xuXG5leHBvcnRzLnNlcmlhbGl6ZSA9IHNlcmlhbGl6ZTtcblxuY29uc3QgdGVzdCA9IHZhbCA9PiB2YWwgJiYgdmFsLiQkdHlwZW9mID09PSBhc3ltbWV0cmljTWF0Y2hlcjtcblxuZXhwb3J0cy50ZXN0ID0gdGVzdDtcbmNvbnN0IHBsdWdpbiA9IHtcbiAgc2VyaWFsaXplLFxuICB0ZXN0XG59O1xudmFyIF9kZWZhdWx0ID0gcGx1Z2luO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxJQUFJLEdBQUdGLE9BQU8sQ0FBQ0csU0FBUyxHQUFHSCxPQUFPLENBQUNJLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFFM0QsSUFBSUMsWUFBWSxHQUFHQyxPQUFPLENBQUMsZ0JBQWdCLENBQUM7QUFFNUMsSUFBSUMsTUFBTSxHQUFJLFlBQVk7RUFDeEIsSUFBSSxPQUFPQyxVQUFVLEtBQUssV0FBVyxFQUFFO0lBQ3JDLE9BQU9BLFVBQVU7RUFDbkIsQ0FBQyxNQUFNLElBQUksT0FBT0QsTUFBTSxLQUFLLFdBQVcsRUFBRTtJQUN4QyxPQUFPQSxNQUFNO0VBQ2YsQ0FBQyxNQUFNLElBQUksT0FBT0UsSUFBSSxLQUFLLFdBQVcsRUFBRTtJQUN0QyxPQUFPQSxJQUFJO0VBQ2IsQ0FBQyxNQUFNLElBQUksT0FBT0MsTUFBTSxLQUFLLFdBQVcsRUFBRTtJQUN4QyxPQUFPQSxNQUFNO0VBQ2YsQ0FBQyxNQUFNO0lBQ0wsT0FBT0MsUUFBUSxDQUFDLGFBQWEsQ0FBQyxFQUFFO0VBQ2xDO0FBQ0YsQ0FBQyxFQUFHO0FBRUosSUFBSUMsTUFBTSxHQUFHTCxNQUFNLENBQUMsMEJBQTBCLENBQUMsSUFBSUEs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