ece18d0c57e1a67acf99696e6c2b4f25
"use strict";

var __assign = void 0 && (void 0).__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __values = void 0 && (void 0).__values || function (o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var Parser_1 = __importDefault(require("../Parser"));
var TokenMatcher_1 = __importDefault(require("../TokenMatcher"));
var cucumber_messages_1 = require("cucumber-messages");
var compile_1 = __importDefault(require("../pickles/compile"));
var AstBuilder_1 = __importDefault(require("../AstBuilder"));
function generateMessages(data, uri, options) {
  var e_1, _a, e_2, _b;
  var result = [];
  try {
    if (options.includeSource) {
      result.push(new cucumber_messages_1.messages.Envelope({
        source: {
          uri: uri,
          data: data,
          media: {
            encoding: cucumber_messages_1.messages.Media.Encoding.UTF8,
            contentType: 'text/x.cucumber.gherkin+plain'
          }
        }
      }));
    }
    if (!options.includeGherkinDocument && !options.includePickles) {
      return result;
    }
    var parser = new Parser_1.default(new AstBuilder_1.default(options.newId));
    parser.stopAtFirstError = false;
    var gherkinDocument = parser.parse(data, new TokenMatcher_1.default(options.defaultDialect));
    if (options.includeGherkinDocument) {
      result.push(cucumber_messages_1.messages.Envelope.create({
        gherkinDocument: __assign(__assign({}, gherkinDocument), {
          uri: uri
        })
      }));
    }
    if (options.includePickles) {
      var pickles = compile_1.default(gherkinDocument, uri, options.newId);
      try {
        for (var pickles_1 = __values(pickles), pickles_1_1 = pickles_1.next(); !pickles_1_1.done; pickles_1_1 = pickles_1.next()) {
          var pickle = pickles_1_1.value;
          result.push(cucumber_messages_1.messages.Envelope.create({
            pickle: pickle
          }));
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (pickles_1_1 && !pickles_1_1.done && (_a = pickles_1.return)) _a.call(pickles_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    }
  } catch (err) {
    var errors = err.errors || [err];
    try {
      for (var errors_1 = __values(errors), errors_1_1 = errors_1.next(); !errors_1_1.done; errors_1_1 = errors_1.next()) {
        var error = errors_1_1.value;
        if (!error.location) {
          // It wasn't a parser error - throw it (this is unexpected)
          throw error;
        }
        result.push(cucumber_messages_1.messages.Envelope.create({
          attachment: {
            source: {
              uri: uri,
              location: {
                line: error.location.line,
                column: error.location.column
              }
            },
            data: error.message
          }
        }));
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (errors_1_1 && !errors_1_1.done && (_b = errors_1.return)) _b.call(errors_1);
      } finally {
        if (e_2) throw e_2.error;
      }
    }
  }
  return result;
}
exports.default = generateMessages;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQYXJzZXJfMSIsIl9faW1wb3J0RGVmYXVsdCIsInJlcXVpcmUiLCJUb2tlbk1hdGNoZXJfMSIsImN1Y3VtYmVyX21lc3NhZ2VzXzEiLCJjb21waWxlXzEiLCJBc3RCdWlsZGVyXzEiLCJnZW5lcmF0ZU1lc3NhZ2VzIiwiZGF0YSIsInVyaSIsIm9wdGlvbnMiLCJyZXN1bHQiLCJpbmNsdWRlU291cmNlIiwicHVzaCIsIm1lc3NhZ2VzIiwiRW52ZWxvcGUiLCJzb3VyY2UiLCJtZWRpYSIsImVuY29kaW5nIiwiTWVkaWEiLCJFbmNvZGluZyIsIlVURjgiLCJjb250ZW50VHlwZSIsImluY2x1ZGVHaGVya2luRG9jdW1lbnQiLCJpbmNsdWRlUGlja2xlcyIsInBhcnNlciIsImRlZmF1bHQiLCJuZXdJZCIsInN0b3BBdEZpcnN0RXJyb3IiLCJnaGVya2luRG9jdW1lbnQiLCJwYXJzZSIsImRlZmF1bHREaWFsZWN0IiwiY3JlYXRlIiwiX19hc3NpZ24iLCJwaWNrbGVzIiwicGlja2xlc18xIiwiX192YWx1ZXMiLCJwaWNrbGVzXzFfMSIsIm5leHQiLCJkb25lIiwicGlja2xlIiwidmFsdWUiLCJlcnIiLCJlcnJvcnMiLCJlcnJvcnNfMSIsImVycm9yc18xXzEiLCJlcnJvciIsImxvY2F0aW9uIiwiYXR0YWNobWVudCIsImxpbmUiLCJjb2x1bW4iLCJtZXNzYWdlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJlYW0vZ2VuZXJhdGVNZXNzYWdlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsUUFBQSxHQUFBQyxlQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxjQUFBLEdBQUFGLGVBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLG1CQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxTQUFBLEdBQUFKLGVBQUEsQ0FBQUMsT0FBQTtBQUNB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