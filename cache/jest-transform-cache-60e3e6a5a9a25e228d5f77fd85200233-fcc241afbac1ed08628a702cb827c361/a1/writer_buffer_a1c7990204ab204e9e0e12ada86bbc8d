63c2e2352e09bf1ed2020365a23f432e
"use strict";

module.exports = BufferWriter;

// extends Writer
var Writer = require("./writer");
(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
var util = require("./util/minimal");

/**
 * Constructs a new buffer writer instance.
 * @classdesc Wire format writer using node buffers.
 * @extends Writer
 * @constructor
 */
function BufferWriter() {
  Writer.call(this);
}
BufferWriter._configure = function () {
  /**
   * Allocates a buffer of the specified size.
   * @function
   * @param {number} size Buffer size
   * @returns {Buffer} Buffer
   */
  BufferWriter.alloc = util._Buffer_allocUnsafe;
  BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
    buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
    // also works for plain array values
  }
  /* istanbul ignore next */ : function writeBytesBuffer_copy(val, buf, pos) {
    if (val.copy)
      // Buffer values
      val.copy(buf, pos, 0, val.length);else for (var i = 0; i < val.length;)
    // plain array values
    buf[pos++] = val[i++];
  };
};

/**
 * @override
 */
BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
  if (util.isString(value)) value = util._Buffer_from(value, "base64");
  var len = value.length >>> 0;
  this.uint32(len);
  if (len) this._push(BufferWriter.writeBytesBuffer, len, value);
  return this;
};
function writeStringBuffer(val, buf, pos) {
  if (val.length < 40)
    // plain js is faster for short strings (probably due to redundant assertions)
    util.utf8.write(val, buf, pos);else if (buf.utf8Write) buf.utf8Write(val, pos);else buf.write(val, pos);
}

/**
 * @override
 */
BufferWriter.prototype.string = function write_string_buffer(value) {
  var len = util.Buffer.byteLength(value);
  this.uint32(len);
  if (len) this._push(writeStringBuffer, len, value);
  return this;
};

/**
 * Finishes the write operation.
 * @name BufferWriter#finish
 * @function
 * @returns {Buffer} Finished buffer
 */

BufferWriter._configure();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQnVmZmVyV3JpdGVyIiwiV3JpdGVyIiwicmVxdWlyZSIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidXRpbCIsImNhbGwiLCJfY29uZmlndXJlIiwiYWxsb2MiLCJfQnVmZmVyX2FsbG9jVW5zYWZlIiwid3JpdGVCeXRlc0J1ZmZlciIsIkJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJzZXQiLCJuYW1lIiwid3JpdGVCeXRlc0J1ZmZlcl9zZXQiLCJ2YWwiLCJidWYiLCJwb3MiLCJ3cml0ZUJ5dGVzQnVmZmVyX2NvcHkiLCJjb3B5IiwibGVuZ3RoIiwiaSIsImJ5dGVzIiwid3JpdGVfYnl0ZXNfYnVmZmVyIiwidmFsdWUiLCJpc1N0cmluZyIsIl9CdWZmZXJfZnJvbSIsImxlbiIsInVpbnQzMiIsIl9wdXNoIiwid3JpdGVTdHJpbmdCdWZmZXIiLCJ1dGY4Iiwid3JpdGUiLCJ1dGY4V3JpdGUiLCJzdHJpbmciLCJ3cml0ZV9zdHJpbmdfYnVmZmVyIiwiYnl0ZUxlbmd0aCJdLCJzb3VyY2VzIjpbIndyaXRlcl9idWZmZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IEJ1ZmZlcldyaXRlcjtcblxuLy8gZXh0ZW5kcyBXcml0ZXJcbnZhciBXcml0ZXIgPSByZXF1aXJlKFwiLi93cml0ZXJcIik7XG4oQnVmZmVyV3JpdGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoV3JpdGVyLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gQnVmZmVyV3JpdGVyO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1ZmZlciB3cml0ZXIgaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIFdpcmUgZm9ybWF0IHdyaXRlciB1c2luZyBub2RlIGJ1ZmZlcnMuXG4gKiBAZXh0ZW5kcyBXcml0ZXJcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBCdWZmZXJXcml0ZXIoKSB7XG4gICAgV3JpdGVyLmNhbGwodGhpcyk7XG59XG5cbkJ1ZmZlcldyaXRlci5fY29uZmlndXJlID0gZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEFsbG9jYXRlcyBhIGJ1ZmZlciBvZiB0aGUgc3BlY2lmaWVkIHNpemUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNpemUgQnVmZmVyIHNpemVcbiAgICAgKiBAcmV0dXJucyB7QnVmZmVyfSBCdWZmZXJcbiAgICAgKi9cbiAgICBCdWZmZXJXcml0ZXIuYWxsb2MgPSB1dGlsLl9CdWZmZXJfYWxsb2NVbnNhZmU7XG5cbiAgICBCdWZmZXJXcml0ZXIud3JpdGVCeXRlc0J1ZmZlciA9IHV0aWwuQnVmZmVyICYmIHV0aWwuQnVmZmVyLnByb3RvdHlwZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiYgdXRpbC5CdWZmZXIucHJvdG90eXBlLnNldC5uYW1lID09PSBcInNldFwiXG4gICAgICAgID8gZnVuY3Rpb24gd3JpdGVCeXRlc0J1ZmZlcl9zZXQodmFsLCBidWYsIHBvcykge1xuICAgICAgICAgIGJ1Zi5zZXQodmFsLCBwb3MpOyAvLyBmYXN0ZXIgdGhhbiBjb3B5IChyZXF1aXJlcyBub2RlID49IDQgd2hlcmUgQnVmZmVycyBleHRlbmQgVWludDhBcnJheSBhbmQgc2V0IGlzIHByb3Blcmx5IGluaGVyaXRlZClcbiAgICAgICAgICAvLyBhbHNvIHdvcmtzIGZvciBwbGFpbiBhcnJheSB2YWx1ZXNcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICA6IGZ1bmN0aW9uIHdyaXRlQnl0ZXNCdWZmZXJfY29weSh2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgICAgICAgaWYgKHZhbC5jb3B5KSAvLyBCdWZmZXIgdmFsdWVzXG4gICAgICAgICAgICB2YWwuY29weShidWYsIHBvcywgMCwgdmFsLmxlbmd0aCk7XG4gICAgICAgICAgZWxzZSBmb3IgKHZhciBpID0gMDsgaSA8IHZhbC5sZW5ndGg7KSAvLyBwbGFpbiBhcnJheSB2YWx1ZXNcbiAgICAgICAgICAgIGJ1Zltwb3MrK10gPSB2YWxbaSsrXTtcbiAgICAgICAgfTtcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuQnVmZmVyV3JpdGVyLnByb3RvdHlwZS5ieXRlcyA9IGZ1bmN0aW9uIHdyaXRlX2J5dGVzX2J1ZmZlcih2YWx1ZSkge1xuICAgIGlmICh1dGlsLmlzU3RyaW5nKHZhbHVlKSlcbiAgICAgICAgdmFsdWUgPSB1dGlsLl9CdWZmZXJfZnJvbSh2YWx1ZSwgXCJiYXNlNjRcIik7XG4gICAgdmFyIGxlbiA9IHZhbHVlLmxlbmd0aCA+Pj4gMDtcbiAgICB0aGlzLnVpbnQzMihsZW4pO1xuICAgIGlmIChsZW4pXG4gICAgICAgIHRoaXMuX3B1c2goQnVmZmVyV3JpdGVyLndyaXRlQnl0ZXNCdWZmZXIsIGxlbiwgdmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gd3JpdGVTdHJpbmdCdWZmZXIodmFsLCBidWYsIHBvcykge1xuICAgIGlmICh2YWwubGVuZ3RoIDwgNDApIC8vIHBsYWluIGpzIGlzIGZhc3RlciBmb3Igc2hvcnQgc3RyaW5ncyAocHJvYmFibHkgZHVlIHRvIHJlZHVuZGFudCBhc3NlcnRpb25zKVxuICAgICAgICB1dGlsLnV0Zjgud3JpdGUodmFsLCBidWYsIHBvcyk7XG4gICAgZWxzZSBpZiAoYnVmLnV0ZjhXcml0ZSlcbiAgICAgICAgYnVmLnV0ZjhXcml0ZSh2YWwsIHBvcyk7XG4gICAgZWxzZVxuICAgICAgICBidWYud3JpdGUodmFsLCBwb3MpO1xufVxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5CdWZmZXJXcml0ZXIucHJvdG90eXBlLnN0cmluZyA9IGZ1bmN0aW9uIHdyaXRlX3N0cmluZ19idWZmZXIodmFsdWUpIHtcbiAgICB2YXIgbGVuID0gdXRpbC5CdWZmZXIuYnl0ZUxlbmd0aCh2YWx1ZSk7XG4gICAgdGhpcy51aW50MzIobGVuKTtcbiAgICBpZiAobGVuKVxuICAgICAgICB0aGlzLl9wdXNoKHdyaXRlU3RyaW5nQnVmZmVyLCBsZW4sIHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBGaW5pc2hlcyB0aGUgd3JpdGUgb3BlcmF0aW9uLlxuICogQG5hbWUgQnVmZmVyV3JpdGVyI2ZpbmlzaFxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBGaW5pc2hlZCBidWZmZXJcbiAqL1xuXG5CdWZmZXJXcml0ZXIuX2NvbmZpZ3VyZSgpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsWUFBWTs7QUFFN0I7QUFDQSxJQUFJQyxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDaEMsQ0FBQ0YsWUFBWSxDQUFDRyxTQUFTLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDSixNQUFNLENBQUNFLFNBQVMsQ0FBQyxFQUFFRyxXQUFXLEdBQUdOLFlBQVk7QUFFckYsSUFBSU8sSUFBSSxHQUFHTCxPQUFPLENBQUMsZ0JBQWdCLENBQUM7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNGLFlBQVlBLENBQUEsRUFBRztFQUNwQkMsTUFBTSxDQUFDTyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ3JCO0FBRUFSLFlBQVksQ0FBQ1MsVUFBVSxHQUFHLFlBQVk7RUFDbEM7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0lULFlBQVksQ0FBQ1UsS0FBSyxHQUFHSCxJQUFJLENBQUNJLG1CQUFtQjtFQUU3Q1gsWUFBWSxDQUFDWSxnQkFBZ0IsR0FBR0wsSUFBSSxDQUFDTSxNQUFNLElBQUlOLElBQUksQ0FBQ00sTUFBTSxDQUFDVixTQUFTLFlBQVlXLFVBQVUsSUFBSVAsSUFBSSxDQUFDTSxNQUFNLENBQUNWLFNBQVMsQ0FBQ1ksR0FBRyxDQUFDQyxJ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