c24095ad7906b3a756b7027908bba852
"use strict";

_getJestObj().mock("axios");
var _jestCucumber = require("jest-cucumber");
var _react = require("@testing-library/react");
var _react2 = _interopRequireDefault(require("react"));
require("@testing-library/jest-dom/extend-expect");
require("text-encoding");
var router = _interopRequireWildcard(require("react-router"));
var _reactRouterDom = require("react-router-dom");
var _Activities = _interopRequireDefault(require("../../pages/Activities"));
var _axios = _interopRequireDefault(require("axios"));
var _testUtils = require("react-dom/test-utils");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _stravaSlice = _interopRequireDefault(require("../../redux/reducer/stravaSlice"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const feature = (0, _jestCucumber.loadFeature)("src/components/features/activities.feature");
let store;
let screen;
const {
  REACT_APP_CLIENTID
} = process.env;
const {
  REACT_APP_CLIENT_SECRET
} = process.env;
const scope = "read,activity:read";
const navigate = jest.fn();
jest.spyOn(router, "useNavigate").mockImplementation(() => navigate);
(0, _jestCucumber.defineFeature)(feature, test => {
  beforeEach(() => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        strava: _stravaSlice.default
      }
    });
    screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_Activities.default, null))));
  });
  localStorage.setItem("access_token", "mock-token");
  const mockActivities = [{
    id: 1,
    name: "Morning Run",
    type: "Run",
    distance: 2000,
    average_speed: 2.5,
    max_speed: 5.0,
    average_heartrate: 140
  }, {
    id: 2,
    name: "Evening Run",
    type: "Run",
    distance: 1000,
    average_speed: 1.3,
    max_speed: 2.0,
    average_heartrate: 112
  }];
  _axios.default.get.mockResolvedValueOnce({
    data: mockActivities
  });
  test("User sees a list of activities", ({
    given,
    when,
    then,
    and
  }) => {
    given("the user is on the Activities page", () => {
      expect(screen).toBeDefined();
    });
    when("the user's activities are fetched", async () => {
      const accessToken = localStorage.getItem("access_token");
      expect(accessToken).toBe("mock-token");
    });
    then("the user should see a list of activities", async () => {
      await (0, _react.waitFor)(() => {
        const activityList = screen.getByTestId("activity-container");
        expect(activityList).toBeInTheDocument();
        const activityCard = screen.getByText("Morning Run");
        expect(activityCard).toBeDefined();
        const sportsType = screen.getAllByText("Run");
        expect(sportsType).toBeDefined();
        const distance = screen.getByText("2000 meters");
        expect(distance).toBeInTheDocument();
        const avgSpeed = screen.getByText("2.5 m/s");
        expect(avgSpeed).toBeInTheDocument();
        const maxSpeed = screen.getByText("5 m/s");
        expect(maxSpeed).toBeInTheDocument();
        const heartRate = screen.getByText("140");
        expect(heartRate).toBeInTheDocument();
      });
    });
  });
  test('User clicks on "Create Activity" button', ({
    given,
    when,
    then,
    and
  }) => {
    given("the user is on the Activities page", () => {
      expect(screen).toBeDefined();
    });
    when('the user clicks on the "Create Activity" button', async () => {
      const createActivityButton = screen.getByRole("link", {
        name: "Create Activity"
      });
      (0, _testUtils.act)(() => {
        _react.fireEvent.click(createActivityButton);
      });
    });
    then('the user should be redirected to the "Create Activity" page', () => {
      expect(navigate).toHaveBeenCalled();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,