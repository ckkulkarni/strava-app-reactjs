2de847f72d7ee3b6395b11cdc5702ea1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detectScrollType = detectScrollType;
exports.getNormalizedScrollLeft = getNormalizedScrollLeft;
// Source from https://github.com/alitaheri/normalize-scroll-left
let cachedType;

/**
 * Based on the jquery plugin https://github.com/othree/jquery.rtl-scroll-type
 *
 * Types of scrollLeft, assuming scrollWidth=100 and direction is rtl.
 *
 * Type             | <- Most Left | Most Right -> | Initial
 * ---------------- | ------------ | ------------- | -------
 * default          | 0            | 100           | 100
 * negative (spec*) | -100         | 0             | 0
 * reverse          | 100          | 0             | 0
 *
 * Edge 85: default
 * Safari 14: negative
 * Chrome 85: negative
 * Firefox 81: negative
 * IE11: reverse
 *
 * spec* https://drafts.csswg.org/cssom-view/#dom-window-scroll
 */
function detectScrollType() {
  if (cachedType) {
    return cachedType;
  }
  const dummy = document.createElement('div');
  const container = document.createElement('div');
  container.style.width = '10px';
  container.style.height = '1px';
  dummy.appendChild(container);
  dummy.dir = 'rtl';
  dummy.style.fontSize = '14px';
  dummy.style.width = '4px';
  dummy.style.height = '1px';
  dummy.style.position = 'absolute';
  dummy.style.top = '-1000px';
  dummy.style.overflow = 'scroll';
  document.body.appendChild(dummy);
  cachedType = 'reverse';
  if (dummy.scrollLeft > 0) {
    cachedType = 'default';
  } else {
    dummy.scrollLeft = 1;
    if (dummy.scrollLeft === 0) {
      cachedType = 'negative';
    }
  }
  document.body.removeChild(dummy);
  return cachedType;
}

// Based on https://stackoverflow.com/a/24394376
function getNormalizedScrollLeft(element, direction) {
  const scrollLeft = element.scrollLeft;

  // Perform the calculations only when direction is rtl to avoid messing up the ltr behavior
  if (direction !== 'rtl') {
    return scrollLeft;
  }
  const type = detectScrollType();
  switch (type) {
    case 'negative':
      return element.scrollWidth - element.clientWidth + scrollLeft;
    case 'reverse':
      return element.scrollWidth - element.clientWidth - scrollLeft;
    default:
      return scrollLeft;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRldGVjdFNjcm9sbFR5cGUiLCJnZXROb3JtYWxpemVkU2Nyb2xsTGVmdCIsImNhY2hlZFR5cGUiLCJkdW1teSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNvbnRhaW5lciIsInN0eWxlIiwid2lkdGgiLCJoZWlnaHQiLCJhcHBlbmRDaGlsZCIsImRpciIsImZvbnRTaXplIiwicG9zaXRpb24iLCJ0b3AiLCJvdmVyZmxvdyIsImJvZHkiLCJzY3JvbGxMZWZ0IiwicmVtb3ZlQ2hpbGQiLCJlbGVtZW50IiwiZGlyZWN0aW9uIiwidHlwZSIsInNjcm9sbFdpZHRoIiwiY2xpZW50V2lkdGgiXSwic291cmNlcyI6WyJzY3JvbGxMZWZ0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZXRlY3RTY3JvbGxUeXBlID0gZGV0ZWN0U2Nyb2xsVHlwZTtcbmV4cG9ydHMuZ2V0Tm9ybWFsaXplZFNjcm9sbExlZnQgPSBnZXROb3JtYWxpemVkU2Nyb2xsTGVmdDtcbi8vIFNvdXJjZSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGl0YWhlcmkvbm9ybWFsaXplLXNjcm9sbC1sZWZ0XG5sZXQgY2FjaGVkVHlwZTtcblxuLyoqXG4gKiBCYXNlZCBvbiB0aGUganF1ZXJ5IHBsdWdpbiBodHRwczovL2dpdGh1Yi5jb20vb3RocmVlL2pxdWVyeS5ydGwtc2Nyb2xsLXR5cGVcbiAqXG4gKiBUeXBlcyBvZiBzY3JvbGxMZWZ0LCBhc3N1bWluZyBzY3JvbGxXaWR0aD0xMDAgYW5kIGRpcmVjdGlvbiBpcyBydGwuXG4gKlxuICogVHlwZSAgICAgICAgICAgICB8IDwtIE1vc3QgTGVmdCB8IE1vc3QgUmlnaHQgLT4gfCBJbml0aWFsXG4gKiAtLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS1cbiAqIGRlZmF1bHQgICAgICAgICAgfCAwICAgICAgICAgICAgfCAxMDAgICAgICAgICAgIHwgMTAwXG4gKiBuZWdhdGl2ZSAoc3BlYyopIHwgLTEwMCAgICAgICAgIHwgMCAgICAgICAgICAgICB8IDBcbiAqIHJldmVyc2UgICAgICAgICAgfCAxMDAgICAgICAgICAgfCAwICAgICAgICAgICAgIHwgMFxuICpcbiAqIEVkZ2UgODU6IGRlZmF1bHRcbiAqIFNhZmFyaSAxNDogbmVnYXRpdmVcbiAqIENocm9tZSA4NTogbmVnYXRpdmVcbiAqIEZpcmVmb3ggODE6IG5lZ2F0aXZlXG4gKiBJRTExOiByZXZlcnNlXG4gKlxuICogc3BlYyogaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLXZpZXcvI2RvbS13aW5kb3ctc2Nyb2xsXG4gKi9cbmZ1bmN0aW9uIGRldGVjdFNjcm9sbFR5cGUoKSB7XG4gIGlmIChjYWNoZWRUeXBlKSB7XG4gICAgcmV0dXJuIGNhY2hlZFR5cGU7XG4gIH1cbiAgY29uc3QgZHVtbXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnRhaW5lci5zdHlsZS53aWR0aCA9ICcxMHB4JztcbiAgY29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICcxcHgnO1xuICBkdW1teS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICBkdW1teS5kaXIgPSAncnRsJztcbiAgZHVtbXkuc3R5bGUuZm9udFNpemUgPSAnMTRweCc7XG4gIGR1bW15LnN0eWxlLndpZHRoID0gJzRweCc7XG4gIGR1bW15LnN0eWxlLmhlaWdodCA9ICcxcHgnO1xuICBkdW1teS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIGR1bW15LnN0eWxlLnRvcCA9ICctMTAwMHB4JztcbiAgZHVtbXkuc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkdW1teSk7XG4gIGNhY2hlZFR5cGUgPSAncmV2ZXJzZSc7XG4gIGlmIChkdW1teS5zY3JvbGxMZWZ0ID4gMCkge1xuICAgIGNhY2hlZFR5cGUgPSAnZGVmYXVsdCc7XG4gIH0gZWxzZSB7XG4gICAgZHVtbXkuc2Nyb2xsTGVmdCA9IDE7XG4gICAgaWYgKGR1bW15LnNjcm9sbExlZnQgPT09IDApIHtcbiAgICAgIGNhY2hlZFR5cGUgPSAnbmVnYXRpdmUnO1xuICAgIH1cbiAgfVxuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGR1bW15KTtcbiAgcmV0dXJuIGNhY2hlZFR5cGU7XG59XG5cbi8vIEJhc2VkIG9uIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNDM5NDM3NlxuZnVuY3Rpb24gZ2V0Tm9ybWFsaXplZFNjcm9sbExlZnQoZWxlbWVudCwgZGlyZWN0aW9uKSB7XG4gIGNvbnN0IHNjcm9sbExlZnQgPSBlbGVtZW50LnNjcm9sbExlZnQ7XG5cbiAgLy8gUGVyZm9ybSB0aGUgY2FsY3VsYXRpb25zIG9ubHkgd2hlbiBkaXJlY3Rpb24gaXMgcnRsIHRvIGF2b2lkIG1lc3NpbmcgdXAgdGhlIGx0ciBiZWhhdmlvclxuICBpZiAoZGlyZWN0aW9uICE9PSAncnRsJykge1xuICAgIHJldHVybiBzY3JvbGxMZWZ0O1xuICB9XG4gIGNvbnN0IHR5cGUgPSBkZXRlY3RTY3JvbGxUeXBlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ25lZ2F0aXZlJzpcbiAgICAgIHJldHVybiBlbGVtZW50LnNjcm9sbFdpZHRoIC0gZWxlbWVudC5jbGllbnRXaWR0aCArIHNjcm9sbExlZnQ7XG4gICAgY2FzZSAncmV2ZXJzZSc6XG4gICAgICByZXR1cm4gZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnQuY2xpZW50V2lkdGggLSBzY3JvbGxMZWZ0O1xuICAgIGRlZmF1bHQ6XG4gICAgICBy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