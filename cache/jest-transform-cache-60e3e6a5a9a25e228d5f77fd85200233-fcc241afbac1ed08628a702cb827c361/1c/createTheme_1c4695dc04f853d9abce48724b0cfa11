480f1af9ad380c39d3dad963d5da1990
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _utils = require("@mui/utils");
var _createBreakpoints = _interopRequireDefault(require("./createBreakpoints"));
var _shape = _interopRequireDefault(require("./shape"));
var _createSpacing = _interopRequireDefault(require("./createSpacing"));
var _styleFunctionSx = _interopRequireDefault(require("../styleFunctionSx/styleFunctionSx"));
var _defaultSxConfig = _interopRequireDefault(require("../styleFunctionSx/defaultSxConfig"));
const _excluded = ["breakpoints", "palette", "spacing", "shape"];
function createTheme(options = {}, ...args) {
  const {
      breakpoints: breakpointsInput = {},
      palette: paletteInput = {},
      spacing: spacingInput,
      shape: shapeInput = {}
    } = options,
    other = (0, _objectWithoutPropertiesLoose2.default)(options, _excluded);
  const breakpoints = (0, _createBreakpoints.default)(breakpointsInput);
  const spacing = (0, _createSpacing.default)(spacingInput);
  let muiTheme = (0, _utils.deepmerge)({
    breakpoints,
    direction: 'ltr',
    components: {},
    // Inject component definitions.
    palette: (0, _extends2.default)({
      mode: 'light'
    }, paletteInput),
    spacing,
    shape: (0, _extends2.default)({}, _shape.default, shapeInput)
  }, other);
  muiTheme = args.reduce((acc, argument) => (0, _utils.deepmerge)(acc, argument), muiTheme);
  muiTheme.unstable_sxConfig = (0, _extends2.default)({}, _defaultSxConfig.default, other == null ? void 0 : other.unstable_sxConfig);
  muiTheme.unstable_sx = function sx(props) {
    return (0, _styleFunctionSx.default)({
      sx: props,
      theme: this
    });
  };
  return muiTheme;
}
var _default = createTheme;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9leHRlbmRzMiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiIsIl91dGlscyIsIl9jcmVhdGVCcmVha3BvaW50cyIsIl9zaGFwZSIsIl9jcmVhdGVTcGFjaW5nIiwiX3N0eWxlRnVuY3Rpb25TeCIsIl9kZWZhdWx0U3hDb25maWciLCJfZXhjbHVkZWQiLCJjcmVhdGVUaGVtZSIsIm9wdGlvbnMiLCJhcmdzIiwiYnJlYWtwb2ludHMiLCJicmVha3BvaW50c0lucHV0IiwicGFsZXR0ZSIsInBhbGV0dGVJbnB1dCIsInNwYWNpbmciLCJzcGFjaW5nSW5wdXQiLCJzaGFwZSIsInNoYXBlSW5wdXQiLCJvdGhlciIsIm11aVRoZW1lIiwiZGVlcG1lcmdlIiwiZGlyZWN0aW9uIiwiY29tcG9uZW50cyIsIm1vZGUiLCJyZWR1Y2UiLCJhY2MiLCJhcmd1bWVudCIsInVuc3RhYmxlX3N4Q29uZmlnIiwidW5zdGFibGVfc3giLCJzeCIsInByb3BzIiwidGhlbWUiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbImNyZWF0ZVRoZW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAbXVpL3V0aWxzXCIpO1xudmFyIF9jcmVhdGVCcmVha3BvaW50cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlQnJlYWtwb2ludHNcIikpO1xudmFyIF9zaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc2hhcGVcIikpO1xudmFyIF9jcmVhdGVTcGFjaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVTcGFjaW5nXCIpKTtcbnZhciBfc3R5bGVGdW5jdGlvblN4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVGdW5jdGlvblN4L3N0eWxlRnVuY3Rpb25TeFwiKSk7XG52YXIgX2RlZmF1bHRTeENvbmZpZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlRnVuY3Rpb25TeC9kZWZhdWx0U3hDb25maWdcIikpO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYnJlYWtwb2ludHNcIiwgXCJwYWxldHRlXCIsIFwic3BhY2luZ1wiLCBcInNoYXBlXCJdO1xuZnVuY3Rpb24gY3JlYXRlVGhlbWUob3B0aW9ucyA9IHt9LCAuLi5hcmdzKSB7XG4gIGNvbnN0IHtcbiAgICAgIGJyZWFrcG9pbnRzOiBicmVha3BvaW50c0lucHV0ID0ge30sXG4gICAgICBwYWxldHRlOiBwYWxldHRlSW5wdXQgPSB7fSxcbiAgICAgIHNwYWNpbmc6IHNwYWNpbmdJbnB1dCxcbiAgICAgIHNoYXBlOiBzaGFwZUlucHV0ID0ge31cbiAgICB9ID0gb3B0aW9ucyxcbiAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkob3B0aW9ucywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgYnJlYWtwb2ludHMgPSAoMCwgX2NyZWF0ZUJyZWFrcG9pbnRzLmRlZmF1bHQpKGJyZWFrcG9pbnRzSW5wdXQpO1xuICBjb25zdCBzcGFjaW5nID0gKDAsIF9jcmVhdGVTcGFjaW5nLmRlZmF1bHQpKHNwYWNpbmdJbnB1dCk7XG4gIGxldCBtdWlUaGVtZSA9ICgwLCBfdXRpbHMuZGVlcG1lcmdlKSh7XG4gICAgYnJlYWtwb2ludHMsXG4gICAgZGlyZWN0aW9uOiAnbHRyJyxcbiAgICBjb21wb25lbnRzOiB7fSxcbiAgICAvLyBJbmplY3QgY29tcG9uZW50IGRlZmluaXRpb25zLlxuICAgIHBhbGV0dGU6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgbW9kZTogJ2xpZ2h0J1xuICAgIH0sIHBhbGV0dGVJbnB1dCksXG4gICAgc3BhY2luZyxcbiAgICBzaGFwZTogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgX3NoYXBlLmRlZmF1bHQsIHNoYXBlSW5wdXQpXG4gIH0sIG90aGVyKTtcbiAgbXVpVGhlbWUgPSBhcmdzLnJlZHVjZSgoYWNjLCBhcmd1bWVudCkgPT4gKDAsIF91dGlscy5kZWVwbWVyZ2UpKGFjYywgYXJndW1lbnQpLCBtdWlUaGVtZSk7XG4gIG11aVRoZW1lLnVuc3RhYmxlX3N4Q29uZmlnID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgX2RlZmF1bHRTeENvbmZpZy5kZWZhdWx0LCBvdGhlciA9PSBudWxsID8gdm9pZCAwIDogb3RoZXIudW5zdGFibGVfc3hDb25maWcpO1xuICBtdWlUaGVtZS51bnN0YWJsZV9zeCA9IGZ1bmN0aW9uIHN4KHByb3BzKSB7XG4gICAgcmV0dXJuICgwLCBfc3R5bGVGdW5jdGlvblN4LmRlZmF1bHQpKHtcbiAgICAgIHN4OiBwcm9wcyxcbiAgICAgIHRoZW1lOiB0aGlzXG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBtdWlUaGVtZTtcbn1cbnZhciBfZGVm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