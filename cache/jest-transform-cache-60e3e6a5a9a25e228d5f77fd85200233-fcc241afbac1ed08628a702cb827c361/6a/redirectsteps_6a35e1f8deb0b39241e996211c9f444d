7883db4d4601dadf51fed8c46ba3c69a
"use strict";

_getJestObj().mock("axios");
var _jestCucumber = require("jest-cucumber");
var _react = require("@testing-library/react");
var _react2 = _interopRequireDefault(require("react"));
require("@testing-library/jest-dom/extend-expect");
require("text-encoding");
var router = _interopRequireWildcard(require("react-router"));
var _reactRouterDom = require("react-router-dom");
var _Redirect = _interopRequireDefault(require("../../pages/Redirect"));
var _axios = _interopRequireDefault(require("axios"));
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _stravaSlice = _interopRequireDefault(require("../../redux/reducer/stravaSlice"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const feature = (0, _jestCucumber.loadFeature)("src/components/features/redirect.feature");
let store;
let screen;
const {
  REACT_APP_CLIENTID
} = process.env;
const {
  REACT_APP_CLIENT_SECRET
} = process.env;
const redirectUrl = "http://localhost:3000/redirect";
const scope = "read,activity:read";
(0, _jestCucumber.defineFeature)(feature, test => {
  beforeEach(() => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        strava: _stravaSlice.default
      }
    });
    screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_Redirect.default, null))));
  });
  test("User logs in and gets redirected to Activities screen", ({
    given,
    when,
    then,
    and
  }) => {
    given('the Strava client ID is "mock-id"', () => {
      process.env.REACT_APP_CLIENTID = "mock-id";
    });
    when('the Strava client secret is "mock-secret"', () => {
      process.env.REACT_APP_CLIENT_SECRET = "mock-secret";
    });
    and("the user is on the redirect page", () => {
      expect(screen).toBeDefined();
    });
    when('the user is redirected with code "mock-code"', async () => {
      const navigate = jest.fn();
      jest.spyOn(router, "useNavigate").mockImplementation(() => navigate);
      jest.spyOn(_axios.default, "post").mockResolvedValueOnce({
        data: {
          access_token: "mock-access-token",
          athlete: {
            id: "mock-user-id"
          }
        }
      });
      screen.rerender( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
        store: store
      }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_Redirect.default, null))));
      await (0, _react.waitFor)(() => {
        expect(router.useNavigate).toHaveBeenCalled();
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,