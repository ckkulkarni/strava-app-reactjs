8b12235c716d50eb32664744385202d7
"use strict";

_getJestObj().mock("axios");
var _jestCucumber = require("jest-cucumber");
var _react = require("@testing-library/react");
var _react2 = _interopRequireDefault(require("react"));
require("@testing-library/jest-dom/extend-expect");
require("text-encoding");
var _reactRouterDom = require("react-router-dom");
var _Activities = _interopRequireDefault(require("../../pages/Activities"));
var _axios = _interopRequireDefault(require("axios"));
var _testUtils = require("react-dom/test-utils");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _stravaSlice = _interopRequireDefault(require("../../redux/reducer/stravaSlice"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const feature = (0, _jestCucumber.loadFeature)("src/components/features/activities.feature");
let store;
let screen;
const {
  REACT_APP_CLIENTID
} = process.env;
const {
  REACT_APP_CLIENT_SECRET
} = process.env;
const scope = "read,activity:read";
(0, _jestCucumber.defineFeature)(feature, test => {
  beforeEach(() => {
    store = (0, _toolkit.configureStore)({
      reducer: {
        strava: _stravaSlice.default
      }
    });
    screen = (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_reactRedux.Provider, {
      store: store
    }, /*#__PURE__*/_react2.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react2.default.createElement(_Activities.default, null))));
  });
  localStorage.setItem("access_token", "mock-token");
  const mockActivities = [{
    id: 1,
    name: "Morning Run",
    type: "Run",
    distance: 2000,
    average_speed: 2.5,
    max_speed: 5.0,
    average_heartrate: 140
  }, {
    id: 2,
    name: "Evening Run",
    type: "Run",
    distance: 1000,
    average_speed: 1.3,
    max_speed: 2.0,
    average_heartrate: 112
  }];
  (0, _testUtils.act)(() => {
    _axios.default.get.mockResolvedValueOnce({
      data: mockActivities
    });
  });
  test("User sees a list of activities", ({
    given,
    when,
    then,
    and
  }) => {
    given("the user is on the Activities page", () => {
      expect(screen).toBeDefined();
    });
    when("the user's activities are fetched", async () => {
      const accessToken = localStorage.getItem("access_token");
      expect(accessToken).toBe("mock-token");
    });
    then("the user should see a list of activities", async () => {
      await (0, _react.waitFor)(() => {
        const activityList = screen.getByTestId("activity-container");
        expect(activityList).toBeInTheDocument();
        const activityCard = screen.getByText("Morning Run");
        expect(activityCard).toBeDefined();
        const sportsType = screen.getAllByText("Run");
        expect(sportsType).toBeDefined();
        const distance = screen.getByText("2000 meters");
        expect(distance).toBeInTheDocument();
        const avgSpeed = screen.getByText("2.5 m/s");
        expect(avgSpeed).toBeInTheDocument();
        const maxSpeed = screen.getByText("5 m/s");
        expect(maxSpeed).toBeInTheDocument();
        const heartRate = screen.getByText("140");
        expect(heartRate).toBeInTheDocument();
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfamVzdEN1Y3VtYmVyIiwicmVxdWlyZSIsIl9yZWFjdCIsIl9yZWFjdDIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3JlYWN0Um91dGVyRG9tIiwiX0FjdGl2aXRpZXMiLCJfYXhpb3MiLCJfdGVzdFV0aWxzIiwiX3JlYWN0UmVkdXgiLCJfdG9vbGtpdCIsIl9zdHJhdmFTbGljZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiamVzdCIsImZlYXR1cmUiLCJsb2FkRmVhdHVyZSIsInN0b3JlIiwic2NyZWVuIiwiUkVBQ1RfQVBQX0NMSUVOVElEIiwicHJvY2VzcyIsImVudiIsIlJFQUNUX0FQUF9DTElFTlRfU0VDUkVUIiwic2NvcGUiLCJkZWZpbmVGZWF0dXJlIiwidGVzdCIsImJlZm9yZUVhY2giLCJjb25maWd1cmVTdG9yZSIsInJlZHVjZXIiLCJzdHJhdmEiLCJzdHJhdmFTbGljZSIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsIk1lbW9yeVJvdXRlciIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJtb2NrQWN0aXZpdGllcyIsImlkIiwibmFtZSIsInR5cGUiLCJkaXN0YW5jZSIsImF2ZXJhZ2Vfc3BlZWQiLCJtYXhfc3BlZWQiLCJhdmVyYWdlX2hlYXJ0cmF0ZSIsImFjdCIsImF4aW9zIiwiZ2V0IiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiZGF0YSIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJhbmQiLCJleHBlY3QiLCJ0b0JlRGVmaW5lZCIsImFjY2Vzc1Rva2VuIiwiZ2V0SXRlbSIsInRvQmUiLCJ3YWl0Rm9yIiwiYWN0aXZpdHlMaXN0IiwiZ2V0QnlUZXN0SWQiLCJ0b0JlSW5UaGVEb2N1bWVudCIsImFjdGl2aXR5Q2FyZCIsImdldEJ5VGV4dCIsInNwb3J0c1R5cGUiLCJnZXRBbGxCeVRleHQiLCJhdmdTcGVlZCIsIm1heFNwZWVkIiwiaGVhcnRSYXRlIl0sInNvdXJjZXMiOlsiYWN0aXZpdGllcy5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmaW5lRmVhdHVyZSwgbG9hZEZlYXR1cmUgfSBmcm9tIFwiamVzdC1jdWN1bWJlclwiO1xyXG5pbXBvcnQgeyBmaXJlRXZlbnQsIHJlbmRlciwgd2FpdEZvciB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI7XHJcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFwiQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbS9leHRlbmQtZXhwZWN0XCI7XHJcbmltcG9ydCBcInRleHQtZW5jb2RpbmdcIjtcclxuaW1wb3J0ICogYXMgcm91dGVyIGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcclxuaW1wb3J0IHtcclxuICBCcm93c2VyUm91dGVyIGFzIFJvdXRlcixcclxuICBSb3V0ZXMsXHJcbiAgUm91dGUsXHJcbiAgTWVtb3J5Um91dGVyLFxyXG59IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBBY3Rpdml0aWVzIGZyb20gXCIuLi8uLi9wYWdlcy9BY3Rpdml0aWVzXCI7XHJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0IHsgYWN0IH0gZnJvbSBcInJlYWN0LWRvbS90ZXN0LXV0aWxzXCI7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IGNvbmZpZ3VyZVN0b3JlIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcclxuaW1wb3J0IHN0cmF2YVNsaWNlIGZyb20gXCIuLi8uLi9yZWR1eC9yZWR1Y2VyL3N0cmF2YVNsaWNlXCI7XHJcbmNvbnN0IGZlYXR1cmUgPSBsb2FkRmVhdHVyZShcInNyYy9jb21wb25lbnRzL2ZlYXR1cmVzL2FjdGl2aXRpZXMuZmVhdHVyZVwiKTtcclxubGV0IHN0b3JlOiBhbnk7XHJcbmxldCBzY3JlZW46IGFueTtcclxuamVzdC5tb2NrKFwiYXhpb3NcIik7XHJcbmNvbnN0IHsgUkVBQ1RfQVBQX0NMSUVOVElEIH0gPSBwcm9jZXNzLmVudjtcclxuY29uc3QgeyBSRUFDVF9BUFBfQ0xJRU5UX1NFQ1JFVCB9ID0gcHJvY2Vzcy5lbnY7XHJcbmNvbnN0IHNjb3BlID0gXCJyZWFkLGFjdGl2aXR5OnJlYWRcIjtcclxuZGVmaW5lRmVhdHVyZShmZWF0dXJlLCAodGVzdCkgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgc3RvcmUgPSBjb25maWd1cmVTdG9yZSh7XHJcbiAgICAgIHJlZHVjZXI6IHtcclxuICAgICAgICBzdHJhdmE6IHN0cmF2YVNsaWNlLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgICBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxyXG4gICAgICAgIDxNZW1vcnlSb3V0ZXI+XHJcbiAgICAgICAgICA8QWN0aXZpdGllcyAvPlxyXG4gICAgICAgIDwvTWVtb3J5Um91dGVyPlxyXG4gICAgICA8L1Byb3ZpZGVyPlxyXG4gICAgKTtcclxuICB9KTtcclxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImFjY2Vzc190b2tlblwiLCBcIm1vY2stdG9rZW5cIik7XHJcbiAgY29uc3QgbW9ja0FjdGl2aXRpZXMgPSBbXHJcbiAgICB7XHJcbiAgICAgIGlkOiAxLFxyXG4gICAgICBuYW1lOiBcIk1vcm5pbmcgUnVuXCIsXHJcbiAgICAgIHR5cGU6IFwiUnVuXCIsXHJcbiAgICAgIGRpc3RhbmNlOiAyMDAwLFxyXG4gICAgICBhdmVyYWdlX3NwZWVkOiAyLjUsXHJcbiAgICAgIG1heF9zcGVlZDogNS4wLFxyXG4gICAgICBhdmVyYWdlX2hlYXJ0cmF0ZTogMTQwLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6IDIsXHJcbiAgICAgIG5hbWU6IFwiRXZlbmluZyBSdW5cIixcclxuICAgICAgdHlwZTogXCJSdW5cIixcclxuICAgICAgZGlzdGFuY2U6IDEwMDAsXHJcbiAgICAgIGF2ZXJhZ2Vfc3BlZWQ6IDEuMyxcclxuICAgICAgbWF4X3NwZWVkOiAyLjAsXHJcbiAgICAgIGF2ZXJhZ2VfaGVhcnRyYXRlOiAxMTIsXHJcbiAgICB9LFxyXG4gIF07XHJcbiAgYWN0KCgpID0+IHtcclxuICAgIChheGlvcy5nZXQgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xyXG4gICAgICBkYXRhOiBtb2NrQWN0aXZpdGllcyxcclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIHRlc3QoXCJVc2VyIHNlZXMgYSBsaXN0IG9mIGFjdGl2aXRpZXNcIiwgKHsgZ2l2ZW4sIHdoZW4sIHRoZW4sIGFuZCB9KSA9PiB7XHJcbiAgICBnaXZlbihcInRoZSB1c2VyIGlzIG9uIHRoZSBBY3Rpdml0aWVzIHBhZ2VcIiwgKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc2NyZWVuKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgfSk7XHJcbiAgICB3aGVuKFwidGhlIHVzZXIncyBhY3Rpdml0aWVzIGFyZSBmZXRjaGVkXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgYWNjZXNzVG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImFjY2Vzc190b2tlblwiKTtcclxuICAgICAgZXhwZWN0KGFjY2Vzc1Rva2VuKS50b0JlKFwibW9jay10b2tlblwiKTtcclxuICAgIH0pO1xyXG4gICAgdGhlbihcInRoZSB1c2VyIHNob3VsZCBzZWUgYSBsaXN0IG9mIGFjdGl2aXRpZXNcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgICBjb25zdCBhY3Rpdml0eUxpc3QgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoXCJhY3Rpdml0eS1jb250YWluZXJcIik7XHJcbiAgICAgICAgZXhwZWN0KGFjdGl2aXR5TGlzdCkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICAgICAgICBjb25zdCBhY3Rpdml0eUNhcmQgPSBzY3JlZW4uZ2V0QnlUZXh0KFwiTW9ybmluZyBSdW5cIik7XHJcbiAgICAgICAgZXhwZWN0KGFjdGl2aXR5Q2FyZCkudG9CZURlZmluZWQoKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3BvcnRzVHlwZSA9IHNjcmVlbi5nZXRBbGxCeVRleHQoXCJSdW5cIik7XHJcbiAgICAgICAgZXhwZWN0KHNwb3J0c1R5cGUpLnRvQmVEZWZpbmVkKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gc2NyZWVuLmdldEJ5VGV4dChcIjIwMDAgbWV0ZXJzXCIpO1xyXG4gICAgICAgIGV4cGVjdChkaXN0YW5jZSkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuXHJcbiAgICAgICAgY29uc3QgYXZnU3BlZWQgPSBzY3JlZW4uZ2V0QnlUZXh0KFwiMi41IG0vc1wiKTtcclxuICAgICAgICBleHBlY3QoYXZnU3BlZWQpLnRvQmVJblRoZURvY3VtZW50KCk7XHJcblxyXG4gICAgICAgIGNvbnN0IG1heFNwZWVkID0gc2NyZWVuLmdldEJ5VGV4dChcIjUgbS9zXCIpO1xyXG4gICAgICAgIGV4cGVjdChtYXhTcGVlZCkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuXHJcbiAgICAgICAgY29uc3QgaGVhcnRSYXRlID0gc2NyZWVuLmdldEJ5VGV4dChcIjE0MFwiKTtcclxuICAgICAgICBleHBlY3QoaGVhcnRSYXRlKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQXFCQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBckJsQixJQUFBQyxhQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxNQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFDLHNCQUFBLENBQUFILE9BQUE7QUFDQUEsT0FBQTtBQUNBQSxPQUFBO0FBRUEsSUFBQUksZUFBQSxHQUFBSixPQUFBO0FBTUEsSUFBQUssV0FBQSxHQUFBRixzQkFBQSxDQUFBSCxPQUFBO0FBQ0Es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