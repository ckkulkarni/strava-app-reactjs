9b6b24ff50ce3c2792b03390e7d6459e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useSelectChangeNotifiers;
var React = _interopRequireWildcard(require("react"));
var _useMessageBus = _interopRequireDefault(require("../utils/useMessageBus"));
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
const SELECTION_CHANGE_TOPIC = 'select:change-selection';
const HIGHLIGHT_CHANGE_TOPIC = 'select:change-highlight';
/**
 * @ignore - internal hook.
 *
 * This hook is used to notify any interested components about changes in the Select's selection and highlight.
 */
function useSelectChangeNotifiers() {
  const messageBus = (0, _useMessageBus.default)();
  const notifySelectionChanged = React.useCallback(newValue => {
    messageBus.publish(SELECTION_CHANGE_TOPIC, newValue);
  }, [messageBus]);
  const notifyHighlightChanged = React.useCallback(newValue => {
    messageBus.publish(HIGHLIGHT_CHANGE_TOPIC, newValue);
  }, [messageBus]);
  const registerSelectionChangeHandler = React.useCallback(handler => {
    return messageBus.subscribe(SELECTION_CHANGE_TOPIC, handler);
  }, [messageBus]);
  const registerHighlightChangeHandler = React.useCallback(handler => {
    return messageBus.subscribe(HIGHLIGHT_CHANGE_TOPIC, handler);
  }, [messageBus]);
  return {
    notifySelectionChanged,
    notifyHighlightChanged,
    registerSelectionChangeHandler,
    registerHighlightChangeHandler
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsInVzZVNlbGVjdENoYW5nZU5vdGlmaWVycyIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfdXNlTWVzc2FnZUJ1cyIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJTRUxFQ1RJT05fQ0hBTkdFX1RPUElDIiwiSElHSExJR0hUX0NIQU5HRV9UT1BJQyIsIm1lc3NhZ2VCdXMiLCJub3RpZnlTZWxlY3Rpb25DaGFuZ2VkIiwidXNlQ2FsbGJhY2siLCJuZXdWYWx1ZSIsInB1Ymxpc2giLCJub3RpZnlIaWdobGlnaHRDaGFuZ2VkIiwicmVnaXN0ZXJTZWxlY3Rpb25DaGFuZ2VIYW5kbGVyIiwiaGFuZGxlciIsInN1YnNjcmliZSIsInJlZ2lzdGVySGlnaGxpZ2h0Q2hhbmdlSGFuZGxlciJdLCJzb3VyY2VzIjpbInVzZVNlbGVjdENoYW5nZU5vdGlmaWVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXNlU2VsZWN0Q2hhbmdlTm90aWZpZXJzO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfdXNlTWVzc2FnZUJ1cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3VzZU1lc3NhZ2VCdXNcIikpO1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlQmFiZWxJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgdmFyIGNhY2hlTm9kZUludGVyb3AgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIChub2RlSW50ZXJvcCkgeyByZXR1cm4gbm9kZUludGVyb3AgPyBjYWNoZU5vZGVJbnRlcm9wIDogY2FjaGVCYWJlbEludGVyb3A7IH0pKG5vZGVJbnRlcm9wKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqLCBub2RlSW50ZXJvcCkgeyBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5jb25zdCBTRUxFQ1RJT05fQ0hBTkdFX1RPUElDID0gJ3NlbGVjdDpjaGFuZ2Utc2VsZWN0aW9uJztcbmNvbnN0IEhJR0hMSUdIVF9DSEFOR0VfVE9QSUMgPSAnc2VsZWN0OmNoYW5nZS1oaWdobGlnaHQnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgaG9vay5cbiAqXG4gKiBUaGlzIGhvb2sgaXMgdXNlZCB0byBub3RpZnkgYW55IGludGVyZXN0ZWQgY29tcG9uZW50cyBhYm91dCBjaGFuZ2VzIGluIHRoZSBTZWxlY3QncyBzZWxlY3Rpb24gYW5kIGhpZ2hsaWdodC5cbiAqL1xuZnVuY3Rpb24gdXNlU2VsZWN0Q2hhbmdlTm90aWZpZXJzKCkge1xuICBjb25zdCBtZXNzYWdlQnVzID0gKDAsIF91c2VNZXNzYWdlQnVzLmRlZmF1bHQpKCk7XG4gIGNvbnN0IG5vdGlmeVNlbGVjdGlvbkNoYW5nZWQgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdWYWx1ZSA9PiB7XG4gICAgbWVzc2FnZUJ1cy5wdWJsaXNoKFNFTEVDVElPTl9DSEFOR0VfVE9QSUMsIG5ld1ZhbHVlKTtcbiAgfSwgW21lc3NhZ2VCdXNdKTtcbiAgY29uc3Qgbm90aWZ5SGlnaGxpZ2h0Q2hhbmdlZCA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1ZhbHVlID0+IHtcbiAgICBtZXNzYWdlQnVzLnB1Ymxpc2goSElHSExJR0hUX0NIQU5HRV9UT1BJQywgbmV3VmFsdWUpO1xuICB9LCBbbWVzc2FnZUJ1c10pO1xuICBjb25zdCByZWdpc3RlclNlbGVjdGlvbkNoYW5nZUhhbmRsZXIgPSBSZWFjdC51c2VDYWxsYmFjayhoYW5kbGVyID0+IHtcbiAgICByZXR1cm4gbWVzc2FnZUJ1cy5zdWJzY3JpYmUoU0VMRUNUSU9OX0NIQU5HRV9UT1BJQywgaGFuZGxlcik7XG4gIH0sIFttZXNzYWdlQnVzXSk7XG4gIGNvbnN0IHJlZ2lzdGVySGlnaGxpZ2h0Q2hhbmdlSGFuZGxlciA9IFJlYWN0LnVzZUNhbGxiYWNrKGhhbmRsZXIgPT4ge1xuICAgIHJldHVybiBtZXNzYWdlQnVzLnN1YnNjcmliZShISUdITElHSFRfQ0hBTkdFX1RPUElDLCBoYW5kbGVyKTtcbiAgfSwgW21lc3NhZ2VCdXNdKTtcbiAgcmV0dXJuIHtcbiAgICBub3RpZnlTZWxlY3Rpb25DaGFuZ2VkLFxuICAgIG5vdGlmeUhpZ2hsaWdodENoYW5nZWQsXG4gICAgcmVnaXN0ZXJTZWxlY3Rpb25DaGFuZ2VIYW5kbGVyLFxuICAgIHJlZ2lzdGVySGlnaGxpZ2h0Q2hhbmdlSGFuZGxlclxuICB9O1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxzQkFBc0IsR0FBR0MsT0FBTyxDQUFDLDhDQUE4QyxDQUFDO0FBQ3BGQyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHQyx3QkFBd0I7QUFDMUMsSUFBSUMsS0FBSyxHQUFHQyx1QkFBdUIsQ0FBQ1IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFD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